import { EffectiveBooleanValueError, EvaluationResult, HashAlgorithm, InvalidArgumentTypes } from "./EvaluationResult.js";
import { EvaluationError, Value } from "./EvaluationResult.js";
import { NumericDataType, Term } from "./constants.js";
import { Literal, NamedNode } from "@triplydb/data-factory/Terms.js";
export declare function lessThan(first: EvaluationResult, second: EvaluationResult): EvaluationResult;
export declare function effectiveBooleanValue(arg: EvaluationResult): boolean | EvaluationError;
export declare function effectiveBooleanValueOfTerm(term: Term): boolean | EffectiveBooleanValueError;
export declare function compare(terms: Term[]): EvaluationError | Value<Literal<string>>;
export declare function str(terms: Term[]): EvaluationResult;
export declare function strlen(terms: Term[]): EvaluationResult;
export declare function substr(terms: Term[]): EvaluationResult;
export declare function ucase(terms: Term[]): EvaluationResult;
export declare function lcase(terms: Term[]): EvaluationResult;
export declare function strstarts(terms: Term[]): EvaluationResult;
export declare function strends(terms: Term[]): EvaluationResult;
export declare function contains(terms: Term[]): EvaluationResult;
export declare function concat(terms: Term[]): EvaluationResult;
export declare function lang(terms: Term[]): EvaluationResult;
export declare function langmatches(terms: Term[]): EvaluationResult;
export declare function abs(terms: Term[]): EvaluationResult;
export declare function ceil(terms: Term[]): EvaluationResult;
export declare function floor(terms: Term[]): EvaluationResult;
export declare function round(terms: Term[]): EvaluationResult;
export declare function strbefore(terms: Term[]): EvaluationResult;
export declare function strafter(terms: Term[]): EvaluationResult;
export declare function encode_for_uri(terms: Term[], useURIComponent?: "useURIComponent"): EvaluationResult;
export declare function regex(terms: Term[]): EvaluationResult;
export declare function replace(terms: Term[]): EvaluationResult;
export declare function hashStrings(terms: Term[], algorithm: HashAlgorithm): EvaluationResult;
export declare function newLiteral(value: string, dataType: string | NamedNode): EvaluationError | Value<Literal>;
export declare function strdt(terms: Term[]): EvaluationResult;
export declare function strlang(terms: Term[]): EvaluationResult;
export declare function iri(terms: Term[], baseIri: string): EvaluationResult;
export declare function bnode(terms: Term[]): EvaluationResult;
export declare function datatype(terms: Term[]): EvaluationResult;
export declare function xsdboolean(terms: Term[]): EvaluationResult;
export declare function xsddatetime(terms: Term[]): EvaluationResult;
export declare function xsddate(terms: Term[]): EvaluationResult;
export declare function xsdgYear(terms: Term[]): EvaluationResult;
export declare function xsdfloat(terms: Term[]): EvaluationResult;
export declare function xsddouble(terms: Term[]): EvaluationResult;
export declare function xsddecimal(terms: Term[]): EvaluationResult;
export declare function xsdinteger(terms: Term[]): EvaluationResult;
export declare function xsdlong(terms: Term[]): EvaluationResult;
export declare function xsdint(terms: Term[]): EvaluationResult;
export declare function xsdstring(terms: Term[]): EvaluationResult;
export declare function getNumericOutputDataType(a: NumericDataType, b: NumericDataType, alsoTestWithFlippedArguments?: boolean): NumericDataType | InvalidArgumentTypes;
export declare function validateAndGetNumericDataType(a: Term, b: Term): InvalidArgumentTypes | NumericDataType;
export declare function xsdDateToxsdDatetime(date: string): string;
export declare function year(terms: Term[]): EvaluationResult;
export declare function month(terms: Term[]): EvaluationResult;
export declare function day(terms: Term[]): EvaluationResult;
export declare function hours(terms: Term[]): EvaluationResult;
export declare function minutes(terms: Term[]): EvaluationResult;
export declare function seconds(terms: Term[]): EvaluationResult;
export declare function timezone(terms: Term[]): EvaluationResult;
export declare function tz(terms: Term[]): EvaluationResult;
//# sourceMappingURL=EvaluationFunctions.d.ts.map