/// <reference types="node" resolution-mode="require"/>
import { AskJson, SelectJson } from "./Serialization/sparql2json.js";
import { Bindings, Quad, Term } from "./constants.js";
import { QueryContext } from "./QueryContext.js";
import { AsyncBindingsIterable } from "./Execution.js";
import { Readable } from "stream";
import { DebugInfo } from "./QueryEngine.js";
declare abstract class BaseResult<T> {
    abstract type: string;
    protected iteratorCalled: boolean;
    protected results: T;
    protected markIteratorCalled(): void;
    readonly queryContext: QueryContext;
    constructor(results: T, queryContext: QueryContext);
}
declare abstract class BaseIterableResult<E> extends BaseResult<AsyncIterable<E>> implements AsyncIterable<E> {
    [Symbol.asyncIterator](): AsyncIterator<E, any, undefined>;
}
export declare class BooleanResult extends BaseResult<AsyncBindingsIterable> {
    readonly type = "boolean";
    sparqlJson(): Promise<AskJson>;
    result(): Promise<boolean>;
}
export declare class BindingsResult<B extends Bindings<Term> = Bindings<Term>> extends BaseIterableResult<B> {
    readonly type = "bindings";
    readonly variables: ReadonlyArray<string>;
    constructor(results: AsyncIterable<B>, variables: string[], queryContext: QueryContext);
    sparqlJson(): Promise<SelectJson>;
    serializedSparqlJsonStream(): Readable;
    toArray(): Promise<B[]>;
}
export declare class QuadsResult extends BaseIterableResult<Quad> {
    readonly type = "quads";
    quads(): Promise<Quad[]>;
    stream(): Readable;
}
export declare class DebugResult {
    protected iteratorCalled: boolean;
    type: (BooleanResult | BindingsResult | QuadsResult)["type"];
    readonly queryContext?: QueryContext;
    private debugInfo;
    private error?;
    constructor(type: DebugResult["type"], debugInfo: DebugInfo, queryContext?: QueryContext, error?: Error);
    protected markIteratorCalled(): void;
    private constructBindings;
    private asyncBindingIterable;
    sparqlJson(): Promise<SelectJson>;
    quads(): Promise<Quad[]>;
    private asyncQuadsIterable;
    stream(): Readable;
}
export {};
//# sourceMappingURL=QueryResults.d.ts.map