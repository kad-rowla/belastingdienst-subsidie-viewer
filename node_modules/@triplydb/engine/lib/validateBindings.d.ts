import { Bindings, Term } from "./constants.js";
import { ElementOf } from "ts-essentials";
import { AsyncBindingsIterable } from "./Execution.js";
type TermTypeToTerm = {
    [T in Term as T["termType"]]: T;
} & {
    Term: Term;
    unbound: undefined;
};
export type BindingsType = {
    [variable: string]: keyof TermTypeToTerm | readonly (Term["termType"] | "unbound")[];
};
type ElementOrArrayToUnion<T> = T extends readonly any[] ? ElementOf<T> : T;
export type SpecificationToBindings<T extends BindingsType> = Expand<{
    [K in keyof T as undefined extends TermTypeToTerm[ElementOrArrayToUnion<T[K]>] ? never : K]: TermTypeToTerm[ElementOrArrayToUnion<T[K]>];
} & {
    [K in keyof T as undefined extends TermTypeToTerm[ElementOrArrayToUnion<T[K]>] ? TermTypeToTerm[ElementOrArrayToUnion<T[K]>] extends undefined ? never : K : K]?: TermTypeToTerm[ElementOrArrayToUnion<T[K]>];
} & Bindings<Term>>;
type Expand<T> = T extends infer O ? {
    [K in keyof O]: O[K];
} : never;
export declare function specificationToMessage(allowed: string | readonly string[]): string;
export declare function validateBindings<B extends BindingsType>(bindings: Bindings<Term>, specification: B): asserts bindings is Expand<SpecificationToBindings<B>>;
export declare function validateAsyncBindingsIterable<B extends BindingsType>(bindingses: AsyncBindingsIterable, specification: B): AsyncGenerator<Awaited<Expand<Expand<{ [K in keyof B as undefined extends TermTypeToTerm[ElementOrArrayToUnion<B[K]>] ? never : K]: TermTypeToTerm[ElementOrArrayToUnion<B[K]>]; } & { [K_1 in keyof B as undefined extends TermTypeToTerm[ElementOrArrayToUnion<B[K_1]>] ? TermTypeToTerm[ElementOrArrayToUnion<B[K_1]>] extends TermTypeToTerm[ElementOrArrayToUnion<B[K_1]>] & undefined ? never : K_1 : K_1]?: TermTypeToTerm[ElementOrArrayToUnion<B[K_1]>] | undefined; } & Bindings<Term>>>>, void, unknown>;
export {};
//# sourceMappingURL=validateBindings.d.ts.map