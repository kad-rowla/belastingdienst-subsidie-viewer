type DebugNamespace = "sparql:counts" | "sparql:distinct" | "sparql:engine:construct:blankNodeCounter" | "sparql:engine:construct:illegalPredicate" | "sparql:engine:construct:illegalSubject" | "sparql:engine:construct:unboundObject" | "sparql:engine:construct:unboundPredicate" | "sparql:engine:construct:unboundSubject" | "sparql:engine:quad" | "sparql:engine:query:select:results" | "sparql:executeTriplePattern" | "sparql:extend" | "sparql:filter:context" | "sparql:filter:effectiveBooleanValue" | "sparql:filter:error" | "sparql:filter:false" | "sparql:filter:true" | "sparql:filter:variables" | "sparql:getTerm" | "sparql:graph" | "sparql:InlineData" | "sparql:match" | "sparql:operation" | "sparql:optimize:leftjoin" | "sparql:optimize:reorder:estimation:triple-pattern" | "sparql:optimize:reorder:original-algebra" | "sparql:optimize:reorder:original-time-estimate" | "sparql:optimize:reorder:reordered-algebra" | "sparql:optimize:reorder:reordered-time-estimate" | "sparql:project" | "sparql:propertyPath:alternative" | "sparql:propertyPath:inverse" | "sparql:propertyPath:negatedSet" | "sparql:propertyPath:oneOrMore" | "sparql:propertyPath:predicate" | "sparql:propertyPath:sequence:freshVariable" | "sparql:propertyPath:sequence:joins" | "sparql:propertyPath:sequence:variables" | "sparql:propertyPath:sequence" | "sparql:queryString" | "sparql:resultstream" | "sparql:serialize:toJsonResults" | "sparql:serialize:toSparqlJson:success" | "sparql:serialize:toSparqlJson:warning" | "sparql:slice:limit" | "sparql:slice:offset" | "sparql:slice" | "sparql:sort" | "sparql:translate:algebra:optimized" | "sparql:translate:algebra:unoptimized" | "sparql:translate:ast" | "sparql:translate" | "sparql:triple-pattern" | "sparql:updateString" | "sparql:update-ast";
export default function log(namespace: DebugNamespace, ...args: any[]): void;
export {};
//# sourceMappingURL=Debugging.d.ts.map