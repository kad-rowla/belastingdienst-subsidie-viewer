/// <reference types="node" resolution-mode="require"/>
import { Operation } from "./Algebra/Operation.js";
import { RdfDataset } from "./constants.js";
import { ResultContexts } from "./ResultContext.js";
export declare class QueryContext {
    readonly baseIri: string;
    readonly abortSignal?: AbortSignal;
    readonly now: Date;
    readonly counts: {
        [operationId: string]: {
            received: number;
            yielded: number;
        } | undefined;
    };
    readonly algebra: Operation;
    readonly disableTermValidation: boolean;
    readonly rdfDataset: RdfDataset;
    constructor(options: QueryContextOptions);
    countResults<BindingValue>(operation: Operation, resultContexts: ResultContexts<BindingValue>, execute: (resultContexts: ResultContexts<BindingValue>) => ResultContexts<BindingValue>): ResultContexts<BindingValue>;
    logCounts(): void;
    mergeCountsWithAlgebra(): Operation;
}
export interface QueryContextOptions {
    algebra: Operation;
    disableTermValidation?: boolean;
    baseIri?: string;
    abortSignal?: AbortSignal;
    rdfDataset: QueryContext["rdfDataset"];
}
//# sourceMappingURL=QueryContext.d.ts.map