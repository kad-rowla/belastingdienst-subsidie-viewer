import * as SparqlJs from "sparqljs";
import { Bindings, GraphName, Term, Variable } from "../constants.js";
import { Literal, NamedNode } from "@triplydb/data-factory/Terms.js";
import { AggregateFunction, Expression } from "./Expression.js";
type OperationType = Operation["operationType"];
export type Operation = TriplePattern | ZeroOrMorePath | EnsureBound | Service | InlineData | Join | LeftJoin | Filter | Union | Extend | Minus | Aggregate | OrderBy | Distinct | Slice;
export declare const IDENTITY: Readonly<{
    readonly operationType: "Join";
    readonly inputOperations: readonly [];
    readonly id: "identity";
}>;
export type Identity = typeof IDENTITY;
export declare const NOTHING: Readonly<{
    readonly operationType: "Union";
    readonly inputOperations: readonly [];
    readonly id: "nothing";
}>;
export type Nothing = typeof NOTHING;
export type SimpleTriplePattern = Readonly<[
    NamedNode | Variable,
    NamedNode | Variable,
    NamedNode | Literal | Variable
]>;
export interface TriplePattern extends BaseOperation {
    operationType: "TriplePattern";
    graphs?: Variable | [GraphName, ...GraphName[]];
    pattern: SimpleTriplePattern;
}
export interface ZeroOrMorePath extends UnaryOperation {
    operationType: "ZeroOrMorePath";
    boundStart: Variable;
    end: Variable;
}
export interface EnsureBound extends BaseOperation {
    graphs?: Variable | [GraphName];
    operationType: "EnsureBound";
    variable: Variable;
}
interface BaseOperation {
    operationType: OperationType;
    id?: string;
}
interface UnaryOperation extends BaseOperation {
    inputOperation: Operation;
}
interface NAryOperation extends BaseOperation {
    inputOperations: ReadonlyArray<Operation>;
}
interface BinaryOperation extends NAryOperation {
    inputOperations: readonly [Operation, Operation];
}
export interface Service extends BaseOperation {
    operationType: "Service";
    runTimeInformation: serviceRunTimeInfo;
    silent: boolean;
}
export interface serviceRunTimeInfo {
    endpoint: SparqlJs.IriTerm | Variable;
    query: SparqlJs.SelectQuery;
}
export interface InlineData extends BaseOperation {
    operationType: "InlineData";
    values: ReadonlyArray<Bindings<Term>>;
}
export interface Join extends NAryOperation {
    operationType: "Join";
    inputOperations: readonly Exclude<Operation, Join>[];
}
export interface LeftJoin extends BinaryOperation {
    operationType: "LeftJoin";
}
export interface Filter extends UnaryOperation {
    operationType: "Filter";
    expression: Expression;
}
export interface Union extends NAryOperation {
    operationType: "Union";
    inputOperations: readonly Exclude<Operation, Union>[];
}
export interface Minus extends BinaryOperation {
    operationType: "Minus";
}
export interface Extend extends UnaryOperation {
    operationType: "Extend";
    variable: Variable;
    expression: Expression;
}
export interface OrderingKey {
    direction: "ascending" | "descending";
    expression: Expression;
}
export interface OrderBy extends UnaryOperation {
    operationType: "OrderBy";
    ordering: ReadonlyArray<OrderingKey>;
}
export interface Distinct extends UnaryOperation {
    operationType: "Distinct";
    variables: Variable[];
}
export interface Slice extends UnaryOperation {
    operationType: "Slice";
    offset: number;
    limit?: number;
    loadIntoMemory: boolean;
}
export type AggregatingExpressions = {
    [variable: Variable]: AggregateFunction;
};
export interface Aggregate extends UnaryOperation {
    operationType: "Aggregate";
    groupingExpressions: Expression[];
    aggregatingExpressions: AggregatingExpressions;
}
export {};
//# sourceMappingURL=Operation.d.ts.map