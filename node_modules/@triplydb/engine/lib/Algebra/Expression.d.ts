import { Variable, GEO_FUNCTIONS } from "../constants.js";
import { NamedNode, Literal } from "@triplydb/data-factory/Terms.js";
import { XPATH_FUNCTIONS } from "@triplydb/recognized-datatypes/utils/constants.js";
import { Operation } from "./Operation.js";
type ExpressionType = (typeof EXPRESSION_TYPES)[number];
declare const EXPRESSION_TYPES: readonly ["AggregateFunction", "Exists", "FunctionCall", "Term", "Variable", "Bound", "Operation"];
export type FunctionName = FunctionCall["function"];
export interface Bound extends BaseExpression {
    expressionType: "Bound";
    variable: Variable;
}
export type Expression = VariableExpression | TermExpression | Bound | FunctionCall | ExistsExpression | OperationExpression;
export type AggregateFunction = NormalAggregateFunction | Count | GroupConcat;
export type FunctionCall = NilFunction | BNode | UnaryFunction | OptionallyBinaryFunction | BinaryFunction | OptionallyTernaryFunction | If | Replace | Concat | Coalesce;
interface BaseExpression {
    expressionType: ExpressionType;
}
interface NAryExpression extends BaseExpression {
    expressions: Array<Expression>;
}
interface UnaryExpression extends BaseExpression {
    expression: Expression;
}
export interface VariableExpression extends BaseExpression {
    expressionType: "Variable";
    variable: Variable;
}
export interface TermExpression extends BaseExpression {
    expressionType: "Term";
    term: Literal | NamedNode;
}
export interface ExistsExpression extends BaseExpression {
    expressionType: "Exists";
    operation: Operation;
}
export interface OperationExpression extends BaseExpression {
    expressionType: "Operation";
    resultVariable: Variable;
    operation: Operation;
}
interface BaseAggregateFunction {
    expressionType: "AggregateFunction";
    distinct: boolean;
}
export declare const AGGREGATE_FUNCTION_NAMES: readonly ["COUNT", "SUM", "MIN", "MAX", "AVG", "SAMPLE", "GROUP_CONCAT"];
interface NormalAggregateFunction extends BaseAggregateFunction, UnaryExpression {
    expressionType: "AggregateFunction";
    function: Exclude<(typeof AGGREGATE_FUNCTION_NAMES)[number], "COUNT" | "GROUP_CONCAT">;
}
export interface Count extends BaseAggregateFunction {
    function: "COUNT";
    expression: UnaryExpression["expression"] | {
        expressionType: "WildCard";
    };
}
export interface GroupConcat extends BaseAggregateFunction, UnaryExpression {
    expressionType: "AggregateFunction";
    function: "GROUP_CONCAT";
    separator: string;
}
interface BaseFunction extends NAryExpression {
    expressionType: "FunctionCall";
}
export declare const NIL_FUNCTION_NAMES: readonly ["RAND", "NOW", "UUID", "STRUUID"];
export interface NilFunction extends BaseFunction {
    function: (typeof NIL_FUNCTION_NAMES)[number];
    expressions: [];
}
export interface BNode extends BaseFunction {
    function: "BNODE";
    expressions: [] | [Expression];
}
export declare const UNARY_FUNCTION_NAMES: readonly ["!", "STR", "LANG", "DATATYPE", "IRI", "ABS", "CEIL", "FLOOR", "ROUND", "STRLEN", "UCASE", "LCASE", "ENCODE_FOR_URI", "YEAR", "MONTH", "DAY", "HOURS", "MINUTES", "SECONDS", "TIMEZONE", "TZ", "MD5", "SHA1", "SHA256", "SHA384", "SHA512", "isIRI", "isBlank", "isLiteral", "isNumeric", "http://www.w3.org/2001/XMLSchema#boolean", "http://www.w3.org/2001/XMLSchema#double", "http://www.w3.org/2001/XMLSchema#float", "http://www.w3.org/2001/XMLSchema#decimal", "http://www.w3.org/2001/XMLSchema#integer", "http://www.w3.org/2001/XMLSchema#int", "http://www.w3.org/2001/XMLSchema#long", "http://www.w3.org/2001/XMLSchema#dateTime", "http://www.w3.org/2001/XMLSchema#date", "http://www.w3.org/2001/XMLSchema#gYear", "http://www.w3.org/2001/XMLSchema#string", "http://www.w3.org/2005/xpath-functions#boolean", "http://www.w3.org/2005/xpath-functions#lang", "http://www.w3.org/2005/xpath-functions#encode-for-uri", "http://www.opengis.net/def/function/geosparql/metricArea"];
export interface UnaryFunction extends BaseFunction {
    function: (typeof UNARY_FUNCTION_NAMES)[number];
    expressions: [Expression];
}
export interface OptionallyBinaryFunction extends BaseFunction {
    function: "+" | "-" | typeof GEO_FUNCTIONS.TRANSFORM.value | (typeof XPATH_FUNCTIONS)["ROUND"];
    expressions: [Expression] | [Expression, Expression];
}
export declare const BINARY_FUNCTION_NAMES: readonly ["||", "&&", "=", "<", "*", "/", "LANGMATCHES", "CONTAINS", "STRSTARTS", "STRENDS", "STRBEFORE", "STRAFTER", "STRLANG", "STRDT", "sameTerm", "http://www.w3.org/2005/xpath-functions#compare", "http://www.w3.org/2005/xpath-functions#round", "https://triplydb.com/Triply/function/project", "http://www.opengis.net/def/function/geosparql/area"];
export interface BinaryFunction extends BaseFunction {
    function: (typeof BINARY_FUNCTION_NAMES)[number];
    expressions: [Expression, Expression];
}
export interface OptionallyTernaryFunction extends BaseFunction {
    function: "SUBSTR" | "REGEX";
    expressions: [Expression, Expression] | [Expression, Expression, Expression];
}
interface If extends BaseFunction {
    function: "IF";
    expressions: [Expression, Expression, Expression];
}
interface Replace extends BaseFunction {
    function: "REPLACE";
    expressions: [Expression, Expression, Expression] | [Expression, Expression, Expression, Expression];
}
export interface Coalesce extends BaseFunction {
    function: "COALESCE";
}
export interface Concat extends BaseFunction {
    function: "CONCAT";
    expressions: Expression[];
}
export {};
//# sourceMappingURL=Expression.d.ts.map