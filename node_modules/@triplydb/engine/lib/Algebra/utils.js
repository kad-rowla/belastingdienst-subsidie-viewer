import { IDENTITY, NOTHING } from "./Operation.js";
import { forEachAlgebraNode } from "../Helpers.js";
import { readJsonFromStdin } from "@triplydb/utils/stdin.js";
import { last } from "lodash-es";
import chalk from "chalk";
function triplePatternToString(stp) {
    return stp.pattern
        .map((v) => (typeof v === "string" ? `?${v}` : chalk.grey(`<${last(last(v.value.split("/")).split("#"))}>`)))
        .join("   ");
}
function operationToString(op) {
    if (op.operationType === "TriplePattern")
        return triplePatternToString(op);
    if (op.operationType === "EnsureBound")
        return chalk.white("EnsureBound") + ` ?${op.variable}`;
    if ([IDENTITY.id, NOTHING.id].includes(op.id))
        return op.id;
    return chalk.white(op.operationType);
}
export function algebraToString(node) {
    const strings = [];
    forEachAlgebraNode(node, (op, indent) => {
        const indentation = indent ? "  ".repeat(indent - 1) + "- " : "";
        const description = operationToString(op);
        const counts = "counts" in op ? ` (in: ${op.counts.received}, out: ${op.counts.yielded})` : "";
        strings.push(indentation + description + counts);
        return indent + 1;
    }, (_ex, indent) => indent, 0);
    return strings.join("\n");
}
export async function logStdinAlgebra() {
    const algebra = (await readJsonFromStdin());
    console.info(algebraToString(algebra));
}
//# sourceMappingURL=utils.js.map