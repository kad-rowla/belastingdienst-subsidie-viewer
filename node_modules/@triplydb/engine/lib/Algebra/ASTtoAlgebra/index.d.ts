import { default as sparqljs } from "sparqljs";
import { GraphName, Term, Variable } from "../../constants.js";
import { BlankNode, NamedNode } from "@triplydb/data-factory/Terms.js";
import { Operation } from "../Operation.js";
interface TripleTemplate {
    subject: NamedNode | BlankNode | Variable;
    predicate: NamedNode | Variable;
    object: Term | Variable;
}
export type TripleTemplates = ReadonlyArray<TripleTemplate>;
export type ParameterInfo = {
    name: Variable;
    optional: boolean;
};
export type DataDefinedFunctionInfo = {
    parameters: Array<ParameterInfo>;
    implementation: Operation;
    resultVariable?: Variable;
};
export type ExtraTranslationInfo = {
    dataDefinedFunctions: {
        [iri: string]: DataDefinedFunctionInfo | undefined;
    };
    variablesToTranslateWithoutErrorChecking: Set<Variable>;
    namedGraphs: GraphName[];
};
export declare function operationFromScopedAst(ast: sparqljs.AskQuery | sparqljs.ConstructQuery | sparqljs.SelectQuery, info: ExtraTranslationInfo, dontSetIds?: "don't set IDs"): Operation;
export declare function templatesFromAst(template: sparqljs.ConstructQuery["template"]): TripleTemplates;
export {};
//# sourceMappingURL=index.d.ts.map