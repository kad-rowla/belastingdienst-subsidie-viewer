import * as SparqlJs from "sparqljs";
import { AggregateFunction, Expression } from "../Expression.js";
import { Variable } from "../../constants.js";
import { ExtraTranslationInfo } from "./index.js";
type EmptyObject<T> = {
    [K in keyof T]?: never;
};
export declare function translateExpression(expression: SparqlJs.Expression, info: ExtraTranslationInfo): Expression;
type Aggregates<Type extends "aggregate" | "non-aggregate"> = Type extends "aggregate" ? {
    [variable: Variable]: AggregateFunction;
} : EmptyObject<any>;
export declare function translatePossiblyAggregateExpression<Type extends "aggregate" | "non-aggregate">(expression: SparqlJs.Expression, type: Type, aggregatedVariables: ReadonlySet<Variable>, info: ExtraTranslationInfo): {
    expression: Expression;
    aggregates: Aggregates<Type>;
};
export {};
//# sourceMappingURL=translateExpression.d.ts.map