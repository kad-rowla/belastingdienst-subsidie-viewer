import { translatePossiblyAggregateExpression } from "./translateExpression.js";
import { FatalError } from "../../Errors.js";
export function addAggregateExpression(name, expression, aggregate, inputOperation, aggregatedVariables, info) {
    if (aggregatedVariables.has(name))
        return inputOperation;
    const translation = translatePossiblyAggregateExpression(expression, "aggregate", aggregatedVariables, info);
    const nAggregates = Object.keys(translation.aggregates).length;
    if (nAggregates > 0 && translation.expression.expressionType === "Variable") {
        const variable = translation.expression.variable;
        if (nAggregates !== 1 || !(variable in translation.aggregates)) {
            throw new FatalError("Something got lost in translation");
        }
        aggregate.aggregatingExpressions[name] = translation.aggregates[variable];
    }
    else {
        aggregate.aggregatingExpressions = { ...aggregate.aggregatingExpressions, ...translation.aggregates };
        inputOperation = {
            operationType: "Extend",
            variable: name,
            expression: translation.expression,
            inputOperation: inputOperation,
        };
    }
    return inputOperation;
}
//# sourceMappingURL=aggregation.js.map