import { LeftJoin, Operation } from "../Operation.js";
import { PredicateStatsAndGraphs } from "../../Execution.js";
import { Variable } from "../../constants.js";
import memoizee from "memoizee";
export type ConjunctionsOfDisjunctions = Array<Operation | Operation[]>;
type OptimizedAlgebraEstimate = {
    operation: Operation;
    estimatedComplexity?: number;
};
export declare function optimizeAlgebra(algebra: Operation, statistics: PredicateStatsAndGraphs): Promise<OptimizedAlgebraEstimate>;
export declare function generateBestAlgebra(algebra: Operation, depth: number, statistics: PredicateStatsAndGraphs): Promise<Operation>;
export declare function convertAlgebraToList(operation: Operation): Operation[];
export declare function makeConjunctionsOfDisjunctions(conjunction: Array<Operation>, depth: number, statistics: PredicateStatsAndGraphs): AsyncGenerator<ConjunctionsOfDisjunctions>;
export declare function convertListToAlgebra(operations: ConjunctionsOfDisjunctions, isJoin?: boolean): Operation;
export declare function convertListToLeftJoin(operations: Array<Operation | Operation[]>): LeftJoin;
export declare function isInvalidZeroOrMorePathAlgebra(algebra: ConjunctionsOfDisjunctions, boundVariables?: Set<Variable>): boolean;
export declare function reorderOperationList(operations: Array<Operation>, depth: number, statistics: PredicateStatsAndGraphs): AsyncGenerator<ConjunctionsOfDisjunctions>;
export declare function getConnectedLeftJoins(varsInLeftOperation: Set<string>, rightOperations: Array<Operation>): Operation[][];
export declare const memoizedEstimateComplexity: ((algebra: Operation, statistics: PredicateStatsAndGraphs) => Promise<Estimate>) & memoizee.Memoized<(algebra: Operation, statistics: PredicateStatsAndGraphs) => Promise<Estimate>>;
interface Estimate {
    spaceEstimate: number;
    timeEstimate: number;
}
export declare function estimateAlgebraComplexity(algebra: Operation, variablesInScope: Set<Variable>, statistics: PredicateStatsAndGraphs, estimate: Estimate): Promise<Estimate>;
export declare function isLeftJoinLinear(operation: LeftJoin): boolean;
export declare function flattenLeftJoin(operation: LeftJoin): Array<Operation>;
export declare function optimizeMultipleGraphsOperation(operation: Operation, statistics: PredicateStatsAndGraphs): Promise<Operation>;
export declare function optimizeZeroOrMoreOperation(algebra: Operation): void;
export {};
//# sourceMappingURL=optimize-reorder.d.ts.map