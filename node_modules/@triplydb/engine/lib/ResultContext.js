export default class ResultContext {
    bindings;
    constructor({ bindings }) {
        this.bindings = bindings;
    }
    addBindings(bindings) {
        return new ResultContext({
            bindings: { ...this.bindings, ...bindings },
        });
    }
    addBinding(variable, value) {
        return new ResultContext({
            bindings: { ...this.bindings, [variable]: value },
        });
    }
    removeBinding(variable) {
        const bindings = { ...this.bindings };
        delete bindings[variable];
        return new ResultContext({ bindings });
    }
    applyMatch(match, triple) {
        const newBindings = { ...this.bindings };
        for (let i = 0; i < 3; i++) {
            const variable = triple[i];
            if (typeof variable === "string") {
                newBindings[variable] = match[i];
            }
        }
        return new ResultContext({
            bindings: newBindings,
        });
    }
}
//# sourceMappingURL=ResultContext.js.map