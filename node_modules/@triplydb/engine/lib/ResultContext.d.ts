import { Bindings, Variable } from "./constants.js";
import { SimpleTriplePattern } from "./Algebra/Operation.js";
export type ResultContexts<BindingValue> = Iterable<ResultContext<BindingValue>> | AsyncIterable<ResultContext<BindingValue>>;
export interface ResultContextOptions<BindingValue> {
    bindings: ResultContext<BindingValue>["bindings"];
}
export default class ResultContext<BindingValue> {
    readonly bindings: Readonly<Bindings<BindingValue>>;
    constructor({ bindings }: ResultContextOptions<BindingValue>);
    addBindings(bindings: Bindings<BindingValue>): ResultContext<BindingValue>;
    addBinding(variable: Variable, value: BindingValue): ResultContext<BindingValue>;
    removeBinding(variable: Variable): ResultContext<BindingValue>;
    applyMatch(match: [BindingValue, BindingValue, BindingValue], triple: SimpleTriplePattern): ResultContext<BindingValue>;
}
//# sourceMappingURL=ResultContext.d.ts.map