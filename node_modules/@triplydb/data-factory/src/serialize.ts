import { Quad } from "./Terms.js";
import * as stream from "stream";
import { NamedNode } from "./Terms.js";
import { Writer as N3WriterInterface, StreamWriter as N3StreamWriterInterface } from "n3";
import N3Writer from "./forked/N3Writer.js";
import N3StreamWriter from "./forked/N3StreamWriter.js";
import { factory } from "./DataFactory.js";
export type Format = "turtle" | "trig" | "n-triples" | "n-quads";
export type Prefixes = {
  [name: string]: NamedNode;
};

/**
 *
 * @param format Be default, we'll keep the graph (this is similar to how n3 behaves)
 */
function getHandleGraphNameOpt(format?: Format) {
  return format === "n-triples" || format === "turtle" ? ("drop" as const) : ("keep" as const);
}
export function serializeToString(quads: Quad[], format?: Format): Promise<string> {
  return new Promise<string>((resolve, reject) => {
    const writer: N3WriterInterface = new N3Writer({ format, handleGraphNames: getHandleGraphNameOpt(format) }) as any;
    writer.addQuads(quads);
    writer.end(function (error: Error, result: string) {
      if (error) return reject(error);
      resolve(result);
    });
  });
}

export interface StreamWriterOptions {
  prefixes?: Prefixes;
  format?: Format;
}
export function getStreamWriter(opts?: StreamWriterOptions) {
  return new N3StreamWriter({
    handleGraphNames: getHandleGraphNameOpt(opts?.format),
    ...opts,
  }) as any as N3StreamWriterInterface;
}
export interface WriterOptions {
  end?: boolean | undefined;
  prefixes?: Prefixes;
  format?: Format;
}

function isFileDescriptorOrStream(fd: any): fd is stream.Stream | number {
  return (
    fd !== undefined &&
    fd !== null &&
    // A file descriptor is a number
    (typeof fd === "number" || typeof fd.pipe === "function")
  );
}

export function getWriter(fileDescriptorOrStream: stream.Stream | number, opts?: WriterOptions): N3WriterInterface;
export function getWriter(opts?: WriterOptions): N3WriterInterface;
export function getWriter(fdOrOpts?: WriterOptions | stream.Stream | number, opts?: WriterOptions): N3WriterInterface {
  if (isFileDescriptorOrStream(fdOrOpts)) {
    return new N3Writer(fdOrOpts, {
      handleGraphNames: getHandleGraphNameOpt(opts?.format),
      ...opts,
    }) as any as N3WriterInterface;
  }
  return new N3Writer({
    handleGraphNames: getHandleGraphNameOpt(fdOrOpts?.format),
    ...fdOrOpts,
  }) as any as N3WriterInterface;
}
