import { Store as N3StoreInterface } from "./forked/N3StoreInterface.js";
import * as RdfJs from "rdf-js";
import { Quad } from "./Terms.js";
import { DefaultFactory, AnyTdbDataFactory } from "./DataFactory.js";
declare const forkedN3Store: new (...args: any) => N3StoreInterface;
interface StoreOptions {
    factory?: AnyTdbDataFactory;
}
export type PatternTerm = RdfJs.Term | null;
export interface Pattern {
    subject?: PatternTerm;
    predicate?: PatternTerm;
    object?: PatternTerm;
    graph?: PatternTerm;
}
export interface Store extends N3StoreInterface {
}
export declare class Store extends forkedN3Store {
    readonly factory: DefaultFactory;
    private validationStatuses;
    constructor(triples: Quad[], options?: StoreOptions);
    constructor(options?: StoreOptions);
    getQuads(pattern: Pattern): Quad[];
    getQuads(subject: PatternTerm, predicate: PatternTerm, object: PatternTerm | PatternTerm[], graph: PatternTerm): Quad[];
    private trackValidationStatus;
    private getValidationStatus;
    private termToId;
    private termFromId;
}
export {};
//# sourceMappingURL=Store.d.ts.map