export default class N3Writer {
    constructor(outputStream: any, options: any);
    _prefixRegex: RegExp;
    handleGraphNames: any;
    _lists: any;
    _outputStream: any;
    _endStream: boolean;
    _subject: any;
    _lineMode: boolean;
    _graph: any;
    _prefixIRIs: any;
    _baseMatcher: RegExp | undefined;
    _baseLength: any;
    _writeQuad(subject: any, predicate: any, object: any, graph: any, done: any): void;
    get _inDefaultGraph(): any;
    _write(string: any, callback: any): void;
    _predicate: any;
    _writeQuadLine(subject: any, predicate: any, object: any, graph: any, done: any): void;
    quadToString(subject: any, predicate: any, object: any, graph: any): string;
    quadsToString(quads: any): any;
    _encodeSubject(entity: any): any;
    _encodeIriOrBlank(entity: any): any;
    _encodeLiteral(literal: any): any;
    _encodePredicate(predicate: any): any;
    _encodeObject(object: any): any;
    _encodeQuad({ subject, predicate, object, graph }: {
        subject: any;
        predicate: any;
        object: any;
        graph: any;
    }): any;
    _blockedWrite(): void;
    addQuad(subject: any, predicate: any, object: any, graph: any, done: any): void;
    addQuads(quads: any): void;
    addPrefix(prefix: any, iri: any, done: any): void;
    addPrefixes(prefixes: any, done: any): any;
    blank(predicate: any, object: any): SerializedTerm;
    list(elements: any): SerializedTerm;
    end(done: any): any;
}
declare class SerializedTerm {
    equals(): boolean;
}
export {};
//# sourceMappingURL=N3Writer.d.ts.map