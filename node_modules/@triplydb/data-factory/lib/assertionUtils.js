import { BASE_QUAD_TERM_TYPES } from "./Terms.js";
import { upperFirst } from "lodash-es";
export function isValidTerm(term, allowedTermTypes) {
    return allowedTermTypes.includes(term.termType);
}
export function assertIsValidTerm(term, allowedTermTypes, position) {
    if (!isValidTerm(term, allowedTermTypes))
        throw new Error(`${upperFirst(position)} of type '${term.termType}' is not valid. Only the following termtypes are allowed: ${allowedTermTypes.join(", ")}`);
}
export function assertIsValidQuad(allowedTerms, subject, predicate, object, graph) {
    const allowedQuadPositions = allowedTerms || BASE_QUAD_TERM_TYPES;
    assertIsValidTerm(subject, allowedQuadPositions.subject, "subject");
    assertIsValidTerm(predicate, allowedQuadPositions.predicate, "predicate");
    assertIsValidTerm(object, allowedQuadPositions.object, "object");
    if (graph)
        assertIsValidTerm(graph, allowedQuadPositions.graph, "graph");
}
export function isValidQuad(allowedTerms, subject, predicate, object, graph) {
    const allowedQuadPositions = allowedTerms || BASE_QUAD_TERM_TYPES;
    return (isValidTerm(subject, allowedQuadPositions.subject) &&
        isValidTerm(predicate, allowedQuadPositions.predicate) &&
        isValidTerm(object, allowedQuadPositions.object) &&
        graph &&
        isValidTerm(graph, allowedQuadPositions.graph));
}
//# sourceMappingURL=assertionUtils.js.map