import * as RdfJs from "rdf-js";
import { Writable } from "ts-essentials";
export type ValidationStatus = "unrecognized" | "canonical" | "disabled";
interface TermBase {
    id: string;
    cmpString: string;
    validationStatus: ValidationStatus;
}
export type Term = BlankNode | Literal | NamedNode | DefaultGraph | Quad<BaseQuad> | Variable;
export declare function padLeftTwo(value: number): string;
export interface TermTypeToTerm {
    NamedNode: NamedNode;
    BlankNode: BlankNode;
    Variable: Variable;
    Quad: Quad<BaseQuad>;
    Literal: Literal;
    DefaultGraph: DefaultGraph;
}
export interface TermTypesToTerms<T extends typeof BASE_QUAD_TERM_TYPES> {
    subject: TermTypeToTerm[T["subject"][number]];
    predicate: TermTypeToTerm[T["predicate"][number]];
    object: TermTypeToTerm[T["object"][number]];
    graph: TermTypeToTerm[T["graph"][number]];
}
export type TermType = keyof TermTypeToTerm;
export declare const BASE_QUAD_TERM_TYPES: {
    subject: ("NamedNode" | "BlankNode" | "Variable" | "Quad")[];
    predicate: ("NamedNode" | "Variable")[];
    object: ("NamedNode" | "BlankNode" | "Variable" | "Quad" | "Literal")[];
    graph: ("NamedNode" | "BlankNode" | "Variable" | "DefaultGraph")[];
};
export type BaseQuad = TermTypesToTerms<typeof BASE_QUAD_TERM_TYPES>;
export type QuadPosition = "subject" | "predicate" | "object" | "graph";
export declare class NamedNode<Iri extends string = string> implements RdfJs.NamedNode<Iri>, TermBase {
    static readonly termType: "NamedNode";
    readonly termType: "NamedNode";
    readonly value: Iri;
    get unsafeMutable(): Writable<this>;
    readonly validationStatus: ValidationStatus;
    constructor(iri: Iri, validationStatus: ValidationStatus);
    get id(): string;
    equals(other?: RdfJs.Term): boolean;
    get cmpString(): string;
}
export declare function lexSerializeNumericString(numericString: string): string;
export declare class Literal<Iri extends string = string> implements RdfJs.Literal, TermBase {
    static readonly termType: "Literal";
    readonly termType: "Literal";
    readonly validationStatus: ValidationStatus;
    readonly value: string;
    get unsafeMutable(): Writable<this>;
    readonly language: string;
    readonly datatype: NamedNode<Iri>;
    constructor(value: string, validationStatus: ValidationStatus, datatype: NamedNode<Iri>, language: string | undefined);
    get id(): string;
    equals(other?: RdfJs.Term): boolean;
    get cmpString(): string;
}
export declare class BlankNode implements RdfJs.BlankNode, TermBase {
    static readonly termType: "BlankNode";
    readonly termType: "BlankNode";
    readonly value: string;
    get unsafeMutable(): Writable<this>;
    readonly validationStatus: ValidationStatus;
    constructor(name: string);
    get id(): string;
    equals(other?: RdfJs.Term): boolean;
    get cmpString(): string;
}
export declare class Variable implements RdfJs.Variable, TermBase {
    static readonly termType: "Variable";
    readonly termType: "Variable";
    readonly value: string;
    get unsafeMutable(): Writable<this>;
    readonly validationStatus: ValidationStatus;
    constructor(name: string);
    get id(): string;
    equals(other?: RdfJs.Term): boolean;
    get cmpString(): string;
}
export declare class DefaultGraph implements RdfJs.DefaultGraph, TermBase {
    static readonly termType: "DefaultGraph";
    static readonly id = "";
    readonly termType: "DefaultGraph";
    readonly value: "";
    readonly id = "";
    readonly cmpString = "";
    get unsafeMutable(): Writable<this>;
    readonly validationStatus: ValidationStatus;
    equals(other?: RdfJs.Term): boolean;
}
export declare class Quad<Q extends BaseQuad = BaseQuad> implements RdfJs.Quad, TermBase {
    static readonly termType: "Quad";
    readonly termType: "Quad";
    readonly cmpString: string;
    readonly value: "";
    get unsafeMutable(): Writable<this>;
    readonly subject: Q["subject"];
    readonly predicate: Q["predicate"];
    readonly object: Q["object"];
    readonly graph: Q["graph"];
    readonly validationStatus: ValidationStatus;
    constructor(subject: Q["subject"], predicate: Q["predicate"], object: Q["object"], graph: Q["graph"] | DefaultGraph);
    get id(): string;
    equals(other?: RdfJs.Term): boolean;
}
export {};
//# sourceMappingURL=Terms.d.ts.map