export declare function parse(iri: string, opts?: {
    base?: string;
}): Iri;
export declare function validate(iri: string, opts?: {
    base?: string;
}): void;
export declare function resolve(_iri: string, _opts?: {
    base?: string;
}): string;
declare class Iri {
    positions: ElementPositions;
    constructor(positions: ElementPositions);
    get iri(): string;
    get scheme(): string | undefined;
    get authority(): string | undefined;
    get path(): string | undefined;
    get query(): string | undefined;
    get fragment(): string | undefined;
}
declare class ElementPositions {
    iri: string;
    private base;
    private input;
    private output;
    private inputSchemeEnd;
    schemeEnd: number;
    authorityEnd: number;
    pathEnd: number;
    queryEnd: number;
    constructor(iri: string, base?: string);
    private parse;
    private parsePathOrAuthority;
    private parseScheme;
    private parseRelative;
    private parseRelativeSlash;
    private parseAuthority;
    private parseHost;
    private parsePort;
    private parsePathStart;
    private parsePath;
    private parseQuery;
    private parseFragment;
    private removeLastSegment;
    private readUrlCodepointOrEchar;
    private readUrlCodepointOrQuerry;
    private readEchar;
}
export {};
//# sourceMappingURL=Iri.d.ts.map