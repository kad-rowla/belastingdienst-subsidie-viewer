import { geoProject } from "./GeoProject.js";
import area from "@turf/area";
import { convertArea } from "@turf/helpers";
import { isSupportedCrs } from "./Crs.js";
function prefixer(base) {
    return function prefix(local) {
        return `${base}${local}`;
    };
}
export const uom = prefixer("http://www.opengis.net/def/uom/OGC/1.0/");
export const unit = prefixer("http://qudt.org/vocab/unit/");
export const DEFAULT_UNIT = unit("M2");
const CRS84 = "http://www.opengis.net/def/crs/OGC/1.3/CRS84";
const UNIT_DEF = [uom("metre"), uom("meter"), unit("IN2"), unit("M2"), unit("MI2"), unit("YD2")];
export function isSupportedAreaUnit(unit) {
    return UNIT_DEF.includes(unit);
}
export function geoArea(geometry, toUnit = DEFAULT_UNIT) {
    if (!isSupportedCrs(geometry.crs)) {
        throw new Error(`Calculating the area of CRS ${geometry.crs} is not currently supported`);
    }
    if (!isSupportedAreaUnit(toUnit)) {
        throw new Error(`Calculating the area in unit ${toUnit} is not currently supported`);
    }
    if (geometry.type !== "Polygon" && geometry.type !== "MultiPolygon")
        return 0;
    if (geometry.crs !== CRS84)
        geometry = geoProject(geometry, CRS84);
    const areaInSquareMeters = area(geometry);
    switch (toUnit) {
        case uom("meter"):
        case uom("metre"):
        case unit("M2"):
            return areaInSquareMeters;
        case unit("IN2"):
            return convertArea(areaInSquareMeters, "meters", "inches");
        case unit("MI2"):
            return convertArea(areaInSquareMeters, "meters", "miles");
        case unit("YD2"):
            return convertArea(areaInSquareMeters, "meters", "yards");
    }
}
//# sourceMappingURL=GeoArea.js.map