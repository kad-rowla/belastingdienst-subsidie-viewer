function prefixer(base) {
    return function prefix(local) {
        return `${base}${local}`;
    };
}
export const xsd = prefixer("http://www.w3.org/2001/XMLSchema#");
export const rdf = prefixer("http://www.w3.org/1999/02/22-rdf-syntax-ns#");
const xpathFunctions = prefixer("http://www.w3.org/2005/xpath-functions#");
export const NUMERIC_DATA_TYPE_IRIS = {
    XSD_DECIMAL: xsd("decimal"),
    XSD_FLOAT: xsd("float"),
    XSD_DOUBLE: xsd("double"),
    XSD_INTEGER: xsd("integer"),
    XSD_NON_POSITIVE_INTEGER: xsd("nonPositiveInteger"),
    XSD_NEGATIVE_INTEGER: xsd("negativeInteger"),
    XSD_LONG: xsd("long"),
    XSD_INT: xsd("int"),
    XSD_SHORT: xsd("short"),
    XSD_BYTE: xsd("byte"),
    XSD_NON_NEGATIVE_INTEGER: xsd("nonNegativeInteger"),
    XSD_POSITIVE_INTEGER: xsd("positiveInteger"),
    XSD_UNSIGNED_LONG: xsd("unsignedLong"),
    XSD_UNSIGNED_INT: xsd("unsignedInt"),
    XSD_UNSIGNED_SHORT: xsd("unsignedShort"),
    XSD_UNSIGNED_BYTE: xsd("unsignedByte"),
};
export const numericDatatypeIris = new Set(Object.values(NUMERIC_DATA_TYPE_IRIS));
export function isNumericDatatype(term) {
    return term.termType === "NamedNode" && numericDatatypeIris.has(term.value);
}
export const DATA_TYPE_NAME_MAPPING = {
    XSD_ANY_URI: xsd("anyURI"),
    XSD_STRING: xsd("string"),
    RDF_LANG_STRING: rdf("langString"),
    XSD_BOOLEAN: xsd("boolean"),
    XSD_TIME: xsd("time"),
    XSD_DATE_TIME: xsd("dateTime"),
    XSD_DATE_TIME_STAMP: xsd("dateTimeStamp"),
    XSD_DATE: xsd("date"),
    XSD_G_YEAR_MONTH: xsd("gYearMonth"),
    XSD_G_YEAR: xsd("gYear"),
    XSD_G_MONTH_DAY: xsd("gMonthDay"),
    XSD_G_DAY: xsd("gDay"),
    XSD_G_MONTH: xsd("gMonth"),
    XSD_DURATION: xsd("duration"),
    XSD_YEAR_MONTH_DURATION: xsd("yearMonthDuration"),
    XSD_DAYTIME_DURATION: xsd("dayTimeDuration"),
    ...NUMERIC_DATA_TYPE_IRIS,
    XSD_NORMALIZED_STRING: xsd("normalizedString"),
    XSD_TOKEN: xsd("token"),
    XSD_LANGUAGE: xsd("language"),
    XSD_NM_TOKEN: xsd("NMTOKEN"),
    XSD_NAME: xsd("name"),
    XSD_NC_NAME: xsd("NCName"),
    XSD_ENTITY: xsd("ENTITY"),
    XSD_ID: xsd("ID"),
    XSD_ID_REF: xsd("IDREF"),
    XSD_ANY_ATOMIC_TYPE: xsd("anyAtomicType"),
    XSD_UNTYPED_ATOMIC: xsd("untypedAtomic"),
    XSD_BASE64BINARY: xsd("base64Binary"),
    XSD_HEX_BINARY: xsd("hexBinary"),
    XSD_NOTATION: xsd("NOTATION"),
    XSD_Q_NAME: xsd("QName"),
};
export const XPATH_FUNCTIONS = {
    COMPARE: xpathFunctions("compare"),
    NOT: xpathFunctions("not"),
    BOOLEAN: xpathFunctions("boolean"),
    STRING: xpathFunctions("string"),
    LANG: xpathFunctions("lang"),
    ABS: xpathFunctions("abs"),
    CEILING: xpathFunctions("ceiling"),
    FLOOR: xpathFunctions("floor"),
    ROUND: xpathFunctions("round"),
    STRING_LENGTH: xpathFunctions("string-length"),
    SUBSTRING: xpathFunctions("substring"),
    SUBSTRING_BEFORE: xpathFunctions("substring-before"),
    SUBSTRING_AFTER: xpathFunctions("substring-after"),
    UPPER_CASE: xpathFunctions("upper-case"),
    LOWER_CASE: xpathFunctions("lower-case"),
    STARTS_WITH: xpathFunctions("starts-with"),
    ENDS_WITH: xpathFunctions("ends-with"),
    CONTAINS: xpathFunctions("contains"),
    CONCAT: xpathFunctions("concat"),
    ENCODE_FOR_URI: xpathFunctions("encode-for-uri"),
    MATCHES: xpathFunctions("matches"),
    REPLACE: xpathFunctions("replace"),
    CURRENT_DATE_TIME: xpathFunctions("current-dateTime"),
};
const DATA_TYPE_NAMES = Object.keys(DATA_TYPE_NAME_MAPPING);
export const DATA_TYPE_IRIS = DATA_TYPE_NAMES.map((name) => DATA_TYPE_NAME_MAPPING[name]);
const TYPE_HIERARCHY = {
    type: "XSD_ANY_ATOMIC_TYPE",
    children: [
        "XSD_UNTYPED_ATOMIC",
        { type: "XSD_DATE_TIME", children: ["XSD_DATE_TIME_STAMP"] },
        "XSD_DATE",
        "XSD_TIME",
        { type: "XSD_DURATION", children: ["XSD_YEAR_MONTH_DURATION", "XSD_DAYTIME_DURATION"] },
        "XSD_FLOAT",
        "XSD_DOUBLE",
        {
            type: "XSD_DECIMAL",
            children: [
                {
                    type: "XSD_INTEGER",
                    children: [
                        { type: "XSD_NON_POSITIVE_INTEGER", children: ["XSD_NEGATIVE_INTEGER"] },
                        {
                            type: "XSD_LONG",
                            children: [
                                {
                                    type: "XSD_INT",
                                    children: [{ type: "XSD_SHORT", children: ["XSD_BYTE"] }],
                                },
                            ],
                        },
                        {
                            type: "XSD_NON_NEGATIVE_INTEGER",
                            children: [
                                {
                                    type: "XSD_UNSIGNED_LONG",
                                    children: [
                                        {
                                            type: "XSD_UNSIGNED_INT",
                                            children: [{ type: "XSD_UNSIGNED_SHORT", children: ["XSD_UNSIGNED_BYTE"] }],
                                        },
                                    ],
                                },
                                "XSD_POSITIVE_INTEGER",
                            ],
                        },
                    ],
                },
            ],
        },
        "XSD_G_YEAR_MONTH",
        "XSD_G_YEAR",
        "XSD_G_MONTH_DAY",
        "XSD_G_DAY",
        "XSD_G_MONTH",
        {
            type: "XSD_STRING",
            children: [
                {
                    type: "XSD_NORMALIZED_STRING",
                    children: [
                        {
                            type: "XSD_TOKEN",
                            children: [
                                "XSD_LANGUAGE",
                                "XSD_NM_TOKEN",
                                {
                                    type: "XSD_NAME",
                                    children: [
                                        {
                                            type: "XSD_NC_NAME",
                                            children: ["XSD_ID", "XSD_ID_REF", "XSD_ENTITY"],
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
            ],
        },
        "XSD_BOOLEAN",
        "XSD_BASE64BINARY",
        "XSD_HEX_BINARY",
        "XSD_ANY_URI",
        "XSD_Q_NAME",
        "XSD_NOTATION",
    ],
};
const SUB_TYPE_NAMES = {};
function setRecursively(node) {
    const name = typeof node === "string" ? node : node.type;
    const subTypes = [name];
    if (typeof node === "object") {
        for (const child of node.children) {
            setRecursively(child);
            const childName = typeof child === "string" ? child : child.type;
            subTypes.push(...SUB_TYPE_NAMES[childName]);
        }
    }
    SUB_TYPE_NAMES[name] = subTypes;
}
setRecursively(TYPE_HIERARCHY);
setRecursively("RDF_LANG_STRING");
export const SUB_TYPES = {};
for (const superName of DATA_TYPE_NAMES) {
    SUB_TYPES[superName] = SUB_TYPE_NAMES[superName].map((name) => DATA_TYPE_NAME_MAPPING[name]);
}
export const SUB_TYPE_IRIS = {};
for (const superName of DATA_TYPE_NAMES) {
    SUB_TYPE_IRIS[DATA_TYPE_NAME_MAPPING[superName]] = SUB_TYPE_NAMES[superName].map((name) => DATA_TYPE_NAME_MAPPING[name]);
}
//# sourceMappingURL=constants.js.map