import { Term } from "@rdfjs/types";
export declare const xsd: <Suffix extends string>(local: Suffix) => `http://www.w3.org/2001/XMLSchema#${Suffix}`;
export declare const rdf: <Suffix extends string>(local: Suffix) => `http://www.w3.org/1999/02/22-rdf-syntax-ns#${Suffix}`;
export declare const NUMERIC_DATA_TYPE_IRIS: {
    XSD_DECIMAL: "http://www.w3.org/2001/XMLSchema#decimal";
    XSD_FLOAT: "http://www.w3.org/2001/XMLSchema#float";
    XSD_DOUBLE: "http://www.w3.org/2001/XMLSchema#double";
    XSD_INTEGER: "http://www.w3.org/2001/XMLSchema#integer";
    XSD_NON_POSITIVE_INTEGER: "http://www.w3.org/2001/XMLSchema#nonPositiveInteger";
    XSD_NEGATIVE_INTEGER: "http://www.w3.org/2001/XMLSchema#negativeInteger";
    XSD_LONG: "http://www.w3.org/2001/XMLSchema#long";
    XSD_INT: "http://www.w3.org/2001/XMLSchema#int";
    XSD_SHORT: "http://www.w3.org/2001/XMLSchema#short";
    XSD_BYTE: "http://www.w3.org/2001/XMLSchema#byte";
    XSD_NON_NEGATIVE_INTEGER: "http://www.w3.org/2001/XMLSchema#nonNegativeInteger";
    XSD_POSITIVE_INTEGER: "http://www.w3.org/2001/XMLSchema#positiveInteger";
    XSD_UNSIGNED_LONG: "http://www.w3.org/2001/XMLSchema#unsignedLong";
    XSD_UNSIGNED_INT: "http://www.w3.org/2001/XMLSchema#unsignedInt";
    XSD_UNSIGNED_SHORT: "http://www.w3.org/2001/XMLSchema#unsignedShort";
    XSD_UNSIGNED_BYTE: "http://www.w3.org/2001/XMLSchema#unsignedByte";
};
export type NumericDataTypeIri = (typeof NUMERIC_DATA_TYPE_IRIS)[keyof typeof NUMERIC_DATA_TYPE_IRIS];
export declare const numericDatatypeIris: Set<string>;
export declare function isNumericDatatype(term: Term): boolean;
export declare const DATA_TYPE_NAME_MAPPING: {
    readonly XSD_NORMALIZED_STRING: "http://www.w3.org/2001/XMLSchema#normalizedString";
    readonly XSD_TOKEN: "http://www.w3.org/2001/XMLSchema#token";
    readonly XSD_LANGUAGE: "http://www.w3.org/2001/XMLSchema#language";
    readonly XSD_NM_TOKEN: "http://www.w3.org/2001/XMLSchema#NMTOKEN";
    readonly XSD_NAME: "http://www.w3.org/2001/XMLSchema#name";
    readonly XSD_NC_NAME: "http://www.w3.org/2001/XMLSchema#NCName";
    readonly XSD_ENTITY: "http://www.w3.org/2001/XMLSchema#ENTITY";
    readonly XSD_ID: "http://www.w3.org/2001/XMLSchema#ID";
    readonly XSD_ID_REF: "http://www.w3.org/2001/XMLSchema#IDREF";
    readonly XSD_ANY_ATOMIC_TYPE: "http://www.w3.org/2001/XMLSchema#anyAtomicType";
    readonly XSD_UNTYPED_ATOMIC: "http://www.w3.org/2001/XMLSchema#untypedAtomic";
    readonly XSD_BASE64BINARY: "http://www.w3.org/2001/XMLSchema#base64Binary";
    readonly XSD_HEX_BINARY: "http://www.w3.org/2001/XMLSchema#hexBinary";
    readonly XSD_NOTATION: "http://www.w3.org/2001/XMLSchema#NOTATION";
    readonly XSD_Q_NAME: "http://www.w3.org/2001/XMLSchema#QName";
    readonly XSD_DECIMAL: "http://www.w3.org/2001/XMLSchema#decimal";
    readonly XSD_FLOAT: "http://www.w3.org/2001/XMLSchema#float";
    readonly XSD_DOUBLE: "http://www.w3.org/2001/XMLSchema#double";
    readonly XSD_INTEGER: "http://www.w3.org/2001/XMLSchema#integer";
    readonly XSD_NON_POSITIVE_INTEGER: "http://www.w3.org/2001/XMLSchema#nonPositiveInteger";
    readonly XSD_NEGATIVE_INTEGER: "http://www.w3.org/2001/XMLSchema#negativeInteger";
    readonly XSD_LONG: "http://www.w3.org/2001/XMLSchema#long";
    readonly XSD_INT: "http://www.w3.org/2001/XMLSchema#int";
    readonly XSD_SHORT: "http://www.w3.org/2001/XMLSchema#short";
    readonly XSD_BYTE: "http://www.w3.org/2001/XMLSchema#byte";
    readonly XSD_NON_NEGATIVE_INTEGER: "http://www.w3.org/2001/XMLSchema#nonNegativeInteger";
    readonly XSD_POSITIVE_INTEGER: "http://www.w3.org/2001/XMLSchema#positiveInteger";
    readonly XSD_UNSIGNED_LONG: "http://www.w3.org/2001/XMLSchema#unsignedLong";
    readonly XSD_UNSIGNED_INT: "http://www.w3.org/2001/XMLSchema#unsignedInt";
    readonly XSD_UNSIGNED_SHORT: "http://www.w3.org/2001/XMLSchema#unsignedShort";
    readonly XSD_UNSIGNED_BYTE: "http://www.w3.org/2001/XMLSchema#unsignedByte";
    readonly XSD_ANY_URI: "http://www.w3.org/2001/XMLSchema#anyURI";
    readonly XSD_STRING: "http://www.w3.org/2001/XMLSchema#string";
    readonly RDF_LANG_STRING: "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString";
    readonly XSD_BOOLEAN: "http://www.w3.org/2001/XMLSchema#boolean";
    readonly XSD_TIME: "http://www.w3.org/2001/XMLSchema#time";
    readonly XSD_DATE_TIME: "http://www.w3.org/2001/XMLSchema#dateTime";
    readonly XSD_DATE_TIME_STAMP: "http://www.w3.org/2001/XMLSchema#dateTimeStamp";
    readonly XSD_DATE: "http://www.w3.org/2001/XMLSchema#date";
    readonly XSD_G_YEAR_MONTH: "http://www.w3.org/2001/XMLSchema#gYearMonth";
    readonly XSD_G_YEAR: "http://www.w3.org/2001/XMLSchema#gYear";
    readonly XSD_G_MONTH_DAY: "http://www.w3.org/2001/XMLSchema#gMonthDay";
    readonly XSD_G_DAY: "http://www.w3.org/2001/XMLSchema#gDay";
    readonly XSD_G_MONTH: "http://www.w3.org/2001/XMLSchema#gMonth";
    readonly XSD_DURATION: "http://www.w3.org/2001/XMLSchema#duration";
    readonly XSD_YEAR_MONTH_DURATION: "http://www.w3.org/2001/XMLSchema#yearMonthDuration";
    readonly XSD_DAYTIME_DURATION: "http://www.w3.org/2001/XMLSchema#dayTimeDuration";
};
export declare const XPATH_FUNCTIONS: {
    readonly COMPARE: "http://www.w3.org/2005/xpath-functions#compare";
    readonly NOT: "http://www.w3.org/2005/xpath-functions#not";
    readonly BOOLEAN: "http://www.w3.org/2005/xpath-functions#boolean";
    readonly STRING: "http://www.w3.org/2005/xpath-functions#string";
    readonly LANG: "http://www.w3.org/2005/xpath-functions#lang";
    readonly ABS: "http://www.w3.org/2005/xpath-functions#abs";
    readonly CEILING: "http://www.w3.org/2005/xpath-functions#ceiling";
    readonly FLOOR: "http://www.w3.org/2005/xpath-functions#floor";
    readonly ROUND: "http://www.w3.org/2005/xpath-functions#round";
    readonly STRING_LENGTH: "http://www.w3.org/2005/xpath-functions#string-length";
    readonly SUBSTRING: "http://www.w3.org/2005/xpath-functions#substring";
    readonly SUBSTRING_BEFORE: "http://www.w3.org/2005/xpath-functions#substring-before";
    readonly SUBSTRING_AFTER: "http://www.w3.org/2005/xpath-functions#substring-after";
    readonly UPPER_CASE: "http://www.w3.org/2005/xpath-functions#upper-case";
    readonly LOWER_CASE: "http://www.w3.org/2005/xpath-functions#lower-case";
    readonly STARTS_WITH: "http://www.w3.org/2005/xpath-functions#starts-with";
    readonly ENDS_WITH: "http://www.w3.org/2005/xpath-functions#ends-with";
    readonly CONTAINS: "http://www.w3.org/2005/xpath-functions#contains";
    readonly CONCAT: "http://www.w3.org/2005/xpath-functions#concat";
    readonly ENCODE_FOR_URI: "http://www.w3.org/2005/xpath-functions#encode-for-uri";
    readonly MATCHES: "http://www.w3.org/2005/xpath-functions#matches";
    readonly REPLACE: "http://www.w3.org/2005/xpath-functions#replace";
    readonly CURRENT_DATE_TIME: "http://www.w3.org/2005/xpath-functions#current-dateTime";
};
declare const DATA_TYPE_NAMES: ("XSD_DECIMAL" | "XSD_FLOAT" | "XSD_DOUBLE" | "XSD_INTEGER" | "XSD_NON_POSITIVE_INTEGER" | "XSD_NEGATIVE_INTEGER" | "XSD_LONG" | "XSD_INT" | "XSD_SHORT" | "XSD_BYTE" | "XSD_NON_NEGATIVE_INTEGER" | "XSD_POSITIVE_INTEGER" | "XSD_UNSIGNED_LONG" | "XSD_UNSIGNED_INT" | "XSD_UNSIGNED_SHORT" | "XSD_UNSIGNED_BYTE" | "XSD_NORMALIZED_STRING" | "XSD_TOKEN" | "XSD_LANGUAGE" | "XSD_NM_TOKEN" | "XSD_NAME" | "XSD_NC_NAME" | "XSD_ENTITY" | "XSD_ID" | "XSD_ID_REF" | "XSD_ANY_ATOMIC_TYPE" | "XSD_UNTYPED_ATOMIC" | "XSD_BASE64BINARY" | "XSD_HEX_BINARY" | "XSD_NOTATION" | "XSD_Q_NAME" | "XSD_ANY_URI" | "XSD_STRING" | "RDF_LANG_STRING" | "XSD_BOOLEAN" | "XSD_TIME" | "XSD_DATE_TIME" | "XSD_DATE_TIME_STAMP" | "XSD_DATE" | "XSD_G_YEAR_MONTH" | "XSD_G_YEAR" | "XSD_G_MONTH_DAY" | "XSD_G_DAY" | "XSD_G_MONTH" | "XSD_DURATION" | "XSD_YEAR_MONTH_DURATION" | "XSD_DAYTIME_DURATION")[];
export declare const DATA_TYPE_IRIS: ("http://www.w3.org/2001/XMLSchema#decimal" | "http://www.w3.org/2001/XMLSchema#float" | "http://www.w3.org/2001/XMLSchema#double" | "http://www.w3.org/2001/XMLSchema#integer" | "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" | "http://www.w3.org/2001/XMLSchema#negativeInteger" | "http://www.w3.org/2001/XMLSchema#long" | "http://www.w3.org/2001/XMLSchema#int" | "http://www.w3.org/2001/XMLSchema#short" | "http://www.w3.org/2001/XMLSchema#byte" | "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" | "http://www.w3.org/2001/XMLSchema#positiveInteger" | "http://www.w3.org/2001/XMLSchema#unsignedLong" | "http://www.w3.org/2001/XMLSchema#unsignedInt" | "http://www.w3.org/2001/XMLSchema#unsignedShort" | "http://www.w3.org/2001/XMLSchema#unsignedByte" | "http://www.w3.org/2001/XMLSchema#anyURI" | "http://www.w3.org/2001/XMLSchema#string" | "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" | "http://www.w3.org/2001/XMLSchema#boolean" | "http://www.w3.org/2001/XMLSchema#time" | "http://www.w3.org/2001/XMLSchema#dateTime" | "http://www.w3.org/2001/XMLSchema#dateTimeStamp" | "http://www.w3.org/2001/XMLSchema#date" | "http://www.w3.org/2001/XMLSchema#gYearMonth" | "http://www.w3.org/2001/XMLSchema#gYear" | "http://www.w3.org/2001/XMLSchema#gMonthDay" | "http://www.w3.org/2001/XMLSchema#gDay" | "http://www.w3.org/2001/XMLSchema#gMonth" | "http://www.w3.org/2001/XMLSchema#duration" | "http://www.w3.org/2001/XMLSchema#yearMonthDuration" | "http://www.w3.org/2001/XMLSchema#dayTimeDuration" | "http://www.w3.org/2001/XMLSchema#normalizedString" | "http://www.w3.org/2001/XMLSchema#token" | "http://www.w3.org/2001/XMLSchema#language" | "http://www.w3.org/2001/XMLSchema#NMTOKEN" | "http://www.w3.org/2001/XMLSchema#name" | "http://www.w3.org/2001/XMLSchema#NCName" | "http://www.w3.org/2001/XMLSchema#ENTITY" | "http://www.w3.org/2001/XMLSchema#ID" | "http://www.w3.org/2001/XMLSchema#IDREF" | "http://www.w3.org/2001/XMLSchema#anyAtomicType" | "http://www.w3.org/2001/XMLSchema#untypedAtomic" | "http://www.w3.org/2001/XMLSchema#base64Binary" | "http://www.w3.org/2001/XMLSchema#hexBinary" | "http://www.w3.org/2001/XMLSchema#NOTATION" | "http://www.w3.org/2001/XMLSchema#QName")[];
type DataTypeName = (typeof DATA_TYPE_NAMES)[number];
export type DataTypeIri = (typeof DATA_TYPE_IRIS)[number];
export declare const SUB_TYPES: {
    [superType in DataTypeName]: string[];
};
export declare const SUB_TYPE_IRIS: {
    [superType in DataTypeIri]: string[];
};
export {};
//# sourceMappingURL=constants.d.ts.map