import xsd from "./parseAndSerialize.js";
import wkt from "./wkt.js";
import { StandardParseError, AmbiguousParseError, ValueRangeError } from "./Errors.js";
const parsers = { ...xsd, ...wkt };
export function lexicalToValue(lexicalValue, datatype) {
    const stringDatatype = typeof datatype === "string" ? datatype : datatype.value;
    if (stringDatatype in parsers) {
        try {
            return parsers[stringDatatype].parse(lexicalValue);
        }
        catch (e) {
            if (e instanceof StandardParseError || e instanceof ValueRangeError || e instanceof AmbiguousParseError) {
                e.datatype = stringDatatype;
            }
            throw e;
        }
    }
    else {
        throw new Error(`No lexical mapping found for datatype '${stringDatatype}'.`);
    }
}
export function valueToCanonical(value, datatype) {
    const stringDatatype = typeof datatype === "string" ? datatype : datatype.value;
    if (stringDatatype in parsers) {
        return parsers[stringDatatype].serialize(value);
    }
    else {
        throw new Error(`No lexical mapping found for datatype '${stringDatatype}'.`);
    }
}
export function lexicalToCanonical(lexicalValue, datatype) {
    return valueToCanonical(lexicalToValue(lexicalValue, datatype), datatype);
}
export function isRecognized(datatype) {
    const stringDatatype = typeof datatype === "string" ? datatype : datatype.value;
    return stringDatatype in parsers;
}
//# sourceMappingURL=index.js.map