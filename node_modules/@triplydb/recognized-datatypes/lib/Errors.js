export class BaseParseError extends Error {
    lexicalValue;
    constructor(opts) {
        super(opts.message, { cause: opts.cause });
        this.lexicalValue = opts.lexicalValue;
    }
}
export class StandardParseError extends BaseParseError {
    _datatype;
    offset;
    setMessage() {
        this.message = `Unable to parse value '${this.lexicalValue}'`;
        if (this.offset !== undefined) {
            this.message += ` at character ${this.offset}`;
        }
        if (this.cause instanceof RangeError) {
            this.message += `: ${this.cause.message}`;
        }
        if (this.message.at(-1) !== ".")
            this.message += ".";
    }
    constructor(opts) {
        super({ ...opts, message: `Unable to parse value '${opts.lexicalValue}'.`, cause: opts.cause });
        this.offset = opts.offset;
        this.setMessage();
    }
    set datatype(datatype) {
        this._datatype = datatype;
        this.setMessage();
    }
    get datatype() {
        return this._datatype;
    }
}
export class AmbiguousParseError extends BaseParseError {
    possibleValues;
    _datatype;
    constructor(opts) {
        super({ lexicalValue: opts.lexicalValue, message: `Unable to unambiguously parse value '${opts.lexicalValue}'.` });
        this.possibleValues = opts.possibleValues;
    }
    set datatype(datatype) {
        this.message =
            `Unable to unambiguously parse value '${this.lexicalValue}' ` +
                `according to datatype IRI '${datatype}'` +
                ".  The following parses are possible:\n" +
                this.possibleValues.reduce((x, y) => `${x}  - ${y}\n`, "");
        this._datatype = datatype;
    }
    get datatype() {
        return this._datatype;
    }
}
export class ValueRangeError extends BaseParseError {
    _datatype;
    value;
    constructor(opts) {
        super({
            message: `The parsed value '${JSON.stringify(opts.value)}' does not belong to the value space.`,
        });
        this.value = opts.value;
    }
    set datatype(datatype) {
        this.message = `The parsed value '${JSON.stringify(this.value)}' does not belong to the value space of '${datatype}'.`;
        this._datatype = datatype;
    }
    get datatype() {
        return this._datatype;
    }
}
//# sourceMappingURL=Errors.js.map