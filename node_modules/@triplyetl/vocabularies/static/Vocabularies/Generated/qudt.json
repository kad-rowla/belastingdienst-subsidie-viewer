{
  "displayName": "Quantities, Units, Dimensions and Types (QUDT)",
  "description": "The QUDT, or “Quantity, Unit, Dimension and Type” schema defines the base classes properties, and restrictions used for modeling physical quantities, units of measure, and their dimensions in various measurement systems.  The goal of the QUDT ontology is to provide a unified model of, measurable quantities, units for measuring different kinds of quantities, the numerical values of quantities in different units of measure and the data structures and data types used to store and manipulate these objects in software.\n\nExcept for unit prefixes, all units are specified in separate vocabularies.  Descriptions are provided in both HTML and LaTeX formats.  A quantity is a measure of an observable phenomenon, that, when associated with something, becomes a property of that thing; a particular object, event, or physical system.\n\nA quantity has meaning in the context of a measurement (i.e. the thing measured, the measured value, the accuracy of measurement, etc.) whereas the underlying quantity kind is independent of any particular measurement.  Thus, length is a quantity kind while the height of a rocket is a specific quantity of length; its magnitude that may be expressed in meters, feet, inches, etc.  Or, as stated at Wikipedia, in the language of measurement, quantities are quantifiable aspects of the world, such as time, distance, velocity, mass, momentum, energy, and weight, and units are used to describe their measure.  Many of these quantities are related to each other by various physical laws, and as a result the units of some of the quantities can be expressed as products (or ratios) of powers of other units (e.g., momentum is mass times velocity and velocity is measured in distance divided by time).\n\nVersion: 2.1.2",
  "prefix": "qudt",
  "iri": "http://qudt.org/schema/qudt/",
  "generated": "2023-07-17T09:04:59.913Z",
  "items": {
    "AbstractQuantityKind": {
      "category": "class",
      "label": "Quantity Kind (abstract)",
      "parent": "https://triplydb.com/.well-known/genid/1b70c639f094d2293c49a589c217b2bb"
    },
    "AngleUnit": {
      "category": "class",
      "label": "Angle unit",
      "parent": "qudt:DimensionlessUnit",
      "description": "All units relating to specification of angles. "
    },
    "Aspect": {
      "category": "class",
      "label": "QUDT Aspect",
      "parent": "http://www.w3.org/2002/07/owl#Thing"
    },
    "AspectClass": {
      "category": "class",
      "label": "Aspect Class",
      "parent": "http://www.w3.org/2000/01/rdf-schema#Class"
    },
    "BaseDimensionMagnitude": {
      "category": "class",
      "label": "Base Dimension Magnitude",
      "parent": "https://triplydb.com/.well-known/genid/118aa94719d50ae864545ee4ce9a4615"
    },
    "BigEndian": {
      "category": "instance",
      "label": "Big Endian"
    },
    "BinaryPrefix": {
      "category": "class",
      "label": "Binary Prefix",
      "parent": "qudt:Prefix",
      "description": "A <em>Binary Prefix</em> is a prefix for multiples of units in data processing, data transmission, and digital information, notably the bit and the byte, to indicate multiplication by a power of 2."
    },
    "BitEncoding": {
      "category": "instance",
      "label": "Bit Encoding"
    },
    "BitEncodingType": {
      "category": "class",
      "label": "Bit Encoding",
      "parent": "qudt:Encoding",
      "description": "A bit encoding is a correspondence between the two possible values of a bit, 0 or 1, and some interpretation. For example, in a boolean encoding, a bit denotes a truth value, where 0 corresponds to False and 1 corresponds to True."
    },
    "BooleanEncoding": {
      "category": "instance",
      "label": "Boolean Encoding"
    },
    "BooleanEncodingType": {
      "category": "class",
      "label": "Boolean encoding type",
      "parent": "qudt:Encoding"
    },
    "ByteEncodingType": {
      "category": "class",
      "label": "Byte Encoding",
      "parent": "qudt:Encoding",
      "description": "This class contains the various ways that information may be encoded into bytes."
    },
    "CT_COUNTABLY-INFINITE": {
      "category": "instance",
      "label": "Countably Infinite Cardinality Type",
      "description": "A set of numbers is called countably infinite if there is a way to enumerate them.  Formally this is done with a bijection function that associates each number in the set with exactly one of the positive integers.  The set of all fractions is also countably infinite.  In other words, any set \\(X\\) that has the same cardinality as the set of the natural numbers, or \\(| X | \\; =  \\; | \\mathbb N | \\; = \\; \\aleph0\\), is said to be a countably infinite set."
    },
    "CT_FINITE": {
      "category": "instance",
      "label": "Finite Cardinality Type",
      "description": "Any set \\(X\\) with cardinality less than that of the natural numbers, or \\(| X | \\\\; <  \\; | \\\\mathbb N | \\), is said to be a finite set."
    },
    "CT_UNCOUNTABLE": {
      "category": "instance",
      "label": "Uncountable Cardinality Type",
      "description": "Any set with cardinality greater than that of the natural numbers, or \\(| X | \\; >  \\; | \\mathbb N | \\),  for example \\(| R| \\; =  \\;  c  \\; > |\\mathbb N |\\), is said to be uncountable."
    },
    "CardinalityType": {
      "category": "class",
      "label": "Cardinality Type",
      "parent": "qudt:EnumeratedValue",
      "description": "In mathematics, the cardinality of a set is a measure of the number of elements of the set.  For example, the set \\(A = {2, 4, 6}\\) contains 3 elements, and therefore \\(A\\) has a cardinality of 3. There are two approaches to cardinality – one which compares sets directly using bijections and injections, and another which uses cardinal numbers."
    },
    "CharEncoding": {
      "category": "instance",
      "label": "Char Encoding"
    },
    "CharEncodingType": {
      "category": "class",
      "label": "Char Encoding Type",
      "parent": "qudt:Encoding",
      "description": "The class of all character encoding schemes, each of which defines a rule or algorithm for encoding character data as a sequence of bits or bytes."
    },
    "Citation": {
      "category": "class",
      "label": "Citation",
      "parent": "https://triplydb.com/.well-known/genid/04ca2c945694cee5579c553aa95a7671"
    },
    "Comment": {
      "category": "class",
      "label": "Comment",
      "parent": "http://www.w3.org/2002/07/owl#Thing"
    },
    "Concept": {
      "category": "class",
      "label": "QUDT Concept",
      "parent": "http://www.w3.org/2002/07/owl#Thing"
    },
    "ConstantValue": {
      "category": "class",
      "label": "Constant value",
      "parent": "https://triplydb.com/.well-known/genid/16de4d083a8a64ea06809ad805920776"
    },
    "CountingUnit": {
      "category": "class",
      "label": "Counting Unit",
      "parent": "qudt:DimensionlessUnit"
    },
    "CurrencyUnit": {
      "category": "class",
      "label": "Currency Unit",
      "parent": "qudt:DimensionlessUnit"
    },
    "DataEncoding": {
      "category": "class",
      "label": "Data Encoding",
      "parent": "https://triplydb.com/.well-known/genid/136e9f8ba2de653dc071d63e7577f0d1"
    },
    "Datatype": {
      "category": "class",
      "label": "QUDT Datatype",
      "parent": "https://triplydb.com/.well-known/genid/1715dcc63ea34dc4af66e5b62f58a12f",
      "description": "A data type is a definition of a set of values (for example, \"all integers between 0 and 10\"), and the allowable operations on those values; the meaning of the data; and the way values of that type can be stored. Some types are primitive - built-in to the language, with no visible internal structure - e.g. Boolean; others are composite - constructed from one or more other types (of either kind) - e.g. lists, arrays, structures, unions. Object-oriented programming extends this with classes which encapsulate both the structure of a type and the operations that can be performed on it. Some languages provide strong typing, others allow implicit type conversion and/or explicit type conversion."
    },
    "DateTimeStringEncodingType": {
      "category": "class",
      "label": "Date Time String Encoding Type",
      "parent": "https://triplydb.com/.well-known/genid/ef7f61915d46e59fd89260c1687aa1b2",
      "description": "Date Time encodings are logical encodings for expressing date/time quantities as strings by applying unambiguous formatting and parsing rules."
    },
    "DecimalPrefix": {
      "category": "class",
      "label": "Decimal Prefix",
      "parent": "qudt:Prefix",
      "description": "A <em>Decimal Prefix</em> is a prefix for multiples of units that are powers of 10."
    },
    "DerivedUnit": {
      "category": "class",
      "label": "Derived Unit",
      "parent": "qudt:Unit"
    },
    "DimensionlessUnit": {
      "category": "class",
      "label": "Dimensionless Unit",
      "parent": "qudt:Unit"
    },
    "Discipline": {
      "category": "class",
      "label": "Discipline",
      "parent": "qudt:Concept"
    },
    "DoublePrecisionEncoding": {
      "category": "instance",
      "label": "Single Precision Real Encoding"
    },
    "Encoding": {
      "category": "class",
      "label": "Encoding",
      "parent": "https://triplydb.com/.well-known/genid/329dcd1ff491d0821193ffc7048bb0a8",
      "description": "An encoding is a rule or algorithm that is used to convert data from a native, or unspecified form into a specific form that satisfies the encoding rules. Examples of encodings include character encodings, such as UTF-8."
    },
    "EndianType": {
      "category": "class",
      "label": "Endian Type",
      "parent": "qudt:EnumeratedValue"
    },
    "EnumeratedQuantity": {
      "category": "class",
      "label": "Enumerated Quantity",
      "parent": "https://triplydb.com/.well-known/genid/0d284d19c014d1624a23504987743498"
    },
    "EnumeratedValue": {
      "category": "class",
      "label": "Enumerated Value",
      "parent": "http://www.linkedmodel.org/schema/dtype#EnumeratedValue"
    },
    "Enumeration": {
      "category": "class",
      "label": "Enumeration",
      "parent": "http://www.linkedmodel.org/schema/dtype#Enumeration"
    },
    "EnumerationScale": {
      "category": "class",
      "label": "Enumeration scale",
      "parent": "http://www.linkedmodel.org/schema/dtype#Enumeration"
    },
    "Figure": {
      "category": "class",
      "label": "Figure",
      "parent": "https://triplydb.com/.well-known/genid/060fd2332b5a06c90ce9c8964c6c3f9f"
    },
    "FloatingPointEncodingType": {
      "category": "class",
      "label": "Floating Point Encoding",
      "parent": "qudt:Encoding",
      "description": "A \"Encoding\" with the following instance(s): \"Double Precision Encoding\", \"Single Precision Real Encoding\"."
    },
    "IEEE754_1985RealEncoding": {
      "category": "instance",
      "label": "IEEE 754 1985 Real Encoding"
    },
    "ISO8601-UTCDateTime-BasicFormat": {
      "category": "instance",
      "label": "ISO 8601 UTC Date Time - Basic Format"
    },
    "IntegerEncodingType": {
      "category": "class",
      "label": "Integer Encoding",
      "parent": "qudt:Encoding",
      "description": "The encoding scheme for integer types"
    },
    "IntervalScale": {
      "category": "class",
      "label": "Interval scale",
      "parent": "qudt:Scale"
    },
    "LatexString": {
      "category": "datatype",
      "label": "Latex String",
      "parent": "http://www.w3.org/2001/XMLSchema#string",
      "description": "A type of string in which some characters may be wrapped with '\\(' and '\\) characters for LaTeX rendering."
    },
    "LittleEndian": {
      "category": "instance",
      "label": "Little Endian"
    },
    "LogarithmicUnit": {
      "category": "class",
      "label": "Logarithmic Unit",
      "parent": "qudt:DimensionlessUnit"
    },
    "LongUnsignedIntegerEncoding": {
      "category": "instance",
      "label": "Long Unsigned Integer Encoding"
    },
    "MathsFunctionType": {
      "category": "class",
      "label": "Maths Function Type",
      "parent": "qudt:Concept"
    },
    "NIST_SP811_Comment": {
      "category": "class",
      "label": "NIST SP~811 Comment",
      "parent": "qudt:Comment"
    },
    "NominalScale": {
      "category": "class",
      "label": "Nominal scale",
      "parent": "qudt:Scale"
    },
    "NumericUnion": {
      "category": "class",
      "label": "Numeric union",
      "parent": "http://www.linkedmodel.org/schema/dtype#numericUnion"
    },
    "OctetEncoding": {
      "category": "instance",
      "label": "OCTET Encoding"
    },
    "OrderedType": {
      "category": "class",
      "label": "Ordered type",
      "parent": "qudt:EnumeratedValue",
      "description": "Describes how a data or information structure is ordered."
    },
    "OrdinalScale": {
      "category": "class",
      "label": "Ordinal scale",
      "parent": "https://triplydb.com/.well-known/genid/85bb938dc0a50ddf66ff7919aeca6407"
    },
    "Organization": {
      "category": "class",
      "label": "Organization",
      "parent": "https://triplydb.com/.well-known/genid/4d556581481faab22f91fc1b94eaacc8"
    },
    "PartiallyOrdered": {
      "category": "instance",
      "label": "Partially Ordered"
    },
    "PhysicalConstant": {
      "category": "class",
      "label": "Physical Constant",
      "parent": "https://triplydb.com/.well-known/genid/21040084c247a1e6087848c64716d44f"
    },
    "PlaneAngleUnit": {
      "category": "class",
      "label": "Plane Angle Unit",
      "parent": "qudt:AngleUnit"
    },
    "Prefix": {
      "category": "class",
      "label": "Prefix",
      "parent": "https://triplydb.com/.well-known/genid/1756cfb77f9905203e474df3e1366841"
    },
    "Quantifiable": {
      "category": "class",
      "label": "Quantifiable",
      "parent": "https://triplydb.com/.well-known/genid/1eaf6573ea322b226e417f8e50bf2857"
    },
    "Quantity": {
      "category": "class",
      "label": "Quantity",
      "parent": "https://triplydb.com/.well-known/genid/367f1b4937935f503a0c1d349905a376"
    },
    "QuantityKind": {
      "category": "class",
      "label": "Quantity Kind",
      "parent": "https://triplydb.com/.well-known/genid/0c6459bf373f16c0b6c9c620cdc609ca"
    },
    "QuantityKindDimensionVector": {
      "category": "class",
      "label": "Quantity Kind Dimension Vector",
      "parent": "https://triplydb.com/.well-known/genid/1ac7720fe5439ef8688dc5c89aacfccb"
    },
    "QuantityKindDimensionVector_CGS": {
      "category": "class",
      "label": "CGS Dimension vector",
      "parent": "qudt:QuantityKindDimensionVector"
    },
    "QuantityKindDimensionVector_CGS-EMU": {
      "category": "class",
      "label": "CGS EMU Dimension vector",
      "parent": "qudt:QuantityKindDimensionVector_CGS"
    },
    "QuantityKindDimensionVector_CGS-ESU": {
      "category": "class",
      "label": "CGS ESU Dimension vector",
      "parent": "qudt:QuantityKindDimensionVector_CGS"
    },
    "QuantityKindDimensionVector_CGS-GAUSS": {
      "category": "class",
      "label": "CGS GAUSS Dimension vector",
      "parent": "qudt:QuantityKindDimensionVector_CGS"
    },
    "QuantityKindDimensionVector_CGS-LH": {
      "category": "class",
      "label": "CGS LH Dimension vector",
      "parent": "qudt:QuantityKindDimensionVector_CGS"
    },
    "QuantityKindDimensionVector_ISO": {
      "category": "class",
      "label": "ISO Dimension vector",
      "parent": "qudt:QuantityKindDimensionVector"
    },
    "QuantityKindDimensionVector_Imperial": {
      "category": "class",
      "label": "Imperial dimension vector",
      "parent": "qudt:QuantityKindDimensionVector"
    },
    "QuantityKindDimensionVector_SI": {
      "category": "class",
      "label": "Quantity Kind Dimension vector (SI)",
      "parent": "qudt:QuantityKindDimensionVector"
    },
    "QuantityType": {
      "category": "class",
      "label": "Quantity type",
      "parent": "https://triplydb.com/.well-known/genid/38862538f61ad0802d037b3484f12994",
      "description": "\\(\\textit{Quantity Type}\\) is an enumeration of quanity kinds. It specializes \\(\\boxed{dtype:EnumeratedValue}\\) by constrinaing \\(\\boxed{dtype:value}\\) to instances of \\(\\boxed{qudt:QuantityKind}\\)."
    },
    "QuantityValue": {
      "category": "class",
      "label": "Quantity value",
      "parent": "https://triplydb.com/.well-known/genid/09b851ef909e1a6a41d57836b010b1d8"
    },
    "RatioScale": {
      "category": "class",
      "label": "Ratio scale",
      "parent": "qudt:Scale"
    },
    "Rule": {
      "category": "class",
      "label": "Rule",
      "parent": "https://triplydb.com/.well-known/genid/3f5d590b3566176fc6d436649660faa3"
    },
    "RuleType": {
      "category": "class",
      "label": "Rule Type",
      "parent": "qudt:EnumeratedValue"
    },
    "SIGNED": {
      "category": "instance",
      "label": "Signed"
    },
    "ScalarDatatype": {
      "category": "class",
      "label": "Scalar Datatype",
      "parent": "https://triplydb.com/.well-known/genid/18c61b2bb7bd80b4d8f14a7b062dbe94",
      "description": "Scalar data types are those that have a single value. The permissible values are defined over a domain that may be integers, float, character or boolean. Often a scalar data type is referred to as a primitive data type."
    },
    "Scale": {
      "category": "class",
      "label": "Scale",
      "parent": "https://triplydb.com/.well-known/genid/0a902525f68b845d849e361818b55388"
    },
    "ScaleType": {
      "category": "class",
      "label": "Scale type",
      "parent": "https://triplydb.com/.well-known/genid/3f460f7bc38b27d18277dcc262510654"
    },
    "ShortSignedIntegerEncoding": {
      "category": "instance",
      "label": "Short Signed Integer Encoding"
    },
    "ShortUnsignedIntegerEncoding": {
      "category": "instance",
      "label": "Short Unsigned Integer Encoding"
    },
    "SignedIntegerEncoding": {
      "category": "instance",
      "label": "Signed Integer Encoding"
    },
    "SignednessType": {
      "category": "class",
      "label": "Signedness type",
      "parent": "qudt:EnumeratedValue",
      "description": "Specifics whether a value should be signed or unsigned."
    },
    "SinglePrecisionRealEncoding": {
      "category": "instance",
      "label": "Single Precision Real Encoding"
    },
    "SolidAngleUnit": {
      "category": "class",
      "label": "Solid Angle Unit",
      "parent": "qudt:AngleUnit",
      "description": "The solid angle subtended by a surface S is defined as the surface area of a unit sphere covered by the surface S's projection onto the sphere. A solid angle is related to the surface of a sphere in the same way an ordinary angle is related to the circumference of a circle. Since the total surface area of the unit sphere is 4*pi, the measure of solid angle will always be between 0 and 4*pi."
    },
    "Statement": {
      "category": "class",
      "label": "Statement",
      "parent": "http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement"
    },
    "StringEncodingType": {
      "category": "class",
      "label": "String Encoding Type",
      "parent": "qudt:Encoding",
      "description": "A \"Encoding\" with the following instance(s): \"UTF-16 String\", \"UTF-8 Encoding\"."
    },
    "StructuredDatatype": {
      "category": "class",
      "label": "Structured Data Type",
      "parent": "https://triplydb.com/.well-known/genid/5b96d2532593a5ee30cdfc81f3430c6c",
      "description": "A \"Structured Datatype\", in contrast to scalar data types, is used to characterize classes of more complex data structures, such as linked or indexed lists, trees, ordered trees, and multi-dimensional file formats."
    },
    "Symbol": {
      "category": "class",
      "label": "Symbol",
      "parent": "qudt:Concept"
    },
    "SystemOfQuantityKinds": {
      "category": "class",
      "label": "System of Quantity Kinds",
      "parent": "https://triplydb.com/.well-known/genid/1ae165e92c83a57c46b8837b26448536"
    },
    "SystemOfUnits": {
      "category": "class",
      "label": "System of Units",
      "parent": "https://triplydb.com/.well-known/genid/34b17eefb0ecfe1683bb274146d74dc0"
    },
    "TotallyOrdered": {
      "category": "instance",
      "label": "Totally Ordered"
    },
    "TransformType": {
      "category": "class",
      "label": "Transform type",
      "parent": "qudt:EnumeratedValue"
    },
    "UCUMci": {
      "category": "datatype",
      "label": "case-insensitive UCUM code",
      "parent": "http://www.w3.org/2000/01/rdf-schema#Resource",
      "description": "Lexical pattern for the case-insensitive version of UCUM code"
    },
    "UCUMci-term": {
      "category": "datatype",
      "label": "case-insensitive UCUM term",
      "parent": "http://www.w3.org/2000/01/rdf-schema#Resource",
      "description": "Lexical pattern for the terminal symbols in the case-insensitive version of UCUM code"
    },
    "UCUMcs": {
      "category": "datatype",
      "label": "case-sensitive UCUM code",
      "parent": "http://www.w3.org/2000/01/rdf-schema#Resource",
      "description": "Lexical pattern for the case-sensitive version of UCUM code"
    },
    "UCUMcs-term": {
      "category": "datatype",
      "label": "case-sensitive UCUM terminal",
      "parent": "http://www.w3.org/2000/01/rdf-schema#Resource",
      "description": "Lexical pattern for the terminal symbols in the case-sensitive version of UCUM code"
    },
    "UNSIGNED": {
      "category": "instance",
      "label": "Unsigned"
    },
    "UTF16-StringEncoding": {
      "category": "instance",
      "label": "UTF-16 String"
    },
    "UTF8-StringEncoding": {
      "category": "instance",
      "label": "UTF-8 Encoding"
    },
    "Unit": {
      "category": "class",
      "label": "Unit",
      "parent": "https://triplydb.com/.well-known/genid/07eee89b65875cb28e78d9690dde64ba",
      "description": "A unit of measure, or unit, is a particular quantity value that has been chosen as a scale for measuring other quantities the same kind (more generally of equivalent dimension). For example, the meter is a quantity of length that has been rigorously defined and standardized by the BIPM (International Board of Weights and Measures). Any measurement of the length can be expressed as a number multiplied by the unit meter. More formally, the value of a physical quantity Q with respect to a unit (U) is expressed as the scalar multiple of a real number (n) and U, as  \\(Q = nU\\)."
    },
    "Unordered": {
      "category": "instance",
      "label": "Unordered"
    },
    "UnsignedIntegerEncoding": {
      "category": "instance",
      "label": "Unsigned Integer Encoding"
    },
    "UserQuantityKind": {
      "category": "class",
      "label": "User Quantity Kind",
      "parent": "https://triplydb.com/.well-known/genid/7b2ee07f9f766f46dc2e743205c35cd3"
    },
    "Verifiable": {
      "category": "class",
      "label": "Verifiable",
      "parent": "https://triplydb.com/.well-known/genid/625a68790a5855da95f51870eb0391ea",
      "description": "An aspect class that holds properties that provide external knowledge and specifications of a given resource."
    },
    "Wikipedia": {
      "category": "instance",
      "label": "Wikipedia"
    },
    "abbreviation": {
      "category": "property",
      "label": "abbreviation",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "acronym": {
      "category": "property",
      "label": "acronym",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "allowedPattern": {
      "category": "property",
      "label": "allowed pattern"
    },
    "allowedUnitOfSystem": {
      "category": "property",
      "label": "allowed unit of system",
      "parent": "qudt:unitOfSystem"
    },
    "ansiSQLName": {
      "category": "property",
      "label": "ANSI SQL Name",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "applicableCGSUnit": {
      "category": "property",
      "label": "applicable CGS unit",
      "parent": "qudt:applicableUnit",
      "range": "qudt:Unit"
    },
    "applicableISOUnit": {
      "category": "property",
      "label": "applicable ISO unit",
      "parent": "qudt:applicableUnit",
      "range": "qudt:Unit"
    },
    "applicableImperialUnit": {
      "category": "property",
      "label": "applicable Imperial unit",
      "parent": "qudt:applicableUnit",
      "range": "qudt:Unit"
    },
    "applicablePhysicalConstant": {
      "category": "property",
      "label": "applicable physical constant"
    },
    "applicablePlanckUnit": {
      "category": "property",
      "label": "applicable Planck unit",
      "parent": "qudt:applicableUnit",
      "range": "qudt:Unit"
    },
    "applicableSIUnit": {
      "category": "property",
      "label": "applicable SI unit",
      "parent": "qudt:applicableUnit",
      "range": "qudt:Unit"
    },
    "applicableUSCustomaryUnit": {
      "category": "property",
      "label": "applicable US Customary unit",
      "parent": "qudt:applicableUnit",
      "range": "qudt:Unit"
    },
    "applicableUnit": {
      "category": "property",
      "label": "applicable unit",
      "range": "qudt:Unit"
    },
    "baseDimensionEnumeration": {
      "category": "property",
      "label": "base dimension enumeration",
      "range": "qudt:Enumeration"
    },
    "baseUnitOfSystem": {
      "category": "property",
      "label": "is base unit of system",
      "parent": "qudt:coherentUnitOfSystem"
    },
    "basis": {
      "category": "property",
      "label": "basis"
    },
    "belongsToSystemOfQuantities": {
      "category": "property",
      "label": "belongs to system of quantities",
      "domain": "qudt:QuantityKind",
      "range": "qudt:SystemOfQuantityKinds"
    },
    "bitOrder": {
      "category": "property",
      "label": "bit order",
      "range": "qudt:EndianType"
    },
    "bits": {
      "category": "property",
      "label": "bits",
      "range": "http://www.w3.org/2001/XMLSchema#integer"
    },
    "bounded": {
      "category": "property",
      "label": "bounded"
    },
    "byteOrder": {
      "category": "property",
      "label": "byte order",
      "range": "qudt:EndianType",
      "description": "Byte order is an enumeration of two values: 'Big Endian' and 'Little Endian' and is used to denote whether the most signiticant byte is either first or last, respectively."
    },
    "bytes": {
      "category": "property",
      "label": "bytes",
      "range": "http://www.w3.org/2001/XMLSchema#integer"
    },
    "cName": {
      "category": "property",
      "label": "C Language name",
      "range": "http://www.w3.org/2001/XMLSchema#string",
      "description": "Datatype name in the C programming language"
    },
    "cardinality": {
      "category": "property",
      "label": "cardinality"
    },
    "categorizedAs": {
      "category": "property",
      "label": "categorized as"
    },
    "citation": {
      "category": "property",
      "label": "citation",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "code": {
      "category": "property",
      "label": "code",
      "domain": "qudt:Concept"
    },
    "coherentUnitOfSystem": {
      "category": "property",
      "label": "is coherent unit of system",
      "parent": "qudt:definedUnitOfSystem",
      "range": "qudt:SystemOfUnits",
      "description": "A coherent unit of measurement for a unit system is a defined unit that may be expressed as a product of powers of the system's base units with the proportionality factor of one. A system of units is coherent with respect to a system of quantities and equations if the system of units is chosen in such a way that the equations between numerical values have exactly the same form (including the numerical factors) as the corresponding equations between the quantities. For example, the 'newton' and the 'joule'. These two are, respectively, the force that causes one kilogram to be accelerated at 1 metre per second per  second, and the work done by 1 newton acting over 1 metre. Being coherent refers to this consistent use of 1. In the old c.g.s. system , with its base units the centimetre and the gram, the corresponding coherent units were the dyne and the erg, respectively the force that causes 1 gram to be accelerated at 1 centimetre per second per second, and the work done by 1 dyne acting over 1 centimetre. So \\(1 newton = 10^5\\,dyne\\), \\(1 joule = 10^7\\,erg\\), making each of the four compatible in a decimal sense within its respective other system, but not coherent therein."
    },
    "coherentUnitSystem": {
      "category": "property",
      "label": "coherent unit system",
      "parent": "qudt:hasUnitSystem",
      "description": "<p>A system of units is coherent with respect to a system of quantities and equations if the system of units is chosen in such a way that the equations between numerical values have exactly the same form (including the numerical factors) as the corresponding equations between the quantities. In such a coherent system, no numerical factor other than the number 1 ever occurs in the expressions for the derived units in terms of the base units. For example, the \\(newton\\) and the \\(joule\\). These two are, respectively, the force that causes one kilogram to be accelerated at 1 metre per (1) second per (1) second, and the work done by 1 newton acting over 1 metre. Being coherent refers to this consistent use of 1. In the old c.g.s. system , with its base units the centimetre and the gram, the corresponding coherent units were the dyne and the erg, respectively the force that causes 1 gram to be accelerated at 1 centimetre per (1) second per (1) second, and the work done by 1 dyne acting over 1 centimetre. So \\(1\\,newton = 10^5 dyne\\), \\(1 joule = 10^7 erg\\), making each of the four compatible in a decimal sense within its respective other system, but not coherent therein.</p>"
    },
    "conversionCoefficient": {
      "category": "property",
      "label": "conversion coefficient",
      "range": "http://www.w3.org/2001/XMLSchema#double"
    },
    "conversionMultiplier": {
      "category": "property",
      "label": "conversion multiplier",
      "range": "http://www.linkedmodel.org/schema/dtype#numericUnion"
    },
    "conversionOffset": {
      "category": "property",
      "label": "conversion offset",
      "range": "http://www.linkedmodel.org/schema/dtype#numericUnion"
    },
    "currencyCode": {
      "category": "property",
      "label": "currency code",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "currencyExponent": {
      "category": "property",
      "label": "currency exponent",
      "range": "http://www.w3.org/2001/XMLSchema#integer"
    },
    "currencyNumber": {
      "category": "property",
      "label": "currency number",
      "range": "http://www.w3.org/2001/XMLSchema#positiveInteger"
    },
    "dataEncoding": {
      "category": "property",
      "label": "data encoding",
      "range": "qudt:DataEncoding"
    },
    "dataStructure": {
      "category": "property",
      "label": "data structure",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "dataType": {
      "category": "property",
      "label": "datatype"
    },
    "dbpediaMatch": {
      "category": "property",
      "label": "dbpedia match",
      "range": "http://www.w3.org/2001/XMLSchema#anyURI"
    },
    "default": {
      "category": "property",
      "label": "default"
    },
    "definedUnitOfSystem": {
      "category": "property",
      "label": "defined unit of system",
      "parent": "qudt:unitOfSystem"
    },
    "denominatorDimensionVector": {
      "category": "property",
      "label": "denominator dimension vector",
      "range": "qudt:QuantityKindDimensionVector"
    },
    "derivedCoherentUnitOfSystem": {
      "category": "property",
      "label": "is coherent derived unit of system",
      "parent": "qudt:coherentUnitOfSystem"
    },
    "derivedNonCoherentUnitOfSystem": {
      "category": "property",
      "label": "is non-coherent derived unit of system",
      "parent": "qudt:derivedUnitOfSystem",
      "range": "qudt:SystemOfUnits"
    },
    "derivedQuantityKindOfSystem": {
      "category": "property",
      "label": "derived quantity kind of system",
      "parent": "qudt:isQuantityKindOf"
    },
    "derivedUnitOfSystem": {
      "category": "property",
      "label": "is derived unit of system",
      "parent": "qudt:unitOfSystem"
    },
    "dimensionExponent": {
      "category": "property",
      "label": "dimension exponent"
    },
    "dimensionExponentForAmountOfSubstance": {
      "category": "property",
      "label": "dimension exponent for amount of substance"
    },
    "dimensionExponentForElectricCurrent": {
      "category": "property",
      "label": "dimension exponent for electric current"
    },
    "dimensionExponentForLength": {
      "category": "property",
      "label": "dimension exponent for length"
    },
    "dimensionExponentForLuminousIntensity": {
      "category": "property",
      "label": "dimension exponent for luminous intensity"
    },
    "dimensionExponentForMass": {
      "category": "property",
      "label": "dimension exponent for mass"
    },
    "dimensionExponentForThermodynamicTemperature": {
      "category": "property",
      "label": "dimension exponent for thermodynamic temperature"
    },
    "dimensionExponentForTime": {
      "category": "property",
      "label": "dimension exponent for time"
    },
    "dimensionInverse": {
      "category": "property",
      "label": "dimension inverse"
    },
    "dimensionVectorForSI": {
      "category": "property",
      "label": "dimension vector for SI",
      "range": "qudt:QuantityKindDimensionVector_SI"
    },
    "dimensionlessExponent": {
      "category": "property",
      "label": "dimensionless exponent"
    },
    "element": {
      "category": "property",
      "label": "element"
    },
    "elementKind": {
      "category": "property",
      "label": "element kind"
    },
    "elementType": {
      "category": "property",
      "label": "element type"
    },
    "encoding": {
      "category": "property",
      "label": "encoding"
    },
    "enumeratedValue": {
      "category": "property",
      "label": "enumerated value",
      "range": "qudt:EnumeratedValue"
    },
    "enumeration": {
      "category": "property",
      "label": "enumeration",
      "range": "qudt:Enumeration"
    },
    "exactConstant": {
      "category": "property",
      "label": "exact constant",
      "range": "http://www.w3.org/2001/XMLSchema#boolean"
    },
    "exactMatch": {
      "category": "property",
      "label": "exact match",
      "parent": "http://www.w3.org/2002/07/owl#sameAs",
      "range": "qudt:Unit"
    },
    "example": {
      "category": "property",
      "label": "example"
    },
    "expression": {
      "category": "property",
      "label": "expression"
    },
    "fieldCode": {
      "category": "property",
      "label": "field code",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "figure": {
      "category": "property",
      "label": "figure",
      "range": "qudt:Figure"
    },
    "figureCaption": {
      "category": "property",
      "label": "figure caption",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "figureLabel": {
      "category": "property",
      "label": "figure label",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "floatPercentage": {
      "category": "datatype",
      "label": "float percentage",
      "parent": "http://www.w3.org/2001/XMLSchema#float"
    },
    "generalization": {
      "category": "property",
      "label": "generalization"
    },
    "guidance": {
      "category": "property",
      "label": "guidance",
      "domain": "qudt:Concept",
      "range": "http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML"
    },
    "hasAllowedUnit": {
      "category": "property",
      "label": "allowed unit",
      "parent": "qudt:hasUnit"
    },
    "hasBaseQuantityKind": {
      "category": "property",
      "label": "has base quantity kind",
      "parent": "qudt:hasQuantityKind"
    },
    "hasBaseUnit": {
      "category": "property",
      "label": "base unit",
      "parent": "qudt:hasCoherentUnit"
    },
    "hasCoherentUnit": {
      "category": "property",
      "label": "coherent unit",
      "parent": "qudt:hasDefinedUnit"
    },
    "hasDefinedUnit": {
      "category": "property",
      "label": "defined unit",
      "parent": "qudt:hasUnit"
    },
    "hasDenominatorPart": {
      "category": "property",
      "label": "has quantity kind dimension vector denominator part"
    },
    "hasDerivedCoherentUnit": {
      "category": "property",
      "label": "derived coherent unit",
      "parent": "qudt:hasCoherentUnit"
    },
    "hasDerivedNonCoherentUnit": {
      "category": "property",
      "label": "has coherent derived unit",
      "parent": "qudt:hasDerivedUnit"
    },
    "hasDerivedUnit": {
      "category": "property",
      "label": "derived unit"
    },
    "hasDimension": {
      "category": "property",
      "label": "has dimension"
    },
    "hasDimensionExpression": {
      "category": "property",
      "label": "dimension expression"
    },
    "hasDimensionVector": {
      "category": "property",
      "label": "has dimension vector",
      "range": "qudt:QuantityKindDimensionVector"
    },
    "hasNonCoherentUnit": {
      "category": "property",
      "label": "has non-coherent unit",
      "parent": "qudt:hasDefinedUnit"
    },
    "hasNumeratorPart": {
      "category": "property",
      "label": "has quantity kind dimension vector numerator part"
    },
    "hasPrefixUnit": {
      "category": "property",
      "label": "prefix unit",
      "parent": "qudt:hasDefinedUnit"
    },
    "hasQuantity": {
      "category": "property",
      "label": "has quantity",
      "range": "qudt:Quantity"
    },
    "hasQuantityKind": {
      "category": "property",
      "label": "has quantity kind",
      "range": "qudt:QuantityKind"
    },
    "hasReferenceQuantityKind": {
      "category": "property",
      "label": "has reference quantity kind"
    },
    "hasRule": {
      "category": "property",
      "label": "has rule"
    },
    "hasUnit": {
      "category": "property",
      "label": "has unit"
    },
    "hasUnitSystem": {
      "category": "property",
      "label": "has unit system"
    },
    "hasVocabulary": {
      "category": "property",
      "label": "has vocabulary",
      "range": "http://www.w3.org/2002/07/owl#Ontology"
    },
    "height": {
      "category": "property",
      "label": "height",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "id": {
      "category": "property",
      "label": "qudt id",
      "domain": "qudt:Concept",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "iec61360Code": {
      "category": "property",
      "label": "iec-61360 code",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "image": {
      "category": "property",
      "label": "image",
      "range": "http://www.w3.org/2001/XMLSchema#anyURI"
    },
    "imageLocation": {
      "category": "property",
      "label": "image location",
      "range": "http://www.w3.org/2001/XMLSchema#anyURI"
    },
    "informativeReference": {
      "category": "property",
      "label": "informative reference",
      "range": "http://www.w3.org/2001/XMLSchema#anyURI"
    },
    "integerPercentage": {
      "category": "datatype",
      "label": "integer percentage",
      "parent": "http://www.w3.org/2001/XMLSchema#integer"
    },
    "isBaseQuantityKindOfSystem": {
      "category": "property",
      "label": "is base quantity kind of system",
      "parent": "qudt:isQuantityKindOf"
    },
    "isDeltaQuantity": {
      "category": "property",
      "label": "is Delta Quantity",
      "range": "http://www.w3.org/2001/XMLSchema#boolean",
      "description": "This property is used to identify a Quantity instance that is a measure of a change, or interval, of some property, rather than a measure of its absolute value. This is important for measurements such as temperature differences where the conversion among units would be calculated differently because of offsets."
    },
    "isDimensionInSystem": {
      "category": "property",
      "label": "is dimension in system"
    },
    "isMetricUnit": {
      "category": "property",
      "label": "is metric unit",
      "range": "http://www.w3.org/2001/XMLSchema#boolean"
    },
    "isQuantityKindOf": {
      "category": "property",
      "label": "is quantity kind of"
    },
    "isoNormativeReference": {
      "category": "property",
      "label": "normative reference (ISO)",
      "parent": "qudt:normativeReference",
      "range": "http://www.w3.org/2001/XMLSchema#anyURI"
    },
    "javaName": {
      "category": "property",
      "label": "java name",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "jsName": {
      "category": "property",
      "label": "Javascript name",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "landscape": {
      "category": "property",
      "label": "landscape",
      "range": "http://www.w3.org/2001/XMLSchema#boolean"
    },
    "latexDefinition": {
      "category": "property",
      "label": "latex definition",
      "range": "qudt:LatexString"
    },
    "latexSymbol": {
      "category": "property",
      "label": "latex symbol",
      "range": "qudt:LatexString",
      "description": "The symbol is a glyph that is used to represent some concept, typically a unit or a quantity, in a compact form. For example, the symbol for an Ohm is \\(ohm\\). This contrasts with 'unit:abbreviation', which gives a short alphanumeric abbreviation for the unit, 'ohm' for Ohm."
    },
    "length": {
      "category": "property",
      "label": "length",
      "range": "http://www.w3.org/2001/XMLSchema#integer"
    },
    "literal": {
      "category": "property",
      "label": "literal",
      "parent": "http://www.linkedmodel.org/schema/dtype#literal",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "lowerBound": {
      "category": "property",
      "label": "lower bound"
    },
    "mathDefinition": {
      "category": "property",
      "label": "math definition",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "mathMLdefinition": {
      "category": "property",
      "label": "mathML definition",
      "parent": "qudt:mathDefinition",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "matlabName": {
      "category": "property",
      "label": "matlab name",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "maxExclusive": {
      "category": "property",
      "label": "max exclusive",
      "parent": "qudt:upperBound",
      "range": "http://www.w3.org/2001/XMLSchema#string",
      "description": "maxExclusive is the exclusive upper bound of the value space for a datatype with the ordered property. The value of maxExclusive must be in the value space of the base type or be equal to {value} in {base type definition}."
    },
    "maxInclusive": {
      "category": "property",
      "label": "max inclusive",
      "parent": "qudt:upperBound",
      "description": "maxInclusive is the inclusive upper bound of the value space for a datatype with the ordered property. The value of maxInclusive must be in the value space of the base type."
    },
    "microsoftSQLServerName": {
      "category": "property",
      "label": "Microsoft SQL Server name",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "minExclusive": {
      "category": "property",
      "label": "min exclusive",
      "parent": "qudt:lowerBound",
      "description": "minExclusive is the exclusive lower bound of the value space for a datatype with the ordered property. The value of minExclusive must be in the value space of the base type or be equal to {value} in {base type definition}."
    },
    "minInclusive": {
      "category": "property",
      "label": "min inclusive",
      "parent": "qudt:lowerBound",
      "description": "minInclusive is the inclusive lower bound of the value space for a datatype with the ordered property. The value of minInclusive must be in the value space of the base type."
    },
    "mySQLName": {
      "category": "property",
      "label": "MySQL name",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "negativeDeltaLimit": {
      "category": "property",
      "label": "negative delta limit",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "normativeReference": {
      "category": "property",
      "label": "normative reference",
      "range": "http://www.w3.org/2001/XMLSchema#anyURI"
    },
    "numeratorDimensionVector": {
      "category": "property",
      "label": "numerator dimension vector",
      "range": "qudt:QuantityKindDimensionVector"
    },
    "numericValue": {
      "category": "property",
      "label": "numeric value",
      "range": "qudt:NumericUnion"
    },
    "odbcName": {
      "category": "property",
      "label": "ODBC name",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "oleDBName": {
      "category": "property",
      "label": "OLE DB name",
      "range": "http://www.w3.org/2001/XMLSchema#string",
      "description": "OLE DB (Object Linking and Embedding, Database, sometimes written as OLEDB or OLE-DB), an API designed by Microsoft, allows accessing data from a variety of sources in a uniform manner. The API provides a set of interfaces implemented using the Component Object Model (COM); it is otherwise unrelated to OLE. "
    },
    "omUnit": {
      "category": "property",
      "label": "om unit",
      "domain": "qudt:Unit"
    },
    "onlineReference": {
      "category": "property",
      "label": "online reference",
      "range": "http://www.w3.org/2001/XMLSchema#anyURI"
    },
    "oracleSQLName": {
      "category": "property",
      "label": "ORACLE SQL name",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "order": {
      "category": "property",
      "label": "order",
      "range": "http://www.w3.org/2001/XMLSchema#nonNegativeInteger"
    },
    "orderedType": {
      "category": "property",
      "label": "ordered type"
    },
    "outOfScope": {
      "category": "property",
      "label": "out of scope",
      "range": "http://www.w3.org/2001/XMLSchema#boolean"
    },
    "permissibleMaths": {
      "category": "property",
      "label": "permissible maths"
    },
    "permissibleTransformation": {
      "category": "property",
      "label": "permissible transformation"
    },
    "plainTextDescription": {
      "category": "property",
      "label": "description (plain text)",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "positiveDeltaLimit": {
      "category": "property",
      "label": "Positive delta limit",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "prefix": {
      "category": "property",
      "label": "prefix",
      "range": "qudt:Prefix",
      "description": "Associates a unit with the appropriate prefix, if any."
    },
    "prefixMultiplier": {
      "category": "property",
      "label": "prefix multiplier",
      "range": "http://www.w3.org/2001/XMLSchema#double"
    },
    "protocolBuffersName": {
      "category": "property",
      "label": "protocol buffers name",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "pythonName": {
      "category": "property",
      "label": "python name",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "qkdvDenominator": {
      "category": "property",
      "label": "denominator dimension vector",
      "range": "qudt:QuantityKindDimensionVector"
    },
    "qkdvNumerator": {
      "category": "property",
      "label": "numerator dimension vector",
      "range": "qudt:QuantityKindDimensionVector"
    },
    "quantity": {
      "category": "property",
      "label": "quantity"
    },
    "quantityValue": {
      "category": "property",
      "label": "quantity value",
      "range": "qudt:QuantityValue"
    },
    "rationale": {
      "category": "property",
      "label": "rationale",
      "range": "http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML"
    },
    "rdfsDatatype": {
      "category": "property",
      "label": "rdfs datatype"
    },
    "reference": {
      "category": "property",
      "label": "reference"
    },
    "referenceUnit": {
      "category": "property",
      "label": "reference unit"
    },
    "relativeStandardUncertainty": {
      "category": "property",
      "label": "relative standard uncertainty",
      "range": "http://www.w3.org/2001/XMLSchema#double"
    },
    "relevantQuantityKind": {
      "category": "property",
      "label": "relevant quantity kind",
      "range": "qudt:QuantityKind"
    },
    "relevantUnit": {
      "category": "property",
      "label": "Relevant Unit",
      "range": "qudt:Unit",
      "description": "This property is used for qudt:Discipline instances to identify the Unit instances that are used within a given discipline."
    },
    "ruleType": {
      "category": "property",
      "label": "rule type"
    },
    "scaleType": {
      "category": "property",
      "label": "scale type"
    },
    "siUnitsExpression": {
      "category": "property",
      "label": "si units expression",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "specialization": {
      "category": "property",
      "label": "specialization"
    },
    "standardUncertainty": {
      "category": "property",
      "label": "standard uncertainty",
      "range": "http://www.w3.org/2001/XMLSchema#double"
    },
    "supercededBy": {
      "category": "property",
      "label": "superceded by"
    },
    "symbol": {
      "category": "property",
      "label": "symbol",
      "parent": "qudt:literal",
      "description": "The symbol is a glyph that is used to represent some concept, typically a unit or a quantity, in a compact form. For example, the symbol for an Ohm is \\(ohm\\). This contrasts with 'unit:abbreviation', which gives a short alphanumeric abbreviation for the unit, 'ohm' for Ohm."
    },
    "systemDefinition": {
      "category": "property",
      "label": "system definition"
    },
    "systemDerivedQuantityKind": {
      "category": "property",
      "label": "system derived quantity kind",
      "parent": "qudt:hasQuantityKind"
    },
    "systemDimension": {
      "category": "property",
      "label": "system dimension"
    },
    "ucumCaseInsensitiveCode": {
      "category": "property",
      "label": "ucum case-insensitive code",
      "parent": "qudt:ucumCode"
    },
    "ucumCaseSensitiveCode": {
      "category": "property",
      "label": "ucum case-sensitive code",
      "parent": "qudt:ucumCode"
    },
    "ucumCode": {
      "category": "property",
      "label": "ucum code",
      "parent": "http://www.w3.org/2004/02/skos/core#notation",
      "range": "qudt:UCUMcs or qudt:UCUMcs-term"
    },
    "udunitsCode": {
      "category": "property",
      "label": "udunits code",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "uneceCommonCode": {
      "category": "property",
      "label": "unece common code",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "unit": {
      "category": "property",
      "label": "unit",
      "range": "qudt:Unit"
    },
    "unitFor": {
      "category": "property",
      "label": "unit for"
    },
    "unitOfSystem": {
      "category": "property",
      "label": "is unit of system",
      "domain": "qudt:Unit",
      "range": "qudt:SystemOfUnits"
    },
    "upperBound": {
      "category": "property",
      "label": "upper bound",
      "range": "http://www.w3.org/2001/XMLSchema#anySimpleType"
    },
    "url": {
      "category": "property",
      "label": "url",
      "range": "http://www.w3.org/2001/XMLSchema#anyURI"
    },
    "value": {
      "category": "property",
      "label": "value"
    },
    "valueQuantity": {
      "category": "property",
      "label": "value for quantity"
    },
    "valueUnion": {
      "category": "datatype",
      "label": "value union",
      "parent": "http://www.w3.org/2000/01/rdf-schema#Resource",
      "description": "A datatype that is the union of numeric xsd data types. \"numericUnion\" is equivalent to the xsd specification that uses an xsd:union of memberTypes=\"xsd:decimal xsd:double xsd:float xsd:integer\"."
    },
    "vbName": {
      "category": "property",
      "label": "Vusal Basic name",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    },
    "vectorMagnitude": {
      "category": "property",
      "label": "vector magnitude",
      "range": "http://www.w3.org/2001/XMLSchema#float"
    },
    "width": {
      "category": "property",
      "label": "width",
      "range": "http://www.w3.org/2001/XMLSchema#string"
    }
  }
}
