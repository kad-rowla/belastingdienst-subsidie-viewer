/**
 * Brick: A uniform metadata schema for buildings
 * brick.ts (2023-08-08T17:30:07.967Z)
 */
import VocabularyBase from '../../Classes/Vocabulary.js';
class Vocabulary extends VocabularyBase {
    /**
     * **[brick:AED](https://brickschema.org/schema/Brick#AED)**
     *
     * @type        class
     * @parent      brick:Safety_Equipment
     */
    AED = this.toIri().concat('AED');
    /**
     * **[brick:AHU](https://brickschema.org/schema/Brick#AHU)**
     *
     * Assembly consisting of sections containing a fan or fans and other necessary equipment to perform one or more of the following functions: circulating, filtration, heating, cooling, heat recovery, humidifying, dehumidifying, and mixing of air. Is usually connected to an air-distribution system.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    AHU = this.toIri().concat('AHU');
    /**
     * **[brick:Ablutions_Room](https://brickschema.org/schema/Brick#Ablutions_Room)**
     *
     * A room for performing cleansing rituals before prayer
     *
     * @type        class
     * @parent      brick:Room
     */
    Ablutions_Room = this.toIri().concat('Ablutions_Room');
    /**
     * **[brick:Absolute_Humidity](https://brickschema.org/schema/Brick#Absolute_Humidity)**
     *
     * @type        instance
     */
    Absolute_Humidity = this.toIri().concat('Absolute_Humidity');
    /**
     * **[brick:Absorption_Chiller](https://brickschema.org/schema/Brick#Absorption_Chiller)**
     *
     * A chiller that utilizes a thermal or/and chemical process to produce the refrigeration effect necessary to provide chilled water. There is no mechanical compression of the refrigerant taking place within the machine, as occurs within more traditional vapor compression type chillers.
     *
     * @type        class
     * @parent      brick:Chiller
     */
    Absorption_Chiller = this.toIri().concat('Absorption_Chiller');
    /**
     * **[brick:Acceleration_Time](https://brickschema.org/schema/Brick#Acceleration_Time)**
     *
     * @type        instance
     */
    Acceleration_Time = this.toIri().concat('Acceleration_Time');
    /**
     * **[brick:Acceleration_Time_Setpoint](https://brickschema.org/schema/Brick#Acceleration_Time_Setpoint)**
     *
     * @type        class
     * @parent      brick:Time_Setpoint
     */
    Acceleration_Time_Setpoint = this.toIri().concat('Acceleration_Time_Setpoint');
    /**
     * **[brick:Access_Control_Equipment](https://brickschema.org/schema/Brick#Access_Control_Equipment)**
     *
     * @type        class
     * @parent      brick:Security_Equipment
     */
    Access_Control_Equipment = this.toIri().concat('Access_Control_Equipment');
    /**
     * **[brick:Access_Reader](https://brickschema.org/schema/Brick#Access_Reader)**
     *
     * @type        class
     * @parent      brick:Access_Control_Equipment
     */
    Access_Reader = this.toIri().concat('Access_Reader');
    /**
     * **[brick:Active_Energy](https://brickschema.org/schema/Brick#Active_Energy)**
     *
     * The integral of the active power over a time interval
     *
     * @type        instance
     */
    Active_Energy = this.toIri().concat('Active_Energy');
    /**
     * **[brick:Active_Power](https://brickschema.org/schema/Brick#Active_Power)**
     *
     * (Active Power) is, under periodic conditions, the mean value, taken over one period (T), of the instantaneous power (p). In complex notation, (P = Re \; S), where (S) is (complex power)".
     *
     * @type        instance
     */
    Active_Power = this.toIri().concat('Active_Power');
    /**
     * **[brick:Active_Power_Sensor](https://brickschema.org/schema/Brick#Active_Power_Sensor)**
     *
     * Measures the portion of power that, averaged over a complete cycle of the AC waveform, results in net transfer of energy in one direction
     *
     * @type        class
     * @parent      brick:Electrical_Power_Sensor
     */
    Active_Power_Sensor = this.toIri().concat('Active_Power_Sensor');
    /**
     * **[brick:Adjust_Sensor](https://brickschema.org/schema/Brick#Adjust_Sensor)**
     *
     * Measures user-provided adjustment of some value
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Adjust_Sensor = this.toIri().concat('Adjust_Sensor');
    /**
     * **[brick:AggregationShape](https://brickschema.org/schema/Brick#AggregationShape)**
     *
     * @type        class
     */
    AggregationShape = this.toIri().concat('AggregationShape');
    /**
     * **[brick:Air](https://brickschema.org/schema/Brick#Air)**
     *
     * the invisible gaseous substance surrounding the earth, a mixture mainly of oxygen and nitrogen.
     *
     * @type        class
     * @parent      brick:Gas
     */
    Air = this.toIri().concat('Air');
    /**
     * **[brick:Air_Alarm](https://brickschema.org/schema/Brick#Air_Alarm)**
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Air_Alarm = this.toIri().concat('Air_Alarm');
    /**
     * **[brick:Air_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Air_Differential_Pressure_Sensor)**
     *
     * Measures the difference in pressure between two regions of air
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Sensor
     */
    Air_Differential_Pressure_Sensor = this.toIri().concat('Air_Differential_Pressure_Sensor');
    /**
     * **[brick:Air_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Air_Differential_Pressure_Setpoint)**
     *
     * Sets the target air differential pressure between an upstream and downstream point in a air duct or conduit
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint
     */
    Air_Differential_Pressure_Setpoint = this.toIri().concat('Air_Differential_Pressure_Setpoint');
    /**
     * **[brick:Air_Diffuser](https://brickschema.org/schema/Brick#Air_Diffuser)**
     *
     * A device that is a component of the air distribution system that controls the delivery of conditioned and/or ventilating air into a room
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    Air_Diffuser = this.toIri().concat('Air_Diffuser');
    /**
     * **[brick:Air_Enthalpy_Sensor](https://brickschema.org/schema/Brick#Air_Enthalpy_Sensor)**
     *
     * Measures the total heat content of air
     *
     * @type        class
     * @parent      brick:Enthalpy_Sensor
     */
    Air_Enthalpy_Sensor = this.toIri().concat('Air_Enthalpy_Sensor');
    /**
     * **[brick:Air_Flow_Deadband_Setpoint](https://brickschema.org/schema/Brick#Air_Flow_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of air flow
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint
     */
    Air_Flow_Deadband_Setpoint = this.toIri().concat('Air_Flow_Deadband_Setpoint');
    /**
     * **[brick:Air_Flow_Demand_Setpoint](https://brickschema.org/schema/Brick#Air_Flow_Demand_Setpoint)**
     *
     * Sets the rate of air flow required for a process
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint
     */
    Air_Flow_Demand_Setpoint = this.toIri().concat('Air_Flow_Demand_Setpoint');
    /**
     * **[brick:Air_Flow_Loss_Alarm](https://brickschema.org/schema/Brick#Air_Flow_Loss_Alarm)**
     *
     * An alarm that indicates loss in air flow.
     *
     * @type        class
     * @parent      brick:Air_Alarm
     */
    Air_Flow_Loss_Alarm = this.toIri().concat('Air_Flow_Loss_Alarm');
    /**
     * **[brick:Air_Flow_Sensor](https://brickschema.org/schema/Brick#Air_Flow_Sensor)**
     *
     * Measures the rate of flow of air
     *
     * @type        class
     * @parent      brick:Flow_Sensor
     */
    Air_Flow_Sensor = this.toIri().concat('Air_Flow_Sensor');
    /**
     * **[brick:Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Air_Flow_Setpoint)**
     *
     * Sets air flow
     *
     * @type        class
     * @parent      brick:Flow_Setpoint
     */
    Air_Flow_Setpoint = this.toIri().concat('Air_Flow_Setpoint');
    /**
     * **[brick:Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    Air_Flow_Setpoint_Limit = this.toIri().concat('Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Air_Grains_Sensor](https://brickschema.org/schema/Brick#Air_Grains_Sensor)**
     *
     * Measures the mass of water vapor in air
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Air_Grains_Sensor = this.toIri().concat('Air_Grains_Sensor');
    /**
     * **[brick:Air_Handler_Unit](https://brickschema.org/schema/Brick#Air_Handler_Unit)**
     *
     * Assembly consisting of sections containing a fan or fans and other necessary equipment to perform one or more of the following functions: circulating, filtration, heating, cooling, heat recovery, humidifying, dehumidifying, and mixing of air. Is usually connected to an air-distribution system.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Air_Handler_Unit = this.toIri().concat('Air_Handler_Unit');
    /**
     * **[brick:Air_Handling_Unit](https://brickschema.org/schema/Brick#Air_Handling_Unit)**
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Air_Handling_Unit = this.toIri().concat('Air_Handling_Unit');
    /**
     * **[brick:Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Air_Humidity_Setpoint)**
     *
     * @type        class
     * @parent      brick:Humidity_Setpoint
     */
    Air_Humidity_Setpoint = this.toIri().concat('Air_Humidity_Setpoint');
    /**
     * **[brick:Air_Loop](https://brickschema.org/schema/Brick#Air_Loop)**
     *
     * The set of connected equipment serving one path of air
     *
     * @type        class
     * @parent      brick:Loop
     */
    Air_Loop = this.toIri().concat('Air_Loop');
    /**
     * **[brick:Air_Plenum](https://brickschema.org/schema/Brick#Air_Plenum)**
     *
     * A component of the HVAC the receives air from the air handling unit or room to distribute or exhaust to or from the building
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Air_Plenum = this.toIri().concat('Air_Plenum');
    /**
     * **[brick:Air_Quality](https://brickschema.org/schema/Brick#Air_Quality)**
     *
     * @type        instance
     */
    Air_Quality = this.toIri().concat('Air_Quality');
    /**
     * **[brick:Air_Quality_Sensor](https://brickschema.org/schema/Brick#Air_Quality_Sensor)**
     *
     * A sensor which provides a measure of air quality
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Air_Quality_Sensor = this.toIri().concat('Air_Quality_Sensor');
    /**
     * **[brick:Air_Static_Pressure_Step_Parameter](https://brickschema.org/schema/Brick#Air_Static_Pressure_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Static_Pressure_Step_Parameter
     */
    Air_Static_Pressure_Step_Parameter = this.toIri().concat('Air_Static_Pressure_Step_Parameter');
    /**
     * **[brick:Air_System](https://brickschema.org/schema/Brick#Air_System)**
     *
     * The equipment, distribution systems and terminals that introduce or exhaust, either collectively or individually, the air into and from the building
     *
     * @type        class
     * @parent      brick:Heating_Ventilation_Air_Conditioning_System
     */
    Air_System = this.toIri().concat('Air_System');
    /**
     * **[brick:Air_Temperature_Alarm](https://brickschema.org/schema/Brick#Air_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with the temperature of air.
     *
     * @type        class
     * @parent      brick:Air_Alarm
     */
    Air_Temperature_Alarm = this.toIri().concat('Air_Temperature_Alarm');
    /**
     * **[brick:Air_Temperature_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Air_Temperature_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Integral_Time_Parameter
     */
    Air_Temperature_Integral_Time_Parameter = this.toIri().concat('Air_Temperature_Integral_Time_Parameter');
    /**
     * **[brick:Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Air_Temperature_Sensor)**
     *
     * Measures the temperature of air
     *
     * @type        class
     * @parent      brick:Temperature_Sensor
     */
    Air_Temperature_Sensor = this.toIri().concat('Air_Temperature_Sensor');
    /**
     * **[brick:Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Air_Temperature_Setpoint)**
     *
     * Sets temperature of air
     *
     * @type        class
     * @parent      brick:Temperature_Setpoint
     */
    Air_Temperature_Setpoint = this.toIri().concat('Air_Temperature_Setpoint');
    /**
     * **[brick:Air_Temperature_Setpoint_Limit](https://brickschema.org/schema/Brick#Air_Temperature_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Air_Temperature_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    Air_Temperature_Setpoint_Limit = this.toIri().concat('Air_Temperature_Setpoint_Limit');
    /**
     * **[brick:Air_Temperature_Step_Parameter](https://brickschema.org/schema/Brick#Air_Temperature_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Temperature_Step_Parameter
     */
    Air_Temperature_Step_Parameter = this.toIri().concat('Air_Temperature_Step_Parameter');
    /**
     * **[brick:Air_Wet_Bulb_Temperature_Sensor](https://brickschema.org/schema/Brick#Air_Wet_Bulb_Temperature_Sensor)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    Air_Wet_Bulb_Temperature_Sensor = this.toIri().concat('Air_Wet_Bulb_Temperature_Sensor');
    /**
     * **[brick:Alarm](https://brickschema.org/schema/Brick#Alarm)**
     *
     * Alarm points are signals (either audible or visual) that alert an operator to an off-normal condition which requires some form of corrective action
     *
     * @type        class
     * @parent      brick:Point
     */
    Alarm = this.toIri().concat('Alarm');
    /**
     * **[brick:Alarm_Delay_Parameter](https://brickschema.org/schema/Brick#Alarm_Delay_Parameter)**
     *
     * A parameter determining how long to delay an alarm after sufficient conditions have been met
     *
     * @type        class
     * @parent      brick:Delay_Parameter
     */
    Alarm_Delay_Parameter = this.toIri().concat('Alarm_Delay_Parameter');
    /**
     * **[brick:Alternating_Current_Frequency](https://brickschema.org/schema/Brick#Alternating_Current_Frequency)**
     *
     * The frequency of the oscillations of alternating current
     *
     * @type        instance
     */
    Alternating_Current_Frequency = this.toIri().concat('Alternating_Current_Frequency');
    /**
     * **[brick:Angle](https://brickschema.org/schema/Brick#Angle)**
     *
     * The inclination to each other of two intersecting lines, measured by the arc of a circle intercepted between the two lines forming the angle, the center of the circle being the point of intersection.  An acute angle is less than (90^\circ), a right angle (90^\circ); an obtuse angle, more than (90^\circ) but less than (180^\circ); a straight angle, (180^\circ); a reflex angle, more than (180^\circ) but less than (360^\circ); a perigon, (360^\circ). Any angle not a multiple of (90^\circ) is an oblique angle. If the sum of two angles is (90^\circ), they are complementary angles; if (180^\circ), supplementary angles; if (360^\circ), explementary angles.
     *
     * @type        instance
     */
    Angle = this.toIri().concat('Angle');
    /**
     * **[brick:Angle_Sensor](https://brickschema.org/schema/Brick#Angle_Sensor)**
     *
     * Measues the planar angle of some phenomenon
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Angle_Sensor = this.toIri().concat('Angle_Sensor');
    /**
     * **[brick:Apparent_Energy](https://brickschema.org/schema/Brick#Apparent_Energy)**
     *
     * The integral of the apparent power over a time interval
     *
     * @type        instance
     */
    Apparent_Energy = this.toIri().concat('Apparent_Energy');
    /**
     * **[brick:Apparent_Power](https://brickschema.org/schema/Brick#Apparent_Power)**
     *
     * Apparent Power is the product of the rms voltage (U) between the terminals of a two-terminal element or two-terminal circuit and the rms electric current I in the element or circuit. Under sinusoidal conditions, the apparent power is the modulus of the complex power.
     *
     * @type        instance
     */
    Apparent_Power = this.toIri().concat('Apparent_Power');
    /**
     * **[brick:AreaShape](https://brickschema.org/schema/Brick#AreaShape)**
     *
     * @type        class
     */
    AreaShape = this.toIri().concat('AreaShape');
    /**
     * **[brick:Atmospheric_Pressure](https://brickschema.org/schema/Brick#Atmospheric_Pressure)**
     *
     * The pressure exerted by the weight of the air above it at any point on the earth's surface. At sea level the atmosphere will support a column of mercury about (760 mm) high. This decreases with increasing altitude. The standard value for the atmospheric pressure at sea level in SI units is (101,325 pascals).
     *
     * @type        instance
     */
    Atmospheric_Pressure = this.toIri().concat('Atmospheric_Pressure');
    /**
     * **[brick:Auditorium](https://brickschema.org/schema/Brick#Auditorium)**
     *
     * A space for performances or larger gatherings
     *
     * @type        class
     * @parent      brick:Common_Space
     */
    Auditorium = this.toIri().concat('Auditorium');
    /**
     * **[brick:Automated_External_Defibrillator](https://brickschema.org/schema/Brick#Automated_External_Defibrillator)**
     *
     * @type        class
     * @parent      brick:Safety_Equipment
     */
    Automated_External_Defibrillator = this.toIri().concat('Automated_External_Defibrillator');
    /**
     * **[brick:Automatic_Mode_Command](https://brickschema.org/schema/Brick#Automatic_Mode_Command)**
     *
     * Controls whether or not a device or controller is operating in "Automatic" mode
     *
     * @type        class
     * @parent      brick:Mode_Command
     */
    Automatic_Mode_Command = this.toIri().concat('Automatic_Mode_Command');
    /**
     * **[brick:Availability_Status](https://brickschema.org/schema/Brick#Availability_Status)**
     *
     * Indicates if a piece of equipment, system, or functionality is available for operation
     *
     * @type        class
     * @parent      brick:Status
     */
    Availability_Status = this.toIri().concat('Availability_Status');
    /**
     * **[brick:Average_Cooling_Demand_Sensor](https://brickschema.org/schema/Brick#Average_Cooling_Demand_Sensor)**
     *
     * Measures the average power consumed by a cooling process as the amount of power consumed over some interval
     *
     * @type        class
     * @parent      brick:Cooling_Demand_Sensor
     */
    Average_Cooling_Demand_Sensor = this.toIri().concat('Average_Cooling_Demand_Sensor');
    /**
     * **[brick:Average_Discharge_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Average_Discharge_Air_Flow_Sensor)**
     *
     * The computed average flow of discharge air over some interval
     *
     * @type        class
     * @parent      brick:Discharge_Air_Flow_Sensor
     */
    Average_Discharge_Air_Flow_Sensor = this.toIri().concat('Average_Discharge_Air_Flow_Sensor');
    /**
     * **[brick:Average_Exhaust_Air_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Average_Exhaust_Air_Static_Pressure_Sensor)**
     *
     * The computed average static pressure of air in exhaust regions of an HVAC system over some period of time
     *
     * @type        class
     * @parent      brick:Exhaust_Air_Static_Pressure_Sensor
     */
    Average_Exhaust_Air_Static_Pressure_Sensor = this.toIri().concat('Average_Exhaust_Air_Static_Pressure_Sensor');
    /**
     * **[brick:Average_Heating_Demand_Sensor](https://brickschema.org/schema/Brick#Average_Heating_Demand_Sensor)**
     *
     * Measures the average power consumed by a heating process as the amount of power consumed over some interval
     *
     * @type        class
     * @parent      brick:Heating_Demand_Sensor
     */
    Average_Heating_Demand_Sensor = this.toIri().concat('Average_Heating_Demand_Sensor');
    /**
     * **[brick:Average_Supply_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Average_Supply_Air_Flow_Sensor)**
     *
     * The computed average flow of supply air over some interval
     *
     * @type        class
     * @parent      brick:Supply_Air_Flow_Sensor
     */
    Average_Supply_Air_Flow_Sensor = this.toIri().concat('Average_Supply_Air_Flow_Sensor');
    /**
     * **[brick:Average_Zone_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Average_Zone_Air_Temperature_Sensor)**
     *
     * The computed average temperature of air in a zone, over some period of time
     *
     * @type        class
     * @parent      brick:Zone_Air_Temperature_Sensor
     */
    Average_Zone_Air_Temperature_Sensor = this.toIri().concat('Average_Zone_Air_Temperature_Sensor');
    /**
     * **[brick:AzimuthShape](https://brickschema.org/schema/Brick#AzimuthShape)**
     *
     * @type        class
     */
    AzimuthShape = this.toIri().concat('AzimuthShape');
    /**
     * **[brick:Baseboard_Radiator](https://brickschema.org/schema/Brick#Baseboard_Radiator)**
     *
     * Steam, hydronic, or electric heating device located at or near the floor.
     *
     * @type        class
     * @parent      brick:Radiator
     */
    Baseboard_Radiator = this.toIri().concat('Baseboard_Radiator');
    /**
     * **[brick:Basement](https://brickschema.org/schema/Brick#Basement)**
     *
     * The floor of a building which is partly or entirely below ground level.
     *
     * @type        class
     * @parent      brick:Floor
     */
    Basement = this.toIri().concat('Basement');
    /**
     * **[brick:Battery](https://brickschema.org/schema/Brick#Battery)**
     *
     * A container that stores chemical energy that can be converted into electricity and used as a source of power
     *
     * @type        class
     * @parent      brick:Energy_Storage
     */
    Battery = this.toIri().concat('Battery');
    /**
     * **[brick:Battery_Energy_Storage_System](https://brickschema.org/schema/Brick#Battery_Energy_Storage_System)**
     *
     * A collection of batteries that provides energy storage, along with their supporting equipment
     *
     * @type        class
     * @parent      brick:Energy_Storage_System
     */
    Battery_Energy_Storage_System = this.toIri().concat('Battery_Energy_Storage_System');
    /**
     * **[brick:Battery_Room](https://brickschema.org/schema/Brick#Battery_Room)**
     *
     * A room used to hold batteries for backup power
     *
     * @type        class
     * @parent      brick:Electrical_Room
     */
    Battery_Room = this.toIri().concat('Battery_Room');
    /**
     * **[brick:Battery_Voltage_Sensor](https://brickschema.org/schema/Brick#Battery_Voltage_Sensor)**
     *
     * Measures the capacity of a battery
     *
     * @type        class
     * @parent      brick:Voltage_Sensor
     */
    Battery_Voltage_Sensor = this.toIri().concat('Battery_Voltage_Sensor');
    /**
     * **[brick:Bench_Space](https://brickschema.org/schema/Brick#Bench_Space)**
     *
     * For areas of play in a stadium, the area for partcipants and referees by the side of the field
     *
     * @type        class
     * @parent      brick:Outdoor_Area
     */
    Bench_Space = this.toIri().concat('Bench_Space');
    /**
     * **[brick:Blowdown_Water](https://brickschema.org/schema/Brick#Blowdown_Water)**
     *
     * Water expelled from a system to remove mineral build up
     *
     * @type        class
     * @parent      brick:Water
     */
    Blowdown_Water = this.toIri().concat('Blowdown_Water');
    /**
     * **[brick:Boiler](https://brickschema.org/schema/Brick#Boiler)**
     *
     * A closed, pressure vessel that uses fuel or electricity for heating water or other fluids to supply steam or hot water for heating, humidification, or other applications.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Boiler = this.toIri().concat('Boiler');
    /**
     * **[brick:Booster_Fan](https://brickschema.org/schema/Brick#Booster_Fan)**
     *
     * Fan activated to increase airflow beyond what is provided by the default configuration
     *
     * @type        class
     * @parent      brick:Fan
     */
    Booster_Fan = this.toIri().concat('Booster_Fan');
    /**
     * **[brick:Box_Mode_Command](https://brickschema.org/schema/Brick#Box_Mode_Command)**
     *
     * @type        class
     * @parent      brick:Mode_Command
     */
    Box_Mode_Command = this.toIri().concat('Box_Mode_Command');
    /**
     * **[brick:Break_Room](https://brickschema.org/schema/Brick#Break_Room)**
     *
     * A space for people to relax while not working
     *
     * @type        class
     * @parent      brick:Room
     */
    Break_Room = this.toIri().concat('Break_Room');
    /**
     * **[brick:Breaker_Panel](https://brickschema.org/schema/Brick#Breaker_Panel)**
     *
     * Breaker Panel distributes power into various end-uses.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    Breaker_Panel = this.toIri().concat('Breaker_Panel');
    /**
     * **[brick:Breakroom](https://brickschema.org/schema/Brick#Breakroom)**
     *
     * A space for people to relax while not working
     *
     * @type        class
     * @parent      brick:Room
     */
    Breakroom = this.toIri().concat('Breakroom');
    /**
     * **[brick:Broadcast_Room](https://brickschema.org/schema/Brick#Broadcast_Room)**
     *
     * A space to organize and manage a broadcast. Separate from studio
     *
     * @type        class
     * @parent      brick:Media_Room
     */
    Broadcast_Room = this.toIri().concat('Broadcast_Room');
    /**
     * **[brick:Building](https://brickschema.org/schema/Brick#Building)**
     *
     * An independent unit of the built environment with a characteristic spatial structure, intended to serve at least one function or user activity [ISO 12006-2:2013]
     *
     * @type        class
     * @parent      brick:Location
     */
    Building = this.toIri().concat('Building');
    /**
     * **[brick:BuildingPrimaryFunctionShape](https://brickschema.org/schema/Brick#BuildingPrimaryFunctionShape)**
     *
     * @type        class
     */
    BuildingPrimaryFunctionShape = this.toIri().concat('BuildingPrimaryFunctionShape');
    /**
     * **[brick:Building_Air](https://brickschema.org/schema/Brick#Building_Air)**
     *
     * air contained within a building
     *
     * @type        class
     * @parent      brick:Air
     */
    Building_Air = this.toIri().concat('Building_Air');
    /**
     * **[brick:Building_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Building_Air_Humidity_Setpoint)**
     *
     * Setpoint for humidity in a building
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    Building_Air_Humidity_Setpoint = this.toIri().concat('Building_Air_Humidity_Setpoint');
    /**
     * **[brick:Building_Air_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Building_Air_Static_Pressure_Sensor)**
     *
     * The static pressure of air within a building
     *
     * @type        class
     * @parent      brick:Static_Pressure_Sensor
     */
    Building_Air_Static_Pressure_Sensor = this.toIri().concat('Building_Air_Static_Pressure_Sensor');
    /**
     * **[brick:Building_Air_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Building_Air_Static_Pressure_Setpoint)**
     *
     * Sets static pressure of the entire building
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    Building_Air_Static_Pressure_Setpoint = this.toIri().concat('Building_Air_Static_Pressure_Setpoint');
    /**
     * **[brick:Building_Chilled_Water_Meter](https://brickschema.org/schema/Brick#Building_Chilled_Water_Meter)**
     *
     * A meter that measures the usage or consumption of chilled water of a whole building
     *
     * @type        class
     * @parent      brick:Building_Meter
     */
    Building_Chilled_Water_Meter = this.toIri().concat('Building_Chilled_Water_Meter');
    /**
     * **[brick:Building_Electrical_Meter](https://brickschema.org/schema/Brick#Building_Electrical_Meter)**
     *
     * A meter that measures the usage or consumption of electricity of a whole building
     *
     * @type        class
     * @parent      brick:Building_Meter
     */
    Building_Electrical_Meter = this.toIri().concat('Building_Electrical_Meter');
    /**
     * **[brick:Building_Gas_Meter](https://brickschema.org/schema/Brick#Building_Gas_Meter)**
     *
     * A meter that measures the usage or consumption of gas of a whole building
     *
     * @type        class
     * @parent      brick:Building_Meter
     */
    Building_Gas_Meter = this.toIri().concat('Building_Gas_Meter');
    /**
     * **[brick:Building_Hot_Water_Meter](https://brickschema.org/schema/Brick#Building_Hot_Water_Meter)**
     *
     * A meter that measures the usage or consumption of hot water of a whole building
     *
     * @type        class
     * @parent      brick:Building_Meter
     */
    Building_Hot_Water_Meter = this.toIri().concat('Building_Hot_Water_Meter');
    /**
     * **[brick:Building_Meter](https://brickschema.org/schema/Brick#Building_Meter)**
     *
     * A meter that measures usage or consumption of some media for a whole building
     *
     * @type        class
     * @parent      brick:Meter
     */
    Building_Meter = this.toIri().concat('Building_Meter');
    /**
     * **[brick:Building_Water_Meter](https://brickschema.org/schema/Brick#Building_Water_Meter)**
     *
     * A meter that measures the usage or consumption of water of a whole building
     *
     * @type        class
     * @parent      brick:Building_Meter
     */
    Building_Water_Meter = this.toIri().concat('Building_Water_Meter');
    /**
     * **[brick:Bus_Riser](https://brickschema.org/schema/Brick#Bus_Riser)**
     *
     * Bus Risers are commonly fed from a switchgear and rise up through a series of floors to the main power distribution source for each floor.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    Bus_Riser = this.toIri().concat('Bus_Riser');
    /**
     * **[brick:Bypass_Air](https://brickschema.org/schema/Brick#Bypass_Air)**
     *
     * air in a bypass duct, used to relieve static pressure
     *
     * @type        class
     * @parent      brick:Air
     */
    Bypass_Air = this.toIri().concat('Bypass_Air');
    /**
     * **[brick:Bypass_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Bypass_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of bypass air
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    Bypass_Air_Flow_Sensor = this.toIri().concat('Bypass_Air_Flow_Sensor');
    /**
     * **[brick:Bypass_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Bypass_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for bypass air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    Bypass_Air_Humidity_Setpoint = this.toIri().concat('Bypass_Air_Humidity_Setpoint');
    /**
     * **[brick:Bypass_Command](https://brickschema.org/schema/Brick#Bypass_Command)**
     *
     * @type        class
     * @parent      brick:Command
     */
    Bypass_Command = this.toIri().concat('Bypass_Command');
    /**
     * **[brick:Bypass_Valve](https://brickschema.org/schema/Brick#Bypass_Valve)**
     *
     * A type of valve installed in a bypass pipeline
     *
     * @type        class
     * @parent      brick:Valve
     */
    Bypass_Valve = this.toIri().concat('Bypass_Valve');
    /**
     * **[brick:Bypass_Water](https://brickschema.org/schema/Brick#Bypass_Water)**
     *
     * Water that circumvents a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water
     */
    Bypass_Water = this.toIri().concat('Bypass_Water');
    /**
     * **[brick:Bypass_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Bypass_Water_Flow_Sensor)**
     *
     * Measures the rate of flow of bypass water
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    Bypass_Water_Flow_Sensor = this.toIri().concat('Bypass_Water_Flow_Sensor');
    /**
     * **[brick:Bypass_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Bypass_Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of bypass water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    Bypass_Water_Flow_Setpoint = this.toIri().concat('Bypass_Water_Flow_Setpoint');
    /**
     * **[brick:CAV](https://brickschema.org/schema/Brick#CAV)**
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    CAV = this.toIri().concat('CAV');
    /**
     * **[brick:CO](https://brickschema.org/schema/Brick#CO)**
     *
     * Carbon Monoxide in the vapor phase
     *
     * @type        class
     * @parent      brick:Gas
     */
    CO = this.toIri().concat('CO');
    /**
     * **[brick:CO2](https://brickschema.org/schema/Brick#CO2)**
     *
     * Carbon Dioxide in the vapor phase
     *
     * @type        class
     * @parent      brick:Gas
     */
    CO2 = this.toIri().concat('CO2');
    /**
     * **[brick:CO2_Alarm](https://brickschema.org/schema/Brick#CO2_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with the presence of carbon dioxide.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    CO2_Alarm = this.toIri().concat('CO2_Alarm');
    /**
     * **[brick:CO2Concentration](https://brickschema.org/schema/Brick#CO2_Concentration)**
     *
     * The concentration of carbon dioxide in a medium
     *
     * @type        instance
     */
    CO2_Concentration = this.toIri().concat('CO2_Concentration');
    /**
     * **[brick:CO2_Differential_Sensor](https://brickschema.org/schema/Brick#CO2_Differential_Sensor)**
     *
     * Measures the difference between CO2 levels of inside and outside air
     *
     * @type        class
     * @parent      brick:CO2_Sensor
     */
    CO2_Differential_Sensor = this.toIri().concat('CO2_Differential_Sensor');
    /**
     * **[brick:CO2_Level_Sensor](https://brickschema.org/schema/Brick#CO2_Level_Sensor)**
     *
     * Measures the concentration of CO2 in air
     *
     * @type        class
     * @parent      brick:CO2_Sensor
     */
    CO2_Level_Sensor = this.toIri().concat('CO2_Level_Sensor');
    /**
     * **[brick:CO2_Sensor](https://brickschema.org/schema/Brick#CO2_Sensor)**
     *
     * Measures properties of CO2 in air
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    CO2_Sensor = this.toIri().concat('CO2_Sensor');
    /**
     * **[brick:CO2_Setpoint](https://brickschema.org/schema/Brick#CO2_Setpoint)**
     *
     * Sets some property of CO2
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    CO2_Setpoint = this.toIri().concat('CO2_Setpoint');
    /**
     * **[brick:COConcentration](https://brickschema.org/schema/Brick#CO_Concentration)**
     *
     * The concentration of carbon monoxide in a medium
     *
     * @type        instance
     */
    CO_Concentration = this.toIri().concat('CO_Concentration');
    /**
     * **[brick:CO_Differential_Sensor](https://brickschema.org/schema/Brick#CO_Differential_Sensor)**
     *
     * @type        class
     * @parent      brick:CO_Sensor
     */
    CO_Differential_Sensor = this.toIri().concat('CO_Differential_Sensor');
    /**
     * **[brick:CO_Level_Sensor](https://brickschema.org/schema/Brick#CO_Level_Sensor)**
     *
     * Measures the concentration of CO
     *
     * @type        class
     * @parent      brick:CO_Sensor
     */
    CO_Level_Sensor = this.toIri().concat('CO_Level_Sensor');
    /**
     * **[brick:CO_Sensor](https://brickschema.org/schema/Brick#CO_Sensor)**
     *
     * Measures properties of CO
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    CO_Sensor = this.toIri().concat('CO_Sensor');
    /**
     * **[brick:CRAC](https://brickschema.org/schema/Brick#CRAC)**
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    CRAC = this.toIri().concat('CRAC');
    /**
     * **[brick:Cafeteria](https://brickschema.org/schema/Brick#Cafeteria)**
     *
     * A space to serve food and beverages
     *
     * @type        class
     * @parent      brick:Common_Space
     */
    Cafeteria = this.toIri().concat('Cafeteria');
    /**
     * **[brick:Camera](https://brickschema.org/schema/Brick#Camera)**
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Camera = this.toIri().concat('Camera');
    /**
     * **[brick:Capacity](https://brickschema.org/schema/Brick#Capacity)**
     *
     * @type        instance
     */
    Capacity = this.toIri().concat('Capacity');
    /**
     * **[brick:Capacity_Sensor](https://brickschema.org/schema/Brick#Capacity_Sensor)**
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Capacity_Sensor = this.toIri().concat('Capacity_Sensor');
    /**
     * **[brick:Ceiling_Fan](https://brickschema.org/schema/Brick#Ceiling_Fan)**
     *
     * A fan installed on the ceiling of a room for the purpose of air circulation
     *
     * @type        class
     * @parent      brick:Fan
     */
    Ceiling_Fan = this.toIri().concat('Ceiling_Fan');
    /**
     * **[brick:Centrifugal_Chiller](https://brickschema.org/schema/Brick#Centrifugal_Chiller)**
     *
     * A chiller that uses the vapor compression cycle to chill water. It throws off the heat collected from the chilled water plus the heat from the compressor to a water loop
     *
     * @type        class
     * @parent      brick:Chiller
     */
    Centrifugal_Chiller = this.toIri().concat('Centrifugal_Chiller');
    /**
     * **[brick:Change_Filter_Alarm](https://brickschema.org/schema/Brick#Change_Filter_Alarm)**
     *
     * An alarm that indicates that a filter must be changed
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Change_Filter_Alarm = this.toIri().concat('Change_Filter_Alarm');
    /**
     * **[brick:Chilled_Water](https://brickschema.org/schema/Brick#Chilled_Water)**
     *
     * water used as a cooling medium (particularly in air-conditioning systems or in processes) at below ambient temperature.
     *
     * @type        class
     * @parent      brick:Water
     */
    Chilled_Water = this.toIri().concat('Chilled_Water');
    /**
     * **[brick:Chilled_Water_Coil](https://brickschema.org/schema/Brick#Chilled_Water_Coil)**
     *
     * A cooling element made of pipe or tube that removes heat from equipment, machines or airflows that is filled with chilled water.
     *
     * @type        class
     * @parent      brick:Cooling_Coil
     */
    Chilled_Water_Coil = this.toIri().concat('Chilled_Water_Coil');
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of differential pressure of chilled water
     *
     * @type        class
     * @parent      brick:Chilled_Water_Differential_Pressure_Setpoint
     */
    Chilled_Water_Differential_Pressure_Deadband_Setpoint = this.toIri().concat('Chilled_Water_Differential_Pressure_Deadband_Setpoint');
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Integral_Time_Parameter
     */
    Chilled_Water_Differential_Pressure_Integral_Time_Parameter = this.toIri().concat('Chilled_Water_Differential_Pressure_Integral_Time_Parameter');
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Load_Shed_Reset_Status](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Load_Shed_Reset_Status)**
     *
     * @type        class
     * @parent      brick:Chilled_Water_Differential_Pressure_Load_Shed_Status
     */
    Chilled_Water_Differential_Pressure_Load_Shed_Reset_Status = this.toIri().concat('Chilled_Water_Differential_Pressure_Load_Shed_Reset_Status');
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Load_Shed_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Load_Shed_Setpoint)**
     *
     * @type        class
     * @parent      brick:Chilled_Water_Differential_Pressure_Setpoint
     */
    Chilled_Water_Differential_Pressure_Load_Shed_Setpoint = this.toIri().concat('Chilled_Water_Differential_Pressure_Load_Shed_Setpoint');
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Load_Shed_Status](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Load_Shed_Status
     */
    Chilled_Water_Differential_Pressure_Load_Shed_Status = this.toIri().concat('Chilled_Water_Differential_Pressure_Load_Shed_Status');
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Proportional_Band
     */
    Chilled_Water_Differential_Pressure_Proportional_Band_Parameter = this.toIri().concat('Chilled_Water_Differential_Pressure_Proportional_Band_Parameter');
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Sensor)**
     *
     * Measures the difference in water pressure on either side of a chilled water valve
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Sensor
     */
    Chilled_Water_Differential_Pressure_Sensor = this.toIri().concat('Chilled_Water_Differential_Pressure_Sensor');
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Setpoint)**
     *
     * Sets the target water differential pressure between an upstream and downstream point in a water pipe or conduit used to carry chilled water
     *
     * @type        class
     * @parent      brick:Water_Differential_Pressure_Setpoint
     */
    Chilled_Water_Differential_Pressure_Setpoint = this.toIri().concat('Chilled_Water_Differential_Pressure_Setpoint');
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Step_Parameter](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Step_Parameter
     */
    Chilled_Water_Differential_Pressure_Step_Parameter = this.toIri().concat('Chilled_Water_Differential_Pressure_Step_Parameter');
    /**
     * **[brick:Chilled_Water_Differential_Temperature_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Temperature_Sensor)**
     *
     * Measures the difference in temperature between the entering water to the chiller or other water cooling device and leaving water from the same chiller or other water cooling device
     *
     * @type        class
     * @parent      brick:Chilled_Water_Temperature_Sensor
     */
    Chilled_Water_Differential_Temperature_Sensor = this.toIri().concat('Chilled_Water_Differential_Temperature_Sensor');
    /**
     * **[brick:Chilled_Water_Discharge_Flow_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Discharge_Flow_Sensor)**
     *
     * Measures the rate of flow of chilled discharge water
     *
     * @type        class
     * @parent      brick:Discharge_Water_Flow_Sensor
     */
    Chilled_Water_Discharge_Flow_Sensor = this.toIri().concat('Chilled_Water_Discharge_Flow_Sensor');
    /**
     * **[brick:Chilled_Water_Discharge_Flow_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Discharge_Flow_Setpoint)**
     *
     * Sets the target flow rate of chilled discharge water
     *
     * @type        class
     * @parent      brick:Chilled_Water_Flow_Setpoint
     */
    Chilled_Water_Discharge_Flow_Setpoint = this.toIri().concat('Chilled_Water_Discharge_Flow_Setpoint');
    /**
     * **[brick:Chilled_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Flow_Sensor)**
     *
     * Measures the rate of flow in a chilled water circuit
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    Chilled_Water_Flow_Sensor = this.toIri().concat('Chilled_Water_Flow_Sensor');
    /**
     * **[brick:Chilled_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of chilled water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    Chilled_Water_Flow_Setpoint = this.toIri().concat('Chilled_Water_Flow_Setpoint');
    /**
     * **[brick:Chilled_Water_Loop](https://brickschema.org/schema/Brick#Chilled_Water_Loop)**
     *
     * A collection of equipment that transport and regulate chilled water among each other
     *
     * @type        class
     * @parent      brick:Water_Loop
     */
    Chilled_Water_Loop = this.toIri().concat('Chilled_Water_Loop');
    /**
     * **[brick:Chilled_Water_Meter](https://brickschema.org/schema/Brick#Chilled_Water_Meter)**
     *
     * A meter that measures the usage or consumption of chilled water
     *
     * @type        class
     * @parent      brick:Water_Meter
     */
    Chilled_Water_Meter = this.toIri().concat('Chilled_Water_Meter');
    /**
     * **[brick:Chilled_Water_Pump](https://brickschema.org/schema/Brick#Chilled_Water_Pump)**
     *
     * A pump that performs work on chilled water; typically part of a chilled water system
     *
     * @type        class
     * @parent      brick:Water_Pump
     */
    Chilled_Water_Pump = this.toIri().concat('Chilled_Water_Pump');
    /**
     * **[brick:Chilled_Water_Pump_Differential_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Pump_Differential_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of differential pressure of chilled water in a chilled water pump
     *
     * @type        class
     * @parent      brick:Chilled_Water_Differential_Pressure_Deadband_Setpoint
     */
    Chilled_Water_Pump_Differential_Pressure_Deadband_Setpoint = this.toIri().concat('Chilled_Water_Pump_Differential_Pressure_Deadband_Setpoint');
    /**
     * **[brick:Chilled_Water_Return_Temperature_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Return_Temperature_Sensor)**
     *
     * Measures the temperature of chilled water that is returned to a cooling tower
     *
     * @type        class
     * @parent      brick:Chilled_Water_Temperature_Sensor
     */
    Chilled_Water_Return_Temperature_Sensor = this.toIri().concat('Chilled_Water_Return_Temperature_Sensor');
    /**
     * **[brick:Chilled_Water_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Static_Pressure_Setpoint)**
     *
     * Sets static pressure of chilled water
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    Chilled_Water_Static_Pressure_Setpoint = this.toIri().concat('Chilled_Water_Static_Pressure_Setpoint');
    /**
     * **[brick:Chilled_Water_Supply_Flow_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Supply_Flow_Sensor)**
     *
     * Measures the rate of flow of chilled supply water
     *
     * @type        class
     * @parent      brick:Chilled_Water_Flow_Sensor
     */
    Chilled_Water_Supply_Flow_Sensor = this.toIri().concat('Chilled_Water_Supply_Flow_Sensor');
    /**
     * **[brick:Chilled_Water_Supply_Flow_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Supply_Flow_Setpoint)**
     *
     * Sets the target flow rate of chilled supply water
     *
     * @type        class
     * @parent      brick:Chilled_Water_Flow_Setpoint
     */
    Chilled_Water_Supply_Flow_Setpoint = this.toIri().concat('Chilled_Water_Supply_Flow_Setpoint');
    /**
     * **[brick:Chilled_Water_Supply_Temperature_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Supply_Temperature_Sensor)**
     *
     * Measures the temperature of chilled water that is supplied from a chiller
     *
     * @type        class
     * @parent      brick:Chilled_Water_Temperature_Sensor
     */
    Chilled_Water_Supply_Temperature_Sensor = this.toIri().concat('Chilled_Water_Supply_Temperature_Sensor');
    /**
     * **[brick:Chilled_Water_System](https://brickschema.org/schema/Brick#Chilled_Water_System)**
     *
     * The equipment, devices and conduits that handle the production and distribution of chilled water in a building
     *
     * @type        class
     * @parent      brick:Water_System
     */
    Chilled_Water_System = this.toIri().concat('Chilled_Water_System');
    /**
     * **[brick:Chilled_Water_System_Enable_Command](https://brickschema.org/schema/Brick#Chilled_Water_System_Enable_Command)**
     *
     * Enables operation of the chilled water system
     *
     * @type        class
     * @parent      brick:System_Enable_Command
     */
    Chilled_Water_System_Enable_Command = this.toIri().concat('Chilled_Water_System_Enable_Command');
    /**
     * **[brick:Chilled_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Temperature_Sensor)**
     *
     * Measures the temperature of chilled water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    Chilled_Water_Temperature_Sensor = this.toIri().concat('Chilled_Water_Temperature_Sensor');
    /**
     * **[brick:Chilled_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Temperature_Setpoint)**
     *
     * Sets the temperature of chilled water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    Chilled_Water_Temperature_Setpoint = this.toIri().concat('Chilled_Water_Temperature_Setpoint');
    /**
     * **[brick:Chilled_Water_Valve](https://brickschema.org/schema/Brick#Chilled_Water_Valve)**
     *
     * A valve that modulates the flow of chilled water
     *
     * @type        class
     * @parent      brick:Water_Valve
     */
    Chilled_Water_Valve = this.toIri().concat('Chilled_Water_Valve');
    /**
     * **[brick:Chiller](https://brickschema.org/schema/Brick#Chiller)**
     *
     * Refrigerating machine used to transfer heat between fluids. Chillers are either direct expansion with a compressor or absorption type.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Chiller = this.toIri().concat('Chiller');
    /**
     * **[brick:Class](https://brickschema.org/schema/Brick#Class)**
     *
     * @type        class
     */
    Class = this.toIri().concat('Class');
    /**
     * **[brick:Close_Limit](https://brickschema.org/schema/Brick#Close_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Close_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    Close_Limit = this.toIri().concat('Close_Limit');
    /**
     * **[brick:Cloudage](https://brickschema.org/schema/Brick#Cloudage)**
     *
     * The fraction of the sky obscured by clouds when observed from a particular location
     *
     * @type        instance
     */
    Cloudage = this.toIri().concat('Cloudage');
    /**
     * **[brick:Coil](https://brickschema.org/schema/Brick#Coil)**
     *
     * Cooling or heating element made of pipe or tube that may or may not be finned and formed into helical or serpentine shape (ASHRAE Dictionary)
     *
     * @type        class
     * @parent      brick:Heat_Exchanger
     */
    Coil = this.toIri().concat('Coil');
    /**
     * **[brick:Cold_Box](https://brickschema.org/schema/Brick#Cold_Box)**
     *
     * in a gas separation unit, the insulated section that contains the low-temperature heat exchangers and distillation columns.
     *
     * @type        class
     * @parent      brick:Laboratory
     */
    Cold_Box = this.toIri().concat('Cold_Box');
    /**
     * **[brick:Coldest_Zone_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Coldest_Zone_Air_Temperature_Sensor)**
     *
     * The zone temperature that is coldest; drives the supply temperature of hot air. A computed value rather than a physical sensor. Also referred to as a 'Lowest Zone Air Temperature Sensor'
     *
     * @type        class
     * @parent      brick:Zone_Air_Temperature_Sensor
     */
    Coldest_Zone_Air_Temperature_Sensor = this.toIri().concat('Coldest_Zone_Air_Temperature_Sensor');
    /**
     * **[brick:Collection](https://brickschema.org/schema/Brick#Collection)**
     *
     * @type        class
     * @parent      brick:Class
     */
    Collection = this.toIri().concat('Collection');
    /**
     * **[brick:Collection_Basin_Water](https://brickschema.org/schema/Brick#Collection_Basin_Water)**
     *
     * Water transiently collected and directed to the sump or pump suction line, typically integral with a cooling tower
     *
     * @type        class
     * @parent      brick:Water
     */
    Collection_Basin_Water = this.toIri().concat('Collection_Basin_Water');
    /**
     * **[brick:Collection_Basin_Water_Heater](https://brickschema.org/schema/Brick#Collection_Basin_Water_Heater)**
     *
     * Basin heaters prevent cold water basin freeze-up, e.g. in cooling towers, closed circuit fluid coolers, or evaporative condensers
     *
     * @type        class
     * @parent      brick:Water_Heater
     */
    Collection_Basin_Water_Heater = this.toIri().concat('Collection_Basin_Water_Heater');
    /**
     * **[brick:Collection_Basin_Water_Level_Alarm](https://brickschema.org/schema/Brick#Collection_Basin_Water_Level_Alarm)**
     *
     * An alarm that indicates a high or low level of water in the collection basin, e.g. within a Cooling_Tower
     *
     * @type        class
     * @parent      brick:Water_Level_Alarm
     */
    Collection_Basin_Water_Level_Alarm = this.toIri().concat('Collection_Basin_Water_Level_Alarm');
    /**
     * **[brick:Collection_Basin_Water_Level_Sensor](https://brickschema.org/schema/Brick#Collection_Basin_Water_Level_Sensor)**
     *
     * Measures the level of the water in the collection basin, e.g. within a Cooling_Tower
     *
     * @type        class
     * @parent      brick:Water_Level_Sensor
     */
    Collection_Basin_Water_Level_Sensor = this.toIri().concat('Collection_Basin_Water_Level_Sensor');
    /**
     * **[brick:Collection_Basin_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Collection_Basin_Water_Temperature_Sensor)**
     *
     * Measures the temperature of the water in the collection basin, e.g. within a Cooling_Tower
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    Collection_Basin_Water_Temperature_Sensor = this.toIri().concat('Collection_Basin_Water_Temperature_Sensor');
    /**
     * **[brick:Command](https://brickschema.org/schema/Brick#Command)**
     *
     * A Command is an output point that directly determines the behavior of equipment and/or affects relevant operational points.
     *
     * @type        class
     * @parent      brick:Point
     */
    Command = this.toIri().concat('Command');
    /**
     * **[brick:Common_Space](https://brickschema.org/schema/Brick#Common_Space)**
     *
     * A class of spaces that are used by multiple people at the same time
     *
     * @type        class
     * @parent      brick:Space
     */
    Common_Space = this.toIri().concat('Common_Space');
    /**
     * **[brick:Communication_Loss_Alarm](https://brickschema.org/schema/Brick#Communication_Loss_Alarm)**
     *
     * An alarm that indicates a loss of communication e.g. with a device or controller
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Communication_Loss_Alarm = this.toIri().concat('Communication_Loss_Alarm');
    /**
     * **[brick:Complex_Power](https://brickschema.org/schema/Brick#Complex_Power)**
     *
     * Complex Power, under sinusoidal conditions, is the product of the phasor (U) representing the voltage between the terminals of a linear two-terminal element or two-terminal circuit and the complex conjugate of the phasor (I) representing the electric current in the element or circuit.
     *
     * @type        instance
     */
    Complex_Power = this.toIri().concat('Complex_Power');
    /**
     * **[brick:Compressor](https://brickschema.org/schema/Brick#Compressor)**
     *
     * (1) device for mechanically increasing the pressure of a gas. (2) often described as being either open, hermetic, or semihermetic to describe how the compressor and motor drive is situated in relation to the gas or vapor being compressed. Types include centrifugal, axial flow, reciprocating, rotary screw, rotary vane, scroll, or diaphragm. 1. device for mechanically increasing the pressure of a gas. 2. specific machine, with or without accessories, for compressing refrigerant vapor.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Compressor = this.toIri().concat('Compressor');
    /**
     * **[brick:Computer_Room_Air_Conditioning](https://brickschema.org/schema/Brick#Computer_Room_Air_Conditioning)**
     *
     * A device that monitors and maintains the temperature, air distribution and humidity in a network room or data center.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Computer_Room_Air_Conditioning = this.toIri().concat('Computer_Room_Air_Conditioning');
    /**
     * **[brick:Concession](https://brickschema.org/schema/Brick#Concession)**
     *
     * A space to sell food and beverages. Usually embedded in a larger space and does not include a space where people consume their purchases
     *
     * @type        class
     * @parent      brick:Food_Service_Room
     */
    Concession = this.toIri().concat('Concession');
    /**
     * **[brick:Condensate_Leak_Alarm](https://brickschema.org/schema/Brick#Condensate_Leak_Alarm)**
     *
     * An alarm that indicates a leak of condensate from a cooling system
     *
     * @type        class
     * @parent      brick:Leak_Alarm
     */
    Condensate_Leak_Alarm = this.toIri().concat('Condensate_Leak_Alarm');
    /**
     * **[brick:Condenser](https://brickschema.org/schema/Brick#Condenser)**
     *
     * A heat exchanger in which the primary heat transfer vapor changes its state to a liquid phase.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Condenser = this.toIri().concat('Condenser');
    /**
     * **[brick:Condenser_Heat_Exchanger](https://brickschema.org/schema/Brick#Condenser_Heat_Exchanger)**
     *
     * A heat exchanger in which the primary heat transfer vapor changes its state to a liquid phase.
     *
     * @type        class
     * @parent      brick:Heat_Exchanger
     */
    Condenser_Heat_Exchanger = this.toIri().concat('Condenser_Heat_Exchanger');
    /**
     * **[brick:Condenser_Water](https://brickschema.org/schema/Brick#Condenser_Water)**
     *
     * Water used used to remove heat through condensation
     *
     * @type        class
     * @parent      brick:Water
     */
    Condenser_Water = this.toIri().concat('Condenser_Water');
    /**
     * **[brick:Condenser_Water_Bypass_Valve](https://brickschema.org/schema/Brick#Condenser_Water_Bypass_Valve)**
     *
     * A valve installed in a bypass line of a condenser water loop
     *
     * @type        class
     * @parent      brick:Bypass_Valve
     */
    Condenser_Water_Bypass_Valve = this.toIri().concat('Condenser_Water_Bypass_Valve');
    /**
     * **[brick:Condenser_Water_Isolation_Valve](https://brickschema.org/schema/Brick#Condenser_Water_Isolation_Valve)**
     *
     * An isolation valve installed in the condenser water loop
     *
     * @type        class
     * @parent      brick:Isolation_Valve
     */
    Condenser_Water_Isolation_Valve = this.toIri().concat('Condenser_Water_Isolation_Valve');
    /**
     * **[brick:Condenser_Water_Pump](https://brickschema.org/schema/Brick#Condenser_Water_Pump)**
     *
     * A pump that is part of a condenser system; the pump circulates condenser water from the chiller back to the cooling tower
     *
     * @type        class
     * @parent      brick:Water_Pump
     */
    Condenser_Water_Pump = this.toIri().concat('Condenser_Water_Pump');
    /**
     * **[brick:Condenser_Water_System](https://brickschema.org/schema/Brick#Condenser_Water_System)**
     *
     * A heat rejection system consisting of (typically) cooling towers, condenser water pumps, chillers and the piping connecting the components
     *
     * @type        class
     * @parent      brick:Water_System
     */
    Condenser_Water_System = this.toIri().concat('Condenser_Water_System');
    /**
     * **[brick:Condenser_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Condenser_Water_Temperature_Sensor)**
     *
     * Measures the temperature of condenser water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    Condenser_Water_Temperature_Sensor = this.toIri().concat('Condenser_Water_Temperature_Sensor');
    /**
     * **[brick:Condenser_Water_Valve](https://brickschema.org/schema/Brick#Condenser_Water_Valve)**
     *
     * A valve that modulates the flow of condenser water
     *
     * @type        class
     * @parent      brick:Water_Valve
     */
    Condenser_Water_Valve = this.toIri().concat('Condenser_Water_Valve');
    /**
     * **[brick:Condensing_Natural_Gas_Boiler](https://brickschema.org/schema/Brick#Condensing_Natural_Gas_Boiler)**
     *
     * A closed, pressure vessel that uses natural gas and heat exchanger that capture and reuse any latent heat for heating water or other fluids to supply steam or hot water for heating, humidification, or other applications.
     *
     * @type        class
     * @parent      brick:Natural_Gas_Boiler
     */
    Condensing_Natural_Gas_Boiler = this.toIri().concat('Condensing_Natural_Gas_Boiler');
    /**
     * **[brick:Conductivity](https://brickschema.org/schema/Brick#Conductivity)**
     *
     * @type        instance
     */
    Conductivity = this.toIri().concat('Conductivity');
    /**
     * **[brick:Conductivity_Sensor](https://brickschema.org/schema/Brick#Conductivity_Sensor)**
     *
     * Measures electrical conductance
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Conductivity_Sensor = this.toIri().concat('Conductivity_Sensor');
    /**
     * **[brick:Conference_Room](https://brickschema.org/schema/Brick#Conference_Room)**
     *
     * A space dedicated in which to hold a meetings
     *
     * @type        class
     * @parent      brick:Room
     */
    Conference_Room = this.toIri().concat('Conference_Room');
    /**
     * **[brick:Constant_Air_Volume_Box](https://brickschema.org/schema/Brick#Constant_Air_Volume_Box)**
     *
     * A terminal unit for which supply air flow rate is constant and the supply air temperature is varied to meet thermal load
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    Constant_Air_Volume_Box = this.toIri().concat('Constant_Air_Volume_Box');
    /**
     * **[brick:Contact_Sensor](https://brickschema.org/schema/Brick#Contact_Sensor)**
     *
     * Senses or detects contact, such as for determining if a door is closed.
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Contact_Sensor = this.toIri().concat('Contact_Sensor');
    /**
     * **[brick:Control_Room](https://brickschema.org/schema/Brick#Control_Room)**
     *
     * A space from which operations are managed
     *
     * @type        class
     * @parent      brick:Room
     */
    Control_Room = this.toIri().concat('Control_Room');
    /**
     * **[brick:CoolingCapacityShape](https://brickschema.org/schema/Brick#CoolingCapacityShape)**
     *
     * @type        class
     */
    CoolingCapacityShape = this.toIri().concat('CoolingCapacityShape');
    /**
     * **[brick:Cooling_Coil](https://brickschema.org/schema/Brick#Cooling_Coil)**
     *
     * A cooling element made of pipe or tube that removes heat from equipment, machines or airflows. Typically filled with either refrigerant or cold water.
     *
     * @type        class
     * @parent      brick:Coil
     */
    Cooling_Coil = this.toIri().concat('Cooling_Coil');
    /**
     * **[brick:Cooling_Command](https://brickschema.org/schema/Brick#Cooling_Command)**
     *
     * Controls the amount of cooling to be delivered (typically as a proportion of total cooling output)
     *
     * @type        class
     * @parent      brick:Command
     */
    Cooling_Command = this.toIri().concat('Cooling_Command');
    /**
     * **[brick:Cooling_Demand_Sensor](https://brickschema.org/schema/Brick#Cooling_Demand_Sensor)**
     *
     * Measures the amount of power consumed by a cooling process; typically found by multiplying the tonnage of a unit (e.g. RTU) by the efficiency rating in kW/ton
     *
     * @type        class
     * @parent      brick:Demand_Sensor
     */
    Cooling_Demand_Sensor = this.toIri().concat('Cooling_Demand_Sensor');
    /**
     * **[brick:Cooling_Demand_Setpoint](https://brickschema.org/schema/Brick#Cooling_Demand_Setpoint)**
     *
     * Sets the rate required for cooling
     *
     * @type        class
     * @parent      brick:Demand_Setpoint
     */
    Cooling_Demand_Setpoint = this.toIri().concat('Cooling_Demand_Setpoint');
    /**
     * **[brick:Cooling_Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Cooling_Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow for cooling
     *
     * @type        class
     * @parent      brick:Discharge_Air_Flow_Setpoint
     */
    Cooling_Discharge_Air_Flow_Setpoint = this.toIri().concat('Cooling_Discharge_Air_Flow_Setpoint');
    /**
     * **[brick:Cooling_Discharge_Air_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Cooling_Discharge_Air_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of cooling discharge air
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Cooling_Setpoint
     */
    Cooling_Discharge_Air_Temperature_Deadband_Setpoint = this.toIri().concat('Cooling_Discharge_Air_Temperature_Deadband_Setpoint');
    /**
     * **[brick:Cooling_Discharge_Air_Temperature_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Cooling_Discharge_Air_Temperature_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Integral_Time_Parameter
     */
    Cooling_Discharge_Air_Temperature_Integral_Time_Parameter = this.toIri().concat('Cooling_Discharge_Air_Temperature_Integral_Time_Parameter');
    /**
     * **[brick:Cooling_Discharge_Air_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Cooling_Discharge_Air_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Proportional_Band_Parameter
     */
    Cooling_Discharge_Air_Temperature_Proportional_Band_Parameter = this.toIri().concat('Cooling_Discharge_Air_Temperature_Proportional_Band_Parameter');
    /**
     * **[brick:Cooling_Start_Stop_Status](https://brickschema.org/schema/Brick#Cooling_Start_Stop_Status)**
     *
     * @type        class
     * @parent      brick:Start_Stop_Status
     */
    Cooling_Start_Stop_Status = this.toIri().concat('Cooling_Start_Stop_Status');
    /**
     * **[brick:Cooling_Supply_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Cooling_Supply_Air_Flow_Setpoint)**
     *
     * Sets supply air flow rate for cooling
     *
     * @type        class
     * @parent      brick:Supply_Air_Flow_Setpoint
     */
    Cooling_Supply_Air_Flow_Setpoint = this.toIri().concat('Cooling_Supply_Air_Flow_Setpoint');
    /**
     * **[brick:Cooling_Supply_Air_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Cooling_Supply_Air_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of supply air for cooling
     *
     * @type        class
     * @parent      brick:Cooling_Temperature_Setpoint
     */
    Cooling_Supply_Air_Temperature_Deadband_Setpoint = this.toIri().concat('Cooling_Supply_Air_Temperature_Deadband_Setpoint');
    /**
     * **[brick:Cooling_Supply_Air_Temperature_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Cooling_Supply_Air_Temperature_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Integral_Time_Parameter
     */
    Cooling_Supply_Air_Temperature_Integral_Time_Parameter = this.toIri().concat('Cooling_Supply_Air_Temperature_Integral_Time_Parameter');
    /**
     * **[brick:Cooling_Supply_Air_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Cooling_Supply_Air_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Supply_Air_Temperature_Proportional_Band_Parameter
     */
    Cooling_Supply_Air_Temperature_Proportional_Band_Parameter = this.toIri().concat('Cooling_Supply_Air_Temperature_Proportional_Band_Parameter');
    /**
     * **[brick:Cooling_Temperature_Setpoint](https://brickschema.org/schema/Brick#Cooling_Temperature_Setpoint)**
     *
     * Sets temperature for cooling
     *
     * @type        class
     * @parent      brick:Temperature_Setpoint
     */
    Cooling_Temperature_Setpoint = this.toIri().concat('Cooling_Temperature_Setpoint');
    /**
     * **[brick:Cooling_Tower](https://brickschema.org/schema/Brick#Cooling_Tower)**
     *
     * A cooling tower is a heat rejection device that rejects waste heat to the atmosphere through the cooling of a water stream to a lower temperature. Cooling towers may either use the evaporation of water to remove process heat and cool the working fluid to near the wet-bulb air temperature or, in the case of closed circuit dry cooling towers, rely solely on air to cool the working fluid to near the dry-bulb air temperature.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Cooling_Tower = this.toIri().concat('Cooling_Tower');
    /**
     * **[brick:Cooling_Tower_Fan](https://brickschema.org/schema/Brick#Cooling_Tower_Fan)**
     *
     * A fan that pulls air through a cooling tower and across the louvers where the water falls to aid in heat exchange by the process of evaporation
     *
     * @type        class
     * @parent      brick:Fan
     */
    Cooling_Tower_Fan = this.toIri().concat('Cooling_Tower_Fan');
    /**
     * **[brick:Cooling_Valve](https://brickschema.org/schema/Brick#Cooling_Valve)**
     *
     * A valve that controls air temperature by modulating the amount of cold water flowing through a cooling coil
     *
     * @type        class
     * @parent      brick:Valve
     */
    Cooling_Valve = this.toIri().concat('Cooling_Valve');
    /**
     * **[brick:CoordinateShape](https://brickschema.org/schema/Brick#CoordinateShape)**
     *
     * @type        class
     */
    CoordinateShape = this.toIri().concat('CoordinateShape');
    /**
     * **[brick:Copy_Room](https://brickschema.org/schema/Brick#Copy_Room)**
     *
     * A room set aside for common office equipment, including printers and copiers
     *
     * @type        class
     * @parent      brick:Room
     */
    Copy_Room = this.toIri().concat('Copy_Room');
    /**
     * **[brick:Core_Temperature_Sensor](https://brickschema.org/schema/Brick#Core_Temperature_Sensor)**
     *
     * Measures the internal temperature of the radiant layer at the heat source or sink level of the radiant heating and cooling HVAC system.
     *
     * @type        class
     * @parent      brick:Embedded_Temperature_Sensor
     */
    Core_Temperature_Sensor = this.toIri().concat('Core_Temperature_Sensor');
    /**
     * **[brick:Core_Temperature_Setpoint](https://brickschema.org/schema/Brick#Core_Temperature_Setpoint)**
     *
     * Sets temperature for the core, i.e. the temperature at the heat source or sink level, of the radiant panel.
     *
     * @type        class
     * @parent      brick:Embedded_Temperature_Setpoint
     */
    Core_Temperature_Setpoint = this.toIri().concat('Core_Temperature_Setpoint');
    /**
     * **[brick:Cubicle](https://brickschema.org/schema/Brick#Cubicle)**
     *
     * A smaller space set aside for an individual, but not with a door and without full-height walls
     *
     * @type        class
     * @parent      brick:Office
     */
    Cubicle = this.toIri().concat('Cubicle');
    /**
     * **[brick:CurrentFlowTypeShape](https://brickschema.org/schema/Brick#CurrentFlowTypeShape)**
     *
     * @type        class
     */
    CurrentFlowTypeShape = this.toIri().concat('CurrentFlowTypeShape');
    /**
     * **[brick:CurrentAngle](https://brickschema.org/schema/Brick#Current_Angle)**
     *
     * Angle of current phasor
     *
     * @type        instance
     */
    Current_Angle = this.toIri().concat('Current_Angle');
    /**
     * **[brick:CurrentImbalance](https://brickschema.org/schema/Brick#Current_Imbalance)**
     *
     * The percent deviation from average current
     *
     * @type        instance
     */
    Current_Imbalance = this.toIri().concat('Current_Imbalance');
    /**
     * **[brick:Current_Imbalance_Sensor](https://brickschema.org/schema/Brick#Current_Imbalance_Sensor)**
     *
     * A sensor which measures the current difference (imbalance) between phases of an electrical system
     *
     * @type        class
     * @parent      brick:Imbalance_Sensor
     */
    Current_Imbalance_Sensor = this.toIri().concat('Current_Imbalance_Sensor');
    /**
     * **[brick:Current_Limit](https://brickschema.org/schema/Brick#Current_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Current_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    Current_Limit = this.toIri().concat('Current_Limit');
    /**
     * **[brick:Current_Output_Sensor](https://brickschema.org/schema/Brick#Current_Output_Sensor)**
     *
     * Senses the amperes of electrical current produced as output by a device
     *
     * @type        class
     * @parent      brick:Current_Sensor
     */
    Current_Output_Sensor = this.toIri().concat('Current_Output_Sensor');
    /**
     * **[brick:Current_Sensor](https://brickschema.org/schema/Brick#Current_Sensor)**
     *
     * Senses the amperes of electrical current passing through the sensor
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Current_Sensor = this.toIri().concat('Current_Sensor');
    /**
     * **[brick:CurrentTotalHarmonicDistortion](https://brickschema.org/schema/Brick#Current_Total_Harmonic_Distortion)**
     *
     * Measurement of harmonic distortion present in a signal defined as the sum of the powers of all harmonic components to the power of the fundamental frequency. (https://en.wikipedia.org/wiki/Total_harmonic_distortion)
     *
     * @type        instance
     */
    Current_Total_Harmonic_Distortion = this.toIri().concat('Current_Total_Harmonic_Distortion');
    /**
     * **[brick:Curtailment_Override_Command](https://brickschema.org/schema/Brick#Curtailment_Override_Command)**
     *
     * @type        class
     * @parent      brick:Override_Command
     */
    Curtailment_Override_Command = this.toIri().concat('Curtailment_Override_Command');
    /**
     * **[brick:Cycle_Alarm](https://brickschema.org/schema/Brick#Cycle_Alarm)**
     *
     * An alarm that indicates off-normal conditions associated with HVAC cycles
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Cycle_Alarm = this.toIri().concat('Cycle_Alarm');
    /**
     * **[brick:DC_Bus_Voltage_Sensor](https://brickschema.org/schema/Brick#DC_Bus_Voltage_Sensor)**
     *
     * Measures the voltage across a DC bus
     *
     * @type        class
     * @parent      brick:Voltage_Sensor
     */
    DC_Bus_Voltage_Sensor = this.toIri().concat('DC_Bus_Voltage_Sensor');
    /**
     * **[brick:DOAS](https://brickschema.org/schema/Brick#DOAS)**
     *
     * See Dedicated_Outdoor_Air_System_Unit
     *
     * @type        class
     * @parent      brick:AHU
     */
    DOAS = this.toIri().concat('DOAS');
    /**
     * **[brick:Damper](https://brickschema.org/schema/Brick#Damper)**
     *
     * Element inserted into an air-distribution system or element of an air-distribution system permitting modification of the air resistance of the system and consequently changing the airflow rate or shutting off the airflow.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Damper = this.toIri().concat('Damper');
    /**
     * **[brick:Damper_Command](https://brickschema.org/schema/Brick#Damper_Command)**
     *
     * Controls properties of dampers
     *
     * @type        class
     * @parent      brick:Command
     */
    Damper_Command = this.toIri().concat('Damper_Command');
    /**
     * **[brick:Damper_Position_Command](https://brickschema.org/schema/Brick#Damper_Position_Command)**
     *
     * Controls the position (the degree of openness) of a damper
     *
     * @type        class
     * @parent      brick:Damper_Command
     */
    Damper_Position_Command = this.toIri().concat('Damper_Position_Command');
    /**
     * **[brick:Damper_Position_Sensor](https://brickschema.org/schema/Brick#Damper_Position_Sensor)**
     *
     * Measures the current position of a damper in terms of the percent of fully open
     *
     * @type        class
     * @parent      brick:Position_Sensor
     */
    Damper_Position_Sensor = this.toIri().concat('Damper_Position_Sensor');
    /**
     * **[brick:Damper_Position_Setpoint](https://brickschema.org/schema/Brick#Damper_Position_Setpoint)**
     *
     * Sets the position of damper
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Damper_Position_Setpoint = this.toIri().concat('Damper_Position_Setpoint');
    /**
     * **[brick:Database](https://brickschema.org/schema/Brick#Database)**
     *
     * A database storing the timeseries data for the related point. Properties on this class are *to be determined*; feel free to add arbitrary properties onto Database instances for your particular deployment
     *
     * @type        class
     */
    Database = this.toIri().concat('Database');
    /**
     * **[brick:Deadband_Setpoint](https://brickschema.org/schema/Brick#Deadband_Setpoint)**
     *
     * Sets the size of a deadband
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Deadband_Setpoint = this.toIri().concat('Deadband_Setpoint');
    /**
     * **[brick:Deceleration_Time](https://brickschema.org/schema/Brick#Deceleration_Time)**
     *
     * @type        instance
     */
    Deceleration_Time = this.toIri().concat('Deceleration_Time');
    /**
     * **[brick:Deceleration_Time_Setpoint](https://brickschema.org/schema/Brick#Deceleration_Time_Setpoint)**
     *
     * @type        class
     * @parent      brick:Time_Setpoint
     */
    Deceleration_Time_Setpoint = this.toIri().concat('Deceleration_Time_Setpoint');
    /**
     * **[brick:Dedicated_Outdoor_Air_System_Unit](https://brickschema.org/schema/Brick#Dedicated_Outdoor_Air_System_Unit)**
     *
     * A device that conditions and delivers 100% outdoor air to its assigned spaces. It decouples air-conditioning of the outdoor air, usually used to provide minimum outdoor air ventilation, from conditioning of the internal loads.
     *
     * @type        class
     * @parent      brick:AHU
     */
    Dedicated_Outdoor_Air_System_Unit = this.toIri().concat('Dedicated_Outdoor_Air_System_Unit');
    /**
     * **[brick:Dehumidification_Start_Stop_Status](https://brickschema.org/schema/Brick#Dehumidification_Start_Stop_Status)**
     *
     * @type        class
     * @parent      brick:Start_Stop_Status
     */
    Dehumidification_Start_Stop_Status = this.toIri().concat('Dehumidification_Start_Stop_Status');
    /**
     * **[brick:Deionised_Water_Conductivity_Sensor](https://brickschema.org/schema/Brick#Deionised_Water_Conductivity_Sensor)**
     *
     * Measures the electrical conductance of deionised water
     *
     * @type        class
     * @parent      brick:Conductivity_Sensor
     */
    Deionised_Water_Conductivity_Sensor = this.toIri().concat('Deionised_Water_Conductivity_Sensor');
    /**
     * **[brick:Deionised_Water_Level_Sensor](https://brickschema.org/schema/Brick#Deionised_Water_Level_Sensor)**
     *
     * Measures the height/level of deionised water in some container
     *
     * @type        class
     * @parent      brick:Water_Level_Sensor
     */
    Deionised_Water_Level_Sensor = this.toIri().concat('Deionised_Water_Level_Sensor');
    /**
     * **[brick:Deionized_Water](https://brickschema.org/schema/Brick#Deionized_Water)**
     *
     * Water which has been purified by removing its ions (constituting the majority of non-particulate contaminants)
     *
     * @type        class
     * @parent      brick:Water
     */
    Deionized_Water = this.toIri().concat('Deionized_Water');
    /**
     * **[brick:Deionized_Water_Alarm](https://brickschema.org/schema/Brick#Deionized_Water_Alarm)**
     *
     * An alarm that indicates deionized water leaks.
     *
     * @type        class
     * @parent      brick:Water_Alarm
     */
    Deionized_Water_Alarm = this.toIri().concat('Deionized_Water_Alarm');
    /**
     * **[brick:Delay_Parameter](https://brickschema.org/schema/Brick#Delay_Parameter)**
     *
     * A parameter determining how long to delay a subsequent action to take place after a received signal
     *
     * @type        class
     * @parent      brick:Parameter
     */
    Delay_Parameter = this.toIri().concat('Delay_Parameter');
    /**
     * **[brick:Demand_Sensor](https://brickschema.org/schema/Brick#Demand_Sensor)**
     *
     * Measures the amount of power consumed by the use of some process; typically found by multiplying the tonnage of a unit (e.g. RTU) by the efficiency rating in kW/ton
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Demand_Sensor = this.toIri().concat('Demand_Sensor');
    /**
     * **[brick:Demand_Setpoint](https://brickschema.org/schema/Brick#Demand_Setpoint)**
     *
     * Sets the rate required for a process
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Demand_Setpoint = this.toIri().concat('Demand_Setpoint');
    /**
     * **[brick:Derivative_Gain_Parameter](https://brickschema.org/schema/Brick#Derivative_Gain_Parameter)**
     *
     * @type        class
     * @parent      brick:Gain_Parameter
     */
    Derivative_Gain_Parameter = this.toIri().concat('Derivative_Gain_Parameter');
    /**
     * **[brick:Derivative_Time_Parameter](https://brickschema.org/schema/Brick#Derivative_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Time_Parameter
     */
    Derivative_Time_Parameter = this.toIri().concat('Derivative_Time_Parameter');
    /**
     * **[brick:Detention_Room](https://brickschema.org/schema/Brick#Detention_Room)**
     *
     * A space for the temporary involuntary confinement of people
     *
     * @type        class
     * @parent      brick:Security_Service_Room
     */
    Detention_Room = this.toIri().concat('Detention_Room');
    /**
     * **[brick:Dew_Point_Setpoint](https://brickschema.org/schema/Brick#Dew_Point_Setpoint)**
     *
     * Sets dew point
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Dew_Point_Setpoint = this.toIri().concat('Dew_Point_Setpoint');
    /**
     * **[brick:Dewpoint](https://brickschema.org/schema/Brick#Dewpoint)**
     *
     * @type        instance
     */
    Dewpoint = this.toIri().concat('Dewpoint');
    /**
     * **[brick:Dewpoint_Sensor](https://brickschema.org/schema/Brick#Dewpoint_Sensor)**
     *
     * Senses the dewpoint temperature . Dew point is the temperature to which air must be cooled to become saturated with water vapor
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Dewpoint_Sensor = this.toIri().concat('Dewpoint_Sensor');
    /**
     * **[brick:Differential_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Differential_Air_Temperature_Setpoint)**
     *
     * Sets temperature of diffrential air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Differential_Air_Temperature_Setpoint = this.toIri().concat('Differential_Air_Temperature_Setpoint');
    /**
     * **[brick:ΔCO2Concentration](https://brickschema.org/schema/Brick#Differential_CO2_Concentration)**
     *
     * The difference in carbon dioxide concentration between two areas
     *
     * @type        instance
     */
    Differential_CO2_Concentration = this.toIri().concat('Differential_CO2_Concentration');
    /**
     * **[brick:ΔCOConcentration](https://brickschema.org/schema/Brick#Differential_CO_Concentration)**
     *
     * The difference in carbon monoxide concentration between two areas
     *
     * @type        instance
     */
    Differential_CO_Concentration = this.toIri().concat('Differential_CO_Concentration');
    /**
     * **[brick:Differential_Dry_Bulb_Temperature](https://brickschema.org/schema/Brick#Differential_Dry_Bulb_Temperature)**
     *
     * @type        instance
     */
    Differential_Dry_Bulb_Temperature = this.toIri().concat('Differential_Dry_Bulb_Temperature');
    /**
     * **[brick:Differential_Dynamic_Pressure](https://brickschema.org/schema/Brick#Differential_Dynamic_Pressure)**
     *
     * @type        instance
     */
    Differential_Dynamic_Pressure = this.toIri().concat('Differential_Dynamic_Pressure');
    /**
     * **[brick:Differential_Pressure](https://brickschema.org/schema/Brick#Differential_Pressure)**
     *
     * @type        instance
     */
    Differential_Pressure = this.toIri().concat('Differential_Pressure');
    /**
     * **[brick:Differential_Pressure_Bypass_Valve](https://brickschema.org/schema/Brick#Differential_Pressure_Bypass_Valve)**
     *
     * A 2-way, self contained proportional valve with an integral differential pressure adjustment setting.
     *
     * @type        class
     * @parent      brick:Bypass_Valve
     */
    Differential_Pressure_Bypass_Valve = this.toIri().concat('Differential_Pressure_Bypass_Valve');
    /**
     * **[brick:Differential_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Differential_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of differential pressure
     *
     * @type        class
     * @parent      brick:Deadband_Setpoint
     */
    Differential_Pressure_Deadband_Setpoint = this.toIri().concat('Differential_Pressure_Deadband_Setpoint');
    /**
     * **[brick:Differential_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Differential_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Integral_Time_Parameter
     */
    Differential_Pressure_Integral_Time_Parameter = this.toIri().concat('Differential_Pressure_Integral_Time_Parameter');
    /**
     * **[brick:Differential_Pressure_Load_Shed_Status](https://brickschema.org/schema/Brick#Differential_Pressure_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Status
     */
    Differential_Pressure_Load_Shed_Status = this.toIri().concat('Differential_Pressure_Load_Shed_Status');
    /**
     * **[brick:Differential_Pressure_Proportional_Band](https://brickschema.org/schema/Brick#Differential_Pressure_Proportional_Band)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    Differential_Pressure_Proportional_Band = this.toIri().concat('Differential_Pressure_Proportional_Band');
    /**
     * **[brick:Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Differential_Pressure_Sensor)**
     *
     * Measures the difference between two applied pressures
     *
     * @type        class
     * @parent      brick:Pressure_Sensor
     */
    Differential_Pressure_Sensor = this.toIri().concat('Differential_Pressure_Sensor');
    /**
     * **[brick:Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Differential_Pressure_Setpoint)**
     *
     * Sets differential pressure
     *
     * @type        class
     * @parent      brick:Pressure_Setpoint
     */
    Differential_Pressure_Setpoint = this.toIri().concat('Differential_Pressure_Setpoint');
    /**
     * **[brick:Differential_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Differential_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Differential_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    Differential_Pressure_Setpoint_Limit = this.toIri().concat('Differential_Pressure_Setpoint_Limit');
    /**
     * **[brick:Differential_Pressure_Step_Parameter](https://brickschema.org/schema/Brick#Differential_Pressure_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Step_Parameter
     */
    Differential_Pressure_Step_Parameter = this.toIri().concat('Differential_Pressure_Step_Parameter');
    /**
     * **[brick:Differential_Speed_Sensor](https://brickschema.org/schema/Brick#Differential_Speed_Sensor)**
     *
     * @type        class
     * @parent      brick:Speed_Sensor
     */
    Differential_Speed_Sensor = this.toIri().concat('Differential_Speed_Sensor');
    /**
     * **[brick:Differential_Speed_Setpoint](https://brickschema.org/schema/Brick#Differential_Speed_Setpoint)**
     *
     * Sets differential speed
     *
     * @type        class
     * @parent      brick:Speed_Setpoint
     */
    Differential_Speed_Setpoint = this.toIri().concat('Differential_Speed_Setpoint');
    /**
     * **[brick:Differential_Static_Pressure](https://brickschema.org/schema/Brick#Differential_Static_Pressure)**
     *
     * @type        instance
     */
    Differential_Static_Pressure = this.toIri().concat('Differential_Static_Pressure');
    /**
     * **[brick:Differential_Supply_Return_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Differential_Supply_Return_Water_Temperature_Sensor)**
     *
     * Measures the difference in temperature between return and supply water of water a circuit
     *
     * @type        class
     * @parent      brick:Return_Water_Temperature_Sensor
     */
    Differential_Supply_Return_Water_Temperature_Sensor = this.toIri().concat('Differential_Supply_Return_Water_Temperature_Sensor');
    /**
     * **[brick:Differential_Temperature](https://brickschema.org/schema/Brick#Differential_Temperature)**
     *
     * @type        instance
     */
    Differential_Temperature = this.toIri().concat('Differential_Temperature');
    /**
     * **[brick:Dimmer](https://brickschema.org/schema/Brick#Dimmer)**
     *
     * A switch providing continuous control over all or part of a lighting installation; typically potentiometer-based
     *
     * @type        class
     * @parent      brick:Switch
     */
    Dimmer = this.toIri().concat('Dimmer');
    /**
     * **[brick:Direction](https://brickschema.org/schema/Brick#Direction)**
     *
     * @type        instance
     */
    Direction = this.toIri().concat('Direction');
    /**
     * **[brick:Direction_Command](https://brickschema.org/schema/Brick#Direction_Command)**
     *
     * Commands that affect the direction of some phenomenon
     *
     * @type        class
     * @parent      brick:Command
     */
    Direction_Command = this.toIri().concat('Direction_Command');
    /**
     * **[brick:Direction_Sensor](https://brickschema.org/schema/Brick#Direction_Sensor)**
     *
     * Measures the direction in degrees in which a phenomenon is occuring
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Direction_Sensor = this.toIri().concat('Direction_Sensor');
    /**
     * **[brick:Direction_Status](https://brickschema.org/schema/Brick#Direction_Status)**
     *
     * Indicates which direction a device is operating in
     *
     * @type        class
     * @parent      brick:Status
     */
    Direction_Status = this.toIri().concat('Direction_Status');
    /**
     * **[brick:Disable_Command](https://brickschema.org/schema/Brick#Disable_Command)**
     *
     * Commands that disable functionality
     *
     * @type        class
     * @parent      brick:Command
     */
    Disable_Command = this.toIri().concat('Disable_Command');
    /**
     * **[brick:Disable_Differential_Enthalpy_Command](https://brickschema.org/schema/Brick#Disable_Differential_Enthalpy_Command)**
     *
     * Disables the use of differential enthalpy control
     *
     * @type        class
     * @parent      brick:Disable_Command
     */
    Disable_Differential_Enthalpy_Command = this.toIri().concat('Disable_Differential_Enthalpy_Command');
    /**
     * **[brick:Disable_Differential_Temperature_Command](https://brickschema.org/schema/Brick#Disable_Differential_Temperature_Command)**
     *
     * Disables the use of differential temperature control
     *
     * @type        class
     * @parent      brick:Disable_Command
     */
    Disable_Differential_Temperature_Command = this.toIri().concat('Disable_Differential_Temperature_Command');
    /**
     * **[brick:Disable_Fixed_Enthalpy_Command](https://brickschema.org/schema/Brick#Disable_Fixed_Enthalpy_Command)**
     *
     * Disables the use of fixed enthalpy control
     *
     * @type        class
     * @parent      brick:Disable_Command
     */
    Disable_Fixed_Enthalpy_Command = this.toIri().concat('Disable_Fixed_Enthalpy_Command');
    /**
     * **[brick:Disable_Fixed_Temperature_Command](https://brickschema.org/schema/Brick#Disable_Fixed_Temperature_Command)**
     *
     * Disables the use of fixed temperature temperature
     *
     * @type        class
     * @parent      brick:Disable_Command
     */
    Disable_Fixed_Temperature_Command = this.toIri().concat('Disable_Fixed_Temperature_Command');
    /**
     * **[brick:Disable_Hot_Water_System_Outside_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Disable_Hot_Water_System_Outside_Air_Temperature_Setpoint)**
     *
     * Disables hot water system when outside air temperature reaches the indicated value
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Setpoint
     */
    Disable_Hot_Water_System_Outside_Air_Temperature_Setpoint = this.toIri().concat('Disable_Hot_Water_System_Outside_Air_Temperature_Setpoint');
    /**
     * **[brick:Disable_Status](https://brickschema.org/schema/Brick#Disable_Status)**
     *
     * Indicates if functionality has been disabled
     *
     * @type        class
     * @parent      brick:Status
     */
    Disable_Status = this.toIri().concat('Disable_Status');
    /**
     * **[brick:Discharge_Air](https://brickschema.org/schema/Brick#Discharge_Air)**
     *
     * the air exiting the registers (vents).
     *
     * @type        class
     * @parent      brick:Air
     */
    Discharge_Air = this.toIri().concat('Discharge_Air');
    /**
     * **[brick:Discharge_Air_Dewpoint_Sensor](https://brickschema.org/schema/Brick#Discharge_Air_Dewpoint_Sensor)**
     *
     * Measures dewpoint of discharge air
     *
     * @type        class
     * @parent      brick:Dewpoint_Sensor
     */
    Discharge_Air_Dewpoint_Sensor = this.toIri().concat('Discharge_Air_Dewpoint_Sensor');
    /**
     * **[brick:Discharge_Air_Duct_Pressure_Status](https://brickschema.org/schema/Brick#Discharge_Air_Duct_Pressure_Status)**
     *
     * Indicates if air pressure in discharge duct is within expected bounds
     *
     * @type        class
     * @parent      brick:Pressure_Status
     */
    Discharge_Air_Duct_Pressure_Status = this.toIri().concat('Discharge_Air_Duct_Pressure_Status');
    /**
     * **[brick:Discharge_Air_Flow_Demand_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Flow_Demand_Setpoint)**
     *
     * Sets the rate of discharge air flow required for a process
     *
     * @type        class
     * @parent      brick:Air_Flow_Demand_Setpoint
     */
    Discharge_Air_Flow_Demand_Setpoint = this.toIri().concat('Discharge_Air_Flow_Demand_Setpoint');
    /**
     * **[brick:Discharge_Air_Flow_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Flow_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Flow_Reset_Setpoint
     */
    Discharge_Air_Flow_High_Reset_Setpoint = this.toIri().concat('Discharge_Air_Flow_High_Reset_Setpoint');
    /**
     * **[brick:Discharge_Air_Flow_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Flow_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Flow_Reset_Setpoint
     */
    Discharge_Air_Flow_Low_Reset_Setpoint = this.toIri().concat('Discharge_Air_Flow_Low_Reset_Setpoint');
    /**
     * **[brick:Discharge_Air_Flow_Reset_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Flow_Reset_Setpoint)**
     *
     * Setpoints used in Reset strategies
     *
     * @type        class
     * @parent      brick:Reset_Setpoint
     */
    Discharge_Air_Flow_Reset_Setpoint = this.toIri().concat('Discharge_Air_Flow_Reset_Setpoint');
    /**
     * **[brick:Discharge_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Discharge_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of discharge air
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    Discharge_Air_Flow_Sensor = this.toIri().concat('Discharge_Air_Flow_Sensor');
    /**
     * **[brick:Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint
     */
    Discharge_Air_Flow_Setpoint = this.toIri().concat('Discharge_Air_Flow_Setpoint');
    /**
     * **[brick:Discharge_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Discharge_Air_Humidity_Sensor)**
     *
     * Measures the relative humidity of discharge air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    Discharge_Air_Humidity_Sensor = this.toIri().concat('Discharge_Air_Humidity_Sensor');
    /**
     * **[brick:Discharge_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for discharge air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    Discharge_Air_Humidity_Setpoint = this.toIri().concat('Discharge_Air_Humidity_Setpoint');
    /**
     * **[brick:Discharge_Air_Smoke_Detection_Alarm](https://brickschema.org/schema/Brick#Discharge_Air_Smoke_Detection_Alarm)**
     *
     * @type        class
     * @parent      brick:Air_Alarm
     */
    Discharge_Air_Smoke_Detection_Alarm = this.toIri().concat('Discharge_Air_Smoke_Detection_Alarm');
    /**
     * **[brick:Discharge_Air_Static_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of static pressure of discharge air
     *
     * @type        class
     * @parent      brick:Discharge_Air_Static_Pressure_Setpoint
     */
    Discharge_Air_Static_Pressure_Deadband_Setpoint = this.toIri().concat('Discharge_Air_Static_Pressure_Deadband_Setpoint');
    /**
     * **[brick:Discharge_Air_Static_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Static_Pressure_Integral_Time_Parameter
     */
    Discharge_Air_Static_Pressure_Integral_Time_Parameter = this.toIri().concat('Discharge_Air_Static_Pressure_Integral_Time_Parameter');
    /**
     * **[brick:Discharge_Air_Static_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Static_Pressure_Proportional_Band_Parameter
     */
    Discharge_Air_Static_Pressure_Proportional_Band_Parameter = this.toIri().concat('Discharge_Air_Static_Pressure_Proportional_Band_Parameter');
    /**
     * **[brick:Discharge_Air_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Sensor)**
     *
     * The static pressure of air within discharge regions of an HVAC system
     *
     * @type        class
     * @parent      brick:Static_Pressure_Sensor
     */
    Discharge_Air_Static_Pressure_Sensor = this.toIri().concat('Discharge_Air_Static_Pressure_Sensor');
    /**
     * **[brick:Discharge_Air_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Setpoint)**
     *
     * Sets static pressure of discharge air
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    Discharge_Air_Static_Pressure_Setpoint = this.toIri().concat('Discharge_Air_Static_Pressure_Setpoint');
    /**
     * **[brick:Discharge_Air_Static_Pressure_Step_Parameter](https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Static_Pressure_Step_Parameter
     */
    Discharge_Air_Static_Pressure_Step_Parameter = this.toIri().concat('Discharge_Air_Static_Pressure_Step_Parameter');
    /**
     * **[brick:Discharge_Air_Temperature_Alarm](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with the temperature of discharge air.
     *
     * @type        class
     * @parent      brick:Air_Temperature_Alarm
     */
    Discharge_Air_Temperature_Alarm = this.toIri().concat('Discharge_Air_Temperature_Alarm');
    /**
     * **[brick:Discharge_Air_Temperature_Cooling_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Cooling_Setpoint)**
     *
     * Sets temperature of discharge air for cooling
     *
     * @type        class
     * @parent      brick:Cooling_Temperature_Setpoint
     */
    Discharge_Air_Temperature_Cooling_Setpoint = this.toIri().concat('Discharge_Air_Temperature_Cooling_Setpoint');
    /**
     * **[brick:Discharge_Air_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of discharge air
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint
     */
    Discharge_Air_Temperature_Deadband_Setpoint = this.toIri().concat('Discharge_Air_Temperature_Deadband_Setpoint');
    /**
     * **[brick:Discharge_Air_Temperature_Heating_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Heating_Setpoint)**
     *
     * Sets temperature of discharge air for heating
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint
     */
    Discharge_Air_Temperature_Heating_Setpoint = this.toIri().concat('Discharge_Air_Temperature_Heating_Setpoint');
    /**
     * **[brick:Discharge_Air_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Reset_Differential_Setpoint
     */
    Discharge_Air_Temperature_High_Reset_Setpoint = this.toIri().concat('Discharge_Air_Temperature_High_Reset_Setpoint');
    /**
     * **[brick:Discharge_Air_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Reset_Differential_Setpoint
     */
    Discharge_Air_Temperature_Low_Reset_Setpoint = this.toIri().concat('Discharge_Air_Temperature_Low_Reset_Setpoint');
    /**
     * **[brick:Discharge_Air_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    Discharge_Air_Temperature_Proportional_Band_Parameter = this.toIri().concat('Discharge_Air_Temperature_Proportional_Band_Parameter');
    /**
     * **[brick:Discharge_Air_Temperature_Reset_Differential_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Reset_Differential_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_Differential_Reset_Setpoint
     */
    Discharge_Air_Temperature_Reset_Differential_Setpoint = this.toIri().concat('Discharge_Air_Temperature_Reset_Differential_Setpoint');
    /**
     * **[brick:Discharge_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Sensor)**
     *
     * Measures the temperature of discharge air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    Discharge_Air_Temperature_Sensor = this.toIri().concat('Discharge_Air_Temperature_Sensor');
    /**
     * **[brick:Discharge_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Setpoint)**
     *
     * Sets temperature of discharge air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Discharge_Air_Temperature_Setpoint = this.toIri().concat('Discharge_Air_Temperature_Setpoint');
    /**
     * **[brick:Discharge_Air_Temperature_Setpoint_Limit](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Discharge_Air_Temperature_Setpoint.
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint_Limit
     */
    Discharge_Air_Temperature_Setpoint_Limit = this.toIri().concat('Discharge_Air_Temperature_Setpoint_Limit');
    /**
     * **[brick:Discharge_Air_Temperature_Step_Parameter](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Step_Parameter
     */
    Discharge_Air_Temperature_Step_Parameter = this.toIri().concat('Discharge_Air_Temperature_Step_Parameter');
    /**
     * **[brick:Discharge_Air_Velocity_Pressure_Sensor](https://brickschema.org/schema/Brick#Discharge_Air_Velocity_Pressure_Sensor)**
     *
     * @type        class
     * @parent      brick:Velocity_Pressure_Sensor
     */
    Discharge_Air_Velocity_Pressure_Sensor = this.toIri().concat('Discharge_Air_Velocity_Pressure_Sensor');
    /**
     * **[brick:Discharge_Chilled_Water](https://brickschema.org/schema/Brick#Discharge_Chilled_Water)**
     *
     * @type        class
     * @parent      brick:Chilled_Water
     */
    Discharge_Chilled_Water = this.toIri().concat('Discharge_Chilled_Water');
    /**
     * **[brick:Discharge_Fan](https://brickschema.org/schema/Brick#Discharge_Fan)**
     *
     * Fan moving air discharged from HVAC vents
     *
     * @type        class
     * @parent      brick:Fan
     */
    Discharge_Fan = this.toIri().concat('Discharge_Fan');
    /**
     * **[brick:Discharge_Hot_Water](https://brickschema.org/schema/Brick#Discharge_Hot_Water)**
     *
     * @type        class
     * @parent      brick:Discharge_Water
     */
    Discharge_Hot_Water = this.toIri().concat('Discharge_Hot_Water');
    /**
     * **[brick:Discharge_Water](https://brickschema.org/schema/Brick#Discharge_Water)**
     *
     * @type        class
     * @parent      brick:Water
     */
    Discharge_Water = this.toIri().concat('Discharge_Water');
    /**
     * **[brick:Discharge_Water_Differential_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Discharge_Water_Differential_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of differential pressure of discharge water
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Deadband_Setpoint
     */
    Discharge_Water_Differential_Pressure_Deadband_Setpoint = this.toIri().concat('Discharge_Water_Differential_Pressure_Deadband_Setpoint');
    /**
     * **[brick:Discharge_Water_Differential_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Discharge_Water_Differential_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Integral_Time_Parameter
     */
    Discharge_Water_Differential_Pressure_Integral_Time_Parameter = this.toIri().concat('Discharge_Water_Differential_Pressure_Integral_Time_Parameter');
    /**
     * **[brick:Discharge_Water_Differential_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Discharge_Water_Differential_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Proportional_Band
     */
    Discharge_Water_Differential_Pressure_Proportional_Band_Parameter = this.toIri().concat('Discharge_Water_Differential_Pressure_Proportional_Band_Parameter');
    /**
     * **[brick:Discharge_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Discharge_Water_Flow_Sensor)**
     *
     * Measures the rate of flow of discharge water
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    Discharge_Water_Flow_Sensor = this.toIri().concat('Discharge_Water_Flow_Sensor');
    /**
     * **[brick:Discharge_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Discharge_Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of discharge water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    Discharge_Water_Flow_Setpoint = this.toIri().concat('Discharge_Water_Flow_Setpoint');
    /**
     * **[brick:Discharge_Water_Temperature_Alarm](https://brickschema.org/schema/Brick#Discharge_Water_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with temperature of the discharge water.
     *
     * @type        class
     * @parent      brick:Water_Temperature_Alarm
     */
    Discharge_Water_Temperature_Alarm = this.toIri().concat('Discharge_Water_Temperature_Alarm');
    /**
     * **[brick:Discharge_Water_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Discharge_Water_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    Discharge_Water_Temperature_Proportional_Band_Parameter = this.toIri().concat('Discharge_Water_Temperature_Proportional_Band_Parameter');
    /**
     * **[brick:Discharge_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Discharge_Water_Temperature_Sensor)**
     *
     * Measures the temperature of discharge water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    Discharge_Water_Temperature_Sensor = this.toIri().concat('Discharge_Water_Temperature_Sensor');
    /**
     * **[brick:Discharge_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Discharge_Water_Temperature_Setpoint)**
     *
     * Sets temperature of discharge water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    Discharge_Water_Temperature_Setpoint = this.toIri().concat('Discharge_Water_Temperature_Setpoint');
    /**
     * **[brick:Disconnect_Switch](https://brickschema.org/schema/Brick#Disconnect_Switch)**
     *
     * Building power is most commonly provided by utility company through a master disconnect switch (sometimes called a service disconnect) in the main electrical room of a building. The Utility Company provided master disconnect switch often owns or restricts access to this switch. There can also be other cases where a disconnect is placed into an electrical system to allow service cut-off to a portion of the building.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    Disconnect_Switch = this.toIri().concat('Disconnect_Switch');
    /**
     * **[brick:Displacement_Flow_Air_Diffuser](https://brickschema.org/schema/Brick#Displacement_Flow_Air_Diffuser)**
     *
     * An air diffuser that is designed for low discharge air speeds to minimize turbulence and induction of room air. This diffuser is used with displacement ventilation systems.
     *
     * @type        class
     * @parent      brick:Air_Diffuser
     */
    Displacement_Flow_Air_Diffuser = this.toIri().concat('Displacement_Flow_Air_Diffuser');
    /**
     * **[brick:Distribution_Frame](https://brickschema.org/schema/Brick#Distribution_Frame)**
     *
     * A class of spaces where the cables carrying signals meet and connect, e.g. a wiring closet or a broadcast downlink room
     *
     * @type        class
     * @parent      brick:Telecom_Room
     */
    Distribution_Frame = this.toIri().concat('Distribution_Frame');
    /**
     * **[brick:Domestic_Hot_Water_Supply_Temperature_Sensor](https://brickschema.org/schema/Brick#Domestic_Hot_Water_Supply_Temperature_Sensor)**
     *
     * Measures the temperature of domestic water supplied by a hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Sensor
     */
    Domestic_Hot_Water_Supply_Temperature_Sensor = this.toIri().concat('Domestic_Hot_Water_Supply_Temperature_Sensor');
    /**
     * **[brick:Domestic_Hot_Water_Supply_Temperature_Setpoint](https://brickschema.org/schema/Brick#Domestic_Hot_Water_Supply_Temperature_Setpoint)**
     *
     * Sets temperature of supplying part of domestic hot water
     *
     * @type        class
     * @parent      brick:Domestic_Hot_Water_Temperature_Setpoint
     */
    Domestic_Hot_Water_Supply_Temperature_Setpoint = this.toIri().concat('Domestic_Hot_Water_Supply_Temperature_Setpoint');
    /**
     * **[brick:Domestic_Hot_Water_System](https://brickschema.org/schema/Brick#Domestic_Hot_Water_System)**
     *
     * The equipment, devices and conduits that handle the production and distribution of domestic hot water in a building
     *
     * @type        class
     * @parent      brick:System
     */
    Domestic_Hot_Water_System = this.toIri().concat('Domestic_Hot_Water_System');
    /**
     * **[brick:Domestic_Hot_Water_System_Enable_Command](https://brickschema.org/schema/Brick#Domestic_Hot_Water_System_Enable_Command)**
     *
     * Enables operation of the domestic hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_System_Enable_Command
     */
    Domestic_Hot_Water_System_Enable_Command = this.toIri().concat('Domestic_Hot_Water_System_Enable_Command');
    /**
     * **[brick:Domestic_Hot_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Domestic_Hot_Water_Temperature_Setpoint)**
     *
     * Sets temperature of domestic hot water
     *
     * @type        class
     * @parent      brick:Hot_Water_Temperature_Setpoint
     */
    Domestic_Hot_Water_Temperature_Setpoint = this.toIri().concat('Domestic_Hot_Water_Temperature_Setpoint');
    /**
     * **[brick:Domestic_Hot_Water_Valve](https://brickschema.org/schema/Brick#Domestic_Hot_Water_Valve)**
     *
     * A valve regulating the flow of domestic hot water
     *
     * @type        class
     * @parent      brick:Hot_Water_Valve
     */
    Domestic_Hot_Water_Valve = this.toIri().concat('Domestic_Hot_Water_Valve');
    /**
     * **[brick:Domestic_Water](https://brickschema.org/schema/Brick#Domestic_Water)**
     *
     * A collection of equipment that transport and regulate domestic water among each other
     *
     * @type        class
     * @parent      brick:Water
     */
    Domestic_Water = this.toIri().concat('Domestic_Water');
    /**
     * **[brick:Domestic_Water_Loop](https://brickschema.org/schema/Brick#Domestic_Water_Loop)**
     *
     * @type        class
     * @parent      brick:Water_Loop
     */
    Domestic_Water_Loop = this.toIri().concat('Domestic_Water_Loop');
    /**
     * **[brick:Drench_Hose](https://brickschema.org/schema/Brick#Drench_Hose)**
     *
     * @type        class
     * @parent      brick:Emergency_Wash_Station
     */
    Drench_Hose = this.toIri().concat('Drench_Hose');
    /**
     * **[brick:Drive_Ready_Status](https://brickschema.org/schema/Brick#Drive_Ready_Status)**
     *
     * Indicates if a hard drive or other storage device is ready to be used, e.g. in the context of RAID
     *
     * @type        class
     * @parent      brick:Status
     */
    Drive_Ready_Status = this.toIri().concat('Drive_Ready_Status');
    /**
     * **[brick:Dry_Bulb_Temperature](https://brickschema.org/schema/Brick#Dry_Bulb_Temperature)**
     *
     * The temperature of air measured by a thermometer freely exposed to the air, but shielded from radiation and moisture. (https://en.wikipedia.org/wiki/Dry-bulb_temperature)
     *
     * @type        instance
     */
    Dry_Bulb_Temperature = this.toIri().concat('Dry_Bulb_Temperature');
    /**
     * **[brick:Duration_Sensor](https://brickschema.org/schema/Brick#Duration_Sensor)**
     *
     * Measures the duration of a phenomenon or event
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Duration_Sensor = this.toIri().concat('Duration_Sensor');
    /**
     * **[brick:Dynamic_Pressure](https://brickschema.org/schema/Brick#Dynamic_Pressure)**
     *
     * @type        instance
     */
    Dynamic_Pressure = this.toIri().concat('Dynamic_Pressure');
    /**
     * **[brick:ESS_Panel](https://brickschema.org/schema/Brick#ESS_Panel)**
     *
     * See Embedded_Surface_System_Panel
     *
     * @type        class
     * @parent      brick:Radiant_Panel
     */
    ESS_Panel = this.toIri().concat('ESS_Panel');
    /**
     * **[brick:EconCycle_Start_Stop_Status](https://brickschema.org/schema/Brick#EconCycle_Start_Stop_Status)**
     *
     * @type        class
     * @parent      brick:Start_Stop_Status
     */
    EconCycle_Start_Stop_Status = this.toIri().concat('EconCycle_Start_Stop_Status');
    /**
     * **[brick:Economizer](https://brickschema.org/schema/Brick#Economizer)**
     *
     * Device that, on proper variable sensing, initiates control signals or actions to conserve energy. A control system that reduces the mechanical heating and cooling requirement.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Economizer = this.toIri().concat('Economizer');
    /**
     * **[brick:Economizer_Damper](https://brickschema.org/schema/Brick#Economizer_Damper)**
     *
     * A damper that is part of an economizer that is used to module the flow of air
     *
     * @type        class
     * @parent      brick:Damper
     */
    Economizer_Damper = this.toIri().concat('Economizer_Damper');
    /**
     * **[brick:Effective_Air_Temperature_Cooling_Setpoint](https://brickschema.org/schema/Brick#Effective_Air_Temperature_Cooling_Setpoint)**
     *
     * @type        class
     * @parent      brick:Cooling_Temperature_Setpoint
     */
    Effective_Air_Temperature_Cooling_Setpoint = this.toIri().concat('Effective_Air_Temperature_Cooling_Setpoint');
    /**
     * **[brick:Effective_Air_Temperature_Heating_Setpoint](https://brickschema.org/schema/Brick#Effective_Air_Temperature_Heating_Setpoint)**
     *
     * @type        class
     * @parent      brick:Effective_Air_Temperature_Setpoint
     */
    Effective_Air_Temperature_Heating_Setpoint = this.toIri().concat('Effective_Air_Temperature_Heating_Setpoint');
    /**
     * **[brick:Effective_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Effective_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Effective_Air_Temperature_Setpoint = this.toIri().concat('Effective_Air_Temperature_Setpoint');
    /**
     * **[brick:Effective_Discharge_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Effective_Discharge_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint
     */
    Effective_Discharge_Air_Temperature_Setpoint = this.toIri().concat('Effective_Discharge_Air_Temperature_Setpoint');
    /**
     * **[brick:Effective_Return_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Effective_Return_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Effective_Air_Temperature_Setpoint
     */
    Effective_Return_Air_Temperature_Setpoint = this.toIri().concat('Effective_Return_Air_Temperature_Setpoint');
    /**
     * **[brick:Effective_Room_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Effective_Room_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Effective_Air_Temperature_Setpoint
     */
    Effective_Room_Air_Temperature_Setpoint = this.toIri().concat('Effective_Room_Air_Temperature_Setpoint');
    /**
     * **[brick:Effective_Supply_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Effective_Supply_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Effective_Air_Temperature_Setpoint
     */
    Effective_Supply_Air_Temperature_Setpoint = this.toIri().concat('Effective_Supply_Air_Temperature_Setpoint');
    /**
     * **[brick:Effective_Zone_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Effective_Zone_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Effective_Air_Temperature_Setpoint
     */
    Effective_Zone_Air_Temperature_Setpoint = this.toIri().concat('Effective_Zone_Air_Temperature_Setpoint');
    /**
     * **[brick:EfficiencyShape](https://brickschema.org/schema/Brick#EfficiencyShape)**
     *
     * @type        class
     */
    EfficiencyShape = this.toIri().concat('EfficiencyShape');
    /**
     * **[brick:Electric_Baseboard_Radiator](https://brickschema.org/schema/Brick#Electric_Baseboard_Radiator)**
     *
     * Electric heating device located at or near the floor
     *
     * @type        class
     * @parent      brick:Baseboard_Radiator
     */
    Electric_Baseboard_Radiator = this.toIri().concat('Electric_Baseboard_Radiator');
    /**
     * **[brick:Electric_Boiler](https://brickschema.org/schema/Brick#Electric_Boiler)**
     *
     * A closed, pressure vessel that uses electricity for heating water or other fluids to supply steam or hot water for heating, humidification, or other applications.
     *
     * @type        class
     * @parent      brick:Boiler
     */
    Electric_Boiler = this.toIri().concat('Electric_Boiler');
    /**
     * **[brick:Electric_Current](https://brickschema.org/schema/Brick#Electric_Current)**
     *
     * @type        instance
     */
    Electric_Current = this.toIri().concat('Electric_Current');
    /**
     * **[brick:ElectricEnergy](https://brickschema.org/schema/Brick#Electric_Energy)**
     *
     * A form of energy resulting from the flow of electrical charge
     *
     * @type        instance
     */
    Electric_Energy = this.toIri().concat('Electric_Energy');
    /**
     * **[brick:Electric_Power](https://brickschema.org/schema/Brick#Electric_Power)**
     *
     * Electric Power is the rate at which electrical energy is transferred by an electric circuit. In the simple case of direct current circuits, electric power can be calculated as the product of the potential difference in the circuit (V) and the amount of current flowing in the circuit (I): (P = VI), where (P) is the power, (V) is the potential difference, and (I) is the current. However, in general electric power is calculated by taking the integral of the vector cross-product of the electrical and magnetic fields over a specified area.
     *
     * @type        instance
     */
    Electric_Power = this.toIri().concat('Electric_Power');
    /**
     * **[brick:Electric_Radiator](https://brickschema.org/schema/Brick#Electric_Radiator)**
     *
     * Electric heating device
     *
     * @type        class
     * @parent      brick:Radiator
     */
    Electric_Radiator = this.toIri().concat('Electric_Radiator');
    /**
     * **[brick:Electrical_Equipment](https://brickschema.org/schema/Brick#Electrical_Equipment)**
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Electrical_Equipment = this.toIri().concat('Electrical_Equipment');
    /**
     * **[brick:Electrical_Meter](https://brickschema.org/schema/Brick#Electrical_Meter)**
     *
     * A meter that measures the usage or consumption of electricity
     *
     * @type        class
     * @parent      brick:Meter
     */
    Electrical_Meter = this.toIri().concat('Electrical_Meter');
    /**
     * **[brick:Electrical_Power_Sensor](https://brickschema.org/schema/Brick#Electrical_Power_Sensor)**
     *
     * Measures the amount of instantaneous electric power consumed
     *
     * @type        class
     * @parent      brick:Power_Sensor
     */
    Electrical_Power_Sensor = this.toIri().concat('Electrical_Power_Sensor');
    /**
     * **[brick:Electrical_Room](https://brickschema.org/schema/Brick#Electrical_Room)**
     *
     * A class of service rooms that house electrical equipment for a building
     *
     * @type        class
     * @parent      brick:Service_Room
     */
    Electrical_Room = this.toIri().concat('Electrical_Room');
    /**
     * **[brick:Electrical_System](https://brickschema.org/schema/Brick#Electrical_System)**
     *
     * Devices that serve or are part of the electrical subsystem in the building
     *
     * @type        class
     * @parent      brick:System
     */
    Electrical_System = this.toIri().concat('Electrical_System');
    /**
     * **[brick:Elevator](https://brickschema.org/schema/Brick#Elevator)**
     *
     * A device that provides vertical transportation between floors, levels or decks of a building, vessel or other structure
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Elevator = this.toIri().concat('Elevator');
    /**
     * **[brick:Elevator_Shaft](https://brickschema.org/schema/Brick#Elevator_Shaft)**
     *
     * The vertical space in which an elevator ascends and descends
     *
     * @type        class
     * @parent      brick:Vertical_Space
     */
    Elevator_Shaft = this.toIri().concat('Elevator_Shaft');
    /**
     * **[brick:Elevator_Space](https://brickschema.org/schema/Brick#Elevator_Space)**
     *
     * The vertical space in whcih an elevator ascends and descends
     *
     * @type        class
     * @parent      brick:Vertical_Space
     */
    Elevator_Space = this.toIri().concat('Elevator_Space');
    /**
     * **[brick:Embedded_Surface_System_Panel](https://brickschema.org/schema/Brick#Embedded_Surface_System_Panel)**
     *
     * Radiant panel heating and cooling system where the energy heat source or sink is embedded in a radiant layer which is thermally insulated from the building structure.
     *
     * @type        class
     * @parent      brick:Radiant_Panel
     */
    Embedded_Surface_System_Panel = this.toIri().concat('Embedded_Surface_System_Panel');
    /**
     * **[brick:Embedded_Temperature_Sensor](https://brickschema.org/schema/Brick#Embedded_Temperature_Sensor)**
     *
     * Measures the internal temperature of the radiant layer of the radiant heating and cooling HVAC system.
     *
     * @type        class
     * @parent      brick:Radiant_Panel_Temperature_Sensor
     */
    Embedded_Temperature_Sensor = this.toIri().concat('Embedded_Temperature_Sensor');
    /**
     * **[brick:Embedded_Temperature_Setpoint](https://brickschema.org/schema/Brick#Embedded_Temperature_Setpoint)**
     *
     * Sets temperature for the internal material, e.g. concrete slab, of the radiant panel.
     *
     * @type        class
     * @parent      brick:Radiant_Panel_Temperature_Setpoint
     */
    Embedded_Temperature_Setpoint = this.toIri().concat('Embedded_Temperature_Setpoint');
    /**
     * **[brick:Emergency_Air_Flow_System](https://brickschema.org/schema/Brick#Emergency_Air_Flow_System)**
     *
     * @type        class
     * @parent      brick:Safety_System
     */
    Emergency_Air_Flow_System = this.toIri().concat('Emergency_Air_Flow_System');
    /**
     * **[brick:Emergency_Air_Flow_System_Status](https://brickschema.org/schema/Brick#Emergency_Air_Flow_System_Status)**
     *
     * @type        class
     * @parent      brick:System_Status
     */
    Emergency_Air_Flow_System_Status = this.toIri().concat('Emergency_Air_Flow_System_Status');
    /**
     * **[brick:Emergency_Alarm](https://brickschema.org/schema/Brick#Emergency_Alarm)**
     *
     * Alarms that indicate off-normal conditions associated with emergency systems
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Emergency_Alarm = this.toIri().concat('Emergency_Alarm');
    /**
     * **[brick:Emergency_Generator_Alarm](https://brickschema.org/schema/Brick#Emergency_Generator_Alarm)**
     *
     * An alarm that indicates off-normal conditions associated with an emergency generator
     *
     * @type        class
     * @parent      brick:Emergency_Alarm
     */
    Emergency_Generator_Alarm = this.toIri().concat('Emergency_Generator_Alarm');
    /**
     * **[brick:Emergency_Generator_Status](https://brickschema.org/schema/Brick#Emergency_Generator_Status)**
     *
     * Indicates if an emergency generator is active
     *
     * @type        class
     * @parent      brick:Status
     */
    Emergency_Generator_Status = this.toIri().concat('Emergency_Generator_Status');
    /**
     * **[brick:Emergency_Phone](https://brickschema.org/schema/Brick#Emergency_Phone)**
     *
     * @type        class
     * @parent      brick:Intercom_Equipment
     */
    Emergency_Phone = this.toIri().concat('Emergency_Phone');
    /**
     * **[brick:Emergency_Power_Off_System](https://brickschema.org/schema/Brick#Emergency_Power_Off_System)**
     *
     * A system that can power down a single piece of equipment or a single system from a single point
     *
     * @type        class
     * @parent      brick:Safety_System
     */
    Emergency_Power_Off_System = this.toIri().concat('Emergency_Power_Off_System');
    /**
     * **[brick:Emergency_Power_Off_System_Activated_By_High_Temperature_Status](https://brickschema.org/schema/Brick#Emergency_Power_Off_System_Activated_By_High_Temperature_Status)**
     *
     * @type        class
     * @parent      brick:Emergency_Power_Off_System_Status
     */
    Emergency_Power_Off_System_Activated_By_High_Temperature_Status = this.toIri().concat('Emergency_Power_Off_System_Activated_By_High_Temperature_Status');
    /**
     * **[brick:Emergency_Power_Off_System_Activated_By_Leak_Detection_System_Status](https://brickschema.org/schema/Brick#Emergency_Power_Off_System_Activated_By_Leak_Detection_System_Status)**
     *
     * @type        class
     * @parent      brick:Emergency_Power_Off_System_Status
     */
    Emergency_Power_Off_System_Activated_By_Leak_Detection_System_Status = this.toIri().concat('Emergency_Power_Off_System_Activated_By_Leak_Detection_System_Status');
    /**
     * **[brick:Emergency_Power_Off_System_Status](https://brickschema.org/schema/Brick#Emergency_Power_Off_System_Status)**
     *
     * @type        class
     * @parent      brick:Off_Status
     */
    Emergency_Power_Off_System_Status = this.toIri().concat('Emergency_Power_Off_System_Status');
    /**
     * **[brick:Emergency_Push_Button_Status](https://brickschema.org/schema/Brick#Emergency_Push_Button_Status)**
     *
     * Indicates if an emergency button has been pushed
     *
     * @type        class
     * @parent      brick:Status
     */
    Emergency_Push_Button_Status = this.toIri().concat('Emergency_Push_Button_Status');
    /**
     * **[brick:Emergency_Wash_Station](https://brickschema.org/schema/Brick#Emergency_Wash_Station)**
     *
     * @type        class
     * @parent      brick:Safety_Equipment
     */
    Emergency_Wash_Station = this.toIri().concat('Emergency_Wash_Station');
    /**
     * **[brick:Employee_Entrance_Lobby](https://brickschema.org/schema/Brick#Employee_Entrance_Lobby)**
     *
     * An open space near an entrance that is typicaly only used for employees
     *
     * @type        class
     * @parent      brick:Lobby
     */
    Employee_Entrance_Lobby = this.toIri().concat('Employee_Entrance_Lobby');
    /**
     * **[brick:Enable_Command](https://brickschema.org/schema/Brick#Enable_Command)**
     *
     * Commands that enable functionality
     *
     * @type        class
     * @parent      brick:Command
     */
    Enable_Command = this.toIri().concat('Enable_Command');
    /**
     * **[brick:Enable_Differential_Enthalpy_Command](https://brickschema.org/schema/Brick#Enable_Differential_Enthalpy_Command)**
     *
     * Enables the use of differential enthalpy control
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    Enable_Differential_Enthalpy_Command = this.toIri().concat('Enable_Differential_Enthalpy_Command');
    /**
     * **[brick:Enable_Differential_Temperature_Command](https://brickschema.org/schema/Brick#Enable_Differential_Temperature_Command)**
     *
     * Enables the use of differential temperature control
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    Enable_Differential_Temperature_Command = this.toIri().concat('Enable_Differential_Temperature_Command');
    /**
     * **[brick:Enable_Fixed_Enthalpy_Command](https://brickschema.org/schema/Brick#Enable_Fixed_Enthalpy_Command)**
     *
     * Enables the use of fixed enthalpy control
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    Enable_Fixed_Enthalpy_Command = this.toIri().concat('Enable_Fixed_Enthalpy_Command');
    /**
     * **[brick:Enable_Fixed_Temperature_Command](https://brickschema.org/schema/Brick#Enable_Fixed_Temperature_Command)**
     *
     * Enables the use of fixed temperature control
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    Enable_Fixed_Temperature_Command = this.toIri().concat('Enable_Fixed_Temperature_Command');
    /**
     * **[brick:Enable_Hot_Water_System_Outside_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Enable_Hot_Water_System_Outside_Air_Temperature_Setpoint)**
     *
     * Enables hot water system when outside air temperature reaches the indicated value
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Setpoint
     */
    Enable_Hot_Water_System_Outside_Air_Temperature_Setpoint = this.toIri().concat('Enable_Hot_Water_System_Outside_Air_Temperature_Setpoint');
    /**
     * **[brick:Enable_Status](https://brickschema.org/schema/Brick#Enable_Status)**
     *
     * Indicates if a system or piece of functionality has been enabled
     *
     * @type        class
     * @parent      brick:Status
     */
    Enable_Status = this.toIri().concat('Enable_Status');
    /**
     * **[brick:Enclosed_Office](https://brickschema.org/schema/Brick#Enclosed_Office)**
     *
     * A space for individuals to work with walls and a door
     *
     * @type        class
     * @parent      brick:Office
     */
    Enclosed_Office = this.toIri().concat('Enclosed_Office');
    /**
     * **[brick:Energy](https://brickschema.org/schema/Brick#Energy)**
     *
     * @type        instance
     */
    Energy = this.toIri().concat('Energy');
    /**
     * **[brick:Energy_Generation_System](https://brickschema.org/schema/Brick#Energy_Generation_System)**
     *
     * A collection of devices that generates electricity
     *
     * @type        class
     * @parent      brick:Energy_System
     */
    Energy_Generation_System = this.toIri().concat('Energy_Generation_System');
    /**
     * **[brick:Energy_Sensor](https://brickschema.org/schema/Brick#Energy_Sensor)**
     *
     * Measures energy consumption
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Energy_Sensor = this.toIri().concat('Energy_Sensor');
    /**
     * **[brick:Energy_Storage](https://brickschema.org/schema/Brick#Energy_Storage)**
     *
     * Devices or equipment that store energy in its various forms
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    Energy_Storage = this.toIri().concat('Energy_Storage');
    /**
     * **[brick:Energy_Storage_System](https://brickschema.org/schema/Brick#Energy_Storage_System)**
     *
     * A collection of devices that stores electricity
     *
     * @type        class
     * @parent      brick:Energy_System
     */
    Energy_Storage_System = this.toIri().concat('Energy_Storage_System');
    /**
     * **[brick:Energy_System](https://brickschema.org/schema/Brick#Energy_System)**
     *
     * A collection of devices that generates, stores or transports electricity
     *
     * @type        class
     * @parent      brick:Electrical_System
     */
    Energy_System = this.toIri().concat('Energy_System');
    /**
     * **[brick:Energy_Usage_Sensor](https://brickschema.org/schema/Brick#Energy_Usage_Sensor)**
     *
     * Measures the total amount of energy used over some period of time
     *
     * @type        class
     * @parent      brick:Energy_Sensor
     */
    Energy_Usage_Sensor = this.toIri().concat('Energy_Usage_Sensor');
    /**
     * **[brick:Energy_Zone](https://brickschema.org/schema/Brick#Energy_Zone)**
     *
     * A space or group of spaces that are managed or monitored as one unit for energy purposes
     *
     * @type        class
     * @parent      brick:Zone
     */
    Energy_Zone = this.toIri().concat('Energy_Zone');
    /**
     * **[brick:Entering_Water](https://brickschema.org/schema/Brick#Entering_Water)**
     *
     * Water that is entering a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water
     */
    Entering_Water = this.toIri().concat('Entering_Water');
    /**
     * **[brick:Entering_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Entering_Water_Flow_Sensor)**
     *
     * Measures the rate of flow of water entering a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    Entering_Water_Flow_Sensor = this.toIri().concat('Entering_Water_Flow_Sensor');
    /**
     * **[brick:Entering_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Entering_Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of entering water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    Entering_Water_Flow_Setpoint = this.toIri().concat('Entering_Water_Flow_Setpoint');
    /**
     * **[brick:Entering_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Entering_Water_Temperature_Sensor)**
     *
     * Measures the temperature of water entering a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    Entering_Water_Temperature_Sensor = this.toIri().concat('Entering_Water_Temperature_Sensor');
    /**
     * **[brick:Entering_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Entering_Water_Temperature_Setpoint)**
     *
     * Sets temperature of entering water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    Entering_Water_Temperature_Setpoint = this.toIri().concat('Entering_Water_Temperature_Setpoint');
    /**
     * **[brick:Enthalpy](https://brickschema.org/schema/Brick#Enthalpy)**
     *
     * (also known as heat content), thermodynamic quantity equal to the sum of the internal energy of a system plus the product of the pressure volume work done on the system. H = E + pv, where H = enthalpy or total heat content, E = internal energy of the system, p = pressure, and v = volume. (Compare to [[specific enthalpy]].)
     *
     * @type        instance
     */
    Enthalpy = this.toIri().concat('Enthalpy');
    /**
     * **[brick:Enthalpy_Sensor](https://brickschema.org/schema/Brick#Enthalpy_Sensor)**
     *
     * Measures the total heat content of some substance
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Enthalpy_Sensor = this.toIri().concat('Enthalpy_Sensor');
    /**
     * **[brick:Enthalpy_Setpoint](https://brickschema.org/schema/Brick#Enthalpy_Setpoint)**
     *
     * Sets enthalpy
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Enthalpy_Setpoint = this.toIri().concat('Enthalpy_Setpoint');
    /**
     * **[brick:EntityProperty](https://brickschema.org/schema/Brick#EntityProperty)**
     *
     * @type        class
     * @parent      http://www.w3.org/2002/07/owl#ObjectProperty
     */
    EntityProperty = this.toIri().concat('EntityProperty');
    /**
     * **[brick:Entrance](https://brickschema.org/schema/Brick#Entrance)**
     *
     * The location and space of a building where people enter and exit the building
     *
     * @type        class
     * @parent      brick:Space
     */
    Entrance = this.toIri().concat('Entrance');
    /**
     * **[brick:Environment_Box](https://brickschema.org/schema/Brick#Environment_Box)**
     *
     * (also known as climatic chamber), enclosed space designed to create a particular environment.
     *
     * @type        class
     * @parent      brick:Laboratory
     */
    Environment_Box = this.toIri().concat('Environment_Box');
    /**
     * **[brick:Equipment](https://brickschema.org/schema/Brick#Equipment)**
     *
     * devices that serve all or part of the building and may include electric power, lighting, transportation, or service water heating, including, but not limited to, furnaces, boilers, air conditioners, heat pumps, chillers, water heaters, lamps, luminaires, ballasts, elevators, escalators, or other devices or installations.
     *
     * @type        class
     * @parent      brick:Class
     */
    Equipment = this.toIri().concat('Equipment');
    /**
     * **[brick:Equipment_Room](https://brickschema.org/schema/Brick#Equipment_Room)**
     *
     * A telecommunications room where equipment that serves the building is stored
     *
     * @type        class
     * @parent      brick:Telecom_Room
     */
    Equipment_Room = this.toIri().concat('Equipment_Room');
    /**
     * **[brick:Evaporative_Heat_Exchanger](https://brickschema.org/schema/Brick#Evaporative_Heat_Exchanger)**
     *
     * @type        class
     * @parent      brick:Heat_Exchanger
     */
    Evaporative_Heat_Exchanger = this.toIri().concat('Evaporative_Heat_Exchanger');
    /**
     * **[brick:Even_Month_Status](https://brickschema.org/schema/Brick#Even_Month_Status)**
     *
     * @type        class
     * @parent      brick:Status
     */
    Even_Month_Status = this.toIri().concat('Even_Month_Status');
    /**
     * **[brick:Exercise_Room](https://brickschema.org/schema/Brick#Exercise_Room)**
     *
     * An indoor room used for exercise and physical activities
     *
     * @type        class
     * @parent      brick:Room
     */
    Exercise_Room = this.toIri().concat('Exercise_Room');
    /**
     * **[brick:Exhaust_Air](https://brickschema.org/schema/Brick#Exhaust_Air)**
     *
     * air that must be removed from a space due to contaminants, regardless of pressurization
     *
     * @type        class
     * @parent      brick:Air
     */
    Exhaust_Air = this.toIri().concat('Exhaust_Air');
    /**
     * **[brick:Exhaust_Air_Dewpoint_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Dewpoint_Sensor)**
     *
     * Measures dewpoint of exhaust air
     *
     * @type        class
     * @parent      brick:Dewpoint_Sensor
     */
    Exhaust_Air_Dewpoint_Sensor = this.toIri().concat('Exhaust_Air_Dewpoint_Sensor');
    /**
     * **[brick:Exhaust_Air_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Differential_Pressure_Sensor)**
     *
     * Measures the difference in pressure between an upstream and downstream of an air duct or other air conduit used to exhaust air from the building
     *
     * @type        class
     * @parent      brick:Air_Differential_Pressure_Sensor
     */
    Exhaust_Air_Differential_Pressure_Sensor = this.toIri().concat('Exhaust_Air_Differential_Pressure_Sensor');
    /**
     * **[brick:Exhaust_Air_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Exhaust_Air_Differential_Pressure_Setpoint)**
     *
     * Sets the target air differential pressure between an upstream and downstream point in a exhaust air duct or conduit
     *
     * @type        class
     * @parent      brick:Air_Differential_Pressure_Setpoint
     */
    Exhaust_Air_Differential_Pressure_Setpoint = this.toIri().concat('Exhaust_Air_Differential_Pressure_Setpoint');
    /**
     * **[brick:Exhaust_Air_Flow_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Exhaust_Air_Flow_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Integral_Time_Parameter
     */
    Exhaust_Air_Flow_Integral_Time_Parameter = this.toIri().concat('Exhaust_Air_Flow_Integral_Time_Parameter');
    /**
     * **[brick:Exhaust_Air_Flow_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Exhaust_Air_Flow_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    Exhaust_Air_Flow_Proportional_Band_Parameter = this.toIri().concat('Exhaust_Air_Flow_Proportional_Band_Parameter');
    /**
     * **[brick:Exhaust_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of exhaust air
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    Exhaust_Air_Flow_Sensor = this.toIri().concat('Exhaust_Air_Flow_Sensor');
    /**
     * **[brick:Exhaust_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Exhaust_Air_Flow_Setpoint)**
     *
     * Sets exhaust air flow rate
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint
     */
    Exhaust_Air_Flow_Setpoint = this.toIri().concat('Exhaust_Air_Flow_Setpoint');
    /**
     * **[brick:Exhaust_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Humidity_Sensor)**
     *
     * Measures the relative humidity of exhaust air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    Exhaust_Air_Humidity_Sensor = this.toIri().concat('Exhaust_Air_Humidity_Sensor');
    /**
     * **[brick:Exhaust_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Exhaust_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for exhaust air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    Exhaust_Air_Humidity_Setpoint = this.toIri().concat('Exhaust_Air_Humidity_Setpoint');
    /**
     * **[brick:Exhaust_Air_Stack_Flow_Deadband_Setpoint](https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of exhaust air stack flow
     *
     * @type        class
     * @parent      brick:Air_Flow_Deadband_Setpoint
     */
    Exhaust_Air_Stack_Flow_Deadband_Setpoint = this.toIri().concat('Exhaust_Air_Stack_Flow_Deadband_Setpoint');
    /**
     * **[brick:Exhaust_Air_Stack_Flow_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Exhaust_Air_Flow_Integral_Time_Parameter
     */
    Exhaust_Air_Stack_Flow_Integral_Time_Parameter = this.toIri().concat('Exhaust_Air_Stack_Flow_Integral_Time_Parameter');
    /**
     * **[brick:Exhaust_Air_Stack_Flow_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Exhaust_Air_Flow_Proportional_Band_Parameter
     */
    Exhaust_Air_Stack_Flow_Proportional_Band_Parameter = this.toIri().concat('Exhaust_Air_Stack_Flow_Proportional_Band_Parameter');
    /**
     * **[brick:Exhaust_Air_Stack_Flow_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Sensor)**
     *
     * Measures the rate of flow of air in the exhaust air stack
     *
     * @type        class
     * @parent      brick:Exhaust_Air_Flow_Sensor
     */
    Exhaust_Air_Stack_Flow_Sensor = this.toIri().concat('Exhaust_Air_Stack_Flow_Sensor');
    /**
     * **[brick:Exhaust_Air_Stack_Flow_Setpoint](https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Setpoint)**
     *
     * Sets exhaust air stack flow rate
     *
     * @type        class
     * @parent      brick:Exhaust_Air_Flow_Setpoint
     */
    Exhaust_Air_Stack_Flow_Setpoint = this.toIri().concat('Exhaust_Air_Stack_Flow_Setpoint');
    /**
     * **[brick:Exhaust_Air_Static_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Exhaust_Air_Static_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Static_Pressure_Proportional_Band_Parameter
     */
    Exhaust_Air_Static_Pressure_Proportional_Band_Parameter = this.toIri().concat('Exhaust_Air_Static_Pressure_Proportional_Band_Parameter');
    /**
     * **[brick:Exhaust_Air_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Static_Pressure_Sensor)**
     *
     * The static pressure of air within exhaust regions of an HVAC system
     *
     * @type        class
     * @parent      brick:Static_Pressure_Sensor
     */
    Exhaust_Air_Static_Pressure_Sensor = this.toIri().concat('Exhaust_Air_Static_Pressure_Sensor');
    /**
     * **[brick:Exhaust_Air_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Exhaust_Air_Static_Pressure_Setpoint)**
     *
     * Sets static pressure of exhaust air
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    Exhaust_Air_Static_Pressure_Setpoint = this.toIri().concat('Exhaust_Air_Static_Pressure_Setpoint');
    /**
     * **[brick:Exhaust_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Temperature_Sensor)**
     *
     * Measures the temperature of exhaust air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    Exhaust_Air_Temperature_Sensor = this.toIri().concat('Exhaust_Air_Temperature_Sensor');
    /**
     * **[brick:Exhaust_Air_Velocity_Pressure_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Velocity_Pressure_Sensor)**
     *
     * @type        class
     * @parent      brick:Velocity_Pressure_Sensor
     */
    Exhaust_Air_Velocity_Pressure_Sensor = this.toIri().concat('Exhaust_Air_Velocity_Pressure_Sensor');
    /**
     * **[brick:Exhaust_Damper](https://brickschema.org/schema/Brick#Exhaust_Damper)**
     *
     * A damper that modulates the flow of exhaust air
     *
     * @type        class
     * @parent      brick:Damper
     */
    Exhaust_Damper = this.toIri().concat('Exhaust_Damper');
    /**
     * **[brick:Exhaust_Fan](https://brickschema.org/schema/Brick#Exhaust_Fan)**
     *
     * Fan moving exhaust air -- air that must be removed from a space due to contaminants
     *
     * @type        class
     * @parent      brick:Fan
     */
    Exhaust_Fan = this.toIri().concat('Exhaust_Fan');
    /**
     * **[brick:Exhaust_Fan_Disable_Command](https://brickschema.org/schema/Brick#Exhaust_Fan_Disable_Command)**
     *
     * Disables operation of the exhaust fan
     *
     * @type        class
     * @parent      brick:Disable_Command
     */
    Exhaust_Fan_Disable_Command = this.toIri().concat('Exhaust_Fan_Disable_Command');
    /**
     * **[brick:Exhaust_Fan_Enable_Command](https://brickschema.org/schema/Brick#Exhaust_Fan_Enable_Command)**
     *
     * Enables operation of the exhaust fan
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    Exhaust_Fan_Enable_Command = this.toIri().concat('Exhaust_Fan_Enable_Command');
    /**
     * **[brick:Eye_Wash_Station](https://brickschema.org/schema/Brick#Eye_Wash_Station)**
     *
     * @type        class
     * @parent      brick:Emergency_Wash_Station
     */
    Eye_Wash_Station = this.toIri().concat('Eye_Wash_Station');
    /**
     * **[brick:FCU](https://brickschema.org/schema/Brick#FCU)**
     *
     * See Fan_Coil_Unit
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    FCU = this.toIri().concat('FCU');
    /**
     * **[brick:Failure_Alarm](https://brickschema.org/schema/Brick#Failure_Alarm)**
     *
     * Alarms that indicate the failure of devices, equipment, systems and control loops
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Failure_Alarm = this.toIri().concat('Failure_Alarm');
    /**
     * **[brick:Fan](https://brickschema.org/schema/Brick#Fan)**
     *
     * Any device with two or more blades or vanes attached to a rotating shaft used to produce an airflow for the purpose of comfort, ventilation, exhaust, heating, cooling, or any other gaseous transport.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Fan = this.toIri().concat('Fan');
    /**
     * **[brick:Fan_Coil_Unit](https://brickschema.org/schema/Brick#Fan_Coil_Unit)**
     *
     * Terminal device consisting of a heating and/or cooling heat exchanger or 'coil' and fan that is used to control the temperature in the space where it is installed
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    Fan_Coil_Unit = this.toIri().concat('Fan_Coil_Unit');
    /**
     * **[brick:Fan_On_Off_Status](https://brickschema.org/schema/Brick#Fan_On_Off_Status)**
     *
     * @type        class
     * @parent      brick:Fan_Status
     */
    Fan_On_Off_Status = this.toIri().concat('Fan_On_Off_Status');
    /**
     * **[brick:Fan_Status](https://brickschema.org/schema/Brick#Fan_Status)**
     *
     * Indicates properties of fans
     *
     * @type        class
     * @parent      brick:Status
     */
    Fan_Status = this.toIri().concat('Fan_Status');
    /**
     * **[brick:Fan_VFD](https://brickschema.org/schema/Brick#Fan_VFD)**
     *
     * Variable-frequency drive for fans
     *
     * @type        class
     * @parent      brick:VFD
     */
    Fan_VFD = this.toIri().concat('Fan_VFD');
    /**
     * **[brick:Fault_Reset_Command](https://brickschema.org/schema/Brick#Fault_Reset_Command)**
     *
     * Clears a fault status
     *
     * @type        class
     * @parent      brick:Reset_Command
     */
    Fault_Reset_Command = this.toIri().concat('Fault_Reset_Command');
    /**
     * **[brick:Fault_Status](https://brickschema.org/schema/Brick#Fault_Status)**
     *
     * Indicates the presence of a fault in a device, system or control loop
     *
     * @type        class
     * @parent      brick:Status
     */
    Fault_Status = this.toIri().concat('Fault_Status');
    /**
     * **[brick:Field_Of_Play](https://brickschema.org/schema/Brick#Field_Of_Play)**
     *
     * The area of a stadium where athletic events occur, e.g. the soccer pitch
     *
     * @type        class
     * @parent      brick:Outdoor_Area
     */
    Field_Of_Play = this.toIri().concat('Field_Of_Play');
    /**
     * **[brick:Filter](https://brickschema.org/schema/Brick#Filter)**
     *
     * Device to remove gases from a mixture of gases or to remove solid material from a fluid
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Filter = this.toIri().concat('Filter');
    /**
     * **[brick:Filter_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Filter_Differential_Pressure_Sensor)**
     *
     * Measures the difference in pressure on either side of a filter
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Sensor
     */
    Filter_Differential_Pressure_Sensor = this.toIri().concat('Filter_Differential_Pressure_Sensor');
    /**
     * **[brick:Filter_Reset_Command](https://brickschema.org/schema/Brick#Filter_Reset_Command)**
     *
     * @type        class
     * @parent      brick:Reset_Command
     */
    Filter_Reset_Command = this.toIri().concat('Filter_Reset_Command');
    /**
     * **[brick:Filter_Status](https://brickschema.org/schema/Brick#Filter_Status)**
     *
     * Indicates if a filter needs to be replaced
     *
     * @type        class
     * @parent      brick:Status
     */
    Filter_Status = this.toIri().concat('Filter_Status');
    /**
     * **[brick:Final_Filter](https://brickschema.org/schema/Brick#Final_Filter)**
     *
     * The last, high-efficiency filter installed in a sequence to remove the finest particulates from the substance being filtered
     *
     * @type        class
     * @parent      brick:Filter
     */
    Final_Filter = this.toIri().concat('Final_Filter');
    /**
     * **[brick:Fire_Control_Panel](https://brickschema.org/schema/Brick#Fire_Control_Panel)**
     *
     * A panel-mounted device that provides status and control of a fire safety system
     *
     * @type        class
     * @parent      brick:Fire_Safety_Equipment
     */
    Fire_Control_Panel = this.toIri().concat('Fire_Control_Panel');
    /**
     * **[brick:Fire_Safety_Equipment](https://brickschema.org/schema/Brick#Fire_Safety_Equipment)**
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Fire_Safety_Equipment = this.toIri().concat('Fire_Safety_Equipment');
    /**
     * **[brick:Fire_Safety_System](https://brickschema.org/schema/Brick#Fire_Safety_System)**
     *
     * A system containing devices and equipment that monitor, detect and suppress fire hazards
     *
     * @type        class
     * @parent      brick:Safety_System
     */
    Fire_Safety_System = this.toIri().concat('Fire_Safety_System');
    /**
     * **[brick:Fire_Sensor](https://brickschema.org/schema/Brick#Fire_Sensor)**
     *
     * Measures the presence of fire
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Fire_Sensor = this.toIri().concat('Fire_Sensor');
    /**
     * **[brick:Fire_Zone](https://brickschema.org/schema/Brick#Fire_Zone)**
     *
     * combustion chamber in a furnace or boiler.
     *
     * @type        class
     * @parent      brick:Zone
     */
    Fire_Zone = this.toIri().concat('Fire_Zone');
    /**
     * **[brick:First_Aid_Kit](https://brickschema.org/schema/Brick#First_Aid_Kit)**
     *
     * @type        class
     * @parent      brick:Safety_Equipment
     */
    First_Aid_Kit = this.toIri().concat('First_Aid_Kit');
    /**
     * **[brick:First_Aid_Room](https://brickschema.org/schema/Brick#First_Aid_Room)**
     *
     * A room for a person with minor injuries can be treated or temporarily treated until transferred to a more advanced medical facility
     *
     * @type        class
     * @parent      brick:Medical_Room
     */
    First_Aid_Room = this.toIri().concat('First_Aid_Room');
    /**
     * **[brick:Floor](https://brickschema.org/schema/Brick#Floor)**
     *
     * A level, typically representing a horizontal aggregation of spaces that are vertically bound. (referring to IFC)
     *
     * @type        class
     * @parent      brick:Location
     */
    Floor = this.toIri().concat('Floor');
    /**
     * **[brick:Flow](https://brickschema.org/schema/Brick#Flow)**
     *
     * @type        instance
     */
    Flow = this.toIri().concat('Flow');
    /**
     * **[brick:FlowLoss](https://brickschema.org/schema/Brick#Flow_Loss)**
     *
     * The amount of flow rate that is lost during distribution
     *
     * @type        instance
     */
    Flow_Loss = this.toIri().concat('Flow_Loss');
    /**
     * **[brick:Flow_Sensor](https://brickschema.org/schema/Brick#Flow_Sensor)**
     *
     * Measures the rate of flow of some substance
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Flow_Sensor = this.toIri().concat('Flow_Sensor');
    /**
     * **[brick:Flow_Setpoint](https://brickschema.org/schema/Brick#Flow_Setpoint)**
     *
     * Sets flow
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Flow_Setpoint = this.toIri().concat('Flow_Setpoint');
    /**
     * **[brick:Fluid](https://brickschema.org/schema/Brick#Fluid)**
     *
     * substance, as a liquid or gas, that is capable of flowing and that changes shape when acted on by a force.
     *
     * @type        class
     * @parent      brick:Substance
     */
    Fluid = this.toIri().concat('Fluid');
    /**
     * **[brick:Food_Service_Room](https://brickschema.org/schema/Brick#Food_Service_Room)**
     *
     * A space used in the production, storage, serving, or cleanup of food and beverages
     *
     * @type        class
     * @parent      brick:Room
     */
    Food_Service_Room = this.toIri().concat('Food_Service_Room');
    /**
     * **[brick:FormaldehydeConcentration](https://brickschema.org/schema/Brick#Formaldehyde_Concentration)**
     *
     * The concentration of formaldehyde in a medium
     *
     * @type        instance
     */
    Formaldehyde_Concentration = this.toIri().concat('Formaldehyde_Concentration');
    /**
     * **[brick:Formaldehyde_Level_Sensor](https://brickschema.org/schema/Brick#Formaldehyde_Level_Sensor)**
     *
     * Measures the concentration of formaldehyde in air
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    Formaldehyde_Level_Sensor = this.toIri().concat('Formaldehyde_Level_Sensor');
    /**
     * **[brick:Freeze_Status](https://brickschema.org/schema/Brick#Freeze_Status)**
     *
     * Indicates if a substance contained within a vessel has frozen
     *
     * @type        class
     * @parent      brick:Status
     */
    Freeze_Status = this.toIri().concat('Freeze_Status');
    /**
     * **[brick:Freezer](https://brickschema.org/schema/Brick#Freezer)**
     *
     * cold chamber usually kept at a temperature of 22°F to 31°F (–5°C to –1°C), with high-volume air circulation.
     *
     * @type        class
     * @parent      brick:Laboratory
     */
    Freezer = this.toIri().concat('Freezer');
    /**
     * **[brick:Frequency](https://brickschema.org/schema/Brick#Frequency)**
     *
     * Frequency is the number of occurrences of a repeating event per unit time. The repetition of the events may be periodic (that is. the length of time between event repetitions is fixed) or aperiodic (i.e. the length of time between event repetitions varies). Therefore, we distinguish between periodic and aperiodic frequencies. In the SI system, periodic frequency is measured in hertz (Hz) or multiples of hertz, while aperiodic frequency is measured in becquerel (Bq).  In spectroscopy, ( u) is mostly used. Light passing through different media keeps its frequency, but not its wavelength or wavenumber.
     *
     * @type        instance
     */
    Frequency = this.toIri().concat('Frequency');
    /**
     * **[brick:Frequency_Command](https://brickschema.org/schema/Brick#Frequency_Command)**
     *
     * Controls the frequency of a device's operation (e.g. rotational frequency)
     *
     * @type        class
     * @parent      brick:Command
     */
    Frequency_Command = this.toIri().concat('Frequency_Command');
    /**
     * **[brick:Frequency_Sensor](https://brickschema.org/schema/Brick#Frequency_Sensor)**
     *
     * Measures the frequency of a phenomenon or aspect of a phenomenon, e.g. the frequency of a fan turning
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Frequency_Sensor = this.toIri().concat('Frequency_Sensor');
    /**
     * **[brick:Fresh_Air_Fan](https://brickschema.org/schema/Brick#Fresh_Air_Fan)**
     *
     * Fan moving fresh air -- air that is supplied into the building from the outdoors
     *
     * @type        class
     * @parent      brick:Fan
     */
    Fresh_Air_Fan = this.toIri().concat('Fresh_Air_Fan');
    /**
     * **[brick:Fresh_Air_Setpoint_Limit](https://brickschema.org/schema/Brick#Fresh_Air_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Fresh_Air_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    Fresh_Air_Setpoint_Limit = this.toIri().concat('Fresh_Air_Setpoint_Limit');
    /**
     * **[brick:Frost](https://brickschema.org/schema/Brick#Frost)**
     *
     * frost formed on the cold surface (tubes, plates) of a cooling coil.
     *
     * @type        class
     * @parent      brick:Solid
     */
    Frost = this.toIri().concat('Frost');
    /**
     * **[brick:Frost_Sensor](https://brickschema.org/schema/Brick#Frost_Sensor)**
     *
     * Senses the presence of frost or conditions that may cause frost
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Frost_Sensor = this.toIri().concat('Frost_Sensor');
    /**
     * **[brick:Fuel_Oil](https://brickschema.org/schema/Brick#Fuel_Oil)**
     *
     * Petroleum based oil burned for energy
     *
     * @type        class
     * @parent      brick:Oil
     */
    Fuel_Oil = this.toIri().concat('Fuel_Oil');
    /**
     * **[brick:Fume_Hood](https://brickschema.org/schema/Brick#Fume_Hood)**
     *
     * A fume-collection device mounted over a work space, table, or shelf and serving to conduct unwanted gases away from the area enclosed.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Fume_Hood = this.toIri().concat('Fume_Hood');
    /**
     * **[brick:Fume_Hood_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Fume_Hood_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of air in a fume hood
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    Fume_Hood_Air_Flow_Sensor = this.toIri().concat('Fume_Hood_Air_Flow_Sensor');
    /**
     * **[brick:Furniture](https://brickschema.org/schema/Brick#Furniture)**
     *
     * Movable objects intended to support various human activities such as seating, eating and sleeping
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Furniture = this.toIri().concat('Furniture');
    /**
     * **[brick:Gain_Parameter](https://brickschema.org/schema/Brick#Gain_Parameter)**
     *
     * @type        class
     * @parent      brick:PID_Parameter
     */
    Gain_Parameter = this.toIri().concat('Gain_Parameter');
    /**
     * **[brick:Gas](https://brickschema.org/schema/Brick#Gas)**
     *
     * state of matter in which substances exist in the form of nonaggregated molecules and which, within acceptable limits of accuracy, satisfy the ideal gas laws; usually a highly superheated vapor. See [[state]].
     *
     * @type        class
     * @parent      brick:Fluid
     */
    Gas = this.toIri().concat('Gas');
    /**
     * **[brick:Gas_Distribution](https://brickschema.org/schema/Brick#Gas_Distribution)**
     *
     * Utilize a gas distribution source to represent how gas is distributed across multiple destinations
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Gas_Distribution = this.toIri().concat('Gas_Distribution');
    /**
     * **[brick:Gas_Meter](https://brickschema.org/schema/Brick#Gas_Meter)**
     *
     * A meter that measures the usage or consumption of gas
     *
     * @type        class
     * @parent      brick:Meter
     */
    Gas_Meter = this.toIri().concat('Gas_Meter');
    /**
     * **[brick:Gas_Sensor](https://brickschema.org/schema/Brick#Gas_Sensor)**
     *
     * Measures gas concentration (other than CO2)
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Gas_Sensor = this.toIri().concat('Gas_Sensor');
    /**
     * **[brick:Gas_System](https://brickschema.org/schema/Brick#Gas_System)**
     *
     * @type        class
     * @parent      brick:System
     */
    Gas_System = this.toIri().concat('Gas_System');
    /**
     * **[brick:Gas_Valve](https://brickschema.org/schema/Brick#Gas_Valve)**
     *
     * @type        class
     * @parent      brick:Valve
     */
    Gas_Valve = this.toIri().concat('Gas_Valve');
    /**
     * **[brick:Gasoline](https://brickschema.org/schema/Brick#Gasoline)**
     *
     * Petroleum derived liquid used as a fuel source
     *
     * @type        class
     * @parent      brick:Liquid
     */
    Gasoline = this.toIri().concat('Gasoline');
    /**
     * **[brick:Gatehouse](https://brickschema.org/schema/Brick#Gatehouse)**
     *
     * The standalone building used to manage the entrance to a campus or building grounds
     *
     * @type        class
     * @parent      brick:Space
     */
    Gatehouse = this.toIri().concat('Gatehouse');
    /**
     * **[brick:Generator_Room](https://brickschema.org/schema/Brick#Generator_Room)**
     *
     * A room for electrical equipment, specifically electrical generators.
     *
     * @type        class
     * @parent      brick:Electrical_Room
     */
    Generator_Room = this.toIri().concat('Generator_Room');
    /**
     * **[brick:Glycol](https://brickschema.org/schema/Brick#Glycol)**
     *
     * @type        class
     * @parent      brick:Liquid
     */
    Glycol = this.toIri().concat('Glycol');
    /**
     * **[brick:GrainsOfMoisture](https://brickschema.org/schema/Brick#GrainsOfMoisture)**
     *
     * Mass of moisture per pround of air, measured in grains of water
     *
     * @type        instance
     */
    GrainsOfMoisture = this.toIri().concat('GrainsOfMoisture');
    /**
     * **[brick:HVAC_Equipment](https://brickschema.org/schema/Brick#HVAC_Equipment)**
     *
     * See Heating_Ventilation_Air_Conditioning_System
     *
     * @type        class
     * @parent      brick:Equipment
     */
    HVAC_Equipment = this.toIri().concat('HVAC_Equipment');
    /**
     * **[brick:HVAC_System](https://brickschema.org/schema/Brick#HVAC_System)**
     *
     * See Heating_Ventilation_Air_Conditioning_System
     *
     * @type        class
     * @parent      brick:System
     */
    HVAC_System = this.toIri().concat('HVAC_System');
    /**
     * **[brick:HVAC_Zone](https://brickschema.org/schema/Brick#HVAC_Zone)**
     *
     * a space or group of spaces, within a building with heating, cooling, and ventilating requirements, that are sufficiently similar so that desired conditions (e.g., temperature) can be maintained throughout using a single sensor (e.g., thermostat or temperature sensor).
     *
     * @type        class
     * @parent      brick:Zone
     */
    HVAC_Zone = this.toIri().concat('HVAC_Zone');
    /**
     * **[brick:HX](https://brickschema.org/schema/Brick#HX)**
     *
     * See Heat_Exchanger
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    HX = this.toIri().concat('HX');
    /**
     * **[brick:Hail](https://brickschema.org/schema/Brick#Hail)**
     *
     * pellets of frozen rain which fall in showers from cumulonimbus clouds.
     *
     * @type        class
     * @parent      brick:Solid
     */
    Hail = this.toIri().concat('Hail');
    /**
     * **[brick:Hail_Sensor](https://brickschema.org/schema/Brick#Hail_Sensor)**
     *
     * Measures hail in terms of its size and damage potential
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Hail_Sensor = this.toIri().concat('Hail_Sensor');
    /**
     * **[brick:Hallway](https://brickschema.org/schema/Brick#Hallway)**
     *
     * A common space, used to connect other parts of a building
     *
     * @type        class
     * @parent      brick:Common_Space
     */
    Hallway = this.toIri().concat('Hallway');
    /**
     * **[brick:Hazardous_Materials_Storage](https://brickschema.org/schema/Brick#Hazardous_Materials_Storage)**
     *
     * A storage space set aside (usually with restricted access) for the storage of materials that can be hazardous to living beings or the environment
     *
     * @type        class
     * @parent      brick:Storage_Room
     */
    Hazardous_Materials_Storage = this.toIri().concat('Hazardous_Materials_Storage');
    /**
     * **[brick:Heat_Exchanger](https://brickschema.org/schema/Brick#Heat_Exchanger)**
     *
     * A heat exchanger is a piece of equipment built for efficient heat transfer from one medium to another. The media may be separated by a solid wall to prevent mixing or they may be in direct contact (BEDES)
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Heat_Exchanger = this.toIri().concat('Heat_Exchanger');
    /**
     * **[brick:Heat_Exchanger_Supply_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Heat_Exchanger_Supply_Water_Temperature_Sensor)**
     *
     * Measures the temperature of water supplied by a heat exchanger
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    Heat_Exchanger_Supply_Water_Temperature_Sensor = this.toIri().concat('Heat_Exchanger_Supply_Water_Temperature_Sensor');
    /**
     * **[brick:Heat_Exchanger_System_Enable_Status](https://brickschema.org/schema/Brick#Heat_Exchanger_System_Enable_Status)**
     *
     * Indicates if the heat exchanger system has been enabled
     *
     * @type        class
     * @parent      brick:Enable_Status
     */
    Heat_Exchanger_System_Enable_Status = this.toIri().concat('Heat_Exchanger_System_Enable_Status');
    /**
     * **[brick:Heat_Recovery_Hot_Water_System](https://brickschema.org/schema/Brick#Heat_Recovery_Hot_Water_System)**
     *
     * @type        class
     * @parent      brick:Hot_Water_System
     */
    Heat_Recovery_Hot_Water_System = this.toIri().concat('Heat_Recovery_Hot_Water_System');
    /**
     * **[brick:Heat_Sensor](https://brickschema.org/schema/Brick#Heat_Sensor)**
     *
     * Measures heat
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Heat_Sensor = this.toIri().concat('Heat_Sensor');
    /**
     * **[brick:Heat_Wheel](https://brickschema.org/schema/Brick#Heat_Wheel)**
     *
     * A rotary heat exchanger positioned within the supply and exhaust air streams of an air handling system in order to recover heat energy
     *
     * @type        class
     * @parent      brick:Heat_Exchanger
     */
    Heat_Wheel = this.toIri().concat('Heat_Wheel');
    /**
     * **[brick:Heat_Wheel_VFD](https://brickschema.org/schema/Brick#Heat_Wheel_VFD)**
     *
     * A VFD that drives a heat wheel
     *
     * @type        class
     * @parent      brick:VFD
     */
    Heat_Wheel_VFD = this.toIri().concat('Heat_Wheel_VFD');
    /**
     * **[brick:Heating_Coil](https://brickschema.org/schema/Brick#Heating_Coil)**
     *
     * A heating element typically made of pipe, tube or wire that emits heat. Typically filled with hot water, or, in the case of wire, uses electricity.
     *
     * @type        class
     * @parent      brick:Coil
     */
    Heating_Coil = this.toIri().concat('Heating_Coil');
    /**
     * **[brick:Heating_Command](https://brickschema.org/schema/Brick#Heating_Command)**
     *
     * Controls the amount of heating to be delivered (typically as a proportion of total heating output)
     *
     * @type        class
     * @parent      brick:Command
     */
    Heating_Command = this.toIri().concat('Heating_Command');
    /**
     * **[brick:Heating_Demand_Sensor](https://brickschema.org/schema/Brick#Heating_Demand_Sensor)**
     *
     * Measures the amount of power consumed by a heating process; typically found by multiplying the tonnage of a unit (e.g. RTU) by the efficiency rating in kW/ton
     *
     * @type        class
     * @parent      brick:Demand_Sensor
     */
    Heating_Demand_Sensor = this.toIri().concat('Heating_Demand_Sensor');
    /**
     * **[brick:Heating_Demand_Setpoint](https://brickschema.org/schema/Brick#Heating_Demand_Setpoint)**
     *
     * Sets the rate required for heating
     *
     * @type        class
     * @parent      brick:Demand_Setpoint
     */
    Heating_Demand_Setpoint = this.toIri().concat('Heating_Demand_Setpoint');
    /**
     * **[brick:Heating_Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Heating_Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow for heating
     *
     * @type        class
     * @parent      brick:Discharge_Air_Flow_Setpoint
     */
    Heating_Discharge_Air_Flow_Setpoint = this.toIri().concat('Heating_Discharge_Air_Flow_Setpoint');
    /**
     * **[brick:Heating_Discharge_Air_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Heating_Discharge_Air_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of heating discharge air
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Deadband_Setpoint
     */
    Heating_Discharge_Air_Temperature_Deadband_Setpoint = this.toIri().concat('Heating_Discharge_Air_Temperature_Deadband_Setpoint');
    /**
     * **[brick:Heating_Discharge_Air_Temperature_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Heating_Discharge_Air_Temperature_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Integral_Time_Parameter
     */
    Heating_Discharge_Air_Temperature_Integral_Time_Parameter = this.toIri().concat('Heating_Discharge_Air_Temperature_Integral_Time_Parameter');
    /**
     * **[brick:Heating_Discharge_Air_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Heating_Discharge_Air_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Proportional_Band_Parameter
     */
    Heating_Discharge_Air_Temperature_Proportional_Band_Parameter = this.toIri().concat('Heating_Discharge_Air_Temperature_Proportional_Band_Parameter');
    /**
     * **[brick:Heating_Start_Stop_Status](https://brickschema.org/schema/Brick#Heating_Start_Stop_Status)**
     *
     * @type        class
     * @parent      brick:Start_Stop_Status
     */
    Heating_Start_Stop_Status = this.toIri().concat('Heating_Start_Stop_Status');
    /**
     * **[brick:Heating_Supply_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Heating_Supply_Air_Flow_Setpoint)**
     *
     * Sets supply air flow rate for heating
     *
     * @type        class
     * @parent      brick:Supply_Air_Flow_Setpoint
     */
    Heating_Supply_Air_Flow_Setpoint = this.toIri().concat('Heating_Supply_Air_Flow_Setpoint');
    /**
     * **[brick:Heating_Supply_Air_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Heating_Supply_Air_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of supply air for heating
     *
     * @type        class
     * @parent      brick:Heating_Temperature_Setpoint
     */
    Heating_Supply_Air_Temperature_Deadband_Setpoint = this.toIri().concat('Heating_Supply_Air_Temperature_Deadband_Setpoint');
    /**
     * **[brick:Heating_Supply_Air_Temperature_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Heating_Supply_Air_Temperature_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Integral_Time_Parameter
     */
    Heating_Supply_Air_Temperature_Integral_Time_Parameter = this.toIri().concat('Heating_Supply_Air_Temperature_Integral_Time_Parameter');
    /**
     * **[brick:Heating_Supply_Air_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Heating_Supply_Air_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Supply_Air_Temperature_Proportional_Band_Parameter
     */
    Heating_Supply_Air_Temperature_Proportional_Band_Parameter = this.toIri().concat('Heating_Supply_Air_Temperature_Proportional_Band_Parameter');
    /**
     * **[brick:Heating_Temperature_Setpoint](https://brickschema.org/schema/Brick#Heating_Temperature_Setpoint)**
     *
     * Sets temperature for heating
     *
     * @type        class
     * @parent      brick:Temperature_Setpoint
     */
    Heating_Temperature_Setpoint = this.toIri().concat('Heating_Temperature_Setpoint');
    /**
     * **[brick:Heating_Thermal_Power_Sensor](https://brickschema.org/schema/Brick#Heating_Thermal_Power_Sensor)**
     *
     * @type        class
     * @parent      brick:Thermal_Power_Sensor
     */
    Heating_Thermal_Power_Sensor = this.toIri().concat('Heating_Thermal_Power_Sensor');
    /**
     * **[brick:Heating_Valve](https://brickschema.org/schema/Brick#Heating_Valve)**
     *
     * A valve that controls air temperature by modulating the amount of hot water flowing through a heating coil
     *
     * @type        class
     * @parent      brick:Valve
     */
    Heating_Valve = this.toIri().concat('Heating_Valve');
    /**
     * **[brick:Heating_Ventilation_Air_Conditioning_System](https://brickschema.org/schema/Brick#Heating_Ventilation_Air_Conditioning_System)**
     *
     * The equipment, distribution systems and terminals that provide, either collectively or individually, the processes of heating, ventilating or air conditioning to a building or portion of a building
     *
     * @type        class
     * @parent      brick:System
     */
    Heating_Ventilation_Air_Conditioning_System = this.toIri().concat('Heating_Ventilation_Air_Conditioning_System');
    /**
     * **[brick:High_CO2_Alarm](https://brickschema.org/schema/Brick#High_CO2_Alarm)**
     *
     * A device that indicates high concentration of carbon dioxide.
     *
     * @type        class
     * @parent      brick:CO2_Alarm
     */
    High_CO2_Alarm = this.toIri().concat('High_CO2_Alarm');
    /**
     * **[brick:High_Discharge_Air_Temperature_Alarm](https://brickschema.org/schema/Brick#High_Discharge_Air_Temperature_Alarm)**
     *
     * An alarm that indicates that discharge air temperature is too high
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Alarm
     */
    High_Discharge_Air_Temperature_Alarm = this.toIri().concat('High_Discharge_Air_Temperature_Alarm');
    /**
     * **[brick:High_Head_Pressure_Alarm](https://brickschema.org/schema/Brick#High_Head_Pressure_Alarm)**
     *
     * An alarm that indicates a high pressure generated on the output side of a gas compressor in a refrigeration or air conditioning system.
     *
     * @type        class
     * @parent      brick:Pressure_Alarm
     */
    High_Head_Pressure_Alarm = this.toIri().concat('High_Head_Pressure_Alarm');
    /**
     * **[brick:High_Humidity_Alarm](https://brickschema.org/schema/Brick#High_Humidity_Alarm)**
     *
     * An alarm that indicates high concentration of water vapor in the air.
     *
     * @type        class
     * @parent      brick:Humidity_Alarm
     */
    High_Humidity_Alarm = this.toIri().concat('High_Humidity_Alarm');
    /**
     * **[brick:High_Humidity_Alarm_Parameter](https://brickschema.org/schema/Brick#High_Humidity_Alarm_Parameter)**
     *
     * A parameter determining the humidity level at which to trigger a high humidity alarm
     *
     * @type        class
     * @parent      brick:Humidity_Parameter
     */
    High_Humidity_Alarm_Parameter = this.toIri().concat('High_Humidity_Alarm_Parameter');
    /**
     * **[brick:High_Outside_Air_Lockout_Temperature_Differential_Parameter](https://brickschema.org/schema/Brick#High_Outside_Air_Lockout_Temperature_Differential_Parameter)**
     *
     * The upper bound of the outside air temperature lockout range
     *
     * @type        class
     * @parent      brick:Outside_Air_Lockout_Temperature_Differential_Parameter
     */
    High_Outside_Air_Lockout_Temperature_Differential_Parameter = this.toIri().concat('High_Outside_Air_Lockout_Temperature_Differential_Parameter');
    /**
     * **[brick:High_Return_Air_Temperature_Alarm](https://brickschema.org/schema/Brick#High_Return_Air_Temperature_Alarm)**
     *
     * An alarm that indicates that return air temperature is too high
     *
     * @type        class
     * @parent      brick:High_Temperature_Alarm
     */
    High_Return_Air_Temperature_Alarm = this.toIri().concat('High_Return_Air_Temperature_Alarm');
    /**
     * **[brick:High_Static_Pressure_Cutout_Setpoint_Limit](https://brickschema.org/schema/Brick#High_Static_Pressure_Cutout_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a High_Static_Pressure_Cutout_Setpoint.
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint_Limit
     */
    High_Static_Pressure_Cutout_Setpoint_Limit = this.toIri().concat('High_Static_Pressure_Cutout_Setpoint_Limit');
    /**
     * **[brick:High_Temperature_Alarm](https://brickschema.org/schema/Brick#High_Temperature_Alarm)**
     *
     * An alarm that indicates high temperature.
     *
     * @type        class
     * @parent      brick:Temperature_Alarm
     */
    High_Temperature_Alarm = this.toIri().concat('High_Temperature_Alarm');
    /**
     * **[brick:High_Temperature_Alarm_Parameter](https://brickschema.org/schema/Brick#High_Temperature_Alarm_Parameter)**
     *
     * A parameter determining the temperature level at which to trigger a high temperature alarm
     *
     * @type        class
     * @parent      brick:Temperature_Parameter
     */
    High_Temperature_Alarm_Parameter = this.toIri().concat('High_Temperature_Alarm_Parameter');
    /**
     * **[brick:High_Temperature_Hot_Water_Return_Temperature_Sensor](https://brickschema.org/schema/Brick#High_Temperature_Hot_Water_Return_Temperature_Sensor)**
     *
     * Measures the temperature of high-temperature hot water returned to a hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_Return_Temperature_Sensor
     */
    High_Temperature_Hot_Water_Return_Temperature_Sensor = this.toIri().concat('High_Temperature_Hot_Water_Return_Temperature_Sensor');
    /**
     * **[brick:High_Temperature_Hot_Water_Supply_Temperature_Sensor](https://brickschema.org/schema/Brick#High_Temperature_Hot_Water_Supply_Temperature_Sensor)**
     *
     * Measures the temperature of high-temperature hot water supplied by a hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Sensor
     */
    High_Temperature_Hot_Water_Supply_Temperature_Sensor = this.toIri().concat('High_Temperature_Hot_Water_Supply_Temperature_Sensor');
    /**
     * **[brick:Hold_Status](https://brickschema.org/schema/Brick#Hold_Status)**
     *
     * @type        class
     * @parent      brick:Status
     */
    Hold_Status = this.toIri().concat('Hold_Status');
    /**
     * **[brick:Hospitality_Box](https://brickschema.org/schema/Brick#Hospitality_Box)**
     *
     * A room at a stadium, usually overlooking the field of play, that is physical separate from the other seating at the venue
     *
     * @type        class
     * @parent      brick:Room
     */
    Hospitality_Box = this.toIri().concat('Hospitality_Box');
    /**
     * **[brick:Hot_Box](https://brickschema.org/schema/Brick#Hot_Box)**
     *
     * hot air chamber forming part of an air handler.
     *
     * @type        class
     * @parent      brick:Laboratory
     */
    Hot_Box = this.toIri().concat('Hot_Box');
    /**
     * **[brick:Hot_Water](https://brickschema.org/schema/Brick#Hot_Water)**
     *
     * Hot water used for HVAC heating or supply to hot taps
     *
     * @type        class
     * @parent      brick:Water
     */
    Hot_Water = this.toIri().concat('Hot_Water');
    /**
     * **[brick:Hot_Water_Baseboard_Radiator](https://brickschema.org/schema/Brick#Hot_Water_Baseboard_Radiator)**
     *
     * Hydronic heating device located at or near the floor
     *
     * @type        class
     * @parent      brick:Baseboard_Radiator
     */
    Hot_Water_Baseboard_Radiator = this.toIri().concat('Hot_Water_Baseboard_Radiator');
    /**
     * **[brick:Hot_Water_Coil](https://brickschema.org/schema/Brick#Hot_Water_Coil)**
     *
     * A heating element typically made of pipe, tube or wire that emits heat that is filled with hot water.
     *
     * @type        class
     * @parent      brick:Heating_Coil
     */
    Hot_Water_Coil = this.toIri().concat('Hot_Water_Coil');
    /**
     * **[brick:Hot_Water_Differential_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of differential pressure of hot water
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Deadband_Setpoint
     */
    Hot_Water_Differential_Pressure_Deadband_Setpoint = this.toIri().concat('Hot_Water_Differential_Pressure_Deadband_Setpoint');
    /**
     * **[brick:Hot_Water_Differential_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Integral_Time_Parameter
     */
    Hot_Water_Differential_Pressure_Integral_Time_Parameter = this.toIri().concat('Hot_Water_Differential_Pressure_Integral_Time_Parameter');
    /**
     * **[brick:Hot_Water_Differential_Pressure_Load_Shed_Reset_Status](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Load_Shed_Reset_Status)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Differential_Pressure_Load_Shed_Status
     */
    Hot_Water_Differential_Pressure_Load_Shed_Reset_Status = this.toIri().concat('Hot_Water_Differential_Pressure_Load_Shed_Reset_Status');
    /**
     * **[brick:Hot_Water_Differential_Pressure_Load_Shed_Status](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Load_Shed_Status
     */
    Hot_Water_Differential_Pressure_Load_Shed_Status = this.toIri().concat('Hot_Water_Differential_Pressure_Load_Shed_Status');
    /**
     * **[brick:Hot_Water_Differential_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Proportional_Band
     */
    Hot_Water_Differential_Pressure_Proportional_Band_Parameter = this.toIri().concat('Hot_Water_Differential_Pressure_Proportional_Band_Parameter');
    /**
     * **[brick:Hot_Water_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Sensor)**
     *
     * Measures the difference in water pressure on either side of a hot water valve
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Sensor
     */
    Hot_Water_Differential_Pressure_Sensor = this.toIri().concat('Hot_Water_Differential_Pressure_Sensor');
    /**
     * **[brick:Hot_Water_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Setpoint)**
     *
     * Sets the target water differential pressure between an upstream and downstream point in a water pipe or conduit used to carry hot water
     *
     * @type        class
     * @parent      brick:Water_Differential_Pressure_Setpoint
     */
    Hot_Water_Differential_Pressure_Setpoint = this.toIri().concat('Hot_Water_Differential_Pressure_Setpoint');
    /**
     * **[brick:Hot_Water_Differential_Temperature_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Differential_Temperature_Sensor)**
     *
     * Measures the difference in temperature between the entering water to the boiler or other water heating device and leaving water from the same boiler or other water heating device
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Sensor
     */
    Hot_Water_Differential_Temperature_Sensor = this.toIri().concat('Hot_Water_Differential_Temperature_Sensor');
    /**
     * **[brick:Hot_Water_Discharge_Flow_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Discharge_Flow_Sensor)**
     *
     * Measures the rate of flow of hot discharge water
     *
     * @type        class
     * @parent      brick:Discharge_Water_Flow_Sensor
     */
    Hot_Water_Discharge_Flow_Sensor = this.toIri().concat('Hot_Water_Discharge_Flow_Sensor');
    /**
     * **[brick:Hot_Water_Discharge_Flow_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Discharge_Flow_Setpoint)**
     *
     * Sets the target flow rate of hot discharge water
     *
     * @type        class
     * @parent      brick:Discharge_Water_Flow_Setpoint
     */
    Hot_Water_Discharge_Flow_Setpoint = this.toIri().concat('Hot_Water_Discharge_Flow_Setpoint');
    /**
     * **[brick:Hot_Water_Discharge_Temperature_Load_Shed_Status](https://brickschema.org/schema/Brick#Hot_Water_Discharge_Temperature_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Status
     */
    Hot_Water_Discharge_Temperature_Load_Shed_Status = this.toIri().concat('Hot_Water_Discharge_Temperature_Load_Shed_Status');
    /**
     * **[brick:Hot_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Flow_Sensor)**
     *
     * Measures the rate of flow in a hot water circuit
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    Hot_Water_Flow_Sensor = this.toIri().concat('Hot_Water_Flow_Sensor');
    /**
     * **[brick:Hot_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of hot water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    Hot_Water_Flow_Setpoint = this.toIri().concat('Hot_Water_Flow_Setpoint');
    /**
     * **[brick:Hot_Water_Loop](https://brickschema.org/schema/Brick#Hot_Water_Loop)**
     *
     * A collection of equipment that transport and regulate hot water among each other
     *
     * @type        class
     * @parent      brick:Water_Loop
     */
    Hot_Water_Loop = this.toIri().concat('Hot_Water_Loop');
    /**
     * **[brick:Hot_Water_Meter](https://brickschema.org/schema/Brick#Hot_Water_Meter)**
     *
     * A meter that measures the usage or consumption of hot water
     *
     * @type        class
     * @parent      brick:Water_Meter
     */
    Hot_Water_Meter = this.toIri().concat('Hot_Water_Meter');
    /**
     * **[brick:Hot_Water_Pump](https://brickschema.org/schema/Brick#Hot_Water_Pump)**
     *
     * A pump that performs work on hot water; typically part of a hot water system
     *
     * @type        class
     * @parent      brick:Water_Pump
     */
    Hot_Water_Pump = this.toIri().concat('Hot_Water_Pump');
    /**
     * **[brick:Hot_Water_Radiator](https://brickschema.org/schema/Brick#Hot_Water_Radiator)**
     *
     * Radiator that uses hot water
     *
     * @type        class
     * @parent      brick:Radiator
     */
    Hot_Water_Radiator = this.toIri().concat('Hot_Water_Radiator');
    /**
     * **[brick:Hot_Water_Return_Temperature_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Return_Temperature_Sensor)**
     *
     * Measures the temperature of water returned to a hot water system
     *
     * @type        class
     * @parent      brick:Return_Water_Temperature_Sensor
     */
    Hot_Water_Return_Temperature_Sensor = this.toIri().concat('Hot_Water_Return_Temperature_Sensor');
    /**
     * **[brick:Hot_Water_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Static_Pressure_Setpoint)**
     *
     * Sets static pressure of hot air
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    Hot_Water_Static_Pressure_Setpoint = this.toIri().concat('Hot_Water_Static_Pressure_Setpoint');
    /**
     * **[brick:Hot_Water_Supply_Flow_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Supply_Flow_Sensor)**
     *
     * Measures the rate of flow of hot supply water
     *
     * @type        class
     * @parent      brick:Hot_Water_Flow_Sensor
     */
    Hot_Water_Supply_Flow_Sensor = this.toIri().concat('Hot_Water_Supply_Flow_Sensor');
    /**
     * **[brick:Hot_Water_Supply_Flow_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Supply_Flow_Setpoint)**
     *
     * Sets the target flow rate of hot supply water
     *
     * @type        class
     * @parent      brick:Hot_Water_Flow_Setpoint
     */
    Hot_Water_Supply_Flow_Setpoint = this.toIri().concat('Hot_Water_Supply_Flow_Setpoint');
    /**
     * **[brick:Hot_Water_Supply_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Supply_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_High_Reset_Setpoint
     */
    Hot_Water_Supply_Temperature_High_Reset_Setpoint = this.toIri().concat('Hot_Water_Supply_Temperature_High_Reset_Setpoint');
    /**
     * **[brick:Hot_Water_Supply_Temperature_Load_Shed_Status](https://brickschema.org/schema/Brick#Hot_Water_Supply_Temperature_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Status
     */
    Hot_Water_Supply_Temperature_Load_Shed_Status = this.toIri().concat('Hot_Water_Supply_Temperature_Load_Shed_Status');
    /**
     * **[brick:Hot_Water_Supply_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Supply_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_Low_Reset_Setpoint
     */
    Hot_Water_Supply_Temperature_Low_Reset_Setpoint = this.toIri().concat('Hot_Water_Supply_Temperature_Low_Reset_Setpoint');
    /**
     * **[brick:Hot_Water_Supply_Temperature_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Supply_Temperature_Sensor)**
     *
     * Measures the temperature of water supplied by a hot water system
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    Hot_Water_Supply_Temperature_Sensor = this.toIri().concat('Hot_Water_Supply_Temperature_Sensor');
    /**
     * **[brick:Hot_Water_System](https://brickschema.org/schema/Brick#Hot_Water_System)**
     *
     * The equipment, devices and conduits that handle the production and distribution of hot water in a building
     *
     * @type        class
     * @parent      brick:Water_System
     */
    Hot_Water_System = this.toIri().concat('Hot_Water_System');
    /**
     * **[brick:Hot_Water_System_Enable_Command](https://brickschema.org/schema/Brick#Hot_Water_System_Enable_Command)**
     *
     * Enables operation of the hot water system
     *
     * @type        class
     * @parent      brick:System_Enable_Command
     */
    Hot_Water_System_Enable_Command = this.toIri().concat('Hot_Water_System_Enable_Command');
    /**
     * **[brick:Hot_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Temperature_Setpoint)**
     *
     * Sets the temperature of hot water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    Hot_Water_Temperature_Setpoint = this.toIri().concat('Hot_Water_Temperature_Setpoint');
    /**
     * **[brick:Hot_Water_Usage_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Usage_Sensor)**
     *
     * Measures the amount of hot water that is consumed, over some period of time
     *
     * @type        class
     * @parent      brick:Water_Usage_Sensor
     */
    Hot_Water_Usage_Sensor = this.toIri().concat('Hot_Water_Usage_Sensor');
    /**
     * **[brick:Hot_Water_Valve](https://brickschema.org/schema/Brick#Hot_Water_Valve)**
     *
     * A valve regulating the flow of hot water
     *
     * @type        class
     * @parent      brick:Heating_Valve
     */
    Hot_Water_Valve = this.toIri().concat('Hot_Water_Valve');
    /**
     * **[brick:Humidification_Start_Stop_Status](https://brickschema.org/schema/Brick#Humidification_Start_Stop_Status)**
     *
     * @type        class
     * @parent      brick:Start_Stop_Status
     */
    Humidification_Start_Stop_Status = this.toIri().concat('Humidification_Start_Stop_Status');
    /**
     * **[brick:Humidifier](https://brickschema.org/schema/Brick#Humidifier)**
     *
     * A device that adds moisture to air or other gases
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Humidifier = this.toIri().concat('Humidifier');
    /**
     * **[brick:Humidifier_Fault_Status](https://brickschema.org/schema/Brick#Humidifier_Fault_Status)**
     *
     * Indicates the presence of a fault in a humidifier
     *
     * @type        class
     * @parent      brick:Fault_Status
     */
    Humidifier_Fault_Status = this.toIri().concat('Humidifier_Fault_Status');
    /**
     * **[brick:Humidify_Command](https://brickschema.org/schema/Brick#Humidify_Command)**
     *
     * @type        class
     * @parent      brick:Command
     */
    Humidify_Command = this.toIri().concat('Humidify_Command');
    /**
     * **[brick:Humidity](https://brickschema.org/schema/Brick#Humidity)**
     *
     * @type        instance
     */
    Humidity = this.toIri().concat('Humidity');
    /**
     * **[brick:Humidity_Alarm](https://brickschema.org/schema/Brick#Humidity_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with the concentration of water vapor in the air.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Humidity_Alarm = this.toIri().concat('Humidity_Alarm');
    /**
     * **[brick:Humidity_Parameter](https://brickschema.org/schema/Brick#Humidity_Parameter)**
     *
     * Parameters relevant to humidity-related systems and points
     *
     * @type        class
     * @parent      brick:Parameter
     */
    Humidity_Parameter = this.toIri().concat('Humidity_Parameter');
    /**
     * **[brick:Humidity_Sensor](https://brickschema.org/schema/Brick#Humidity_Sensor)**
     *
     * Measures the concentration of water vapor in air
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Humidity_Sensor = this.toIri().concat('Humidity_Sensor');
    /**
     * **[brick:Humidity_Setpoint](https://brickschema.org/schema/Brick#Humidity_Setpoint)**
     *
     * Sets humidity
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Humidity_Setpoint = this.toIri().concat('Humidity_Setpoint');
    /**
     * **[brick:Humidity_Tolerance_Parameter](https://brickschema.org/schema/Brick#Humidity_Tolerance_Parameter)**
     *
     * A parameter determining the difference between upper and lower limits of humidity.
     *
     * @type        class
     * @parent      brick:Humidity_Parameter
     */
    Humidity_Tolerance_Parameter = this.toIri().concat('Humidity_Tolerance_Parameter');
    /**
     * **[brick:IDF](https://brickschema.org/schema/Brick#IDF)**
     *
     * An room for an intermediate distribution frame, where cables carrying signals from the main distrubtion frame terminate and then feed out to endpoints
     *
     * @type        class
     * @parent      brick:Distribution_Frame
     */
    IDF = this.toIri().concat('IDF');
    /**
     * **[brick:Ice](https://brickschema.org/schema/Brick#Ice)**
     *
     * Water in its solid form
     *
     * @type        class
     * @parent      brick:Solid
     */
    Ice = this.toIri().concat('Ice');
    /**
     * **[brick:Ice_Tank_Leaving_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Ice_Tank_Leaving_Water_Temperature_Sensor)**
     *
     * Measures the temperature of water leaving an ice tank
     *
     * @type        class
     * @parent      brick:Leaving_Water_Temperature_Sensor
     */
    Ice_Tank_Leaving_Water_Temperature_Sensor = this.toIri().concat('Ice_Tank_Leaving_Water_Temperature_Sensor');
    /**
     * **[brick:Illuminance](https://brickschema.org/schema/Brick#Illuminance)**
     *
     * @type        instance
     */
    Illuminance = this.toIri().concat('Illuminance');
    /**
     * **[brick:Illuminance_Sensor](https://brickschema.org/schema/Brick#Illuminance_Sensor)**
     *
     * Measures the total luminous flux incident on a surface, per unit area
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Illuminance_Sensor = this.toIri().concat('Illuminance_Sensor');
    /**
     * **[brick:Imbalance_Sensor](https://brickschema.org/schema/Brick#Imbalance_Sensor)**
     *
     * A sensor which measures difference (imbalance) between phases of an electrical system
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Imbalance_Sensor = this.toIri().concat('Imbalance_Sensor');
    /**
     * **[brick:Information_Area](https://brickschema.org/schema/Brick#Information_Area)**
     *
     * An information booth or kiosk where visitors would look for information
     *
     * @type        class
     * @parent      brick:Outdoor_Area
     */
    Information_Area = this.toIri().concat('Information_Area');
    /**
     * **[brick:Inside_Face_Surface_Temperature_Sensor](https://brickschema.org/schema/Brick#Inside_Face_Surface_Temperature_Sensor)**
     *
     * Measures the inside surface (relative to the space) of the radiant panel of the radiant heating and cooling HVAC system.
     *
     * @type        class
     * @parent      brick:Radiant_Panel_Temperature_Sensor
     */
    Inside_Face_Surface_Temperature_Sensor = this.toIri().concat('Inside_Face_Surface_Temperature_Sensor');
    /**
     * **[brick:Inside_Face_Surface_Temperature_Setpoint](https://brickschema.org/schema/Brick#Inside_Face_Surface_Temperature_Setpoint)**
     *
     * Sets temperature for the inside face surface temperature of the radiant panel.
     *
     * @type        class
     * @parent      brick:Radiant_Panel_Temperature_Setpoint
     */
    Inside_Face_Surface_Temperature_Setpoint = this.toIri().concat('Inside_Face_Surface_Temperature_Setpoint');
    /**
     * **[brick:Intake_Air_Filter](https://brickschema.org/schema/Brick#Intake_Air_Filter)**
     *
     * Filters air intake
     *
     * @type        class
     * @parent      brick:Filter
     */
    Intake_Air_Filter = this.toIri().concat('Intake_Air_Filter');
    /**
     * **[brick:Intake_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Intake_Air_Temperature_Sensor)**
     *
     * Measures air at the interface between the building and the outside
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Sensor
     */
    Intake_Air_Temperature_Sensor = this.toIri().concat('Intake_Air_Temperature_Sensor');
    /**
     * **[brick:Integral_Gain_Parameter](https://brickschema.org/schema/Brick#Integral_Gain_Parameter)**
     *
     * @type        class
     * @parent      brick:Gain_Parameter
     */
    Integral_Gain_Parameter = this.toIri().concat('Integral_Gain_Parameter');
    /**
     * **[brick:Integral_Time_Parameter](https://brickschema.org/schema/Brick#Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Time_Parameter
     */
    Integral_Time_Parameter = this.toIri().concat('Integral_Time_Parameter');
    /**
     * **[brick:Intercom_Equipment](https://brickschema.org/schema/Brick#Intercom_Equipment)**
     *
     * @type        class
     * @parent      brick:Security_Equipment
     */
    Intercom_Equipment = this.toIri().concat('Intercom_Equipment');
    /**
     * **[brick:Interface](https://brickschema.org/schema/Brick#Interface)**
     *
     * A device that provides an occupant control over a lighting system
     *
     * @type        class
     * @parent      brick:Lighting_Equipment
     */
    Interface = this.toIri().concat('Interface');
    /**
     * **[brick:Intrusion_Detection_Equipment](https://brickschema.org/schema/Brick#Intrusion_Detection_Equipment)**
     *
     * @type        class
     * @parent      brick:Security_Equipment
     */
    Intrusion_Detection_Equipment = this.toIri().concat('Intrusion_Detection_Equipment');
    /**
     * **[brick:Inverter](https://brickschema.org/schema/Brick#Inverter)**
     *
     * A device that changes direct current into alternating current
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    Inverter = this.toIri().concat('Inverter');
    /**
     * **[brick:Irradiance](https://brickschema.org/schema/Brick#Irradiance)**
     *
     * The power per unit area of electromagnetic radiation incident on a surface
     *
     * @type        instance
     */
    Irradiance = this.toIri().concat('Irradiance');
    /**
     * **[brick:Isolation_Valve](https://brickschema.org/schema/Brick#Isolation_Valve)**
     *
     * A valve that stops the flow of a fluid, usually for maintenance or safety purposes
     *
     * @type        class
     * @parent      brick:Valve
     */
    Isolation_Valve = this.toIri().concat('Isolation_Valve');
    /**
     * **[brick:Janitor_Room](https://brickschema.org/schema/Brick#Janitor_Room)**
     *
     * A room set aside for the storage of cleaning equipment and supplies
     *
     * @type        class
     * @parent      brick:Room
     */
    Janitor_Room = this.toIri().concat('Janitor_Room');
    /**
     * **[brick:Jet_Nozzle_Air_Diffuser](https://brickschema.org/schema/Brick#Jet_Nozzle_Air_Diffuser)**
     *
     * An air diffuser that is designed to produce high velocity discharge air stream to throw the air over a large distance or target the air stream to a localize area
     *
     * @type        class
     * @parent      brick:Air_Diffuser
     */
    Jet_Nozzle_Air_Diffuser = this.toIri().concat('Jet_Nozzle_Air_Diffuser');
    /**
     * **[brick:Laboratory](https://brickschema.org/schema/Brick#Laboratory)**
     *
     * facility acceptable to the local, national, or international recognized authority having jurisdiction and which provides uniform testing and examination procedures and standards for meeting design, manufacturing, and factory testing requirements.
     *
     * @type        class
     * @parent      brick:Room
     */
    Laboratory = this.toIri().concat('Laboratory');
    /**
     * **[brick:Laminar_Flow_Air_Diffuser](https://brickschema.org/schema/Brick#Laminar_Flow_Air_Diffuser)**
     *
     * An air diffuser that is designed for low discharge air speeds to provide uniform and unidirectional air pattern which minimizes room air entrainment
     *
     * @type        class
     * @parent      brick:Air_Diffuser
     */
    Laminar_Flow_Air_Diffuser = this.toIri().concat('Laminar_Flow_Air_Diffuser');
    /**
     * **[brick:Last_Fault_Code_Status](https://brickschema.org/schema/Brick#Last_Fault_Code_Status)**
     *
     * Indicates the last fault code that occurred
     *
     * @type        class
     * @parent      brick:Fault_Status
     */
    Last_Fault_Code_Status = this.toIri().concat('Last_Fault_Code_Status');
    /**
     * **[brick:Lead_Lag_Command](https://brickschema.org/schema/Brick#Lead_Lag_Command)**
     *
     * Enables lead/lag operation
     *
     * @type        class
     * @parent      brick:Command
     */
    Lead_Lag_Command = this.toIri().concat('Lead_Lag_Command');
    /**
     * **[brick:Lead_Lag_Status](https://brickschema.org/schema/Brick#Lead_Lag_Status)**
     *
     * Indicates if lead/lag operation is enabled
     *
     * @type        class
     * @parent      brick:Status
     */
    Lead_Lag_Status = this.toIri().concat('Lead_Lag_Status');
    /**
     * **[brick:Lead_On_Off_Command](https://brickschema.org/schema/Brick#Lead_On_Off_Command)**
     *
     * Controls the active/inactive status of the "lead" part of a lead/lag system
     *
     * @type        class
     * @parent      brick:On_Off_Command
     */
    Lead_On_Off_Command = this.toIri().concat('Lead_On_Off_Command');
    /**
     * **[brick:Leak_Alarm](https://brickschema.org/schema/Brick#Leak_Alarm)**
     *
     * An alarm that indicates leaks occured in systems containing fluids
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Leak_Alarm = this.toIri().concat('Leak_Alarm');
    /**
     * **[brick:Leaving_Water](https://brickschema.org/schema/Brick#Leaving_Water)**
     *
     * Water that is leaving a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water
     */
    Leaving_Water = this.toIri().concat('Leaving_Water');
    /**
     * **[brick:Leaving_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Leaving_Water_Flow_Sensor)**
     *
     * Measures the rate of flow of water that is leaving a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    Leaving_Water_Flow_Sensor = this.toIri().concat('Leaving_Water_Flow_Sensor');
    /**
     * **[brick:Leaving_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Leaving_Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of leaving water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    Leaving_Water_Flow_Setpoint = this.toIri().concat('Leaving_Water_Flow_Setpoint');
    /**
     * **[brick:Leaving_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Leaving_Water_Temperature_Sensor)**
     *
     * Measures the temperature of water leaving a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    Leaving_Water_Temperature_Sensor = this.toIri().concat('Leaving_Water_Temperature_Sensor');
    /**
     * **[brick:Leaving_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Leaving_Water_Temperature_Setpoint)**
     *
     * Sets temperature of leaving water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    Leaving_Water_Temperature_Setpoint = this.toIri().concat('Leaving_Water_Temperature_Setpoint');
    /**
     * **[brick:Level](https://brickschema.org/schema/Brick#Level)**
     *
     * Amount of substance in a container; typically measured in height
     *
     * @type        instance
     */
    Level = this.toIri().concat('Level');
    /**
     * **[brick:Library](https://brickschema.org/schema/Brick#Library)**
     *
     * A place for the storage and/or consumption of physical media, e.g. books, periodicals, and DVDs/CDs
     *
     * @type        class
     * @parent      brick:Room
     */
    Library = this.toIri().concat('Library');
    /**
     * **[brick:Lighting](https://brickschema.org/schema/Brick#Lighting)**
     *
     * @type        class
     * @parent      brick:Lighting_Equipment
     */
    Lighting = this.toIri().concat('Lighting');
    /**
     * **[brick:Lighting_Equipment](https://brickschema.org/schema/Brick#Lighting_Equipment)**
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Lighting_Equipment = this.toIri().concat('Lighting_Equipment');
    /**
     * **[brick:Lighting_System](https://brickschema.org/schema/Brick#Lighting_System)**
     *
     * The equipment, devices and interfaces that serve or are a part of the lighting subsystem in a building
     *
     * @type        class
     * @parent      brick:System
     */
    Lighting_System = this.toIri().concat('Lighting_System');
    /**
     * **[brick:Lighting_Zone](https://brickschema.org/schema/Brick#Lighting_Zone)**
     *
     * @type        class
     * @parent      brick:Zone
     */
    Lighting_Zone = this.toIri().concat('Lighting_Zone');
    /**
     * **[brick:Limit](https://brickschema.org/schema/Brick#Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Setpoint.
     *
     * @type        class
     * @parent      brick:Parameter
     */
    Limit = this.toIri().concat('Limit');
    /**
     * **[brick:Liquid](https://brickschema.org/schema/Brick#Liquid)**
     *
     * state of matter intermediate between crystalline substances and gases in which the volume of a substance, but not the shape, remains relatively constant.
     *
     * @type        class
     * @parent      brick:Fluid
     */
    Liquid = this.toIri().concat('Liquid');
    /**
     * **[brick:Liquid_CO2](https://brickschema.org/schema/Brick#Liquid_CO2)**
     *
     * Carbon Dioxide in the liquid phase
     *
     * @type        class
     * @parent      brick:Liquid
     */
    Liquid_CO2 = this.toIri().concat('Liquid_CO2');
    /**
     * **[brick:Liquid_Detection_Alarm](https://brickschema.org/schema/Brick#Liquid_Detection_Alarm)**
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Liquid_Detection_Alarm = this.toIri().concat('Liquid_Detection_Alarm');
    /**
     * **[brick:Load_Current_Sensor](https://brickschema.org/schema/Brick#Load_Current_Sensor)**
     *
     * Measures the current consumed by a load
     *
     * @type        class
     * @parent      brick:Current_Sensor
     */
    Load_Current_Sensor = this.toIri().concat('Load_Current_Sensor');
    /**
     * **[brick:Load_Parameter](https://brickschema.org/schema/Brick#Load_Parameter)**
     *
     * @type        class
     * @parent      brick:Parameter
     */
    Load_Parameter = this.toIri().concat('Load_Parameter');
    /**
     * **[brick:Load_Setpoint](https://brickschema.org/schema/Brick#Load_Setpoint)**
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Load_Setpoint = this.toIri().concat('Load_Setpoint');
    /**
     * **[brick:Load_Shed_Command](https://brickschema.org/schema/Brick#Load_Shed_Command)**
     *
     * Controls load shedding behavior provided by a control system
     *
     * @type        class
     * @parent      brick:Command
     */
    Load_Shed_Command = this.toIri().concat('Load_Shed_Command');
    /**
     * **[brick:Load_Shed_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Load_Shed_Differential_Pressure_Setpoint)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint
     */
    Load_Shed_Differential_Pressure_Setpoint = this.toIri().concat('Load_Shed_Differential_Pressure_Setpoint');
    /**
     * **[brick:Load_Shed_Setpoint](https://brickschema.org/schema/Brick#Load_Shed_Setpoint)**
     *
     * @type        class
     * @parent      brick:Load_Setpoint
     */
    Load_Shed_Setpoint = this.toIri().concat('Load_Shed_Setpoint');
    /**
     * **[brick:Load_Shed_Status](https://brickschema.org/schema/Brick#Load_Shed_Status)**
     *
     * Indicates if a load shedding policy is in effect
     *
     * @type        class
     * @parent      brick:Status
     */
    Load_Shed_Status = this.toIri().concat('Load_Shed_Status');
    /**
     * **[brick:Loading_Dock](https://brickschema.org/schema/Brick#Loading_Dock)**
     *
     * A part of a facility where delivery trucks can load and unload. Usually partially enclosed with specific traffic lanes leading to the dock
     *
     * @type        class
     * @parent      brick:Room
     */
    Loading_Dock = this.toIri().concat('Loading_Dock');
    /**
     * **[brick:Lobby](https://brickschema.org/schema/Brick#Lobby)**
     *
     * A space just after the entrance to a building or other space of a building, where visitors can wait
     *
     * @type        class
     * @parent      brick:Common_Space
     */
    Lobby = this.toIri().concat('Lobby');
    /**
     * **[brick:Locally_On_Off_Status](https://brickschema.org/schema/Brick#Locally_On_Off_Status)**
     *
     * @type        class
     * @parent      brick:On_Off_Status
     */
    Locally_On_Off_Status = this.toIri().concat('Locally_On_Off_Status');
    /**
     * **[brick:Location](https://brickschema.org/schema/Brick#Location)**
     *
     * @type        class
     * @parent      brick:Class
     */
    Location = this.toIri().concat('Location');
    /**
     * **[brick:Lockout_Status](https://brickschema.org/schema/Brick#Lockout_Status)**
     *
     * Indicates if a piece of equipment, system, or functionality has been locked out from operation
     *
     * @type        class
     * @parent      brick:Status
     */
    Lockout_Status = this.toIri().concat('Lockout_Status');
    /**
     * **[brick:Lockout_Temperature_Differential_Parameter](https://brickschema.org/schema/Brick#Lockout_Temperature_Differential_Parameter)**
     *
     * @type        class
     * @parent      brick:Temperature_Parameter
     */
    Lockout_Temperature_Differential_Parameter = this.toIri().concat('Lockout_Temperature_Differential_Parameter');
    /**
     * **[brick:Loop](https://brickschema.org/schema/Brick#Loop)**
     *
     * A collection of connected equipment; part of a System
     *
     * @type        class
     * @parent      brick:Collection
     */
    Loop = this.toIri().concat('Loop');
    /**
     * **[brick:Lounge](https://brickschema.org/schema/Brick#Lounge)**
     *
     * A room for lesiure activities or relaxing
     *
     * @type        class
     * @parent      brick:Common_Space
     */
    Lounge = this.toIri().concat('Lounge');
    /**
     * **[brick:Louver](https://brickschema.org/schema/Brick#Louver)**
     *
     * Device consisting of an assembly of parallel sloping vanes, intended to permit the passage of air while providing a measure of protection against environmental influences
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Louver = this.toIri().concat('Louver');
    /**
     * **[brick:Low_Freeze_Protect_Temperature_Parameter](https://brickschema.org/schema/Brick#Low_Freeze_Protect_Temperature_Parameter)**
     *
     * @type        class
     * @parent      brick:Temperature_Parameter
     */
    Low_Freeze_Protect_Temperature_Parameter = this.toIri().concat('Low_Freeze_Protect_Temperature_Parameter');
    /**
     * **[brick:Low_Humidity_Alarm](https://brickschema.org/schema/Brick#Low_Humidity_Alarm)**
     *
     * An alarm that indicates low concentration of water vapor in the air.
     *
     * @type        class
     * @parent      brick:Humidity_Alarm
     */
    Low_Humidity_Alarm = this.toIri().concat('Low_Humidity_Alarm');
    /**
     * **[brick:Low_Humidity_Alarm_Parameter](https://brickschema.org/schema/Brick#Low_Humidity_Alarm_Parameter)**
     *
     * A parameter determining the humidity level at which to trigger a low humidity alarm
     *
     * @type        class
     * @parent      brick:Humidity_Parameter
     */
    Low_Humidity_Alarm_Parameter = this.toIri().concat('Low_Humidity_Alarm_Parameter');
    /**
     * **[brick:Low_Outside_Air_Lockout_Temperature_Differential_Parameter](https://brickschema.org/schema/Brick#Low_Outside_Air_Lockout_Temperature_Differential_Parameter)**
     *
     * The lower bound of the outside air temperature lockout range
     *
     * @type        class
     * @parent      brick:Outside_Air_Lockout_Temperature_Differential_Parameter
     */
    Low_Outside_Air_Lockout_Temperature_Differential_Parameter = this.toIri().concat('Low_Outside_Air_Lockout_Temperature_Differential_Parameter');
    /**
     * **[brick:Low_Outside_Air_Temperature_Enable_Differential_Sensor](https://brickschema.org/schema/Brick#Low_Outside_Air_Temperature_Enable_Differential_Sensor)**
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Enable_Differential_Sensor
     */
    Low_Outside_Air_Temperature_Enable_Differential_Sensor = this.toIri().concat('Low_Outside_Air_Temperature_Enable_Differential_Sensor');
    /**
     * **[brick:Low_Outside_Air_Temperature_Enable_Setpoint](https://brickschema.org/schema/Brick#Low_Outside_Air_Temperature_Enable_Setpoint)**
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Setpoint
     */
    Low_Outside_Air_Temperature_Enable_Setpoint = this.toIri().concat('Low_Outside_Air_Temperature_Enable_Setpoint');
    /**
     * **[brick:Low_Return_Air_Temperature_Alarm](https://brickschema.org/schema/Brick#Low_Return_Air_Temperature_Alarm)**
     *
     * An alarm that indicates that return air temperature is too low
     *
     * @type        class
     * @parent      brick:Low_Temperature_Alarm
     */
    Low_Return_Air_Temperature_Alarm = this.toIri().concat('Low_Return_Air_Temperature_Alarm');
    /**
     * **[brick:Low_Suction_Pressure_Alarm](https://brickschema.org/schema/Brick#Low_Suction_Pressure_Alarm)**
     *
     * An alarm that indicates a low suction pressure in the compressor in a refrigeration or air conditioning system.
     *
     * @type        class
     * @parent      brick:Pressure_Alarm
     */
    Low_Suction_Pressure_Alarm = this.toIri().concat('Low_Suction_Pressure_Alarm');
    /**
     * **[brick:Low_Temperature_Alarm](https://brickschema.org/schema/Brick#Low_Temperature_Alarm)**
     *
     * An alarm that indicates low temperature.
     *
     * @type        class
     * @parent      brick:Temperature_Alarm
     */
    Low_Temperature_Alarm = this.toIri().concat('Low_Temperature_Alarm');
    /**
     * **[brick:Low_Temperature_Alarm_Parameter](https://brickschema.org/schema/Brick#Low_Temperature_Alarm_Parameter)**
     *
     * A parameter determining the temperature level at which to trigger a low temperature alarm
     *
     * @type        class
     * @parent      brick:Temperature_Parameter
     */
    Low_Temperature_Alarm_Parameter = this.toIri().concat('Low_Temperature_Alarm_Parameter');
    /**
     * **[brick:Lowest_Exhaust_Air_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Lowest_Exhaust_Air_Static_Pressure_Sensor)**
     *
     * The lowest observed static pressure of air in exhaust regions of an HVAC system over some period of time
     *
     * @type        class
     * @parent      brick:Exhaust_Air_Static_Pressure_Sensor
     */
    Lowest_Exhaust_Air_Static_Pressure_Sensor = this.toIri().concat('Lowest_Exhaust_Air_Static_Pressure_Sensor');
    /**
     * **[brick:Luminaire](https://brickschema.org/schema/Brick#Luminaire)**
     *
     * A complete lighting unit consisting of a lamp or lamps and ballast(s) (when applicable) together with the parts designed to distribute the light, to position and protect the lamps, and to connect the lamps to the power supply.
     *
     * @type        class
     * @parent      brick:Lighting
     */
    Luminaire = this.toIri().concat('Luminaire');
    /**
     * **[brick:Luminaire_Driver](https://brickschema.org/schema/Brick#Luminaire_Driver)**
     *
     * A power source for a luminaire
     *
     * @type        class
     * @parent      brick:Lighting
     */
    Luminaire_Driver = this.toIri().concat('Luminaire_Driver');
    /**
     * **[brick:Luminance](https://brickschema.org/schema/Brick#Luminance)**
     *
     * @type        instance
     */
    Luminance = this.toIri().concat('Luminance');
    /**
     * **[brick:Luminance_Alarm](https://brickschema.org/schema/Brick#Luminance_Alarm)**
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Luminance_Alarm = this.toIri().concat('Luminance_Alarm');
    /**
     * **[brick:Luminance_Command](https://brickschema.org/schema/Brick#Luminance_Command)**
     *
     * Controls the amount of luminance delivered by a lighting system
     *
     * @type        class
     * @parent      brick:Command
     */
    Luminance_Command = this.toIri().concat('Luminance_Command');
    /**
     * **[brick:Luminance_Sensor](https://brickschema.org/schema/Brick#Luminance_Sensor)**
     *
     * Measures the luminous intensity per unit area of light travelling in a given direction
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Luminance_Sensor = this.toIri().concat('Luminance_Sensor');
    /**
     * **[brick:Luminance_Setpoint](https://brickschema.org/schema/Brick#Luminance_Setpoint)**
     *
     * Sets luminance
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Luminance_Setpoint = this.toIri().concat('Luminance_Setpoint');
    /**
     * **[brick:Luminous_Flux](https://brickschema.org/schema/Brick#Luminous_Flux)**
     *
     * @type        instance
     */
    Luminous_Flux = this.toIri().concat('Luminous_Flux');
    /**
     * **[brick:Luminous_Intensity](https://brickschema.org/schema/Brick#Luminous_Intensity)**
     *
     * @type        instance
     */
    Luminous_Intensity = this.toIri().concat('Luminous_Intensity');
    /**
     * **[brick:MAU](https://brickschema.org/schema/Brick#MAU)**
     *
     * See Makeup_Air_Unit
     *
     * @type        class
     * @parent      brick:AHU
     */
    MAU = this.toIri().concat('MAU');
    /**
     * **[brick:MDF](https://brickschema.org/schema/Brick#MDF)**
     *
     * A room for the Main Distribution Frame, the central place of a building where cables carrying signals meet and connect to the outside world
     *
     * @type        class
     * @parent      brick:Distribution_Frame
     */
    MDF = this.toIri().concat('MDF');
    /**
     * **[brick:Mail_Room](https://brickschema.org/schema/Brick#Mail_Room)**
     *
     * A room where mail is recieved and sorted for distribution to the rest of the building
     *
     * @type        class
     * @parent      brick:Room
     */
    Mail_Room = this.toIri().concat('Mail_Room');
    /**
     * **[brick:Maintenance_Mode_Command](https://brickschema.org/schema/Brick#Maintenance_Mode_Command)**
     *
     * Controls whether or not a device or controller is operating in "Maintenance" mode
     *
     * @type        class
     * @parent      brick:Mode_Command
     */
    Maintenance_Mode_Command = this.toIri().concat('Maintenance_Mode_Command');
    /**
     * **[brick:Maintenance_Required_Alarm](https://brickschema.org/schema/Brick#Maintenance_Required_Alarm)**
     *
     * An alarm that indicates that repair/maintenance is required on an associated device or equipment
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Maintenance_Required_Alarm = this.toIri().concat('Maintenance_Required_Alarm');
    /**
     * **[brick:Majlis](https://brickschema.org/schema/Brick#Majlis)**
     *
     * In Arab countries, an Majlis is a private lounge where visitors are recieved and entertained
     *
     * @type        class
     * @parent      brick:Lounge
     */
    Majlis = this.toIri().concat('Majlis');
    /**
     * **[brick:Makeup_Air_Unit](https://brickschema.org/schema/Brick#Makeup_Air_Unit)**
     *
     * A device designed to condition ventilation air introduced into a space or to replace air exhausted from a process or general area exhaust. The device may be used to prevent negative pressure within buildings or to reduce airborne contaminants in a space.
     *
     * @type        class
     * @parent      brick:AHU
     */
    Makeup_Air_Unit = this.toIri().concat('Makeup_Air_Unit');
    /**
     * **[brick:Makeup_Water](https://brickschema.org/schema/Brick#Makeup_Water)**
     *
     * Water used used to makeup water loss through leaks, evaporation, or blowdown
     *
     * @type        class
     * @parent      brick:Water
     */
    Makeup_Water = this.toIri().concat('Makeup_Water');
    /**
     * **[brick:Makeup_Water_Valve](https://brickschema.org/schema/Brick#Makeup_Water_Valve)**
     *
     * A valve regulating the flow of makeup water into a water holding tank, e.g. a cooling tower, hot water tank
     *
     * @type        class
     * @parent      brick:Water_Valve
     */
    Makeup_Water_Valve = this.toIri().concat('Makeup_Water_Valve');
    /**
     * **[brick:Manual_Auto_Status](https://brickschema.org/schema/Brick#Manual_Auto_Status)**
     *
     * Indicates if a system is under manual or automatic operation
     *
     * @type        class
     * @parent      brick:Status
     */
    Manual_Auto_Status = this.toIri().concat('Manual_Auto_Status');
    /**
     * **[brick:Mass](https://brickschema.org/schema/Brick#Mass)**
     *
     * @type        instance
     */
    Mass = this.toIri().concat('Mass');
    /**
     * **[brick:Massage_Room](https://brickschema.org/schema/Brick#Massage_Room)**
     *
     * Usually adjunct to an athletic facility, a private/semi-private space where massages are performed
     *
     * @type        class
     * @parent      brick:Room
     */
    Massage_Room = this.toIri().concat('Massage_Room');
    /**
     * **[brick:Max_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint_Limit
     */
    Max_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Max_Air_Temperature_Setpoint)**
     *
     * Setpoint for maximum air temperature
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Max_Air_Temperature_Setpoint = this.toIri().concat('Max_Air_Temperature_Setpoint');
    /**
     * **[brick:Max_Chilled_Water_Differential_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Chilled_Water_Differential_Pressure_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Chilled_Water_Differential_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint_Limit
     */
    Max_Chilled_Water_Differential_Pressure_Setpoint_Limit = this.toIri().concat('Max_Chilled_Water_Differential_Pressure_Setpoint_Limit');
    /**
     * **[brick:Max_Cooling_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Cooling_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Cooling_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Air_Flow_Setpoint_Limit
     */
    Max_Cooling_Discharge_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Cooling_Discharge_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Cooling_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Cooling_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Cooling_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Air_Flow_Setpoint_Limit
     */
    Max_Cooling_Supply_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Cooling_Supply_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Discharge_Air_Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Discharge_Air_Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Discharge_Air_Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Limit
     */
    Max_Discharge_Air_Static_Pressure_Setpoint_Limit = this.toIri().concat('Max_Discharge_Air_Static_Pressure_Setpoint_Limit');
    /**
     * **[brick:Max_Discharge_Air_Temperature_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Discharge_Air_Temperature_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Discharge_Air_Temperature_Setpoint.
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint_Limit
     */
    Max_Discharge_Air_Temperature_Setpoint_Limit = this.toIri().concat('Max_Discharge_Air_Temperature_Setpoint_Limit');
    /**
     * **[brick:Max_Frequency_Command](https://brickschema.org/schema/Brick#Max_Frequency_Command)**
     *
     * Sets the maximum permitted frequency
     *
     * @type        class
     * @parent      brick:Frequency_Command
     */
    Max_Frequency_Command = this.toIri().concat('Max_Frequency_Command');
    /**
     * **[brick:Max_Heating_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Heating_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Heating_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Air_Flow_Setpoint_Limit
     */
    Max_Heating_Discharge_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Heating_Discharge_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Heating_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Heating_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Heating_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Air_Flow_Setpoint_Limit
     */
    Max_Heating_Supply_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Heating_Supply_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Hot_Water_Differential_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Hot_Water_Differential_Pressure_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Hot_Water_Differential_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint_Limit
     */
    Max_Hot_Water_Differential_Pressure_Setpoint_Limit = this.toIri().concat('Max_Hot_Water_Differential_Pressure_Setpoint_Limit');
    /**
     * **[brick:Max_Limit](https://brickschema.org/schema/Brick#Max_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    Max_Limit = this.toIri().concat('Max_Limit');
    /**
     * **[brick:Max_Load_Setpoint](https://brickschema.org/schema/Brick#Max_Load_Setpoint)**
     *
     * @type        class
     * @parent      brick:Load_Parameter
     */
    Max_Load_Setpoint = this.toIri().concat('Max_Load_Setpoint');
    /**
     * **[brick:Max_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Occupied_Cooling_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Cooling_Discharge_Air_Flow_Setpoint_Limit
     */
    Max_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Occupied_Cooling_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Cooling_Supply_Air_Flow_Setpoint_Limit
     */
    Max_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Occupied_Heating_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Heating_Discharge_Air_Flow_Setpoint_Limit
     */
    Max_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Occupied_Heating_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Heating_Supply_Air_Flow_Setpoint_Limit
     */
    Max_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Position_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Position_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Position_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Limit
     */
    Max_Position_Setpoint_Limit = this.toIri().concat('Max_Position_Setpoint_Limit');
    /**
     * **[brick:Max_Speed_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Speed_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Speed_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Limit
     */
    Max_Speed_Setpoint_Limit = this.toIri().concat('Max_Speed_Setpoint_Limit');
    /**
     * **[brick:Max_Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Limit
     */
    Max_Static_Pressure_Setpoint_Limit = this.toIri().concat('Max_Static_Pressure_Setpoint_Limit');
    /**
     * **[brick:Max_Supply_Air_Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Supply_Air_Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Supply_Air_Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Limit
     */
    Max_Supply_Air_Static_Pressure_Setpoint_Limit = this.toIri().concat('Max_Supply_Air_Static_Pressure_Setpoint_Limit');
    /**
     * **[brick:Max_Temperature_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Temperature_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Temperature_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Limit
     */
    Max_Temperature_Setpoint_Limit = this.toIri().concat('Max_Temperature_Setpoint_Limit');
    /**
     * **[brick:Max_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Unoccupied_Cooling_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Cooling_Discharge_Air_Flow_Setpoint_Limit
     */
    Max_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Unoccupied_Cooling_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Cooling_Supply_Air_Flow_Setpoint_Limit
     */
    Max_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Unoccupied_Heating_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Heating_Discharge_Air_Flow_Setpoint_Limit
     */
    Max_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Unoccupied_Heating_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Heating_Supply_Air_Flow_Setpoint_Limit
     */
    Max_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit = this.toIri().concat('Max_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Max_Water_Level_Alarm](https://brickschema.org/schema/Brick#Max_Water_Level_Alarm)**
     *
     * Alarm indicating that the maximum water level was reached
     *
     * @type        class
     * @parent      brick:Water_Level_Alarm
     */
    Max_Water_Level_Alarm = this.toIri().concat('Max_Water_Level_Alarm');
    /**
     * **[brick:Max_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Max_Water_Temperature_Setpoint)**
     *
     * Setpoint for max water temperature
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    Max_Water_Temperature_Setpoint = this.toIri().concat('Max_Water_Temperature_Setpoint');
    /**
     * **[brick:Measurable](https://brickschema.org/schema/Brick#Measurable)**
     *
     * @type        class
     * @parent      brick:Class
     */
    Measurable = this.toIri().concat('Measurable');
    /**
     * **[brick:Mechanical_Room](https://brickschema.org/schema/Brick#Mechanical_Room)**
     *
     * A class of service rooms where mechanical equipment (HVAC) operates
     *
     * @type        class
     * @parent      brick:Service_Room
     */
    Mechanical_Room = this.toIri().concat('Mechanical_Room');
    /**
     * **[brick:Media_Hot_Desk](https://brickschema.org/schema/Brick#Media_Hot_Desk)**
     *
     * A non-enclosed space used by members of the media temporarily to cover an event while they are present at a venue
     *
     * @type        class
     * @parent      brick:Space
     */
    Media_Hot_Desk = this.toIri().concat('Media_Hot_Desk');
    /**
     * **[brick:Media_Production_Room](https://brickschema.org/schema/Brick#Media_Production_Room)**
     *
     * A enclosed space used by media professionals for the production of media
     *
     * @type        class
     * @parent      brick:Media_Room
     */
    Media_Production_Room = this.toIri().concat('Media_Production_Room');
    /**
     * **[brick:Media_Room](https://brickschema.org/schema/Brick#Media_Room)**
     *
     * A class of spaces related to the creation of media
     *
     * @type        class
     * @parent      brick:Room
     */
    Media_Room = this.toIri().concat('Media_Room');
    /**
     * **[brick:Medical_Room](https://brickschema.org/schema/Brick#Medical_Room)**
     *
     * A class of rooms used for medical purposes
     *
     * @type        class
     * @parent      brick:Room
     */
    Medical_Room = this.toIri().concat('Medical_Room');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Reset_Status](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Reset_Status)**
     *
     * @type        class
     * @parent      brick:Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Status
     */
    Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Reset_Status = this.toIri().concat('Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Reset_Status');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Setpoint)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Setpoint
     */
    Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Setpoint = this.toIri().concat('Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Setpoint');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Status](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Load_Shed_Status
     */
    Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Status = this.toIri().concat('Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Status');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Sensor)**
     *
     * Measures the difference in water pressure between sections of a medium temperature hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_Differential_Pressure_Sensor
     */
    Medium_Temperature_Hot_Water_Differential_Pressure_Sensor = this.toIri().concat('Medium_Temperature_Hot_Water_Differential_Pressure_Sensor');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Setpoint)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Differential_Pressure_Setpoint
     */
    Medium_Temperature_Hot_Water_Differential_Pressure_Setpoint = this.toIri().concat('Medium_Temperature_Hot_Water_Differential_Pressure_Setpoint');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Discharge_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Discharge_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_High_Reset_Setpoint
     */
    Medium_Temperature_Hot_Water_Discharge_Temperature_High_Reset_Setpoint = this.toIri().concat('Medium_Temperature_Hot_Water_Discharge_Temperature_High_Reset_Setpoint');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Discharge_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Discharge_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Low_Reset_Setpoint
     */
    Medium_Temperature_Hot_Water_Discharge_Temperature_Low_Reset_Setpoint = this.toIri().concat('Medium_Temperature_Hot_Water_Discharge_Temperature_Low_Reset_Setpoint');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Return_Temperature_Sensor](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Return_Temperature_Sensor)**
     *
     * Measures the temperature of medium-temperature hot water returned to a hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_Return_Temperature_Sensor
     */
    Medium_Temperature_Hot_Water_Return_Temperature_Sensor = this.toIri().concat('Medium_Temperature_Hot_Water_Return_Temperature_Sensor');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Supply_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_High_Reset_Setpoint
     */
    Medium_Temperature_Hot_Water_Supply_Temperature_High_Reset_Setpoint = this.toIri().concat('Medium_Temperature_Hot_Water_Supply_Temperature_High_Reset_Setpoint');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Setpoint)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Setpoint
     */
    Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Setpoint = this.toIri().concat('Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Setpoint');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Status](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Load_Shed_Status
     */
    Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Status = this.toIri().concat('Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Status');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Supply_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Low_Reset_Setpoint
     */
    Medium_Temperature_Hot_Water_Supply_Temperature_Low_Reset_Setpoint = this.toIri().concat('Medium_Temperature_Hot_Water_Supply_Temperature_Low_Reset_Setpoint');
    /**
     * **[brick:Medium_Temperature_Hot_Water_Supply_Temperature_Sensor](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_Sensor)**
     *
     * Measures the temperature of medium-temperature hot water supplied by a hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Sensor
     */
    Medium_Temperature_Hot_Water_Supply_Temperature_Sensor = this.toIri().concat('Medium_Temperature_Hot_Water_Supply_Temperature_Sensor');
    /**
     * **[brick:Meter](https://brickschema.org/schema/Brick#Meter)**
     *
     * A device that measure usage or consumption of some media --- typically a form energy or power.
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Meter = this.toIri().concat('Meter');
    /**
     * **[brick:MethaneConcentration](https://brickschema.org/schema/Brick#Methane_Concentration)**
     *
     * The concentration of methane in a medium
     *
     * @type        instance
     */
    Methane_Concentration = this.toIri().concat('Methane_Concentration');
    /**
     * **[brick:Methane_Level_Sensor](https://brickschema.org/schema/Brick#Methane_Level_Sensor)**
     *
     * Measures the concentration of methane in air
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    Methane_Level_Sensor = this.toIri().concat('Methane_Level_Sensor');
    /**
     * **[brick:Min_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint_Limit
     */
    Min_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Min_Air_Temperature_Setpoint)**
     *
     * Setpoint for minimum air temperature
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Min_Air_Temperature_Setpoint = this.toIri().concat('Min_Air_Temperature_Setpoint');
    /**
     * **[brick:Min_Chilled_Water_Differential_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Chilled_Water_Differential_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Chilled_Water_Differential_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint_Limit
     */
    Min_Chilled_Water_Differential_Pressure_Setpoint_Limit = this.toIri().concat('Min_Chilled_Water_Differential_Pressure_Setpoint_Limit');
    /**
     * **[brick:Min_Cooling_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Cooling_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Cooling_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Air_Flow_Setpoint_Limit
     */
    Min_Cooling_Discharge_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Cooling_Discharge_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Cooling_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Cooling_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Cooling_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Air_Flow_Setpoint_Limit
     */
    Min_Cooling_Supply_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Cooling_Supply_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Discharge_Air_Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Discharge_Air_Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Discharge_Air_Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Limit
     */
    Min_Discharge_Air_Static_Pressure_Setpoint_Limit = this.toIri().concat('Min_Discharge_Air_Static_Pressure_Setpoint_Limit');
    /**
     * **[brick:Min_Discharge_Air_Temperature_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Discharge_Air_Temperature_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Discharge_Air_Temperature_Setpoint.
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint_Limit
     */
    Min_Discharge_Air_Temperature_Setpoint_Limit = this.toIri().concat('Min_Discharge_Air_Temperature_Setpoint_Limit');
    /**
     * **[brick:Min_Fresh_Air_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Fresh_Air_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Fresh_Air_Setpoint.
     *
     * @type        class
     * @parent      brick:Fresh_Air_Setpoint_Limit
     */
    Min_Fresh_Air_Setpoint_Limit = this.toIri().concat('Min_Fresh_Air_Setpoint_Limit');
    /**
     * **[brick:Min_Heating_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Heating_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Heating_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Air_Flow_Setpoint_Limit
     */
    Min_Heating_Discharge_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Heating_Discharge_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Heating_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Heating_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Heating_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Air_Flow_Setpoint_Limit
     */
    Min_Heating_Supply_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Heating_Supply_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Hot_Water_Differential_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Hot_Water_Differential_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Hot_Water_Differential_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint_Limit
     */
    Min_Hot_Water_Differential_Pressure_Setpoint_Limit = this.toIri().concat('Min_Hot_Water_Differential_Pressure_Setpoint_Limit');
    /**
     * **[brick:Min_Limit](https://brickschema.org/schema/Brick#Min_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    Min_Limit = this.toIri().concat('Min_Limit');
    /**
     * **[brick:Min_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Occupied_Cooling_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Cooling_Discharge_Air_Flow_Setpoint_Limit
     */
    Min_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Occupied_Cooling_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Cooling_Supply_Air_Flow_Setpoint_Limit
     */
    Min_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Occupied_Heating_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Heating_Discharge_Air_Flow_Setpoint_Limit
     */
    Min_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Occupied_Heating_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Heating_Supply_Air_Flow_Setpoint_Limit
     */
    Min_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Outside_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Outside_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Outside_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Air_Flow_Setpoint_Limit
     */
    Min_Outside_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Outside_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Position_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Position_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Position_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Limit
     */
    Min_Position_Setpoint_Limit = this.toIri().concat('Min_Position_Setpoint_Limit');
    /**
     * **[brick:Min_Speed_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Speed_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Speed_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Limit
     */
    Min_Speed_Setpoint_Limit = this.toIri().concat('Min_Speed_Setpoint_Limit');
    /**
     * **[brick:Min_Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Limit
     */
    Min_Static_Pressure_Setpoint_Limit = this.toIri().concat('Min_Static_Pressure_Setpoint_Limit');
    /**
     * **[brick:Min_Supply_Air_Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Supply_Air_Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Supply_Air_Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Limit
     */
    Min_Supply_Air_Static_Pressure_Setpoint_Limit = this.toIri().concat('Min_Supply_Air_Static_Pressure_Setpoint_Limit');
    /**
     * **[brick:Min_Temperature_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Temperature_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Temperature_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Limit
     */
    Min_Temperature_Setpoint_Limit = this.toIri().concat('Min_Temperature_Setpoint_Limit');
    /**
     * **[brick:Min_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Unoccupied_Cooling_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Cooling_Discharge_Air_Flow_Setpoint_Limit
     */
    Min_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Unoccupied_Cooling_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Cooling_Supply_Air_Flow_Setpoint_Limit
     */
    Min_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Unoccupied_Heating_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Heating_Discharge_Air_Flow_Setpoint_Limit
     */
    Min_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Unoccupied_Heating_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Heating_Supply_Air_Flow_Setpoint_Limit
     */
    Min_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit = this.toIri().concat('Min_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit');
    /**
     * **[brick:Min_Water_Level_Alarm](https://brickschema.org/schema/Brick#Min_Water_Level_Alarm)**
     *
     * Alarm indicating that the minimum water level was reached
     *
     * @type        class
     * @parent      brick:Water_Level_Alarm
     */
    Min_Water_Level_Alarm = this.toIri().concat('Min_Water_Level_Alarm');
    /**
     * **[brick:Min_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Min_Water_Temperature_Setpoint)**
     *
     * Setpoint for min water temperature
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    Min_Water_Temperature_Setpoint = this.toIri().concat('Min_Water_Temperature_Setpoint');
    /**
     * **[brick:Mixed_Air](https://brickschema.org/schema/Brick#Mixed_Air)**
     *
     * (1) air that contains two or more streams of air. (2) combined outdoor air and recirculated air.
     *
     * @type        class
     * @parent      brick:Air
     */
    Mixed_Air = this.toIri().concat('Mixed_Air');
    /**
     * **[brick:Mixed_Air_Filter](https://brickschema.org/schema/Brick#Mixed_Air_Filter)**
     *
     * A filter that is applied to the mixture of recirculated and outside air
     *
     * @type        class
     * @parent      brick:Filter
     */
    Mixed_Air_Filter = this.toIri().concat('Mixed_Air_Filter');
    /**
     * **[brick:Mixed_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Mixed_Air_Humidity_Sensor)**
     *
     * Measures the humidity of mixed air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    Mixed_Air_Humidity_Sensor = this.toIri().concat('Mixed_Air_Humidity_Sensor');
    /**
     * **[brick:Mixed_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Mixed_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for mixed air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    Mixed_Air_Humidity_Setpoint = this.toIri().concat('Mixed_Air_Humidity_Setpoint');
    /**
     * **[brick:Mixed_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Mixed_Air_Temperature_Sensor)**
     *
     * Measures the temperature of mixed air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    Mixed_Air_Temperature_Sensor = this.toIri().concat('Mixed_Air_Temperature_Sensor');
    /**
     * **[brick:Mixed_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Mixed_Air_Temperature_Setpoint)**
     *
     * Sets temperature of mixed air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Mixed_Air_Temperature_Setpoint = this.toIri().concat('Mixed_Air_Temperature_Setpoint');
    /**
     * **[brick:Mixed_Damper](https://brickschema.org/schema/Brick#Mixed_Damper)**
     *
     * A damper that modulates the flow of the mixed outside and return air streams
     *
     * @type        class
     * @parent      brick:Damper
     */
    Mixed_Damper = this.toIri().concat('Mixed_Damper');
    /**
     * **[brick:Mode_Command](https://brickschema.org/schema/Brick#Mode_Command)**
     *
     * Controls the operating mode of a device or controller
     *
     * @type        class
     * @parent      brick:Command
     */
    Mode_Command = this.toIri().concat('Mode_Command');
    /**
     * **[brick:Mode_Status](https://brickschema.org/schema/Brick#Mode_Status)**
     *
     * Indicates which mode a system, device or control loop is currently in
     *
     * @type        class
     * @parent      brick:Status
     */
    Mode_Status = this.toIri().concat('Mode_Status');
    /**
     * **[brick:Motion_Sensor](https://brickschema.org/schema/Brick#Motion_Sensor)**
     *
     * Detects the presence of motion in some area
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Motion_Sensor = this.toIri().concat('Motion_Sensor');
    /**
     * **[brick:Motor](https://brickschema.org/schema/Brick#Motor)**
     *
     * A machine in which power is applied to do work by the conversion of various forms of energy into mechanical force and motion.
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Motor = this.toIri().concat('Motor');
    /**
     * **[brick:Motor_Control_Center](https://brickschema.org/schema/Brick#Motor_Control_Center)**
     *
     * The Motor Control Center is a specialized type of switchgear which provides electrical power to major mechanical systems in the building such as HVAC components.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    Motor_Control_Center = this.toIri().concat('Motor_Control_Center');
    /**
     * **[brick:Motor_Current_Sensor](https://brickschema.org/schema/Brick#Motor_Current_Sensor)**
     *
     * Measures the current consumed by a motor
     *
     * @type        class
     * @parent      brick:Current_Sensor
     */
    Motor_Current_Sensor = this.toIri().concat('Motor_Current_Sensor');
    /**
     * **[brick:Motor_Direction_Status](https://brickschema.org/schema/Brick#Motor_Direction_Status)**
     *
     * Indicates which direction a motor is operating in, e.g. forward or reverse
     *
     * @type        class
     * @parent      brick:Direction_Status
     */
    Motor_Direction_Status = this.toIri().concat('Motor_Direction_Status');
    /**
     * **[brick:Motor_On_Off_Status](https://brickschema.org/schema/Brick#Motor_On_Off_Status)**
     *
     * @type        class
     * @parent      brick:On_Off_Status
     */
    Motor_On_Off_Status = this.toIri().concat('Motor_On_Off_Status');
    /**
     * **[brick:Motor_Speed_Sensor](https://brickschema.org/schema/Brick#Motor_Speed_Sensor)**
     *
     * @type        class
     * @parent      brick:Speed_Sensor
     */
    Motor_Speed_Sensor = this.toIri().concat('Motor_Speed_Sensor');
    /**
     * **[brick:Motor_Torque_Sensor](https://brickschema.org/schema/Brick#Motor_Torque_Sensor)**
     *
     * Measures the torque, or rotating power, of a motor
     *
     * @type        class
     * @parent      brick:Torque_Sensor
     */
    Motor_Torque_Sensor = this.toIri().concat('Motor_Torque_Sensor');
    /**
     * **[brick:PM10Concentration](https://brickschema.org/schema/Brick#NO2_Concentration)**
     *
     * The concentration of nitrogen dioxide in a medium
     *
     * @type        instance
     */
    NO2_Concentration = this.toIri().concat('NO2_Concentration');
    /**
     * **[brick:NO2_Level_Sensor](https://brickschema.org/schema/Brick#NO2_Level_Sensor)**
     *
     * Measures the concentration of NO2 in air
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    NO2_Level_Sensor = this.toIri().concat('NO2_Level_Sensor');
    /**
     * **[brick:NVR](https://brickschema.org/schema/Brick#NVR)**
     *
     * @type        class
     * @parent      brick:Video_Surveillance_Equipment
     */
    NVR = this.toIri().concat('NVR');
    /**
     * **[brick:Natural_Gas](https://brickschema.org/schema/Brick#Natural_Gas)**
     *
     * Fossil fuel energy source consisting largely of methane and other hydrocarbons
     *
     * @type        class
     * @parent      brick:Gas
     */
    Natural_Gas = this.toIri().concat('Natural_Gas');
    /**
     * **[brick:Natural_Gas_Boiler](https://brickschema.org/schema/Brick#Natural_Gas_Boiler)**
     *
     * A closed, pressure vessel that uses natural gas for heating water or other fluids to supply steam or hot water for heating, humidification, or other applications.
     *
     * @type        class
     * @parent      brick:Boiler
     */
    Natural_Gas_Boiler = this.toIri().concat('Natural_Gas_Boiler');
    /**
     * **[brick:Network_Video_Recorder](https://brickschema.org/schema/Brick#Network_Video_Recorder)**
     *
     * @type        class
     * @parent      brick:Video_Surveillance_Equipment
     */
    Network_Video_Recorder = this.toIri().concat('Network_Video_Recorder');
    /**
     * **[brick:No_Water_Alarm](https://brickschema.org/schema/Brick#No_Water_Alarm)**
     *
     * Alarm indicating that there is no water in the equipment or system
     *
     * @type        class
     * @parent      brick:Water_Alarm
     */
    No_Water_Alarm = this.toIri().concat('No_Water_Alarm');
    /**
     * **[brick:Noncondensing_Natural_Gas_Boiler](https://brickschema.org/schema/Brick#Noncondensing_Natural_Gas_Boiler)**
     *
     * A closed, pressure vessel that uses natural gas with no system to capture latent heat for heating water or other fluids to supply steam or hot water for heating, humidification, or other applications.
     *
     * @type        class
     * @parent      brick:Natural_Gas_Boiler
     */
    Noncondensing_Natural_Gas_Boiler = this.toIri().concat('Noncondensing_Natural_Gas_Boiler');
    /**
     * **[brick:Occupancy](https://brickschema.org/schema/Brick#Occupancy)**
     *
     * @type        instance
     */
    Occupancy = this.toIri().concat('Occupancy');
    /**
     * **[brick:Occupancy_Command](https://brickschema.org/schema/Brick#Occupancy_Command)**
     *
     * Controls whether or not a device or controller is operating in "Occupied" mode
     *
     * @type        class
     * @parent      brick:Command
     */
    Occupancy_Command = this.toIri().concat('Occupancy_Command');
    /**
     * **[brick:Occupancy_Count](https://brickschema.org/schema/Brick#Occupancy_Count)**
     *
     * Number of people in an area
     *
     * @type        instance
     */
    Occupancy_Count = this.toIri().concat('Occupancy_Count');
    /**
     * **[brick:Occupancy_Percentage](https://brickschema.org/schema/Brick#Occupancy_Percentage)**
     *
     * Percent of total occupancy of space that is occupied
     *
     * @type        instance
     */
    Occupancy_Percentage = this.toIri().concat('Occupancy_Percentage');
    /**
     * **[brick:Occupancy_Sensor](https://brickschema.org/schema/Brick#Occupancy_Sensor)**
     *
     * Detects occupancy of some space or area
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Occupancy_Sensor = this.toIri().concat('Occupancy_Sensor');
    /**
     * **[brick:Occupancy_Status](https://brickschema.org/schema/Brick#Occupancy_Status)**
     *
     * Indicates if a room or space is occupied
     *
     * @type        class
     * @parent      brick:Status
     */
    Occupancy_Status = this.toIri().concat('Occupancy_Status');
    /**
     * **[brick:Occupied_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Occupied_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Occupied_Air_Temperature_Setpoint = this.toIri().concat('Occupied_Air_Temperature_Setpoint');
    /**
     * **[brick:Occupied_Cooling_Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Occupied_Cooling_Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow for cooling when occupied
     *
     * @type        class
     * @parent      brick:Cooling_Discharge_Air_Flow_Setpoint
     */
    Occupied_Cooling_Discharge_Air_Flow_Setpoint = this.toIri().concat('Occupied_Cooling_Discharge_Air_Flow_Setpoint');
    /**
     * **[brick:Occupied_Cooling_Supply_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Occupied_Cooling_Supply_Air_Flow_Setpoint)**
     *
     * Sets supply air flow rate for cooling when occupied
     *
     * @type        class
     * @parent      brick:Cooling_Supply_Air_Flow_Setpoint
     */
    Occupied_Cooling_Supply_Air_Flow_Setpoint = this.toIri().concat('Occupied_Cooling_Supply_Air_Flow_Setpoint');
    /**
     * **[brick:Occupied_Cooling_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Occupied_Cooling_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature for cooling when occupied
     *
     * @type        class
     * @parent      brick:Cooling_Temperature_Setpoint
     */
    Occupied_Cooling_Temperature_Deadband_Setpoint = this.toIri().concat('Occupied_Cooling_Temperature_Deadband_Setpoint');
    /**
     * **[brick:Occupied_Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Occupied_Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow when occupied
     *
     * @type        class
     * @parent      brick:Discharge_Air_Flow_Setpoint
     */
    Occupied_Discharge_Air_Flow_Setpoint = this.toIri().concat('Occupied_Discharge_Air_Flow_Setpoint');
    /**
     * **[brick:Occupied_Discharge_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Occupied_Discharge_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint
     */
    Occupied_Discharge_Air_Temperature_Setpoint = this.toIri().concat('Occupied_Discharge_Air_Temperature_Setpoint');
    /**
     * **[brick:Occupied_Heating_Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Occupied_Heating_Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow for heating when occupied
     *
     * @type        class
     * @parent      brick:Heating_Discharge_Air_Flow_Setpoint
     */
    Occupied_Heating_Discharge_Air_Flow_Setpoint = this.toIri().concat('Occupied_Heating_Discharge_Air_Flow_Setpoint');
    /**
     * **[brick:Occupied_Heating_Supply_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Occupied_Heating_Supply_Air_Flow_Setpoint)**
     *
     * Sets supply air flow rate for heating when occupied
     *
     * @type        class
     * @parent      brick:Heating_Supply_Air_Flow_Setpoint
     */
    Occupied_Heating_Supply_Air_Flow_Setpoint = this.toIri().concat('Occupied_Heating_Supply_Air_Flow_Setpoint');
    /**
     * **[brick:Occupied_Heating_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Occupied_Heating_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature for heating when occupied
     *
     * @type        class
     * @parent      brick:Heating_Temperature_Setpoint
     */
    Occupied_Heating_Temperature_Deadband_Setpoint = this.toIri().concat('Occupied_Heating_Temperature_Deadband_Setpoint');
    /**
     * **[brick:Occupied_Mode_Status](https://brickschema.org/schema/Brick#Occupied_Mode_Status)**
     *
     * Indicates if a system, device or control loop is in "Occupied" mode
     *
     * @type        class
     * @parent      brick:Mode_Status
     */
    Occupied_Mode_Status = this.toIri().concat('Occupied_Mode_Status');
    /**
     * **[brick:Occupied_Return_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Occupied_Return_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Occupied_Air_Temperature_Setpoint
     */
    Occupied_Return_Air_Temperature_Setpoint = this.toIri().concat('Occupied_Return_Air_Temperature_Setpoint');
    /**
     * **[brick:Occupied_Room_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Occupied_Room_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Occupied_Air_Temperature_Setpoint
     */
    Occupied_Room_Air_Temperature_Setpoint = this.toIri().concat('Occupied_Room_Air_Temperature_Setpoint');
    /**
     * **[brick:Occupied_Supply_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Occupied_Supply_Air_Flow_Setpoint)**
     *
     * Sets supply air flow rate when occupied
     *
     * @type        class
     * @parent      brick:Supply_Air_Flow_Setpoint
     */
    Occupied_Supply_Air_Flow_Setpoint = this.toIri().concat('Occupied_Supply_Air_Flow_Setpoint');
    /**
     * **[brick:Occupied_Supply_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Occupied_Supply_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Occupied_Air_Temperature_Setpoint
     */
    Occupied_Supply_Air_Temperature_Setpoint = this.toIri().concat('Occupied_Supply_Air_Temperature_Setpoint');
    /**
     * **[brick:Occupied_Zone_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Occupied_Zone_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Occupied_Air_Temperature_Setpoint
     */
    Occupied_Zone_Air_Temperature_Setpoint = this.toIri().concat('Occupied_Zone_Air_Temperature_Setpoint');
    /**
     * **[brick:Off_Command](https://brickschema.org/schema/Brick#Off_Command)**
     *
     * An Off Command controls or reports the binary 'off' status of a control loop, relay or equipment activity. It can only be used to stop/deactivate an associated equipment or process, or determine that the related entity is 'off'
     *
     * @type        class
     * @parent      brick:On_Off_Command
     */
    Off_Command = this.toIri().concat('Off_Command');
    /**
     * **[brick:Off_Status](https://brickschema.org/schema/Brick#Off_Status)**
     *
     * Indicates if a control loop, relay or equipment is off
     *
     * @type        class
     * @parent      brick:Status
     */
    Off_Status = this.toIri().concat('Off_Status');
    /**
     * **[brick:Office](https://brickschema.org/schema/Brick#Office)**
     *
     * A class of rooms dedicated for work or study
     *
     * @type        class
     * @parent      brick:Room
     */
    Office = this.toIri().concat('Office');
    /**
     * **[brick:Office_Kitchen](https://brickschema.org/schema/Brick#Office_Kitchen)**
     *
     * A common space, usually near or in a breakroom, where minor food preperation occurs
     *
     * @type        class
     * @parent      brick:Room
     */
    Office_Kitchen = this.toIri().concat('Office_Kitchen');
    /**
     * **[brick:Oil](https://brickschema.org/schema/Brick#Oil)**
     *
     * a viscous liquid derived from petroleum, especially for use as a fuel or lubricant.
     *
     * @type        class
     * @parent      brick:Liquid
     */
    Oil = this.toIri().concat('Oil');
    /**
     * **[brick:On_Command](https://brickschema.org/schema/Brick#On_Command)**
     *
     * An On Command controls or reports the binary 'on' status of a control loop, relay or equipment activity. It can only be used to start/activate an associated equipment or process, or determine that the related entity is 'on'
     *
     * @type        class
     * @parent      brick:On_Off_Command
     */
    On_Command = this.toIri().concat('On_Command');
    /**
     * **[brick:On_Off_Command](https://brickschema.org/schema/Brick#On_Off_Command)**
     *
     * An On/Off Command controls or reports the binary status of a control loop, relay or equipment activity
     *
     * @type        class
     * @parent      brick:Command
     */
    On_Off_Command = this.toIri().concat('On_Off_Command');
    /**
     * **[brick:On_Off_Status](https://brickschema.org/schema/Brick#On_Off_Status)**
     *
     * Indicates the on/off status of a control loop, relay or equipment
     *
     * @type        class
     * @parent      brick:Off_Status
     */
    On_Off_Status = this.toIri().concat('On_Off_Status');
    /**
     * **[brick:On_Status](https://brickschema.org/schema/Brick#On_Status)**
     *
     * Indicates if a control loop, relay or equipment is on
     *
     * @type        class
     * @parent      brick:Status
     */
    On_Status = this.toIri().concat('On_Status');
    /**
     * **[brick:On_Timer_Sensor](https://brickschema.org/schema/Brick#On_Timer_Sensor)**
     *
     * Measures the duration for which a device was in an active or "on" state
     *
     * @type        class
     * @parent      brick:Duration_Sensor
     */
    On_Timer_Sensor = this.toIri().concat('On_Timer_Sensor');
    /**
     * **[brick:Open_Close_Status](https://brickschema.org/schema/Brick#Open_Close_Status)**
     *
     * Indicates the open/close status of a device such as a damper or valve
     *
     * @type        class
     * @parent      brick:Status
     */
    Open_Close_Status = this.toIri().concat('Open_Close_Status');
    /**
     * **[brick:Open_Heating_Valve_Outside_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Open_Heating_Valve_Outside_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Heating_Temperature_Setpoint
     */
    Open_Heating_Valve_Outside_Air_Temperature_Setpoint = this.toIri().concat('Open_Heating_Valve_Outside_Air_Temperature_Setpoint');
    /**
     * **[brick:Open_Office](https://brickschema.org/schema/Brick#Open_Office)**
     *
     * An open space used for work or study by mulitple people. Usuaully subdivided into cubicles or desks
     *
     * @type        class
     * @parent      brick:Office
     */
    Open_Office = this.toIri().concat('Open_Office');
    /**
     * **[brick:Operating_Mode_Status](https://brickschema.org/schema/Brick#Operating_Mode_Status)**
     *
     * Indicates the current operating mode of a system, device or control loop
     *
     * @type        class
     * @parent      brick:Mode_Status
     */
    Operating_Mode_Status = this.toIri().concat('Operating_Mode_Status');
    /**
     * **[brick:Operative_Temperature](https://brickschema.org/schema/Brick#Operative_Temperature)**
     *
     * The uniform temperature of an imaginary black enclosure in which an occupant would exchange the same amount of heat by radiation plus convection as in the actual nonuniform environment (https://en.wikipedia.org/wiki/Operative_temperature)
     *
     * @type        instance
     */
    Operative_Temperature = this.toIri().concat('Operative_Temperature');
    /**
     * **[brick:Outdoor_Area](https://brickschema.org/schema/Brick#Outdoor_Area)**
     *
     * A class of spaces that exist outside of a building
     *
     * @type        class
     * @parent      brick:Location
     */
    Outdoor_Area = this.toIri().concat('Outdoor_Area');
    /**
     * **[brick:Output_Frequency_Sensor](https://brickschema.org/schema/Brick#Output_Frequency_Sensor)**
     *
     * @type        class
     * @parent      brick:Frequency_Sensor
     */
    Output_Frequency_Sensor = this.toIri().concat('Output_Frequency_Sensor');
    /**
     * **[brick:Output_Voltage_Sensor](https://brickschema.org/schema/Brick#Output_Voltage_Sensor)**
     *
     * Measures the voltage output by some process or device
     *
     * @type        class
     * @parent      brick:Voltage_Sensor
     */
    Output_Voltage_Sensor = this.toIri().concat('Output_Voltage_Sensor');
    /**
     * **[brick:Outside](https://brickschema.org/schema/Brick#Outside)**
     *
     * @type        class
     * @parent      brick:Location
     */
    Outside = this.toIri().concat('Outside');
    /**
     * **[brick:Outside_Air](https://brickschema.org/schema/Brick#Outside_Air)**
     *
     * air external to a defined zone (e.g., corridors).
     *
     * @type        class
     * @parent      brick:Air
     */
    Outside_Air = this.toIri().concat('Outside_Air');
    /**
     * **[brick:Outside_Air_CO2_Sensor](https://brickschema.org/schema/Brick#Outside_Air_CO2_Sensor)**
     *
     * Measures the concentration of CO2 in outside air
     *
     * @type        class
     * @parent      brick:CO2_Sensor
     */
    Outside_Air_CO2_Sensor = this.toIri().concat('Outside_Air_CO2_Sensor');
    /**
     * **[brick:Outside_Air_CO_Sensor](https://brickschema.org/schema/Brick#Outside_Air_CO_Sensor)**
     *
     * Measures the concentration of CO in outside air
     *
     * @type        class
     * @parent      brick:CO_Sensor
     */
    Outside_Air_CO_Sensor = this.toIri().concat('Outside_Air_CO_Sensor');
    /**
     * **[brick:Outside_Air_Dewpoint_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Dewpoint_Sensor)**
     *
     * Senses the dewpoint temperature of outside air
     *
     * @type        class
     * @parent      brick:Dewpoint_Sensor
     */
    Outside_Air_Dewpoint_Sensor = this.toIri().concat('Outside_Air_Dewpoint_Sensor');
    /**
     * **[brick:Outside_Air_Enthalpy_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Enthalpy_Sensor)**
     *
     * Measures the total heat content of outside air
     *
     * @type        class
     * @parent      brick:Air_Enthalpy_Sensor
     */
    Outside_Air_Enthalpy_Sensor = this.toIri().concat('Outside_Air_Enthalpy_Sensor');
    /**
     * **[brick:Outside_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of outside air into the system
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    Outside_Air_Flow_Sensor = this.toIri().concat('Outside_Air_Flow_Sensor');
    /**
     * **[brick:Outside_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Outside_Air_Flow_Setpoint)**
     *
     * Sets outside air flow rate
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint
     */
    Outside_Air_Flow_Setpoint = this.toIri().concat('Outside_Air_Flow_Setpoint');
    /**
     * **[brick:Outside_Air_Grains_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Grains_Sensor)**
     *
     * Measures the mass of water vapor in outside air
     *
     * @type        class
     * @parent      brick:Air_Grains_Sensor
     */
    Outside_Air_Grains_Sensor = this.toIri().concat('Outside_Air_Grains_Sensor');
    /**
     * **[brick:Outside_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Humidity_Sensor)**
     *
     * Measures the relative humidity of outside air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    Outside_Air_Humidity_Sensor = this.toIri().concat('Outside_Air_Humidity_Sensor');
    /**
     * **[brick:Outside_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Outside_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for outside air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    Outside_Air_Humidity_Setpoint = this.toIri().concat('Outside_Air_Humidity_Setpoint');
    /**
     * **[brick:Outside_Air_Lockout_Temperature_Differential_Parameter](https://brickschema.org/schema/Brick#Outside_Air_Lockout_Temperature_Differential_Parameter)**
     *
     * @type        class
     * @parent      brick:Lockout_Temperature_Differential_Parameter
     */
    Outside_Air_Lockout_Temperature_Differential_Parameter = this.toIri().concat('Outside_Air_Lockout_Temperature_Differential_Parameter');
    /**
     * **[brick:Outside_Air_Lockout_Temperature_Setpoint](https://brickschema.org/schema/Brick#Outside_Air_Lockout_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Setpoint
     */
    Outside_Air_Lockout_Temperature_Setpoint = this.toIri().concat('Outside_Air_Lockout_Temperature_Setpoint');
    /**
     * **[brick:Outside_Air_Temperature_Enable_Differential_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Temperature_Enable_Differential_Sensor)**
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Sensor
     */
    Outside_Air_Temperature_Enable_Differential_Sensor = this.toIri().concat('Outside_Air_Temperature_Enable_Differential_Sensor');
    /**
     * **[brick:Outside_Air_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Outside_Air_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_High_Reset_Setpoint
     */
    Outside_Air_Temperature_High_Reset_Setpoint = this.toIri().concat('Outside_Air_Temperature_High_Reset_Setpoint');
    /**
     * **[brick:Outside_Air_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Outside_Air_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_Low_Reset_Setpoint
     */
    Outside_Air_Temperature_Low_Reset_Setpoint = this.toIri().concat('Outside_Air_Temperature_Low_Reset_Setpoint');
    /**
     * **[brick:Outside_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Temperature_Sensor)**
     *
     * Measures the temperature of outside air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    Outside_Air_Temperature_Sensor = this.toIri().concat('Outside_Air_Temperature_Sensor');
    /**
     * **[brick:Outside_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Outside_Air_Temperature_Setpoint)**
     *
     * Sets temperature of outside air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Outside_Air_Temperature_Setpoint = this.toIri().concat('Outside_Air_Temperature_Setpoint');
    /**
     * **[brick:Outside_Air_Wet_Bulb_Temperature_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Wet_Bulb_Temperature_Sensor)**
     *
     * A sensor measuring the wet-bulb temperature of outside air
     *
     * @type        class
     * @parent      brick:Air_Wet_Bulb_Temperature_Sensor
     */
    Outside_Air_Wet_Bulb_Temperature_Sensor = this.toIri().concat('Outside_Air_Wet_Bulb_Temperature_Sensor');
    /**
     * **[brick:Outside_Damper](https://brickschema.org/schema/Brick#Outside_Damper)**
     *
     * A damper that modulates the flow of outside air
     *
     * @type        class
     * @parent      brick:Damper
     */
    Outside_Damper = this.toIri().concat('Outside_Damper');
    /**
     * **[brick:Outside_Face_Surface_Temperature_Sensor](https://brickschema.org/schema/Brick#Outside_Face_Surface_Temperature_Sensor)**
     *
     * Measures the outside surface (relative to the space) of the radiant panel of a radiant heating and cooling HVAC system.
     *
     * @type        class
     * @parent      brick:Radiant_Panel_Temperature_Sensor
     */
    Outside_Face_Surface_Temperature_Sensor = this.toIri().concat('Outside_Face_Surface_Temperature_Sensor');
    /**
     * **[brick:Outside_Face_Surface_Temperature_Setpoint](https://brickschema.org/schema/Brick#Outside_Face_Surface_Temperature_Setpoint)**
     *
     * Sets temperature for the outside face surface temperature of the radiant panel.
     *
     * @type        class
     * @parent      brick:Radiant_Panel_Temperature_Setpoint
     */
    Outside_Face_Surface_Temperature_Setpoint = this.toIri().concat('Outside_Face_Surface_Temperature_Setpoint');
    /**
     * **[brick:Outside_Illuminance_Sensor](https://brickschema.org/schema/Brick#Outside_Illuminance_Sensor)**
     *
     * Measures the total luminous flux incident on an outside, per unit area
     *
     * @type        class
     * @parent      brick:Illuminance_Sensor
     */
    Outside_Illuminance_Sensor = this.toIri().concat('Outside_Illuminance_Sensor');
    /**
     * **[brick:Overload_Alarm](https://brickschema.org/schema/Brick#Overload_Alarm)**
     *
     * An alarm that can indicate when a full-load current is exceeded.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Overload_Alarm = this.toIri().concat('Overload_Alarm');
    /**
     * **[brick:Overridden_Off_Status](https://brickschema.org/schema/Brick#Overridden_Off_Status)**
     *
     * Indicates if a control loop, relay or equipment has been turned off when it would otherwise be scheduled to be on
     *
     * @type        class
     * @parent      brick:Off_Status
     */
    Overridden_Off_Status = this.toIri().concat('Overridden_Off_Status');
    /**
     * **[brick:Overridden_On_Status](https://brickschema.org/schema/Brick#Overridden_On_Status)**
     *
     * Indicates if a control loop, relay or equipment has been turned on when it would otherwise be scheduled to be off
     *
     * @type        class
     * @parent      brick:On_Status
     */
    Overridden_On_Status = this.toIri().concat('Overridden_On_Status');
    /**
     * **[brick:Overridden_Status](https://brickschema.org/schema/Brick#Overridden_Status)**
     *
     * Indicates if the expected operating status of an equipment or control loop has been overridden
     *
     * @type        class
     * @parent      brick:Status
     */
    Overridden_Status = this.toIri().concat('Overridden_Status');
    /**
     * **[brick:Override_Command](https://brickschema.org/schema/Brick#Override_Command)**
     *
     * Controls or reports whether or not a device or control loop is in 'override'
     *
     * @type        class
     * @parent      brick:Command
     */
    Override_Command = this.toIri().concat('Override_Command');
    /**
     * **[brick:OzoneConcentration](https://brickschema.org/schema/Brick#Ozone_Concentration)**
     *
     * The concentration of ozone in a medium
     *
     * @type        instance
     */
    Ozone_Concentration = this.toIri().concat('Ozone_Concentration');
    /**
     * **[brick:Ozone_Level_Sensor](https://brickschema.org/schema/Brick#Ozone_Level_Sensor)**
     *
     * Measures the concentration of ozone in air
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    Ozone_Level_Sensor = this.toIri().concat('Ozone_Level_Sensor');
    /**
     * **[brick:PAU](https://brickschema.org/schema/Brick#PAU)**
     *
     * A type of AHU, use to pre-treat the outdoor air before feed to AHU
     *
     * @type        class
     * @parent      brick:AHU
     */
    PAU = this.toIri().concat('PAU');
    /**
     * **[brick:PID_Parameter](https://brickschema.org/schema/Brick#PID_Parameter)**
     *
     * @type        class
     * @parent      brick:Parameter
     */
    PID_Parameter = this.toIri().concat('PID_Parameter');
    /**
     * **[brick:PIR_Sensor](https://brickschema.org/schema/Brick#PIR_Sensor)**
     *
     * Detects the presense of motion in some area using the differential change in infrared intensity between two or more receptors
     *
     * @type        class
     * @parent      brick:Motion_Sensor
     */
    PIR_Sensor = this.toIri().concat('PIR_Sensor');
    /**
     * **[brick:PM10Concentration](https://brickschema.org/schema/Brick#PM10_Concentration)**
     *
     * The concentration of particulates with diameter of 10 microns or less in air
     *
     * @type        instance
     */
    PM10_Concentration = this.toIri().concat('PM10_Concentration');
    /**
     * **[brick:PM10_Level_Sensor](https://brickschema.org/schema/Brick#PM10_Level_Sensor)**
     *
     * Detects level of particulates of size 10 microns
     *
     * @type        class
     * @parent      brick:PM10_Sensor
     */
    PM10_Level_Sensor = this.toIri().concat('PM10_Level_Sensor');
    /**
     * **[brick:PM10_Sensor](https://brickschema.org/schema/Brick#PM10_Sensor)**
     *
     * Detects matter of size 10 microns
     *
     * @type        class
     * @parent      brick:Particulate_Matter_Sensor
     */
    PM10_Sensor = this.toIri().concat('PM10_Sensor');
    /**
     * **[brick:PM1Concentration](https://brickschema.org/schema/Brick#PM1_Concentration)**
     *
     * The concentration of particulates with diameter of 1 microns or less in air
     *
     * @type        instance
     */
    PM1_Concentration = this.toIri().concat('PM1_Concentration');
    /**
     * **[brick:PM1_Level_Sensor](https://brickschema.org/schema/Brick#PM1_Level_Sensor)**
     *
     * Detects level of particulates of size 1 micron
     *
     * @type        class
     * @parent      brick:PM1_Sensor
     */
    PM1_Level_Sensor = this.toIri().concat('PM1_Level_Sensor');
    /**
     * **[brick:PM1_Sensor](https://brickschema.org/schema/Brick#PM1_Sensor)**
     *
     * Detects matter of size 1 micron
     *
     * @type        class
     * @parent      brick:Particulate_Matter_Sensor
     */
    PM1_Sensor = this.toIri().concat('PM1_Sensor');
    /**
     * **[brick:PM2.5Concentration](https://brickschema.org/schema/Brick#'PM2.5_Concentration')**
     *
     * The concentration of particulates with diameter of 2.5 microns or less in air
     *
     * @type        instance
     */
    'PM2.5_Concentration' = this.toIri().concat('PM2.5_Concentration');
    /**
     * **[brick:PM2.5_Level_Sensor](https://brickschema.org/schema/Brick#'PM2.5_Level_Sensor')**
     *
     * Detects level of particulates of size 2.5 microns
     *
     * @type        class
     * @parent      brick:PM2.5_Sensor
     */
    'PM2.5_Level_Sensor' = this.toIri().concat('PM2.5_Level_Sensor');
    /**
     * **[brick:PM2.5_Sensor](https://brickschema.org/schema/Brick#'PM2.5_Sensor')**
     *
     * Detects matter of size 2.5 microns
     *
     * @type        class
     * @parent      brick:Particulate_Matter_Sensor
     */
    'PM2.5_Sensor' = this.toIri().concat('PM2.5_Sensor');
    /**
     * **[brick:PVT_Panel](https://brickschema.org/schema/Brick#PVT_Panel)**
     *
     * A type of solar panels that convert solar radiation into usable thermal and electrical energy
     *
     * @type        class
     * @parent      brick:PV_Panel
     */
    PVT_Panel = this.toIri().concat('PVT_Panel');
    /**
     * **[brick:PV_Array](https://brickschema.org/schema/Brick#PV_Array)**
     *
     * @type        class
     * @parent      brick:Collection
     */
    PV_Array = this.toIri().concat('PV_Array');
    /**
     * **[brick:PV_Current_Output_Sensor](https://brickschema.org/schema/Brick#PV_Current_Output_Sensor)**
     *
     * See Photovoltaic_Current_Output_Sensor
     *
     * @type        class
     * @parent      brick:Current_Output_Sensor
     */
    PV_Current_Output_Sensor = this.toIri().concat('PV_Current_Output_Sensor');
    /**
     * **[brick:PV_Generation_System](https://brickschema.org/schema/Brick#PV_Generation_System)**
     *
     * A collection of photovoltaic devices that generates energy
     *
     * @type        class
     * @parent      brick:Energy_Generation_System
     */
    PV_Generation_System = this.toIri().concat('PV_Generation_System');
    /**
     * **[brick:PV_Panel](https://brickschema.org/schema/Brick#PV_Panel)**
     *
     * An integrated assembly of interconnected photovoltaic cells designed to deliver a selected level of working voltage and current at its output terminals packaged for protection against environment degradation and suited for incorporation in photovoltaic power systems.
     *
     * @type        class
     * @parent      brick:Equipment
     */
    PV_Panel = this.toIri().concat('PV_Panel');
    /**
     * **[brick:Parameter](https://brickschema.org/schema/Brick#Parameter)**
     *
     * Parameter points are configuration settings used to guide the operation of equipment and control systems; for example they may provide bounds on valid setpoint values
     *
     * @type        class
     * @parent      brick:Point
     */
    Parameter = this.toIri().concat('Parameter');
    /**
     * **[brick:Parking_Level](https://brickschema.org/schema/Brick#Parking_Level)**
     *
     * A floor of a parking structure
     *
     * @type        class
     * @parent      brick:Floor
     */
    Parking_Level = this.toIri().concat('Parking_Level');
    /**
     * **[brick:Parking_Space](https://brickschema.org/schema/Brick#Parking_Space)**
     *
     * An area large enough to park an individual vehicle
     *
     * @type        class
     * @parent      brick:Space
     */
    Parking_Space = this.toIri().concat('Parking_Space');
    /**
     * **[brick:Parking_Structure](https://brickschema.org/schema/Brick#Parking_Structure)**
     *
     * A building or part of a building devoted to vehicle parking
     *
     * @type        class
     * @parent      brick:Building
     */
    Parking_Structure = this.toIri().concat('Parking_Structure');
    /**
     * **[brick:Particulate_Matter_Sensor](https://brickschema.org/schema/Brick#Particulate_Matter_Sensor)**
     *
     * Detects pollutants in the ambient air
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    Particulate_Matter_Sensor = this.toIri().concat('Particulate_Matter_Sensor');
    /**
     * **[brick:PeakPower](https://brickschema.org/schema/Brick#Peak_Power)**
     *
     * Tracks the highest (peak) observed power in some interval
     *
     * @type        instance
     */
    Peak_Power = this.toIri().concat('Peak_Power');
    /**
     * **[brick:Peak_Power_Demand_Sensor](https://brickschema.org/schema/Brick#Peak_Power_Demand_Sensor)**
     *
     * The peak power consumed by a process over some period of time
     *
     * @type        class
     * @parent      brick:Demand_Sensor
     */
    Peak_Power_Demand_Sensor = this.toIri().concat('Peak_Power_Demand_Sensor');
    /**
     * **[brick:PhaseCountShape](https://brickschema.org/schema/Brick#PhaseCountShape)**
     *
     * @type        class
     */
    PhaseCountShape = this.toIri().concat('PhaseCountShape');
    /**
     * **[brick:PhasesShape](https://brickschema.org/schema/Brick#PhasesShape)**
     *
     * @type        class
     */
    PhasesShape = this.toIri().concat('PhasesShape');
    /**
     * **[brick:Phasor](https://brickschema.org/schema/Brick#Phasor)**
     *
     * @type        instance
     */
    Phasor = this.toIri().concat('Phasor');
    /**
     * **[brick:PhasorAngle](https://brickschema.org/schema/Brick#Phasor_Angle)**
     *
     * Angle component of a phasor
     *
     * @type        instance
     */
    Phasor_Angle = this.toIri().concat('Phasor_Angle');
    /**
     * **[brick:PhasorMagnitude](https://brickschema.org/schema/Brick#Phasor_Magnitude)**
     *
     * Magnitude component of a phasor
     *
     * @type        instance
     */
    Phasor_Magnitude = this.toIri().concat('Phasor_Magnitude');
    /**
     * **[brick:Photovoltaic_Array](https://brickschema.org/schema/Brick#Photovoltaic_Array)**
     *
     * A collection of photovoltaic panels
     *
     * @type        class
     * @parent      brick:Collection
     */
    Photovoltaic_Array = this.toIri().concat('Photovoltaic_Array');
    /**
     * **[brick:Photovoltaic_Current_Output_Sensor](https://brickschema.org/schema/Brick#Photovoltaic_Current_Output_Sensor)**
     *
     * Senses the amperes of electrical current produced as output by a photovoltaic device
     *
     * @type        class
     * @parent      brick:Current_Output_Sensor
     */
    Photovoltaic_Current_Output_Sensor = this.toIri().concat('Photovoltaic_Current_Output_Sensor');
    /**
     * **[brick:Piezoelectric_Sensor](https://brickschema.org/schema/Brick#Piezoelectric_Sensor)**
     *
     * Senses changes pressure, acceleration, temperature, force or strain via the piezoelectric effect
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Piezoelectric_Sensor = this.toIri().concat('Piezoelectric_Sensor');
    /**
     * **[brick:PlugStrip](https://brickschema.org/schema/Brick#PlugStrip)**
     *
     * A device containing a block of electrical sockets allowing multiple electrical devices to be powered from a single electrical socket.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    PlugStrip = this.toIri().concat('PlugStrip');
    /**
     * **[brick:Plumbing_Room](https://brickschema.org/schema/Brick#Plumbing_Room)**
     *
     * A service room devoted to the operation and routing of water in a building. Usually distinct from the HVAC subsystems.
     *
     * @type        class
     * @parent      brick:Service_Room
     */
    Plumbing_Room = this.toIri().concat('Plumbing_Room');
    /**
     * **[brick:Point](https://brickschema.org/schema/Brick#Point)**
     *
     * @type        class
     * @parent      brick:Class
     */
    Point = this.toIri().concat('Point');
    /**
     * **[brick:Portfolio](https://brickschema.org/schema/Brick#Portfolio)**
     *
     * A collection of sites
     *
     * @type        class
     * @parent      brick:Collection
     */
    Portfolio = this.toIri().concat('Portfolio');
    /**
     * **[brick:Position](https://brickschema.org/schema/Brick#Position)**
     *
     * The fraction of the full range of motion
     *
     * @type        instance
     */
    Position = this.toIri().concat('Position');
    /**
     * **[brick:Position_Command](https://brickschema.org/schema/Brick#Position_Command)**
     *
     * Controls or reports the position of some object
     *
     * @type        class
     * @parent      brick:Command
     */
    Position_Command = this.toIri().concat('Position_Command');
    /**
     * **[brick:Position_Limit](https://brickschema.org/schema/Brick#Position_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Position_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    Position_Limit = this.toIri().concat('Position_Limit');
    /**
     * **[brick:Position_Sensor](https://brickschema.org/schema/Brick#Position_Sensor)**
     *
     * Measures the current position of a component in terms of a fraction of its full range of motion
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Position_Sensor = this.toIri().concat('Position_Sensor');
    /**
     * **[brick:Potable_Water](https://brickschema.org/schema/Brick#Potable_Water)**
     *
     * Water that is safe to drink
     *
     * @type        class
     * @parent      brick:Water
     */
    Potable_Water = this.toIri().concat('Potable_Water');
    /**
     * **[brick:Power](https://brickschema.org/schema/Brick#Power)**
     *
     * Power is the rate at which work is performed or energy is transmitted, or the amount of energy required or expended for a given unit of time. As a rate of change of work done or the energy of a subsystem, power is: (P = W/t), where (P) is power, (W) is work and {t} is time.
     *
     * @type        instance
     */
    Power = this.toIri().concat('Power');
    /**
     * **[brick:PowerComplexityShape](https://brickschema.org/schema/Brick#PowerComplexityShape)**
     *
     * @type        class
     */
    PowerComplexityShape = this.toIri().concat('PowerComplexityShape');
    /**
     * **[brick:PowerFlowShape](https://brickschema.org/schema/Brick#PowerFlowShape)**
     *
     * @type        class
     */
    PowerFlowShape = this.toIri().concat('PowerFlowShape');
    /**
     * **[brick:PowerOutputShape](https://brickschema.org/schema/Brick#PowerOutputShape)**
     *
     * @type        class
     */
    PowerOutputShape = this.toIri().concat('PowerOutputShape');
    /**
     * **[brick:Power_Alarm](https://brickschema.org/schema/Brick#Power_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with electrical power.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Power_Alarm = this.toIri().concat('Power_Alarm');
    /**
     * **[brick:Power_Factor](https://brickschema.org/schema/Brick#Power_Factor)**
     *
     * Power Factor, under periodic conditions, is the ratio of the absolute value of the active power (P) to the apparent power (S).
     *
     * @type        instance
     */
    Power_Factor = this.toIri().concat('Power_Factor');
    /**
     * **[brick:Power_Loss_Alarm](https://brickschema.org/schema/Brick#Power_Loss_Alarm)**
     *
     * An alarm that indicates a power failure.
     *
     * @type        class
     * @parent      brick:Power_Alarm
     */
    Power_Loss_Alarm = this.toIri().concat('Power_Loss_Alarm');
    /**
     * **[brick:Power_Sensor](https://brickschema.org/schema/Brick#Power_Sensor)**
     *
     * Measures the amount of instantaneous power consumed
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Power_Sensor = this.toIri().concat('Power_Sensor');
    /**
     * **[brick:Prayer_Room](https://brickschema.org/schema/Brick#Prayer_Room)**
     *
     * A room set aside for prayer
     *
     * @type        class
     * @parent      brick:Room
     */
    Prayer_Room = this.toIri().concat('Prayer_Room');
    /**
     * **[brick:Pre_Filter](https://brickschema.org/schema/Brick#Pre_Filter)**
     *
     * A filter installed in front of a more efficient filter to extend the life of the more expensive higher efficiency filter
     *
     * @type        class
     * @parent      brick:Filter
     */
    Pre_Filter = this.toIri().concat('Pre_Filter');
    /**
     * **[brick:Pre_Filter_Status](https://brickschema.org/schema/Brick#Pre_Filter_Status)**
     *
     * Indicates if a prefilter needs to be replaced
     *
     * @type        class
     * @parent      brick:Filter_Status
     */
    Pre_Filter_Status = this.toIri().concat('Pre_Filter_Status');
    /**
     * **[brick:Precipitation](https://brickschema.org/schema/Brick#Precipitation)**
     *
     * Amount of atmospheric water vapor fallen including rain, sleet, snow, and hail (https://project-haystack.dev/doc/lib-phScience/precipitation)
     *
     * @type        instance
     */
    Precipitation = this.toIri().concat('Precipitation');
    /**
     * **[brick:Preheat_Demand_Setpoint](https://brickschema.org/schema/Brick#Preheat_Demand_Setpoint)**
     *
     * Sets the rate required for preheat
     *
     * @type        class
     * @parent      brick:Demand_Setpoint
     */
    Preheat_Demand_Setpoint = this.toIri().concat('Preheat_Demand_Setpoint');
    /**
     * **[brick:Preheat_Discharge_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Preheat_Discharge_Air_Temperature_Sensor)**
     *
     * Measures the temperature of discharge air before heating is applied
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Sensor
     */
    Preheat_Discharge_Air_Temperature_Sensor = this.toIri().concat('Preheat_Discharge_Air_Temperature_Sensor');
    /**
     * **[brick:Preheat_Hot_Water_System](https://brickschema.org/schema/Brick#Preheat_Hot_Water_System)**
     *
     * @type        class
     * @parent      brick:Hot_Water_System
     */
    Preheat_Hot_Water_System = this.toIri().concat('Preheat_Hot_Water_System');
    /**
     * **[brick:Preheat_Hot_Water_Valve](https://brickschema.org/schema/Brick#Preheat_Hot_Water_Valve)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Valve
     */
    Preheat_Hot_Water_Valve = this.toIri().concat('Preheat_Hot_Water_Valve');
    /**
     * **[brick:Preheat_Supply_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Preheat_Supply_Air_Temperature_Sensor)**
     *
     * Measures the temperature of supply air before it is heated
     *
     * @type        class
     * @parent      brick:Supply_Air_Temperature_Sensor
     */
    Preheat_Supply_Air_Temperature_Sensor = this.toIri().concat('Preheat_Supply_Air_Temperature_Sensor');
    /**
     * **[brick:Pressure](https://brickschema.org/schema/Brick#Pressure)**
     *
     * @type        instance
     */
    Pressure = this.toIri().concat('Pressure');
    /**
     * **[brick:Pressure_Alarm](https://brickschema.org/schema/Brick#Pressure_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with pressure.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Pressure_Alarm = this.toIri().concat('Pressure_Alarm');
    /**
     * **[brick:Pressure_Sensor](https://brickschema.org/schema/Brick#Pressure_Sensor)**
     *
     * Measure the amount of force acting on a unit area
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Pressure_Sensor = this.toIri().concat('Pressure_Sensor');
    /**
     * **[brick:Pressure_Setpoint](https://brickschema.org/schema/Brick#Pressure_Setpoint)**
     *
     * Sets pressure
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Pressure_Setpoint = this.toIri().concat('Pressure_Setpoint');
    /**
     * **[brick:Pressure_Status](https://brickschema.org/schema/Brick#Pressure_Status)**
     *
     * Indicates if pressure is within expected bounds
     *
     * @type        class
     * @parent      brick:Status
     */
    Pressure_Status = this.toIri().concat('Pressure_Status');
    /**
     * **[brick:Private_Office](https://brickschema.org/schema/Brick#Private_Office)**
     *
     * An office devoted to a single individual, with walls and door
     *
     * @type        class
     * @parent      brick:Enclosed_Office
     */
    Private_Office = this.toIri().concat('Private_Office');
    /**
     * **[brick:Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:PID_Parameter
     */
    Proportional_Band_Parameter = this.toIri().concat('Proportional_Band_Parameter');
    /**
     * **[brick:Proportional_Gain_Parameter](https://brickschema.org/schema/Brick#Proportional_Gain_Parameter)**
     *
     * @type        class
     * @parent      brick:Gain_Parameter
     */
    Proportional_Gain_Parameter = this.toIri().concat('Proportional_Gain_Parameter');
    /**
     * **[brick:Pump](https://brickschema.org/schema/Brick#Pump)**
     *
     * Machine for imparting energy to a fluid, causing it to do work, drawing a fluid into itself through an entrance port, and forcing the fluid out through an exhaust port.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Pump = this.toIri().concat('Pump');
    /**
     * **[brick:Pump_Command](https://brickschema.org/schema/Brick#Pump_Command)**
     *
     * Controls or reports the speed of a pump (typically as a proportion of its full pumping capacity)
     *
     * @type        class
     * @parent      brick:Command
     */
    Pump_Command = this.toIri().concat('Pump_Command');
    /**
     * **[brick:Pump_On_Off_Status](https://brickschema.org/schema/Brick#Pump_On_Off_Status)**
     *
     * @type        class
     * @parent      brick:On_Off_Status
     */
    Pump_On_Off_Status = this.toIri().concat('Pump_On_Off_Status');
    /**
     * **[brick:Pump_Room](https://brickschema.org/schema/Brick#Pump_Room)**
     *
     * A mechanical room that houses pumps
     *
     * @type        class
     * @parent      brick:Mechanical_Room
     */
    Pump_Room = this.toIri().concat('Pump_Room');
    /**
     * **[brick:Pump_VFD](https://brickschema.org/schema/Brick#Pump_VFD)**
     *
     * Variable-frequency drive for pumps
     *
     * @type        class
     * @parent      brick:VFD
     */
    Pump_VFD = this.toIri().concat('Pump_VFD');
    /**
     * **[brick:Quantity](https://brickschema.org/schema/Brick#Quantity)**
     *
     * @type        class
     * @parent      brick:Measurable
     */
    Quantity = this.toIri().concat('Quantity');
    /**
     * **[brick:RC_Panel](https://brickschema.org/schema/Brick#RC_Panel)**
     *
     * See Radiant_Ceiling_Panel
     *
     * @type        class
     * @parent      brick:Radiant_Panel
     */
    RC_Panel = this.toIri().concat('RC_Panel');
    /**
     * **[brick:RTU](https://brickschema.org/schema/Brick#RTU)**
     *
     * see Rooftop_Unit
     *
     * @type        class
     * @parent      brick:AHU
     */
    RTU = this.toIri().concat('RTU');
    /**
     * **[brick:RVAV](https://brickschema.org/schema/Brick#RVAV)**
     *
     * See Variable_Air_Volume_Box_With_Reheat
     *
     * @type        class
     * @parent      brick:Variable_Air_Volume_Box
     */
    RVAV = this.toIri().concat('RVAV');
    /**
     * **[brick:Radiance](https://brickschema.org/schema/Brick#Radiance)**
     *
     * @type        instance
     */
    Radiance = this.toIri().concat('Radiance');
    /**
     * **[brick:Radiant_Ceiling_Panel](https://brickschema.org/schema/Brick#Radiant_Ceiling_Panel)**
     *
     * Radiant panel heating and cooling system that are usually made from metal and suspended under the ceiling or insulated from the building structure.
     *
     * @type        class
     * @parent      brick:Radiant_Panel
     */
    Radiant_Ceiling_Panel = this.toIri().concat('Radiant_Ceiling_Panel');
    /**
     * **[brick:Radiant_Panel](https://brickschema.org/schema/Brick#Radiant_Panel)**
     *
     * A temperature-controlled surface that provides fifty percent (50%) or more of the design heat transfer by thermal radiation.
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    Radiant_Panel = this.toIri().concat('Radiant_Panel');
    /**
     * **[brick:Radiant_Panel_Temperature_Sensor](https://brickschema.org/schema/Brick#Radiant_Panel_Temperature_Sensor)**
     *
     * Measures the temperature of the radiant panel of the radiant heating and cooling HVAC system.
     *
     * @type        class
     * @parent      brick:Temperature_Sensor
     */
    Radiant_Panel_Temperature_Sensor = this.toIri().concat('Radiant_Panel_Temperature_Sensor');
    /**
     * **[brick:Radiant_Panel_Temperature_Setpoint](https://brickschema.org/schema/Brick#Radiant_Panel_Temperature_Setpoint)**
     *
     * Sets temperature of radiant panel.
     *
     * @type        class
     * @parent      brick:Temperature_Setpoint
     */
    Radiant_Panel_Temperature_Setpoint = this.toIri().concat('Radiant_Panel_Temperature_Setpoint');
    /**
     * **[brick:Radiant_Temperature](https://brickschema.org/schema/Brick#Radiant_Temperature)**
     *
     * the uniform temperature of an imaginary enclosure in which the radiant heat transfer from the human body is equal to the radiant heat transfer in the actual non-uniform enclosure. (https://en.wikipedia.org/wiki/Mean_radiant_temperature)
     *
     * @type        instance
     */
    Radiant_Temperature = this.toIri().concat('Radiant_Temperature');
    /**
     * **[brick:Radiation_Hot_Water_System](https://brickschema.org/schema/Brick#Radiation_Hot_Water_System)**
     *
     * @type        class
     * @parent      brick:Hot_Water_System
     */
    Radiation_Hot_Water_System = this.toIri().concat('Radiation_Hot_Water_System');
    /**
     * **[brick:Radiator](https://brickschema.org/schema/Brick#Radiator)**
     *
     * Heat exchangers designed to transfer thermal energy from one medium to another
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    Radiator = this.toIri().concat('Radiator');
    /**
     * **[brick:Radioactivity_Concentration](https://brickschema.org/schema/Brick#Radioactivity_Concentration)**
     *
     * @type        instance
     */
    Radioactivity_Concentration = this.toIri().concat('Radioactivity_Concentration');
    /**
     * **[brick:Radioactivity_Concentration_Sensor](https://brickschema.org/schema/Brick#Radioactivity_Concentration_Sensor)**
     *
     * Measures the concentration of radioactivity
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    Radioactivity_Concentration_Sensor = this.toIri().concat('Radioactivity_Concentration_Sensor');
    /**
     * **[brick:RadonConcentration](https://brickschema.org/schema/Brick#Radon_Concentration)**
     *
     * The concentration of radioactivity due to Radon in a medium
     *
     * @type        instance
     */
    Radon_Concentration = this.toIri().concat('Radon_Concentration');
    /**
     * **[brick:Radon_Concentration_Sensor](https://brickschema.org/schema/Brick#Radon_Concentration_Sensor)**
     *
     * Measures the concentration of radioactivity due to radon
     *
     * @type        class
     * @parent      brick:Radioactivity_Concentration_Sensor
     */
    Radon_Concentration_Sensor = this.toIri().concat('Radon_Concentration_Sensor');
    /**
     * **[brick:Rain_Duration_Sensor](https://brickschema.org/schema/Brick#Rain_Duration_Sensor)**
     *
     * Measures the duration of precipitation within some time frame
     *
     * @type        class
     * @parent      brick:Duration_Sensor
     */
    Rain_Duration_Sensor = this.toIri().concat('Rain_Duration_Sensor');
    /**
     * **[brick:Rain_Sensor](https://brickschema.org/schema/Brick#Rain_Sensor)**
     *
     * Measures the amount of precipitation fallen
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Rain_Sensor = this.toIri().concat('Rain_Sensor');
    /**
     * **[brick:Rated_Speed_Setpoint](https://brickschema.org/schema/Brick#Rated_Speed_Setpoint)**
     *
     * Sets rated speed
     *
     * @type        class
     * @parent      brick:Speed_Setpoint
     */
    Rated_Speed_Setpoint = this.toIri().concat('Rated_Speed_Setpoint');
    /**
     * **[brick:Reactive_Power](https://brickschema.org/schema/Brick#Reactive_Power)**
     *
     * Reactive Power}, for a linear two-terminal element or two-terminal circuit, under sinusoidal conditions, is the quantity equal to the product of the apparent power (S) and the sine of the displacement angle (\psi). The absolute value of the reactive power is equal to the non-active power. The ISO (and SI) unit for reactive power is the voltampere. The special name var and symbol \textit{var are given in IEC 60027 1.
     *
     * @type        instance
     */
    Reactive_Power = this.toIri().concat('Reactive_Power');
    /**
     * **[brick:Reactive_Power_Sensor](https://brickschema.org/schema/Brick#Reactive_Power_Sensor)**
     *
     * Measures the portion of power that, averaged over a complete cycle of the AC waveform, is due to stored energy which returns to the source in each cycle
     *
     * @type        class
     * @parent      brick:Electrical_Power_Sensor
     */
    Reactive_Power_Sensor = this.toIri().concat('Reactive_Power_Sensor');
    /**
     * **[brick:Real_Power](https://brickschema.org/schema/Brick#Real_Power)**
     *
     * (Active Power) is, under periodic conditions, the mean value, taken over one period (T), of the instantaneous power (p). In complex notation, (P = Re \; S), where (S) is (complex power)".
     *
     * @type        instance
     */
    Real_Power = this.toIri().concat('Real_Power');
    /**
     * **[brick:Reception](https://brickschema.org/schema/Brick#Reception)**
     *
     * A space, usually in a lobby, where visitors to a building or space can go to after arriving at a building and inform building staff that they have arrived
     *
     * @type        class
     * @parent      brick:Room
     */
    Reception = this.toIri().concat('Reception');
    /**
     * **[brick:Region](https://brickschema.org/schema/Brick#Region)**
     *
     * A unit of geographic space, usually contigious or somehow related to a geopolitical feature
     *
     * @type        class
     * @parent      brick:Location
     */
    Region = this.toIri().concat('Region');
    /**
     * **[brick:Reheat_Hot_Water_System](https://brickschema.org/schema/Brick#Reheat_Hot_Water_System)**
     *
     * @type        class
     * @parent      brick:Hot_Water_System
     */
    Reheat_Hot_Water_System = this.toIri().concat('Reheat_Hot_Water_System');
    /**
     * **[brick:Reheat_Valve](https://brickschema.org/schema/Brick#Reheat_Valve)**
     *
     * A valve that controls air temperature by modulating the amount of hot water flowing through a reheat coil
     *
     * @type        class
     * @parent      brick:Heating_Valve
     */
    Reheat_Valve = this.toIri().concat('Reheat_Valve');
    /**
     * **[brick:Relative_Humidity](https://brickschema.org/schema/Brick#Relative_Humidity)**
     *
     * Relative Humidity} is the ratio of the partial pressure of water vapor in an air-water mixture to the saturated vapor pressure of water at a prescribed temperature. The relative humidity of air depends not only on temperature but also on the pressure of the system of interest. Relative Humidity is also referred to as \text{Relative Partial Pressure. Relative partial pressure is often referred to as (RH) and expressed in percent.
     *
     * @type        instance
     */
    Relative_Humidity = this.toIri().concat('Relative_Humidity');
    /**
     * **[brick:Relative_Humidity_Sensor](https://brickschema.org/schema/Brick#Relative_Humidity_Sensor)**
     *
     * Measures the present state of absolute humidity relative to a maximum humidity given the same temperature
     *
     * @type        class
     * @parent      brick:Humidity_Sensor
     */
    Relative_Humidity_Sensor = this.toIri().concat('Relative_Humidity_Sensor');
    /**
     * **[brick:Remotely_On_Off_Status](https://brickschema.org/schema/Brick#Remotely_On_Off_Status)**
     *
     * @type        class
     * @parent      brick:On_Off_Status
     */
    Remotely_On_Off_Status = this.toIri().concat('Remotely_On_Off_Status');
    /**
     * **[brick:Reset_Command](https://brickschema.org/schema/Brick#Reset_Command)**
     *
     * Commands that reset a flag, property or value to its default
     *
     * @type        class
     * @parent      brick:Command
     */
    Reset_Command = this.toIri().concat('Reset_Command');
    /**
     * **[brick:Reset_Setpoint](https://brickschema.org/schema/Brick#Reset_Setpoint)**
     *
     * Setpoints used in reset strategies
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Reset_Setpoint = this.toIri().concat('Reset_Setpoint');
    /**
     * **[brick:Rest_Room](https://brickschema.org/schema/Brick#Rest_Room)**
     *
     * A room that provides toilets and washbowls. Alternate spelling of Restroom
     *
     * @type        class
     * @parent      brick:Room
     */
    Rest_Room = this.toIri().concat('Rest_Room');
    /**
     * **[brick:Restroom](https://brickschema.org/schema/Brick#Restroom)**
     *
     * A room that provides toilets and washbowls.
     *
     * @type        class
     * @parent      brick:Room
     */
    Restroom = this.toIri().concat('Restroom');
    /**
     * **[brick:Retail_Room](https://brickschema.org/schema/Brick#Retail_Room)**
     *
     * A space set aside for retail in a larger establishment, e.g. a gift shop in a hospital
     *
     * @type        class
     * @parent      brick:Room
     */
    Retail_Room = this.toIri().concat('Retail_Room');
    /**
     * **[brick:Return_Air](https://brickschema.org/schema/Brick#Return_Air)**
     *
     * air removed from a space to be recirculated or exhausted. Air extracted from a space and totally or partially returned to an air conditioner, furnace, or other heating, cooling, or ventilating system.
     *
     * @type        class
     * @parent      brick:Air
     */
    Return_Air = this.toIri().concat('Return_Air');
    /**
     * **[brick:Return_Air_CO2_Sensor](https://brickschema.org/schema/Brick#Return_Air_CO2_Sensor)**
     *
     * Measures the concentration of CO2 in return air
     *
     * @type        class
     * @parent      brick:CO2_Sensor
     */
    Return_Air_CO2_Sensor = this.toIri().concat('Return_Air_CO2_Sensor');
    /**
     * **[brick:Return_Air_CO2_Setpoint](https://brickschema.org/schema/Brick#Return_Air_CO2_Setpoint)**
     *
     * Sets some property of CO2 in Return Air
     *
     * @type        class
     * @parent      brick:CO2_Setpoint
     */
    Return_Air_CO2_Setpoint = this.toIri().concat('Return_Air_CO2_Setpoint');
    /**
     * **[brick:Return_Air_CO_Sensor](https://brickschema.org/schema/Brick#Return_Air_CO_Sensor)**
     *
     * Measures the concentration of CO in return air
     *
     * @type        class
     * @parent      brick:CO_Sensor
     */
    Return_Air_CO_Sensor = this.toIri().concat('Return_Air_CO_Sensor');
    /**
     * **[brick:Return_Air_Dewpoint_Sensor](https://brickschema.org/schema/Brick#Return_Air_Dewpoint_Sensor)**
     *
     * Senses the dewpoint temperature of return air
     *
     * @type        class
     * @parent      brick:Dewpoint_Sensor
     */
    Return_Air_Dewpoint_Sensor = this.toIri().concat('Return_Air_Dewpoint_Sensor');
    /**
     * **[brick:Return_Air_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Return_Air_Differential_Pressure_Sensor)**
     *
     * Measures the difference in pressure between the return and supply side
     *
     * @type        class
     * @parent      brick:Air_Differential_Pressure_Sensor
     */
    Return_Air_Differential_Pressure_Sensor = this.toIri().concat('Return_Air_Differential_Pressure_Sensor');
    /**
     * **[brick:Return_Air_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Return_Air_Differential_Pressure_Setpoint)**
     *
     * Sets the target air differential pressure between an upstream and downstream point in a return air duct or conduit
     *
     * @type        class
     * @parent      brick:Air_Differential_Pressure_Setpoint
     */
    Return_Air_Differential_Pressure_Setpoint = this.toIri().concat('Return_Air_Differential_Pressure_Setpoint');
    /**
     * **[brick:Return_Air_Enthalpy_Sensor](https://brickschema.org/schema/Brick#Return_Air_Enthalpy_Sensor)**
     *
     * Measures the total heat content of return air
     *
     * @type        class
     * @parent      brick:Air_Enthalpy_Sensor
     */
    Return_Air_Enthalpy_Sensor = this.toIri().concat('Return_Air_Enthalpy_Sensor');
    /**
     * **[brick:Return_Air_Filter](https://brickschema.org/schema/Brick#Return_Air_Filter)**
     *
     * Filters return air
     *
     * @type        class
     * @parent      brick:Filter
     */
    Return_Air_Filter = this.toIri().concat('Return_Air_Filter');
    /**
     * **[brick:Return_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Return_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of return air
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    Return_Air_Flow_Sensor = this.toIri().concat('Return_Air_Flow_Sensor');
    /**
     * **[brick:Return_Air_Grains_Sensor](https://brickschema.org/schema/Brick#Return_Air_Grains_Sensor)**
     *
     * Measures the mass of water vapor in return air
     *
     * @type        class
     * @parent      brick:Air_Grains_Sensor
     */
    Return_Air_Grains_Sensor = this.toIri().concat('Return_Air_Grains_Sensor');
    /**
     * **[brick:Return_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Return_Air_Humidity_Sensor)**
     *
     * Measures the relative humidity of return air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    Return_Air_Humidity_Sensor = this.toIri().concat('Return_Air_Humidity_Sensor');
    /**
     * **[brick:Return_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Return_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for return air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    Return_Air_Humidity_Setpoint = this.toIri().concat('Return_Air_Humidity_Setpoint');
    /**
     * **[brick:Return_Air_Plenum](https://brickschema.org/schema/Brick#Return_Air_Plenum)**
     *
     * A component of the HVAC the receives air from the room to recirculate or exhaust to or from the building
     *
     * @type        class
     * @parent      brick:Air_Plenum
     */
    Return_Air_Plenum = this.toIri().concat('Return_Air_Plenum');
    /**
     * **[brick:Return_Air_Temperature_Alarm](https://brickschema.org/schema/Brick#Return_Air_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with the temperature of return air.
     *
     * @type        class
     * @parent      brick:Air_Temperature_Alarm
     */
    Return_Air_Temperature_Alarm = this.toIri().concat('Return_Air_Temperature_Alarm');
    /**
     * **[brick:Return_Air_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Return_Air_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_High_Reset_Setpoint
     */
    Return_Air_Temperature_High_Reset_Setpoint = this.toIri().concat('Return_Air_Temperature_High_Reset_Setpoint');
    /**
     * **[brick:Return_Air_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Return_Air_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_Low_Reset_Setpoint
     */
    Return_Air_Temperature_Low_Reset_Setpoint = this.toIri().concat('Return_Air_Temperature_Low_Reset_Setpoint');
    /**
     * **[brick:Return_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Return_Air_Temperature_Sensor)**
     *
     * Measures the temperature of return air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    Return_Air_Temperature_Sensor = this.toIri().concat('Return_Air_Temperature_Sensor');
    /**
     * **[brick:Return_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Return_Air_Temperature_Setpoint)**
     *
     * The target temperature for return air, often used as an approximation of zone air temperature
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Return_Air_Temperature_Setpoint = this.toIri().concat('Return_Air_Temperature_Setpoint');
    /**
     * **[brick:Return_Chilled_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Return_Chilled_Water_Temperature_Setpoint)**
     *
     * Sets the temperature of return (downstream of the chilled water load) chilled water
     *
     * @type        class
     * @parent      brick:Chilled_Water_Temperature_Setpoint
     */
    Return_Chilled_Water_Temperature_Setpoint = this.toIri().concat('Return_Chilled_Water_Temperature_Setpoint');
    /**
     * **[brick:Return_Condenser_Water](https://brickschema.org/schema/Brick#Return_Condenser_Water)**
     *
     * In a condenser water loop, this is water being brought away from the condenser side of a heat-rejection device (e.g. chiller). It is the 'warm' side.
     *
     * @type        class
     * @parent      brick:Condenser_Water
     */
    Return_Condenser_Water = this.toIri().concat('Return_Condenser_Water');
    /**
     * **[brick:Return_Condenser_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Return_Condenser_Water_Flow_Sensor)**
     *
     * Measures the flow of the return condenser water
     *
     * @type        class
     * @parent      brick:Return_Water_Flow_Sensor
     */
    Return_Condenser_Water_Flow_Sensor = this.toIri().concat('Return_Condenser_Water_Flow_Sensor');
    /**
     * **[brick:Return_Condenser_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Return_Condenser_Water_Temperature_Sensor)**
     *
     * Measures the temperature of the return condenser water
     *
     * @type        class
     * @parent      brick:Condenser_Water_Temperature_Sensor
     */
    Return_Condenser_Water_Temperature_Sensor = this.toIri().concat('Return_Condenser_Water_Temperature_Sensor');
    /**
     * **[brick:Return_Damper](https://brickschema.org/schema/Brick#Return_Damper)**
     *
     * A damper that modulates the flow of return air
     *
     * @type        class
     * @parent      brick:Damper
     */
    Return_Damper = this.toIri().concat('Return_Damper');
    /**
     * **[brick:Return_Fan](https://brickschema.org/schema/Brick#Return_Fan)**
     *
     * Fan moving return air -- air that is circulated from the building back into the HVAC system
     *
     * @type        class
     * @parent      brick:Fan
     */
    Return_Fan = this.toIri().concat('Return_Fan');
    /**
     * **[brick:Return_Heating_Valve](https://brickschema.org/schema/Brick#Return_Heating_Valve)**
     *
     * A valve installed on the return side of a heat exchanger
     *
     * @type        class
     * @parent      brick:Heating_Valve
     */
    Return_Heating_Valve = this.toIri().concat('Return_Heating_Valve');
    /**
     * **[brick:Return_Hot_Water](https://brickschema.org/schema/Brick#Return_Hot_Water)**
     *
     * @type        class
     * @parent      brick:Hot_Water
     */
    Return_Hot_Water = this.toIri().concat('Return_Hot_Water');
    /**
     * **[brick:Return_Hot_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Return_Hot_Water_Temperature_Setpoint)**
     *
     * Sets the temperature of return (downstream of the hot water load) hot water
     *
     * @type        class
     * @parent      brick:Hot_Water_Temperature_Setpoint
     */
    Return_Hot_Water_Temperature_Setpoint = this.toIri().concat('Return_Hot_Water_Temperature_Setpoint');
    /**
     * **[brick:Return_Water](https://brickschema.org/schema/Brick#Return_Water)**
     *
     * The water is a system after it is used in a heat transfer cycle
     *
     * @type        class
     * @parent      brick:Water
     */
    Return_Water = this.toIri().concat('Return_Water');
    /**
     * **[brick:Return_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Return_Water_Flow_Sensor)**
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    Return_Water_Flow_Sensor = this.toIri().concat('Return_Water_Flow_Sensor');
    /**
     * **[brick:Return_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Return_Water_Temperature_Sensor)**
     *
     * Measures the temperature of return water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    Return_Water_Temperature_Sensor = this.toIri().concat('Return_Water_Temperature_Sensor');
    /**
     * **[brick:Return_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Return_Water_Temperature_Setpoint)**
     *
     * Sets the temperature of return water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    Return_Water_Temperature_Setpoint = this.toIri().concat('Return_Water_Temperature_Setpoint');
    /**
     * **[brick:Riser](https://brickschema.org/schema/Brick#Riser)**
     *
     * A vertical shaft indented for installing building infrastructure e.g., electrical wire, network communication wire, plumbing, etc
     *
     * @type        class
     * @parent      brick:Vertical_Space
     */
    Riser = this.toIri().concat('Riser');
    /**
     * **[brick:Rooftop](https://brickschema.org/schema/Brick#Rooftop)**
     *
     * @type        class
     * @parent      brick:Floor
     */
    Rooftop = this.toIri().concat('Rooftop');
    /**
     * **[brick:Rooftop_Unit](https://brickschema.org/schema/Brick#Rooftop_Unit)**
     *
     * Packaged air conditioner mounted on a roof, the conditioned air being discharged directly into the rooms below or through a duct system.
     *
     * @type        class
     * @parent      brick:AHU
     */
    Rooftop_Unit = this.toIri().concat('Rooftop_Unit');
    /**
     * **[brick:Room](https://brickschema.org/schema/Brick#Room)**
     *
     * Base class for all more specific room types.
     *
     * @type        class
     * @parent      brick:Space
     */
    Room = this.toIri().concat('Room');
    /**
     * **[brick:Room_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Room_Air_Temperature_Setpoint)**
     *
     * Sets temperature of room air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Room_Air_Temperature_Setpoint = this.toIri().concat('Room_Air_Temperature_Setpoint');
    /**
     * **[brick:Run_Enable_Command](https://brickschema.org/schema/Brick#Run_Enable_Command)**
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    Run_Enable_Command = this.toIri().concat('Run_Enable_Command');
    /**
     * **[brick:Run_Request_Status](https://brickschema.org/schema/Brick#Run_Request_Status)**
     *
     * Indicates if a request has been filed to start a device or equipment
     *
     * @type        class
     * @parent      brick:Run_Status
     */
    Run_Request_Status = this.toIri().concat('Run_Request_Status');
    /**
     * **[brick:Run_Status](https://brickschema.org/schema/Brick#Run_Status)**
     *
     * @type        class
     * @parent      brick:Start_Stop_Status
     */
    Run_Status = this.toIri().concat('Run_Status');
    /**
     * **[brick:Run_Time_Sensor](https://brickschema.org/schema/Brick#Run_Time_Sensor)**
     *
     * Measures the duration for which a device was in an active or "on" state
     *
     * @type        class
     * @parent      brick:Duration_Sensor
     */
    Run_Time_Sensor = this.toIri().concat('Run_Time_Sensor');
    /**
     * **[brick:Safety_Equipment](https://brickschema.org/schema/Brick#Safety_Equipment)**
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Safety_Equipment = this.toIri().concat('Safety_Equipment');
    /**
     * **[brick:Safety_Shower](https://brickschema.org/schema/Brick#Safety_Shower)**
     *
     * @type        class
     * @parent      brick:Emergency_Wash_Station
     */
    Safety_Shower = this.toIri().concat('Safety_Shower');
    /**
     * **[brick:Safety_System](https://brickschema.org/schema/Brick#Safety_System)**
     *
     * @type        class
     * @parent      brick:System
     */
    Safety_System = this.toIri().concat('Safety_System');
    /**
     * **[brick:Sash_Position_Sensor](https://brickschema.org/schema/Brick#Sash_Position_Sensor)**
     *
     * Measures the current position of a sash in terms of the percent of fully open
     *
     * @type        class
     * @parent      brick:Position_Sensor
     */
    Sash_Position_Sensor = this.toIri().concat('Sash_Position_Sensor');
    /**
     * **[brick:Schedule_Temperature_Setpoint](https://brickschema.org/schema/Brick#Schedule_Temperature_Setpoint)**
     *
     * The current setpoint as indicated by the schedule
     *
     * @type        class
     * @parent      brick:Temperature_Setpoint
     */
    Schedule_Temperature_Setpoint = this.toIri().concat('Schedule_Temperature_Setpoint');
    /**
     * **[brick:Security_Equipment](https://brickschema.org/schema/Brick#Security_Equipment)**
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Security_Equipment = this.toIri().concat('Security_Equipment');
    /**
     * **[brick:Security_Service_Room](https://brickschema.org/schema/Brick#Security_Service_Room)**
     *
     * A class of spaces used by the security staff of a facility
     *
     * @type        class
     * @parent      brick:Room
     */
    Security_Service_Room = this.toIri().concat('Security_Service_Room');
    /**
     * **[brick:Sensor](https://brickschema.org/schema/Brick#Sensor)**
     *
     * A Sensor is an input point that represents the value of a device or instrument designed to detect and measure a variable (ASHRAE Dictionary).
     *
     * @type        class
     * @parent      brick:Point
     */
    Sensor = this.toIri().concat('Sensor');
    /**
     * **[brick:Server_Room](https://brickschema.org/schema/Brick#Server_Room)**
     *
     * @type        class
     * @parent      brick:Room
     */
    Server_Room = this.toIri().concat('Server_Room');
    /**
     * **[brick:Service_Room](https://brickschema.org/schema/Brick#Service_Room)**
     *
     * A class of spaces related to the operations of building subsystems, e.g. HVAC, electrical, IT, plumbing, etc
     *
     * @type        class
     * @parent      brick:Room
     */
    Service_Room = this.toIri().concat('Service_Room');
    /**
     * **[brick:Setpoint](https://brickschema.org/schema/Brick#Setpoint)**
     *
     * A Setpoint is an input value at which the desired property is set
     *
     * @type        class
     * @parent      brick:Point
     */
    Setpoint = this.toIri().concat('Setpoint');
    /**
     * **[brick:Shading_System](https://brickschema.org/schema/Brick#Shading_System)**
     *
     * Devices that can control daylighting through various means
     *
     * @type        class
     * @parent      brick:System
     */
    Shading_System = this.toIri().concat('Shading_System');
    /**
     * **[brick:Shared_Office](https://brickschema.org/schema/Brick#Shared_Office)**
     *
     * An office used by multiple people
     *
     * @type        class
     * @parent      brick:Enclosed_Office
     */
    Shared_Office = this.toIri().concat('Shared_Office');
    /**
     * **[brick:Short_Cycle_Alarm](https://brickschema.org/schema/Brick#Short_Cycle_Alarm)**
     *
     * An alarm that indicates a short cycle occurred. A short cycle occurs when a cooling cycle is prevented from completing its full cycle
     *
     * @type        class
     * @parent      brick:Cycle_Alarm
     */
    Short_Cycle_Alarm = this.toIri().concat('Short_Cycle_Alarm');
    /**
     * **[brick:Shower](https://brickschema.org/schema/Brick#Shower)**
     *
     * A space containing showers, usually adjacent to an athletic or execise area
     *
     * @type        class
     * @parent      brick:Room
     */
    Shower = this.toIri().concat('Shower');
    /**
     * **[brick:Site](https://brickschema.org/schema/Brick#Site)**
     *
     * A geographic region containing 0 or more buildings. Typically used as the encapsulating location for a collection of Brick entities through the hasSite/isSiteOf relationships
     *
     * @type        class
     * @parent      brick:Location
     */
    Site = this.toIri().concat('Site');
    /**
     * **[brick:Smoke_Alarm](https://brickschema.org/schema/Brick#Smoke_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with smoke.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Smoke_Alarm = this.toIri().concat('Smoke_Alarm');
    /**
     * **[brick:Smoke_Detection_Alarm](https://brickschema.org/schema/Brick#Smoke_Detection_Alarm)**
     *
     * @type        class
     * @parent      brick:Smoke_Alarm
     */
    Smoke_Detection_Alarm = this.toIri().concat('Smoke_Detection_Alarm');
    /**
     * **[brick:Solar_Azimuth_Angle_Sensor](https://brickschema.org/schema/Brick#Solar_Azimuth_Angle_Sensor)**
     *
     * Measures the azimuth angle of the sun
     *
     * @type        class
     * @parent      brick:Angle_Sensor
     */
    Solar_Azimuth_Angle_Sensor = this.toIri().concat('Solar_Azimuth_Angle_Sensor');
    /**
     * **[brick:SolarIrradiance](https://brickschema.org/schema/Brick#Solar_Irradiance)**
     *
     * The power per unit area of solar electromagnetic radiation incident on a surface
     *
     * @type        instance
     */
    Solar_Irradiance = this.toIri().concat('Solar_Irradiance');
    /**
     * **[brick:Solar_Radiance](https://brickschema.org/schema/Brick#Solar_Radiance)**
     *
     * The amount of light that passes through or is emitted from the sun and falls within a given solid angle in a specified direction
     *
     * @type        instance
     */
    Solar_Radiance = this.toIri().concat('Solar_Radiance');
    /**
     * **[brick:Solar_Radiance_Sensor](https://brickschema.org/schema/Brick#Solar_Radiance_Sensor)**
     *
     * The amount of light that passes through or is emitted from the sun and falls within a given solid angle in a specified direction
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Solar_Radiance_Sensor = this.toIri().concat('Solar_Radiance_Sensor');
    /**
     * **[brick:Solar_Thermal_Collector](https://brickschema.org/schema/Brick#Solar_Thermal_Collector)**
     *
     * A type of solar panels that converts solar radiation into thermal energy.
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Solar_Thermal_Collector = this.toIri().concat('Solar_Thermal_Collector');
    /**
     * **[brick:Solar_Zenith_Angle_Sensor](https://brickschema.org/schema/Brick#Solar_Zenith_Angle_Sensor)**
     *
     * Measures the zenith angle of the sun
     *
     * @type        class
     * @parent      brick:Angle_Sensor
     */
    Solar_Zenith_Angle_Sensor = this.toIri().concat('Solar_Zenith_Angle_Sensor');
    /**
     * **[brick:Solid](https://brickschema.org/schema/Brick#Solid)**
     *
     * one of the three states or phases of matter characterized by stability of dimensions, relative incompressibility, and molecular motion held to limited oscillation.
     *
     * @type        class
     * @parent      brick:Substance
     */
    Solid = this.toIri().concat('Solid');
    /**
     * **[brick:Space](https://brickschema.org/schema/Brick#Space)**
     *
     * A part of the physical world or a virtual world whose 3D spatial extent is bounded actually or theoretically, and provides for certain functions within the zone it is contained in.
     *
     * @type        class
     * @parent      brick:Location
     */
    Space = this.toIri().concat('Space');
    /**
     * **[brick:Space_Heater](https://brickschema.org/schema/Brick#Space_Heater)**
     *
     * A heater used to warm the air in an enclosed area, such as a room or office
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Space_Heater = this.toIri().concat('Space_Heater');
    /**
     * **[brick:Speed](https://brickschema.org/schema/Brick#Speed)**
     *
     * @type        instance
     */
    Speed = this.toIri().concat('Speed');
    /**
     * **[brick:Speed_Reset_Command](https://brickschema.org/schema/Brick#Speed_Reset_Command)**
     *
     * @type        class
     * @parent      brick:Reset_Command
     */
    Speed_Reset_Command = this.toIri().concat('Speed_Reset_Command');
    /**
     * **[brick:Speed_Sensor](https://brickschema.org/schema/Brick#Speed_Sensor)**
     *
     * Measures the magnitude of velocity of some form of movement
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Speed_Sensor = this.toIri().concat('Speed_Sensor');
    /**
     * **[brick:Speed_Setpoint](https://brickschema.org/schema/Brick#Speed_Setpoint)**
     *
     * Sets speed
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Speed_Setpoint = this.toIri().concat('Speed_Setpoint');
    /**
     * **[brick:Speed_Setpoint_Limit](https://brickschema.org/schema/Brick#Speed_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Speed_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    Speed_Setpoint_Limit = this.toIri().concat('Speed_Setpoint_Limit');
    /**
     * **[brick:Speed_Status](https://brickschema.org/schema/Brick#Speed_Status)**
     *
     * Indicates the operating speed of a device or equipment, e.g. fan
     *
     * @type        class
     * @parent      brick:Status
     */
    Speed_Status = this.toIri().concat('Speed_Status');
    /**
     * **[brick:Sports_Service_Room](https://brickschema.org/schema/Brick#Sports_Service_Room)**
     *
     * A class of spaces used in the support of sports
     *
     * @type        class
     * @parent      brick:Room
     */
    Sports_Service_Room = this.toIri().concat('Sports_Service_Room');
    /**
     * **[brick:StageShape](https://brickschema.org/schema/Brick#StageShape)**
     *
     * @type        class
     */
    StageShape = this.toIri().concat('StageShape');
    /**
     * **[brick:Stage_Enable_Command](https://brickschema.org/schema/Brick#Stage_Enable_Command)**
     *
     * A point representing a discrete stage which the equipment should be operating at. The desired stage number should be identified by an entity property
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    Stage_Enable_Command = this.toIri().concat('Stage_Enable_Command');
    /**
     * **[brick:Stage_Riser](https://brickschema.org/schema/Brick#Stage_Riser)**
     *
     * A low platform in a space or on a stage
     *
     * @type        class
     * @parent      brick:Furniture
     */
    Stage_Riser = this.toIri().concat('Stage_Riser');
    /**
     * **[brick:Stages_Status](https://brickschema.org/schema/Brick#Stages_Status)**
     *
     * Indicates which stage a control loop or equipment is in
     *
     * @type        class
     * @parent      brick:Status
     */
    Stages_Status = this.toIri().concat('Stages_Status');
    /**
     * **[brick:Staircase](https://brickschema.org/schema/Brick#Staircase)**
     *
     * A vertical space containing stairs
     *
     * @type        class
     * @parent      brick:Vertical_Space
     */
    Staircase = this.toIri().concat('Staircase');
    /**
     * **[brick:Standby_CRAC](https://brickschema.org/schema/Brick#Standby_CRAC)**
     *
     * A CRAC that is activated as part of a lead/lag operation or when an alarm occurs in a primary unit
     *
     * @type        class
     * @parent      brick:CRAC
     */
    Standby_CRAC = this.toIri().concat('Standby_CRAC');
    /**
     * **[brick:Standby_Fan](https://brickschema.org/schema/Brick#Standby_Fan)**
     *
     * Fan that is activated as part of a lead/lag operation or when a primary fan raises an alarm
     *
     * @type        class
     * @parent      brick:Fan
     */
    Standby_Fan = this.toIri().concat('Standby_Fan');
    /**
     * **[brick:Standby_Glycool_Unit_On_Off_Status](https://brickschema.org/schema/Brick#Standby_Glycool_Unit_On_Off_Status)**
     *
     * Indicates the on/off status of a standby glycool unit
     *
     * @type        class
     * @parent      brick:Standby_Unit_On_Off_Status
     */
    Standby_Glycool_Unit_On_Off_Status = this.toIri().concat('Standby_Glycool_Unit_On_Off_Status');
    /**
     * **[brick:Standby_Load_Shed_Command](https://brickschema.org/schema/Brick#Standby_Load_Shed_Command)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Command
     */
    Standby_Load_Shed_Command = this.toIri().concat('Standby_Load_Shed_Command');
    /**
     * **[brick:Standby_Unit_On_Off_Status](https://brickschema.org/schema/Brick#Standby_Unit_On_Off_Status)**
     *
     * Indicates the on/off status of a standby unit
     *
     * @type        class
     * @parent      brick:On_Off_Status
     */
    Standby_Unit_On_Off_Status = this.toIri().concat('Standby_Unit_On_Off_Status');
    /**
     * **[brick:Start_Stop_Command](https://brickschema.org/schema/Brick#Start_Stop_Command)**
     *
     * A Start/Stop Command controls or reports the active/inactive status of a control sequence
     *
     * @type        class
     * @parent      brick:On_Off_Command
     */
    Start_Stop_Command = this.toIri().concat('Start_Stop_Command');
    /**
     * **[brick:Start_Stop_Status](https://brickschema.org/schema/Brick#Start_Stop_Status)**
     *
     * Indicates the active/inactive status of a control loop (but not equipment activities or relays -- use On/Off for this purpose)
     *
     * @type        class
     * @parent      brick:On_Off_Status
     */
    Start_Stop_Status = this.toIri().concat('Start_Stop_Status');
    /**
     * **[brick:Static_Pressure](https://brickschema.org/schema/Brick#Static_Pressure)**
     *
     * @type        instance
     */
    Static_Pressure = this.toIri().concat('Static_Pressure');
    /**
     * **[brick:Static_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Static_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of static pressure
     *
     * @type        class
     * @parent      brick:Deadband_Setpoint
     */
    Static_Pressure_Deadband_Setpoint = this.toIri().concat('Static_Pressure_Deadband_Setpoint');
    /**
     * **[brick:Static_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Static_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Integral_Time_Parameter
     */
    Static_Pressure_Integral_Time_Parameter = this.toIri().concat('Static_Pressure_Integral_Time_Parameter');
    /**
     * **[brick:Static_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Static_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    Static_Pressure_Proportional_Band_Parameter = this.toIri().concat('Static_Pressure_Proportional_Band_Parameter');
    /**
     * **[brick:Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Static_Pressure_Sensor)**
     *
     * Measures resistance to airflow in a heating and cooling system's components and duct work
     *
     * @type        class
     * @parent      brick:Pressure_Sensor
     */
    Static_Pressure_Sensor = this.toIri().concat('Static_Pressure_Sensor');
    /**
     * **[brick:Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Static_Pressure_Setpoint)**
     *
     * Sets static pressure
     *
     * @type        class
     * @parent      brick:Pressure_Setpoint
     */
    Static_Pressure_Setpoint = this.toIri().concat('Static_Pressure_Setpoint');
    /**
     * **[brick:Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    Static_Pressure_Setpoint_Limit = this.toIri().concat('Static_Pressure_Setpoint_Limit');
    /**
     * **[brick:Static_Pressure_Step_Parameter](https://brickschema.org/schema/Brick#Static_Pressure_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Step_Parameter
     */
    Static_Pressure_Step_Parameter = this.toIri().concat('Static_Pressure_Step_Parameter');
    /**
     * **[brick:Status](https://brickschema.org/schema/Brick#Status)**
     *
     * A Status is input point that reports the current operating mode, state, position, or condition of an item. Statuses are observations and should be considered 'read-only'
     *
     * @type        class
     * @parent      brick:Point
     */
    Status = this.toIri().concat('Status');
    /**
     * **[brick:Steam](https://brickschema.org/schema/Brick#Steam)**
     *
     * water in the vapor phase.
     *
     * @type        class
     * @parent      brick:Gas
     */
    Steam = this.toIri().concat('Steam');
    /**
     * **[brick:Steam_Baseboard_Radiator](https://brickschema.org/schema/Brick#Steam_Baseboard_Radiator)**
     *
     * Steam heating device located at or near the floor
     *
     * @type        class
     * @parent      brick:Baseboard_Radiator
     */
    Steam_Baseboard_Radiator = this.toIri().concat('Steam_Baseboard_Radiator');
    /**
     * **[brick:Steam_Distribution](https://brickschema.org/schema/Brick#Steam_Distribution)**
     *
     * Utilize a steam distribution source to represent how steam is distributed across multiple destinations
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Steam_Distribution = this.toIri().concat('Steam_Distribution');
    /**
     * **[brick:Steam_On_Off_Command](https://brickschema.org/schema/Brick#Steam_On_Off_Command)**
     *
     * @type        class
     * @parent      brick:On_Off_Command
     */
    Steam_On_Off_Command = this.toIri().concat('Steam_On_Off_Command');
    /**
     * **[brick:Steam_Radiator](https://brickschema.org/schema/Brick#Steam_Radiator)**
     *
     * Radiator that uses steam
     *
     * @type        class
     * @parent      brick:Radiator
     */
    Steam_Radiator = this.toIri().concat('Steam_Radiator');
    /**
     * **[brick:Steam_System](https://brickschema.org/schema/Brick#Steam_System)**
     *
     * The equipment, devices and conduits that handle the production and distribution of steam in a building
     *
     * @type        class
     * @parent      brick:Heating_Ventilation_Air_Conditioning_System
     */
    Steam_System = this.toIri().concat('Steam_System');
    /**
     * **[brick:Steam_Usage_Sensor](https://brickschema.org/schema/Brick#Steam_Usage_Sensor)**
     *
     * Measures the amount of steam that is consumed or used, over some period of time
     *
     * @type        class
     * @parent      brick:Usage_Sensor
     */
    Steam_Usage_Sensor = this.toIri().concat('Steam_Usage_Sensor');
    /**
     * **[brick:Steam_Valve](https://brickschema.org/schema/Brick#Steam_Valve)**
     *
     * @type        class
     * @parent      brick:Valve
     */
    Steam_Valve = this.toIri().concat('Steam_Valve');
    /**
     * **[brick:Step_Parameter](https://brickschema.org/schema/Brick#Step_Parameter)**
     *
     * @type        class
     * @parent      brick:PID_Parameter
     */
    Step_Parameter = this.toIri().concat('Step_Parameter');
    /**
     * **[brick:Storage_Room](https://brickschema.org/schema/Brick#Storage_Room)**
     *
     * A class of spaces used for storage
     *
     * @type        class
     * @parent      brick:Room
     */
    Storage_Room = this.toIri().concat('Storage_Room');
    /**
     * **[brick:Storey](https://brickschema.org/schema/Brick#Storey)**
     *
     * @type        class
     * @parent      brick:Location
     */
    Storey = this.toIri().concat('Storey');
    /**
     * **[brick:Studio](https://brickschema.org/schema/Brick#Studio)**
     *
     * A room used for the production or media, usually with either a specialized set or a specialized sound booth for recording
     *
     * @type        class
     * @parent      brick:Media_Room
     */
    Studio = this.toIri().concat('Studio');
    /**
     * **[brick:Substance](https://brickschema.org/schema/Brick#Substance)**
     *
     * @type        class
     * @parent      brick:Measurable
     */
    Substance = this.toIri().concat('Substance');
    /**
     * **[brick:Supply_Air](https://brickschema.org/schema/Brick#Supply_Air)**
     *
     * (1) air delivered by mechanical or natural ventilation to a space, composed of any combination of outdoor air, recirculated air, or transfer air. (2) air entering a space from an air-conditioning, heating, or ventilating apparatus for the purpose of comfort conditioning. Supply air is generally filtered, fan forced, and either heated, cooled, humidified, or dehumidified as necessary to maintain specified conditions. Only the quantity of outdoor air within the supply airflow may be used as replacement air.
     *
     * @type        class
     * @parent      brick:Air
     */
    Supply_Air = this.toIri().concat('Supply_Air');
    /**
     * **[brick:Supply_Air_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Supply_Air_Differential_Pressure_Sensor)**
     *
     * Measures the difference in pressure between an upstream and downstream of an air duct or other air conduit used to supply air into the building
     *
     * @type        class
     * @parent      brick:Air_Differential_Pressure_Sensor
     */
    Supply_Air_Differential_Pressure_Sensor = this.toIri().concat('Supply_Air_Differential_Pressure_Sensor');
    /**
     * **[brick:Supply_Air_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Differential_Pressure_Setpoint)**
     *
     * Sets the target air differential pressure between an upstream and downstream point in a supply air duct or conduit
     *
     * @type        class
     * @parent      brick:Air_Differential_Pressure_Setpoint
     */
    Supply_Air_Differential_Pressure_Setpoint = this.toIri().concat('Supply_Air_Differential_Pressure_Setpoint');
    /**
     * **[brick:Supply_Air_Duct_Pressure_Status](https://brickschema.org/schema/Brick#Supply_Air_Duct_Pressure_Status)**
     *
     * Indicates if air pressure in supply duct is within expected bounds
     *
     * @type        class
     * @parent      brick:Pressure_Status
     */
    Supply_Air_Duct_Pressure_Status = this.toIri().concat('Supply_Air_Duct_Pressure_Status');
    /**
     * **[brick:Supply_Air_Flow_Demand_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Flow_Demand_Setpoint)**
     *
     * Sets the rate of supply air flow required for a process
     *
     * @type        class
     * @parent      brick:Air_Flow_Demand_Setpoint
     */
    Supply_Air_Flow_Demand_Setpoint = this.toIri().concat('Supply_Air_Flow_Demand_Setpoint');
    /**
     * **[brick:Supply_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Supply_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of supply air
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    Supply_Air_Flow_Sensor = this.toIri().concat('Supply_Air_Flow_Sensor');
    /**
     * **[brick:Supply_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Flow_Setpoint)**
     *
     * Sets supply air flow rate
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint
     */
    Supply_Air_Flow_Setpoint = this.toIri().concat('Supply_Air_Flow_Setpoint');
    /**
     * **[brick:Supply_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Supply_Air_Humidity_Sensor)**
     *
     * Measures the relative humidity of supply air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    Supply_Air_Humidity_Sensor = this.toIri().concat('Supply_Air_Humidity_Sensor');
    /**
     * **[brick:Supply_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for supply air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    Supply_Air_Humidity_Setpoint = this.toIri().concat('Supply_Air_Humidity_Setpoint');
    /**
     * **[brick:Supply_Air_Integral_Gain_Parameter](https://brickschema.org/schema/Brick#Supply_Air_Integral_Gain_Parameter)**
     *
     * @type        class
     * @parent      brick:Integral_Gain_Parameter
     */
    Supply_Air_Integral_Gain_Parameter = this.toIri().concat('Supply_Air_Integral_Gain_Parameter');
    /**
     * **[brick:Supply_Air_Plenum](https://brickschema.org/schema/Brick#Supply_Air_Plenum)**
     *
     * A component of the HVAC the receives air from the air handling unit to distribute to the building
     *
     * @type        class
     * @parent      brick:Air_Plenum
     */
    Supply_Air_Plenum = this.toIri().concat('Supply_Air_Plenum');
    /**
     * **[brick:Supply_Air_Proportional_Gain_Parameter](https://brickschema.org/schema/Brick#Supply_Air_Proportional_Gain_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Gain_Parameter
     */
    Supply_Air_Proportional_Gain_Parameter = this.toIri().concat('Supply_Air_Proportional_Gain_Parameter');
    /**
     * **[brick:Supply_Air_Static_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of static pressure of supply air
     *
     * @type        class
     * @parent      brick:Static_Pressure_Deadband_Setpoint
     */
    Supply_Air_Static_Pressure_Deadband_Setpoint = this.toIri().concat('Supply_Air_Static_Pressure_Deadband_Setpoint');
    /**
     * **[brick:Supply_Air_Static_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Static_Pressure_Integral_Time_Parameter
     */
    Supply_Air_Static_Pressure_Integral_Time_Parameter = this.toIri().concat('Supply_Air_Static_Pressure_Integral_Time_Parameter');
    /**
     * **[brick:Supply_Air_Static_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Static_Pressure_Proportional_Band_Parameter
     */
    Supply_Air_Static_Pressure_Proportional_Band_Parameter = this.toIri().concat('Supply_Air_Static_Pressure_Proportional_Band_Parameter');
    /**
     * **[brick:Supply_Air_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Sensor)**
     *
     * The static pressure of air within supply regions of an HVAC system
     *
     * @type        class
     * @parent      brick:Static_Pressure_Sensor
     */
    Supply_Air_Static_Pressure_Sensor = this.toIri().concat('Supply_Air_Static_Pressure_Sensor');
    /**
     * **[brick:Supply_Air_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Setpoint)**
     *
     * Sets static pressure of supply air
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    Supply_Air_Static_Pressure_Setpoint = this.toIri().concat('Supply_Air_Static_Pressure_Setpoint');
    /**
     * **[brick:Supply_Air_Temperature_Alarm](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with the temperature of supply air.
     *
     * @type        class
     * @parent      brick:Air_Temperature_Alarm
     */
    Supply_Air_Temperature_Alarm = this.toIri().concat('Supply_Air_Temperature_Alarm');
    /**
     * **[brick:Supply_Air_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of supply air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Supply_Air_Temperature_Deadband_Setpoint = this.toIri().concat('Supply_Air_Temperature_Deadband_Setpoint');
    /**
     * **[brick:Supply_Air_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_High_Reset_Setpoint
     */
    Supply_Air_Temperature_High_Reset_Setpoint = this.toIri().concat('Supply_Air_Temperature_High_Reset_Setpoint');
    /**
     * **[brick:Supply_Air_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_Low_Reset_Setpoint
     */
    Supply_Air_Temperature_Low_Reset_Setpoint = this.toIri().concat('Supply_Air_Temperature_Low_Reset_Setpoint');
    /**
     * **[brick:Supply_Air_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    Supply_Air_Temperature_Proportional_Band_Parameter = this.toIri().concat('Supply_Air_Temperature_Proportional_Band_Parameter');
    /**
     * **[brick:Supply_Air_Temperature_Reset_Differential_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Reset_Differential_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_Differential_Reset_Setpoint
     */
    Supply_Air_Temperature_Reset_Differential_Setpoint = this.toIri().concat('Supply_Air_Temperature_Reset_Differential_Setpoint');
    /**
     * **[brick:Supply_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Sensor)**
     *
     * Measures the temperature of supply air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    Supply_Air_Temperature_Sensor = this.toIri().concat('Supply_Air_Temperature_Sensor');
    /**
     * **[brick:Supply_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Setpoint)**
     *
     * Temperature setpoint for supply air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Supply_Air_Temperature_Setpoint = this.toIri().concat('Supply_Air_Temperature_Setpoint');
    /**
     * **[brick:Supply_Air_Temperature_Step_Parameter](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Step_Parameter
     */
    Supply_Air_Temperature_Step_Parameter = this.toIri().concat('Supply_Air_Temperature_Step_Parameter');
    /**
     * **[brick:Supply_Air_Velocity_Pressure_Sensor](https://brickschema.org/schema/Brick#Supply_Air_Velocity_Pressure_Sensor)**
     *
     * @type        class
     * @parent      brick:Velocity_Pressure_Sensor
     */
    Supply_Air_Velocity_Pressure_Sensor = this.toIri().concat('Supply_Air_Velocity_Pressure_Sensor');
    /**
     * **[brick:Supply_Chilled_Water](https://brickschema.org/schema/Brick#Supply_Chilled_Water)**
     *
     * @type        class
     * @parent      brick:Chilled_Water
     */
    Supply_Chilled_Water = this.toIri().concat('Supply_Chilled_Water');
    /**
     * **[brick:Supply_Chilled_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Supply_Chilled_Water_Temperature_Setpoint)**
     *
     * Temperature setpoint for supply chilled water
     *
     * @type        class
     * @parent      brick:Chilled_Water_Temperature_Setpoint
     */
    Supply_Chilled_Water_Temperature_Setpoint = this.toIri().concat('Supply_Chilled_Water_Temperature_Setpoint');
    /**
     * **[brick:Supply_Condenser_Water](https://brickschema.org/schema/Brick#Supply_Condenser_Water)**
     *
     * In a condenser water loop, this is water being brought to the condenser side of a heat-rejection device (e.g. chiller). It is the 'cold' side.
     *
     * @type        class
     * @parent      brick:Condenser_Water
     */
    Supply_Condenser_Water = this.toIri().concat('Supply_Condenser_Water');
    /**
     * **[brick:Supply_Condenser_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Supply_Condenser_Water_Flow_Sensor)**
     *
     * Measures the flow of the supply condenser water
     *
     * @type        class
     * @parent      brick:Supply_Water_Flow_Sensor
     */
    Supply_Condenser_Water_Flow_Sensor = this.toIri().concat('Supply_Condenser_Water_Flow_Sensor');
    /**
     * **[brick:Supply_Condenser_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Supply_Condenser_Water_Temperature_Sensor)**
     *
     * Measures the temperature of the supply condenser water
     *
     * @type        class
     * @parent      brick:Condenser_Water_Temperature_Sensor
     */
    Supply_Condenser_Water_Temperature_Sensor = this.toIri().concat('Supply_Condenser_Water_Temperature_Sensor');
    /**
     * **[brick:Supply_Condenser_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Supply_Condenser_Water_Temperature_Setpoint)**
     *
     * The temperature setpoint for the supply condenser water
     *
     * @type        class
     * @parent      brick:Supply_Water_Temperature_Setpoint
     */
    Supply_Condenser_Water_Temperature_Setpoint = this.toIri().concat('Supply_Condenser_Water_Temperature_Setpoint');
    /**
     * **[brick:Supply_Fan](https://brickschema.org/schema/Brick#Supply_Fan)**
     *
     * Fan moving supply air -- air that is supplied from the HVAC system into the building
     *
     * @type        class
     * @parent      brick:Fan
     */
    Supply_Fan = this.toIri().concat('Supply_Fan');
    /**
     * **[brick:Supply_Hot_Water](https://brickschema.org/schema/Brick#Supply_Hot_Water)**
     *
     * @type        class
     * @parent      brick:Hot_Water
     */
    Supply_Hot_Water = this.toIri().concat('Supply_Hot_Water');
    /**
     * **[brick:Supply_Hot_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Supply_Hot_Water_Temperature_Setpoint)**
     *
     * Temperature setpoint for supply hot water
     *
     * @type        class
     * @parent      brick:Hot_Water_Temperature_Setpoint
     */
    Supply_Hot_Water_Temperature_Setpoint = this.toIri().concat('Supply_Hot_Water_Temperature_Setpoint');
    /**
     * **[brick:Supply_Water](https://brickschema.org/schema/Brick#Supply_Water)**
     *
     * @type        class
     * @parent      brick:Water
     */
    Supply_Water = this.toIri().concat('Supply_Water');
    /**
     * **[brick:Supply_Water_Differential_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Supply_Water_Differential_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of differential pressure of supply water
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Deadband_Setpoint
     */
    Supply_Water_Differential_Pressure_Deadband_Setpoint = this.toIri().concat('Supply_Water_Differential_Pressure_Deadband_Setpoint');
    /**
     * **[brick:Supply_Water_Differential_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Supply_Water_Differential_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Integral_Time_Parameter
     */
    Supply_Water_Differential_Pressure_Integral_Time_Parameter = this.toIri().concat('Supply_Water_Differential_Pressure_Integral_Time_Parameter');
    /**
     * **[brick:Supply_Water_Differential_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Supply_Water_Differential_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Proportional_Band
     */
    Supply_Water_Differential_Pressure_Proportional_Band_Parameter = this.toIri().concat('Supply_Water_Differential_Pressure_Proportional_Band_Parameter');
    /**
     * **[brick:Supply_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Supply_Water_Flow_Sensor)**
     *
     * Measures the rate of flow of hot supply water
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    Supply_Water_Flow_Sensor = this.toIri().concat('Supply_Water_Flow_Sensor');
    /**
     * **[brick:Supply_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Supply_Water_Flow_Setpoint)**
     *
     * Sets the flow rate of hot supply water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    Supply_Water_Flow_Setpoint = this.toIri().concat('Supply_Water_Flow_Setpoint');
    /**
     * **[brick:Supply_Water_Temperature_Alarm](https://brickschema.org/schema/Brick#Supply_Water_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with temperature of the supply water.
     *
     * @type        class
     * @parent      brick:Water_Temperature_Alarm
     */
    Supply_Water_Temperature_Alarm = this.toIri().concat('Supply_Water_Temperature_Alarm');
    /**
     * **[brick:Supply_Water_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Supply_Water_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of supply water
     *
     * @type        class
     * @parent      brick:Supply_Water_Temperature_Setpoint
     */
    Supply_Water_Temperature_Deadband_Setpoint = this.toIri().concat('Supply_Water_Temperature_Deadband_Setpoint');
    /**
     * **[brick:Supply_Water_Temperature_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Supply_Water_Temperature_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Integral_Time_Parameter
     */
    Supply_Water_Temperature_Integral_Time_Parameter = this.toIri().concat('Supply_Water_Temperature_Integral_Time_Parameter');
    /**
     * **[brick:Supply_Water_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Supply_Water_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    Supply_Water_Temperature_Proportional_Band_Parameter = this.toIri().concat('Supply_Water_Temperature_Proportional_Band_Parameter');
    /**
     * **[brick:Supply_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Supply_Water_Temperature_Setpoint)**
     *
     * Sets temperature of supply water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    Supply_Water_Temperature_Setpoint = this.toIri().concat('Supply_Water_Temperature_Setpoint');
    /**
     * **[brick:Surveillance_Camera](https://brickschema.org/schema/Brick#Surveillance_Camera)**
     *
     * @type        class
     * @parent      brick:Camera
     */
    Surveillance_Camera = this.toIri().concat('Surveillance_Camera');
    /**
     * **[brick:Switch](https://brickschema.org/schema/Brick#Switch)**
     *
     * A switch used to operate all or part of a lighting installation
     *
     * @type        class
     * @parent      brick:Interface
     */
    Switch = this.toIri().concat('Switch');
    /**
     * **[brick:Switch_Room](https://brickschema.org/schema/Brick#Switch_Room)**
     *
     * A telecommuncations room housing network switches
     *
     * @type        class
     * @parent      brick:Telecom_Room
     */
    Switch_Room = this.toIri().concat('Switch_Room');
    /**
     * **[brick:Switchgear](https://brickschema.org/schema/Brick#Switchgear)**
     *
     * A main disconnect or service disconnect feeds power to a switchgear, which then distributes power to the rest of the building through smaller amperage-rated disconnects.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    Switchgear = this.toIri().concat('Switchgear');
    /**
     * **[brick:System](https://brickschema.org/schema/Brick#System)**
     *
     * A System is a combination of equipment and auxiliary devices (e.g., controls, accessories, interconnecting means, and termi­nal elements) by which energy is transformed so it performs a specific function such as HVAC, service water heating, or lighting. (ASHRAE Dictionary).
     *
     * @type        class
     * @parent      brick:Collection
     */
    System = this.toIri().concat('System');
    /**
     * **[brick:System_Enable_Command](https://brickschema.org/schema/Brick#System_Enable_Command)**
     *
     * Enables operation of a system
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    System_Enable_Command = this.toIri().concat('System_Enable_Command');
    /**
     * **[brick:System_Shutdown_Status](https://brickschema.org/schema/Brick#System_Shutdown_Status)**
     *
     * Indicates if a system has been shutdown
     *
     * @type        class
     * @parent      brick:Status
     */
    System_Shutdown_Status = this.toIri().concat('System_Shutdown_Status');
    /**
     * **[brick:System_Status](https://brickschema.org/schema/Brick#System_Status)**
     *
     * Indicates properties of the activity of a system
     *
     * @type        class
     * @parent      brick:Status
     */
    System_Status = this.toIri().concat('System_Status');
    /**
     * **[brick:TABS_Panel](https://brickschema.org/schema/Brick#TABS_Panel)**
     *
     * See Thermally_Activated_Building_System_Panel
     *
     * @type        class
     * @parent      brick:Radiant_Panel
     */
    TABS_Panel = this.toIri().concat('TABS_Panel');
    /**
     * **[brick:TETRA_Room](https://brickschema.org/schema/Brick#TETRA_Room)**
     *
     * A room used for local two-way radio networks, e.g. the portable radios carried by facilities staff
     *
     * @type        class
     * @parent      brick:Telecom_Room
     */
    TETRA_Room = this.toIri().concat('TETRA_Room');
    /**
     * **[brick:TVOCConcentration](https://brickschema.org/schema/Brick#TVOC_Concentration)**
     *
     * The concentration of total volatile organic compounds in air
     *
     * @type        instance
     */
    TVOC_Concentration = this.toIri().concat('TVOC_Concentration');
    /**
     * **[brick:TVOC_Level_Sensor](https://brickschema.org/schema/Brick#TVOC_Level_Sensor)**
     *
     * A sensor measuring the level of all VOCs in air
     *
     * @type        class
     * @parent      brick:TVOC_Sensor
     */
    TVOC_Level_Sensor = this.toIri().concat('TVOC_Level_Sensor');
    /**
     * **[brick:TVOC_Sensor](https://brickschema.org/schema/Brick#TVOC_Sensor)**
     *
     * @type        class
     * @parent      brick:Particulate_Matter_Sensor
     */
    TVOC_Sensor = this.toIri().concat('TVOC_Sensor');
    /**
     * **[brick:Tag](https://brickschema.org/schema/Brick#Tag)**
     *
     * @type        class
     */
    Tag = this.toIri().concat('Tag');
    /**
     * **[brick:Team_Room](https://brickschema.org/schema/Brick#Team_Room)**
     *
     * An office used by multiple team members for specific work tasks. Distinct from Conference Room
     *
     * @type        class
     * @parent      brick:Enclosed_Office
     */
    Team_Room = this.toIri().concat('Team_Room');
    /**
     * **[brick:Telecom_Room](https://brickschema.org/schema/Brick#Telecom_Room)**
     *
     * A class of spaces used to support telecommuncations and IT equipment
     *
     * @type        class
     * @parent      brick:Room
     */
    Telecom_Room = this.toIri().concat('Telecom_Room');
    /**
     * **[brick:Temperature](https://brickschema.org/schema/Brick#Temperature)**
     *
     * @type        instance
     */
    Temperature = this.toIri().concat('Temperature');
    /**
     * **[brick:TemperatureCoefficientPerDegreeCelsiusShape](https://brickschema.org/schema/Brick#TemperatureCoefficientPerDegreeCelsiusShape)**
     *
     * @type        class
     */
    TemperatureCoefficientPerDegreeCelsiusShape = this.toIri().concat('TemperatureCoefficientPerDegreeCelsiusShape');
    /**
     * **[brick:TemperatureShape](https://brickschema.org/schema/Brick#TemperatureShape)**
     *
     * @type        class
     */
    TemperatureShape = this.toIri().concat('TemperatureShape');
    /**
     * **[brick:Temperature_Alarm](https://brickschema.org/schema/Brick#Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with temperature.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Temperature_Alarm = this.toIri().concat('Temperature_Alarm');
    /**
     * **[brick:Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature
     *
     * @type        class
     * @parent      brick:Deadband_Setpoint
     */
    Temperature_Deadband_Setpoint = this.toIri().concat('Temperature_Deadband_Setpoint');
    /**
     * **[brick:Temperature_Differential_Reset_Setpoint](https://brickschema.org/schema/Brick#Temperature_Differential_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Reset_Setpoint
     */
    Temperature_Differential_Reset_Setpoint = this.toIri().concat('Temperature_Differential_Reset_Setpoint');
    /**
     * **[brick:Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Reset_Setpoint
     */
    Temperature_High_Reset_Setpoint = this.toIri().concat('Temperature_High_Reset_Setpoint');
    /**
     * **[brick:Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Reset_Setpoint
     */
    Temperature_Low_Reset_Setpoint = this.toIri().concat('Temperature_Low_Reset_Setpoint');
    /**
     * **[brick:Temperature_Parameter](https://brickschema.org/schema/Brick#Temperature_Parameter)**
     *
     * Parameters relevant to temperature-related systems and points
     *
     * @type        class
     * @parent      brick:Parameter
     */
    Temperature_Parameter = this.toIri().concat('Temperature_Parameter');
    /**
     * **[brick:Temperature_Sensor](https://brickschema.org/schema/Brick#Temperature_Sensor)**
     *
     * Measures temperature: the physical property of matter that quantitatively expresses the common notions of hot and cold
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Temperature_Sensor = this.toIri().concat('Temperature_Sensor');
    /**
     * **[brick:Temperature_Setpoint](https://brickschema.org/schema/Brick#Temperature_Setpoint)**
     *
     * Sets temperature
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Temperature_Setpoint = this.toIri().concat('Temperature_Setpoint');
    /**
     * **[brick:Temperature_Step_Parameter](https://brickschema.org/schema/Brick#Temperature_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Step_Parameter
     */
    Temperature_Step_Parameter = this.toIri().concat('Temperature_Step_Parameter');
    /**
     * **[brick:Temperature_Tolerance_Parameter](https://brickschema.org/schema/Brick#Temperature_Tolerance_Parameter)**
     *
     * A parameter determining the difference between upper and lower limits of temperature.
     *
     * @type        class
     * @parent      brick:Temperature_Parameter
     */
    Temperature_Tolerance_Parameter = this.toIri().concat('Temperature_Tolerance_Parameter');
    /**
     * **[brick:Temporary_Occupancy_Status](https://brickschema.org/schema/Brick#Temporary_Occupancy_Status)**
     *
     * For systems that differentiate between scheduled occupied/unoccupied mode, this indicates if a space is temporarily occupied when it would otherwise be unoccupied
     *
     * @type        class
     * @parent      brick:Occupancy_Status
     */
    Temporary_Occupancy_Status = this.toIri().concat('Temporary_Occupancy_Status');
    /**
     * **[brick:Terminal_Unit](https://brickschema.org/schema/Brick#Terminal_Unit)**
     *
     * A device that regulates the volumetric flow rate and/or the temperature of the controlled medium.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Terminal_Unit = this.toIri().concat('Terminal_Unit');
    /**
     * **[brick:ThermalTransmittanceShape](https://brickschema.org/schema/Brick#ThermalTransmittanceShape)**
     *
     * @type        class
     */
    ThermalTransmittanceShape = this.toIri().concat('ThermalTransmittanceShape');
    /**
     * **[brick:Thermal_Energy](https://brickschema.org/schema/Brick#Thermal_Energy)**
     *
     * Thermal Energy} is the portion of the thermodynamic or internal energy of a system that is responsible for the temperature of the system. From a macroscopic thermodynamic description, the thermal energy of a system is given by its constant volume specific heat capacity C(T), a temperature coefficient also called thermal capacity, at any given absolute temperature (T): (U_{thermal = C(T) \cdot T).
     *
     * @type        instance
     */
    Thermal_Energy = this.toIri().concat('Thermal_Energy');
    /**
     * **[brick:ThermalPower](https://brickschema.org/schema/Brick#Thermal_Power)**
     *
     * `
     *
     * @type        instance
     */
    Thermal_Power = this.toIri().concat('Thermal_Power');
    /**
     * **[brick:Thermal_Power_Meter](https://brickschema.org/schema/Brick#Thermal_Power_Meter)**
     *
     * A standalone thermal power meter
     *
     * @type        class
     * @parent      brick:Meter
     */
    Thermal_Power_Meter = this.toIri().concat('Thermal_Power_Meter');
    /**
     * **[brick:Thermal_Power_Sensor](https://brickschema.org/schema/Brick#Thermal_Power_Sensor)**
     *
     * @type        class
     * @parent      brick:Power_Sensor
     */
    Thermal_Power_Sensor = this.toIri().concat('Thermal_Power_Sensor');
    /**
     * **[brick:Thermally_Activated_Building_System_Panel](https://brickschema.org/schema/Brick#Thermally_Activated_Building_System_Panel)**
     *
     * Radiant panel heating and cooling system where the energy heat source or sink is embedded in the building structure such as in slabs and walls.
     *
     * @type        class
     * @parent      brick:Radiant_Panel
     */
    Thermally_Activated_Building_System_Panel = this.toIri().concat('Thermally_Activated_Building_System_Panel');
    /**
     * **[brick:Thermostat](https://brickschema.org/schema/Brick#Thermostat)**
     *
     * An automatic control device used to maintain temperature at a fixed or adjustable setpoint.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Thermostat = this.toIri().concat('Thermostat');
    /**
     * **[brick:Ticketing_Booth](https://brickschema.org/schema/Brick#Ticketing_Booth)**
     *
     * A room or space used to sell or distribute tickets to events at a venue
     *
     * @type        class
     * @parent      brick:Space
     */
    Ticketing_Booth = this.toIri().concat('Ticketing_Booth');
    /**
     * **[brick:TiltShape](https://brickschema.org/schema/Brick#TiltShape)**
     *
     * @type        class
     */
    TiltShape = this.toIri().concat('TiltShape');
    /**
     * **[brick:Time](https://brickschema.org/schema/Brick#Time)**
     *
     * @type        instance
     */
    Time = this.toIri().concat('Time');
    /**
     * **[brick:Time_Parameter](https://brickschema.org/schema/Brick#Time_Parameter)**
     *
     * @type        class
     * @parent      brick:PID_Parameter
     */
    Time_Parameter = this.toIri().concat('Time_Parameter');
    /**
     * **[brick:Time_Setpoint](https://brickschema.org/schema/Brick#Time_Setpoint)**
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    Time_Setpoint = this.toIri().concat('Time_Setpoint');
    /**
     * **[brick:TimeseriesReference](https://brickschema.org/schema/Brick#TimeseriesReference)**
     *
     * Metadata describing where and how the data for a Brick Point is stored
     *
     * @type        class
     */
    TimeseriesReference = this.toIri().concat('TimeseriesReference');
    /**
     * **[brick:Tolerance_Parameter](https://brickschema.org/schema/Brick#Tolerance_Parameter)**
     *
     * difference between upper and lower limits of size for a given nominal dimension or value.
     *
     * @type        class
     * @parent      brick:Parameter
     */
    Tolerance_Parameter = this.toIri().concat('Tolerance_Parameter');
    /**
     * **[brick:Torque](https://brickschema.org/schema/Brick#Torque)**
     *
     * In physics, a torque (τ) is a vector that measures the tendency of a force to rotate an object about some axis. The magnitude of a torque is defined as force times its lever arm. Just as a force is a push or a pull, a torque can be thought of as a twist. The SI unit for torque is newton meters ((N m)). In U.S. customary units, it is measured in foot pounds (ft lbf) (also known as "pounds feet"). Mathematically, the torque on a particle (which has the position r in some reference frame) can be defined as the cross product: (τ = r x F) where, r is the particle's position vector relative to the fulcrum  F is the force acting on the particles,  or, more generally, torque can be defined as the rate of change of angular momentum: (τ = dL/dt) where, L is the angular momentum vector  t stands for time.
     *
     * @type        instance
     */
    Torque = this.toIri().concat('Torque');
    /**
     * **[brick:Torque_Sensor](https://brickschema.org/schema/Brick#Torque_Sensor)**
     *
     * Measures torque, the tendency of a force to rotate an object about some axis
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Torque_Sensor = this.toIri().concat('Torque_Sensor');
    /**
     * **[brick:Touchpanel](https://brickschema.org/schema/Brick#Touchpanel)**
     *
     * A switch used to operate all or part of a lighting installation that uses a touch-based mechanism (typically resistive or capacitive) rather than a mechanical actuator
     *
     * @type        class
     * @parent      brick:Interface
     */
    Touchpanel = this.toIri().concat('Touchpanel');
    /**
     * **[brick:Trace_Heat_Sensor](https://brickschema.org/schema/Brick#Trace_Heat_Sensor)**
     *
     * Measures the surface temperature of pipelines carrying temperature-sensitive products; typically used to avoid frosting/freezing
     *
     * @type        class
     * @parent      brick:Heat_Sensor
     */
    Trace_Heat_Sensor = this.toIri().concat('Trace_Heat_Sensor');
    /**
     * **[brick:Transformer](https://brickschema.org/schema/Brick#Transformer)**
     *
     * A Transformer is usually fed by a high-voltage source and then steps down the voltage to a lower-voltage feed for low-voltage application (such as lights). Transformers also can step up voltage, but this generally does not apply to in building distribution.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    Transformer = this.toIri().concat('Transformer');
    /**
     * **[brick:Transformer_Room](https://brickschema.org/schema/Brick#Transformer_Room)**
     *
     * An electrical room where electricity enters and is transformed to different voltages and currents by the equipment contained in the room
     *
     * @type        class
     * @parent      brick:Electrical_Room
     */
    Transformer_Room = this.toIri().concat('Transformer_Room');
    /**
     * **[brick:Tunnel](https://brickschema.org/schema/Brick#Tunnel)**
     *
     * An enclosed space that connects buildings. Often underground
     *
     * @type        class
     * @parent      brick:Space
     */
    Tunnel = this.toIri().concat('Tunnel');
    /**
     * **[brick:Underfloor_Air_Plenum](https://brickschema.org/schema/Brick#Underfloor_Air_Plenum)**
     *
     * An open space between a structural concrete slab and the underside of a raised access floor system that connects to an air handling unit to receive conditioned and/or ventilating air before delivery to the room(s)
     *
     * @type        class
     * @parent      brick:Supply_Air_Plenum
     */
    Underfloor_Air_Plenum = this.toIri().concat('Underfloor_Air_Plenum');
    /**
     * **[brick:Underfloor_Air_Plenum_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Underfloor_Air_Plenum_Static_Pressure_Sensor)**
     *
     * Measures the outward push of air against the plenum surfaces and used to measure the resistance when air moves through the plenum
     *
     * @type        class
     * @parent      brick:Static_Pressure_Sensor
     */
    Underfloor_Air_Plenum_Static_Pressure_Sensor = this.toIri().concat('Underfloor_Air_Plenum_Static_Pressure_Sensor');
    /**
     * **[brick:Underfloor_Air_Plenum_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Underfloor_Air_Plenum_Static_Pressure_Setpoint)**
     *
     * Sets the underfloor air plenum static pressure
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    Underfloor_Air_Plenum_Static_Pressure_Setpoint = this.toIri().concat('Underfloor_Air_Plenum_Static_Pressure_Setpoint');
    /**
     * **[brick:Underfloor_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Underfloor_Air_Temperature_Sensor)**
     *
     * Measures the temperature of underfloor air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    Underfloor_Air_Temperature_Sensor = this.toIri().concat('Underfloor_Air_Temperature_Sensor');
    /**
     * **[brick:Unit_Failure_Alarm](https://brickschema.org/schema/Brick#Unit_Failure_Alarm)**
     *
     * An alarm that indicates the failure of an equipment or device
     *
     * @type        class
     * @parent      brick:Failure_Alarm
     */
    Unit_Failure_Alarm = this.toIri().concat('Unit_Failure_Alarm');
    /**
     * **[brick:Unoccupied_Air_Temperature_Cooling_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Air_Temperature_Cooling_Setpoint)**
     *
     * Sets temperature of air when unoccupied for cooling
     *
     * @type        class
     * @parent      brick:Cooling_Temperature_Setpoint
     */
    Unoccupied_Air_Temperature_Cooling_Setpoint = this.toIri().concat('Unoccupied_Air_Temperature_Cooling_Setpoint');
    /**
     * **[brick:Unoccupied_Air_Temperature_Heating_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Air_Temperature_Heating_Setpoint)**
     *
     * Sets temperature of air when unoccupied for heating
     *
     * @type        class
     * @parent      brick:Heating_Temperature_Setpoint
     */
    Unoccupied_Air_Temperature_Heating_Setpoint = this.toIri().concat('Unoccupied_Air_Temperature_Heating_Setpoint');
    /**
     * **[brick:Unoccupied_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Air_Temperature_Setpoint)**
     *
     * Sets temperature of air when unoccupied
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Unoccupied_Air_Temperature_Setpoint = this.toIri().concat('Unoccupied_Air_Temperature_Setpoint');
    /**
     * **[brick:Unoccupied_Cooling_Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Cooling_Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow for cooling when unoccupied
     *
     * @type        class
     * @parent      brick:Cooling_Discharge_Air_Flow_Setpoint
     */
    Unoccupied_Cooling_Discharge_Air_Flow_Setpoint = this.toIri().concat('Unoccupied_Cooling_Discharge_Air_Flow_Setpoint');
    /**
     * **[brick:Unoccupied_Discharge_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Discharge_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint
     */
    Unoccupied_Discharge_Air_Temperature_Setpoint = this.toIri().concat('Unoccupied_Discharge_Air_Temperature_Setpoint');
    /**
     * **[brick:Unoccupied_Load_Shed_Command](https://brickschema.org/schema/Brick#Unoccupied_Load_Shed_Command)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Command
     */
    Unoccupied_Load_Shed_Command = this.toIri().concat('Unoccupied_Load_Shed_Command');
    /**
     * **[brick:Unoccupied_Return_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Return_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Return_Air_Temperature_Setpoint
     */
    Unoccupied_Return_Air_Temperature_Setpoint = this.toIri().concat('Unoccupied_Return_Air_Temperature_Setpoint');
    /**
     * **[brick:Unoccupied_Room_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Room_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Room_Air_Temperature_Setpoint
     */
    Unoccupied_Room_Air_Temperature_Setpoint = this.toIri().concat('Unoccupied_Room_Air_Temperature_Setpoint');
    /**
     * **[brick:Unoccupied_Supply_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Supply_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Supply_Air_Temperature_Setpoint
     */
    Unoccupied_Supply_Air_Temperature_Setpoint = this.toIri().concat('Unoccupied_Supply_Air_Temperature_Setpoint');
    /**
     * **[brick:Unoccupied_Zone_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Zone_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Unoccupied_Air_Temperature_Setpoint
     */
    Unoccupied_Zone_Air_Temperature_Setpoint = this.toIri().concat('Unoccupied_Zone_Air_Temperature_Setpoint');
    /**
     * **[brick:Usage_Sensor](https://brickschema.org/schema/Brick#Usage_Sensor)**
     *
     * Measures the amount of some substance that is consumed or used, over some period of time
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Usage_Sensor = this.toIri().concat('Usage_Sensor');
    /**
     * **[brick:VAV](https://brickschema.org/schema/Brick#VAV)**
     *
     * See Variable_Air_Volume_Box
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    VAV = this.toIri().concat('VAV');
    /**
     * **[brick:VFD](https://brickschema.org/schema/Brick#VFD)**
     *
     * Electronic device that varies its output frequency to vary the rotating speed of a motor, given a fixed input frequency. Used with fans or pumps to vary the flow in the system as a function of a maintained pressure.
     *
     * @type        class
     * @parent      brick:Motor
     */
    VFD = this.toIri().concat('VFD');
    /**
     * **[brick:VFD_Enable_Command](https://brickschema.org/schema/Brick#VFD_Enable_Command)**
     *
     * Enables operation of a variable frequency drive
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    VFD_Enable_Command = this.toIri().concat('VFD_Enable_Command');
    /**
     * **[brick:Valve](https://brickschema.org/schema/Brick#Valve)**
     *
     * A device that regulates, directs or controls the flow of a fluid by opening, closing or partially obstructing various passageways
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    Valve = this.toIri().concat('Valve');
    /**
     * **[brick:Valve_Command](https://brickschema.org/schema/Brick#Valve_Command)**
     *
     * Controls or reports the openness of a valve (typically as a proportion of its full range of motion)
     *
     * @type        class
     * @parent      brick:Command
     */
    Valve_Command = this.toIri().concat('Valve_Command');
    /**
     * **[brick:Valve_Position_Sensor](https://brickschema.org/schema/Brick#Valve_Position_Sensor)**
     *
     * Measures the current position of a valve in terms of the percent of fully open
     *
     * @type        class
     * @parent      brick:Position_Sensor
     */
    Valve_Position_Sensor = this.toIri().concat('Valve_Position_Sensor');
    /**
     * **[brick:Variable_Air_Volume_Box](https://brickschema.org/schema/Brick#Variable_Air_Volume_Box)**
     *
     * A device that regulates the volume and temperature of air delivered to a zone by opening or closing a damper
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    Variable_Air_Volume_Box = this.toIri().concat('Variable_Air_Volume_Box');
    /**
     * **[brick:Variable_Air_Volume_Box_With_Reheat](https://brickschema.org/schema/Brick#Variable_Air_Volume_Box_With_Reheat)**
     *
     * A VAV box with a reheat coil mounted on the discharge end of the unit that can heat the air delivered to a zone
     *
     * @type        class
     * @parent      brick:Variable_Air_Volume_Box
     */
    Variable_Air_Volume_Box_With_Reheat = this.toIri().concat('Variable_Air_Volume_Box_With_Reheat');
    /**
     * **[brick:Variable_Frequency_Drive](https://brickschema.org/schema/Brick#Variable_Frequency_Drive)**
     *
     * Electronic device that varies its output frequency to vary the rotating speed of a motor, given a fixed input frequency. Used with fans or pumps to vary the flow in the system as a function of a maintained pressure.
     *
     * @type        class
     * @parent      brick:Motor
     */
    Variable_Frequency_Drive = this.toIri().concat('Variable_Frequency_Drive');
    /**
     * **[brick:Velocity_Pressure](https://brickschema.org/schema/Brick#Velocity_Pressure)**
     *
     * Dynamic Pressure (indicated with q, or Q, and sometimes called velocity pressure) is the quantity defined by: (q = 1/2 * ρ v^{2}), where (using SI units),  (q) is dynamic pressure in (pascals), (ρ) is fluid density in (kg/m^{3}) (for example, density of air) and (v ) is fluid velocity in (m/s).
     *
     * @type        instance
     */
    Velocity_Pressure = this.toIri().concat('Velocity_Pressure');
    /**
     * **[brick:Velocity_Pressure_Sensor](https://brickschema.org/schema/Brick#Velocity_Pressure_Sensor)**
     *
     * Measures the difference between total pressure and static pressure
     *
     * @type        class
     * @parent      brick:Pressure_Sensor
     */
    Velocity_Pressure_Sensor = this.toIri().concat('Velocity_Pressure_Sensor');
    /**
     * **[brick:Velocity_Pressure_Setpoint](https://brickschema.org/schema/Brick#Velocity_Pressure_Setpoint)**
     *
     * Sets static veloicty pressure
     *
     * @type        class
     * @parent      brick:Pressure_Setpoint
     */
    Velocity_Pressure_Setpoint = this.toIri().concat('Velocity_Pressure_Setpoint');
    /**
     * **[brick:Vent_Operating_Mode_Status](https://brickschema.org/schema/Brick#Vent_Operating_Mode_Status)**
     *
     * Indicates the current operating mode of a vent
     *
     * @type        class
     * @parent      brick:Operating_Mode_Status
     */
    Vent_Operating_Mode_Status = this.toIri().concat('Vent_Operating_Mode_Status');
    /**
     * **[brick:Ventilation_Air_Flow_Ratio_Limit](https://brickschema.org/schema/Brick#Ventilation_Air_Flow_Ratio_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Ventilation_Air_Flow_Ratio_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    Ventilation_Air_Flow_Ratio_Limit = this.toIri().concat('Ventilation_Air_Flow_Ratio_Limit');
    /**
     * **[brick:Ventilation_Air_System](https://brickschema.org/schema/Brick#Ventilation_Air_System)**
     *
     * The equipment, devices, and conduits that handle the introduction and distribution of ventilation air in the building
     *
     * @type        class
     * @parent      brick:Air_System
     */
    Ventilation_Air_System = this.toIri().concat('Ventilation_Air_System');
    /**
     * **[brick:Vertical_Space](https://brickschema.org/schema/Brick#Vertical_Space)**
     *
     * A class of spaces used to connect multiple floors or levels..
     *
     * @type        class
     * @parent      brick:Space
     */
    Vertical_Space = this.toIri().concat('Vertical_Space');
    /**
     * **[brick:Video_Intercom](https://brickschema.org/schema/Brick#Video_Intercom)**
     *
     * @type        class
     * @parent      brick:Intercom_Equipment
     */
    Video_Intercom = this.toIri().concat('Video_Intercom');
    /**
     * **[brick:Video_Surveillance_Equipment](https://brickschema.org/schema/Brick#Video_Surveillance_Equipment)**
     *
     * @type        class
     * @parent      brick:Security_Equipment
     */
    Video_Surveillance_Equipment = this.toIri().concat('Video_Surveillance_Equipment');
    /**
     * **[brick:Visitor_Lobby](https://brickschema.org/schema/Brick#Visitor_Lobby)**
     *
     * A lobby for visitors to the building. Sometimes used to distinguish from an employee entrance looby
     *
     * @type        class
     * @parent      brick:Lobby
     */
    Visitor_Lobby = this.toIri().concat('Visitor_Lobby');
    /**
     * **[brick:Voltage](https://brickschema.org/schema/Brick#Voltage)**
     *
     * Voltage, also referred to as Electric Tension, is the difference between electrical potentials of two points. For an electric field within a medium, (U_{ab} = - \int_{r_a}^{r_b} E . {dr}), where (E) is electric field strength. For an irrotational electric field, the voltage is independent of the path between the two points (a) and (b).
     *
     * @type        instance
     */
    Voltage = this.toIri().concat('Voltage');
    /**
     * **[brick:VoltageAngle](https://brickschema.org/schema/Brick#Voltage_Angle)**
     *
     * Angle of voltage phasor
     *
     * @type        instance
     */
    Voltage_Angle = this.toIri().concat('Voltage_Angle');
    /**
     * **[brick:VoltageImbalance](https://brickschema.org/schema/Brick#Voltage_Imbalance)**
     *
     * The percent deviation from average voltage
     *
     * @type        instance
     */
    Voltage_Imbalance = this.toIri().concat('Voltage_Imbalance');
    /**
     * **[brick:Voltage_Imbalance_Sensor](https://brickschema.org/schema/Brick#Voltage_Imbalance_Sensor)**
     *
     * A sensor which measures the voltage difference (imbalance) between phases of an electrical system
     *
     * @type        class
     * @parent      brick:Imbalance_Sensor
     */
    Voltage_Imbalance_Sensor = this.toIri().concat('Voltage_Imbalance_Sensor');
    /**
     * **[brick:Voltage_Sensor](https://brickschema.org/schema/Brick#Voltage_Sensor)**
     *
     * Measures the voltage of an electrical device or object
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Voltage_Sensor = this.toIri().concat('Voltage_Sensor');
    /**
     * **[brick:VolumeShape](https://brickschema.org/schema/Brick#VolumeShape)**
     *
     * @type        class
     */
    VolumeShape = this.toIri().concat('VolumeShape');
    /**
     * **[brick:Wardrobe](https://brickschema.org/schema/Brick#Wardrobe)**
     *
     * Storage for clothing, costumes, or uniforms
     *
     * @type        class
     * @parent      brick:Room
     */
    Wardrobe = this.toIri().concat('Wardrobe');
    /**
     * **[brick:Warm_Cool_Adjust_Sensor](https://brickschema.org/schema/Brick#Warm_Cool_Adjust_Sensor)**
     *
     * User provided adjustment of zone temperature, typically in the range of +/- 5 degrees
     *
     * @type        class
     * @parent      brick:Adjust_Sensor
     */
    Warm_Cool_Adjust_Sensor = this.toIri().concat('Warm_Cool_Adjust_Sensor');
    /**
     * **[brick:Warmest_Zone_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Warmest_Zone_Air_Temperature_Sensor)**
     *
     * The zone temperature that is warmest; drives the supply temperature of cold air. A computed value rather than a physical sensor. Also referred to as a 'Highest Zone Air Temperature Sensor'
     *
     * @type        class
     * @parent      brick:Zone_Air_Temperature_Sensor
     */
    Warmest_Zone_Air_Temperature_Sensor = this.toIri().concat('Warmest_Zone_Air_Temperature_Sensor');
    /**
     * **[brick:Waste_Storage](https://brickschema.org/schema/Brick#Waste_Storage)**
     *
     * A room used for storing waste such as trash or recycling
     *
     * @type        class
     * @parent      brick:Storage_Room
     */
    Waste_Storage = this.toIri().concat('Waste_Storage');
    /**
     * **[brick:Water](https://brickschema.org/schema/Brick#Water)**
     *
     * transparent, odorless, tasteless liquid; a compound of hydrogen and oxygen (H2O), containing 11.188% hydrogen and 88.812% oxygen by mass; freezing at 32°F (0°C); boiling near 212°F (100°C).
     *
     * @type        class
     * @parent      brick:Liquid
     */
    Water = this.toIri().concat('Water');
    /**
     * **[brick:Water_Alarm](https://brickschema.org/schema/Brick#Water_Alarm)**
     *
     * Alarm that indicates an undesirable event with a pipe, container, or equipment carrying water e.g. water leak
     *
     * @type        class
     * @parent      brick:Alarm
     */
    Water_Alarm = this.toIri().concat('Water_Alarm');
    /**
     * **[brick:Water_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Water_Differential_Pressure_Setpoint)**
     *
     * Sets the target water differential pressure between an upstream and downstream point in a water pipe or conduit
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint
     */
    Water_Differential_Pressure_Setpoint = this.toIri().concat('Water_Differential_Pressure_Setpoint');
    /**
     * **[brick:Water_Differential_Temperature_Sensor](https://brickschema.org/schema/Brick#Water_Differential_Temperature_Sensor)**
     *
     * Measures the difference in water temperature between an upstream and downstream point in a pipe or conduit
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    Water_Differential_Temperature_Sensor = this.toIri().concat('Water_Differential_Temperature_Sensor');
    /**
     * **[brick:Water_Differential_Temperature_Setpoint](https://brickschema.org/schema/Brick#Water_Differential_Temperature_Setpoint)**
     *
     * Sets the target differential temperature between the start and end of a heat transfer cycle in a water circuit
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    Water_Differential_Temperature_Setpoint = this.toIri().concat('Water_Differential_Temperature_Setpoint');
    /**
     * **[brick:Water_Distribution](https://brickschema.org/schema/Brick#Water_Distribution)**
     *
     * Utilize a water distribution source to represent how water is distributed across multiple destinations (pipes)
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Water_Distribution = this.toIri().concat('Water_Distribution');
    /**
     * **[brick:Water_Flow_Sensor](https://brickschema.org/schema/Brick#Water_Flow_Sensor)**
     *
     * Measures the rate of flow of water
     *
     * @type        class
     * @parent      brick:Flow_Sensor
     */
    Water_Flow_Sensor = this.toIri().concat('Water_Flow_Sensor');
    /**
     * **[brick:Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of water
     *
     * @type        class
     * @parent      brick:Flow_Setpoint
     */
    Water_Flow_Setpoint = this.toIri().concat('Water_Flow_Setpoint');
    /**
     * **[brick:Water_Heater](https://brickschema.org/schema/Brick#Water_Heater)**
     *
     * An apparatus for heating and usually storing hot water
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Water_Heater = this.toIri().concat('Water_Heater');
    /**
     * **[brick:Water_Level_Alarm](https://brickschema.org/schema/Brick#Water_Level_Alarm)**
     *
     * An alarm that indicates a high or low water level e.g. in a basin
     *
     * @type        class
     * @parent      brick:Water_Alarm
     */
    Water_Level_Alarm = this.toIri().concat('Water_Level_Alarm');
    /**
     * **[brick:Water_Level_Sensor](https://brickschema.org/schema/Brick#Water_Level_Sensor)**
     *
     * Measures the height/level of water in some container
     *
     * @type        class
     * @parent      brick:Sensor
     */
    Water_Level_Sensor = this.toIri().concat('Water_Level_Sensor');
    /**
     * **[brick:Water_Loop](https://brickschema.org/schema/Brick#Water_Loop)**
     *
     * A collection of equipment that transport and regulate water among each other
     *
     * @type        class
     * @parent      brick:Loop
     */
    Water_Loop = this.toIri().concat('Water_Loop');
    /**
     * **[brick:Water_Loss_Alarm](https://brickschema.org/schema/Brick#Water_Loss_Alarm)**
     *
     * An alarm that indicates a loss of water e.g. during transport
     *
     * @type        class
     * @parent      brick:Water_Alarm
     */
    Water_Loss_Alarm = this.toIri().concat('Water_Loss_Alarm');
    /**
     * **[brick:Water_Meter](https://brickschema.org/schema/Brick#Water_Meter)**
     *
     * A meter that measures the usage or consumption of water
     *
     * @type        class
     * @parent      brick:Meter
     */
    Water_Meter = this.toIri().concat('Water_Meter');
    /**
     * **[brick:Water_Pump](https://brickschema.org/schema/Brick#Water_Pump)**
     *
     * A pump that performs work on water
     *
     * @type        class
     * @parent      brick:Pump
     */
    Water_Pump = this.toIri().concat('Water_Pump');
    /**
     * **[brick:Water_System](https://brickschema.org/schema/Brick#Water_System)**
     *
     * The equipment, devices and conduits that handle the production and distribution of water in a building
     *
     * @type        class
     * @parent      brick:Heating_Ventilation_Air_Conditioning_System
     */
    Water_System = this.toIri().concat('Water_System');
    /**
     * **[brick:Water_Tank](https://brickschema.org/schema/Brick#Water_Tank)**
     *
     * A space used to hold water
     *
     * @type        class
     * @parent      brick:Space
     */
    Water_Tank = this.toIri().concat('Water_Tank');
    /**
     * **[brick:Water_Temperature_Alarm](https://brickschema.org/schema/Brick#Water_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with temperature of water.
     *
     * @type        class
     * @parent      brick:Temperature_Alarm
     */
    Water_Temperature_Alarm = this.toIri().concat('Water_Temperature_Alarm');
    /**
     * **[brick:Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Water_Temperature_Sensor)**
     *
     * Measures the temperature of water
     *
     * @type        class
     * @parent      brick:Temperature_Sensor
     */
    Water_Temperature_Sensor = this.toIri().concat('Water_Temperature_Sensor');
    /**
     * **[brick:Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Water_Temperature_Setpoint)**
     *
     * Sets temperature of water
     *
     * @type        class
     * @parent      brick:Temperature_Setpoint
     */
    Water_Temperature_Setpoint = this.toIri().concat('Water_Temperature_Setpoint');
    /**
     * **[brick:Water_Usage_Sensor](https://brickschema.org/schema/Brick#Water_Usage_Sensor)**
     *
     * Measures the amount of water that is consumed, over some period of time
     *
     * @type        class
     * @parent      brick:Usage_Sensor
     */
    Water_Usage_Sensor = this.toIri().concat('Water_Usage_Sensor');
    /**
     * **[brick:Water_Valve](https://brickschema.org/schema/Brick#Water_Valve)**
     *
     * A valve that modulates the flow of water
     *
     * @type        class
     * @parent      brick:Valve
     */
    Water_Valve = this.toIri().concat('Water_Valve');
    /**
     * **[brick:Weather_Condition](https://brickschema.org/schema/Brick#Weather_Condition)**
     *
     * @type        instance
     */
    Weather_Condition = this.toIri().concat('Weather_Condition');
    /**
     * **[brick:Weather_Station](https://brickschema.org/schema/Brick#Weather_Station)**
     *
     * A dedicated weather measurement station
     *
     * @type        class
     * @parent      brick:Equipment
     */
    Weather_Station = this.toIri().concat('Weather_Station');
    /**
     * **[brick:Wet_Bulb_Temperature](https://brickschema.org/schema/Brick#Wet_Bulb_Temperature)**
     *
     * The temperature read by a thermometer covered in water-soaked cloth (wet-bulb thermometer) over which air is passed. A wet-bulb thermometer indicates a temperature close to the true (thermodynamic) wet-bulb temperature. The wet-bulb temperature is the lowest temperature that can be reached under current ambient conditions by the evaporation of water only.  DBT is the temperature that is usually thought of as air temperature, and it is the true thermodynamic temperature. It indicates the amount of heat in the air and is directly proportional to the mean kinetic energy of the air molecule. (https://en.wikipedia.org/wiki/Wet-bulb_temperature)
     *
     * @type        instance
     */
    Wet_Bulb_Temperature = this.toIri().concat('Wet_Bulb_Temperature');
    /**
     * **[brick:Wind_Direction](https://brickschema.org/schema/Brick#Wind_Direction)**
     *
     * Direction of wind relative to North
     *
     * @type        instance
     */
    Wind_Direction = this.toIri().concat('Wind_Direction');
    /**
     * **[brick:Wind_Direction_Sensor](https://brickschema.org/schema/Brick#Wind_Direction_Sensor)**
     *
     * Measures the direction of wind in degrees relative to North
     *
     * @type        class
     * @parent      brick:Direction_Sensor
     */
    Wind_Direction_Sensor = this.toIri().concat('Wind_Direction_Sensor');
    /**
     * **[brick:Wind_Speed](https://brickschema.org/schema/Brick#Wind_Speed)**
     *
     * Measured speed of wind, caused by air moving from high to low pressure
     *
     * @type        instance
     */
    Wind_Speed = this.toIri().concat('Wind_Speed');
    /**
     * **[brick:Wind_Speed_Sensor](https://brickschema.org/schema/Brick#Wind_Speed_Sensor)**
     *
     * Measured speed of wind, caused by air moving from high to low pressure
     *
     * @type        class
     * @parent      brick:Speed_Sensor
     */
    Wind_Speed_Sensor = this.toIri().concat('Wind_Speed_Sensor');
    /**
     * **[brick:Wing](https://brickschema.org/schema/Brick#Wing)**
     *
     * A wing is part of a building – or any feature of a building – that is subordinate to the main, central structure.
     *
     * @type        class
     * @parent      brick:Location
     */
    Wing = this.toIri().concat('Wing');
    /**
     * **[brick:Workshop](https://brickschema.org/schema/Brick#Workshop)**
     *
     * A space used to house equipment that can be used to repair or fabricate things
     *
     * @type        class
     * @parent      brick:Room
     */
    Workshop = this.toIri().concat('Workshop');
    /**
     * **[brick:YearBuiltShape](https://brickschema.org/schema/Brick#YearBuiltShape)**
     *
     * @type        class
     */
    YearBuiltShape = this.toIri().concat('YearBuiltShape');
    /**
     * **[brick:Zone](https://brickschema.org/schema/Brick#Zone)**
     *
     * (1) a separately controlled heated or cooled space. (2) one occupied space or several occupied spaces with similar occupancy category, occupant density, zone air distribution effectiveness, and zone primary airflow per unit area. (3) space or group of spaces within a building for which the heating, cooling, or lighting requirements are sufficiently similar that desired conditions can be maintained throughout by a single controlling device.
     *
     * @type        class
     * @parent      brick:Location
     */
    Zone = this.toIri().concat('Zone');
    /**
     * **[brick:Zone_Air](https://brickschema.org/schema/Brick#Zone_Air)**
     *
     * air inside a defined zone (e.g., corridors).
     *
     * @type        class
     * @parent      brick:Air
     */
    Zone_Air = this.toIri().concat('Zone_Air');
    /**
     * **[brick:Zone_Air_Cooling_Temperature_Setpoint](https://brickschema.org/schema/Brick#Zone_Air_Cooling_Temperature_Setpoint)**
     *
     * The upper (cooling) setpoint for zone air temperature
     *
     * @type        class
     * @parent      brick:Cooling_Temperature_Setpoint
     */
    Zone_Air_Cooling_Temperature_Setpoint = this.toIri().concat('Zone_Air_Cooling_Temperature_Setpoint');
    /**
     * **[brick:Zone_Air_Dewpoint_Sensor](https://brickschema.org/schema/Brick#Zone_Air_Dewpoint_Sensor)**
     *
     * Measures dewpoint of zone air
     *
     * @type        class
     * @parent      brick:Dewpoint_Sensor
     */
    Zone_Air_Dewpoint_Sensor = this.toIri().concat('Zone_Air_Dewpoint_Sensor');
    /**
     * **[brick:Zone_Air_Heating_Temperature_Setpoint](https://brickschema.org/schema/Brick#Zone_Air_Heating_Temperature_Setpoint)**
     *
     * The lower (heating) setpoint for zone air temperature
     *
     * @type        class
     * @parent      brick:Heating_Temperature_Setpoint
     */
    Zone_Air_Heating_Temperature_Setpoint = this.toIri().concat('Zone_Air_Heating_Temperature_Setpoint');
    /**
     * **[brick:Zone_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Zone_Air_Humidity_Sensor)**
     *
     * Measures the relative humidity of zone air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    Zone_Air_Humidity_Sensor = this.toIri().concat('Zone_Air_Humidity_Sensor');
    /**
     * **[brick:Zone_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Zone_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for zone air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    Zone_Air_Humidity_Setpoint = this.toIri().concat('Zone_Air_Humidity_Setpoint');
    /**
     * **[brick:Zone_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Zone_Air_Temperature_Sensor)**
     *
     * Measures the temperature of air in a zone
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    Zone_Air_Temperature_Sensor = this.toIri().concat('Zone_Air_Temperature_Sensor');
    /**
     * **[brick:Zone_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Zone_Air_Temperature_Setpoint)**
     *
     * Sets temperature of zone air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    Zone_Air_Temperature_Setpoint = this.toIri().concat('Zone_Air_Temperature_Setpoint');
    /**
     * **[brick:Zone_Standby_Load_Shed_Command](https://brickschema.org/schema/Brick#Zone_Standby_Load_Shed_Command)**
     *
     * @type        class
     * @parent      brick:Standby_Load_Shed_Command
     */
    Zone_Standby_Load_Shed_Command = this.toIri().concat('Zone_Standby_Load_Shed_Command');
    /**
     * **[brick:Zone_Unoccupied_Load_Shed_Command](https://brickschema.org/schema/Brick#Zone_Unoccupied_Load_Shed_Command)**
     *
     * @type        class
     * @parent      brick:Unoccupied_Load_Shed_Command
     */
    Zone_Unoccupied_Load_Shed_Command = this.toIri().concat('Zone_Unoccupied_Load_Shed_Command');
    /**
     * **[brick:aggregate](https://brickschema.org/schema/Brick#aggregate)**
     *
     * Description of how the dta for this point is aggregated
     *
     * @type        property
     * @domain      brick:Point
     * @range       brick:AggregationShape
     */
    aggregate = this.toIri().concat('aggregate');
    /**
     * **[brick:area](https://brickschema.org/schema/Brick#area)**
     *
     * Entity has 2-dimensional area
     *
     * @type        property
     * @range       brick:AreaShape
     */
    area = this.toIri().concat('area');
    /**
     * **[brick:azimuth](https://brickschema.org/schema/Brick#azimuth)**
     *
     * (Horizontal) angle between a projected vector and a reference vector (typically a compass bearing). The projected vector usually indicates the direction of a face or plane.
     *
     * @type        property
     * @range       brick:AzimuthShape
     */
    azimuth = this.toIri().concat('azimuth');
    /**
     * **[brick:buildingPrimaryFunction](https://brickschema.org/schema/Brick#buildingPrimaryFunction)**
     *
     * Enumerated string applied to a site record to indicate the building's primary function. The list of primary functions is derived from the US Energy Star program (adopted from Project Haystack)
     *
     * @type        property
     * @domain      brick:Building
     * @range       brick:BuildingPrimaryFunctionShape
     */
    buildingPrimaryFunction = this.toIri().concat('buildingPrimaryFunction');
    /**
     * **[brick:buildingThermalTransmittance](https://brickschema.org/schema/Brick#buildingThermalTransmittance)**
     *
     * The area-weighted average heat transfer coefficient (commonly referred to as a U-value) for a building envelope
     *
     * @type        property
     * @parent      brick:thermalTransmittance
     * @domain      brick:Building
     * @range       brick:ThermalTransmittanceShape
     */
    buildingThermalTransmittance = this.toIri().concat('buildingThermalTransmittance');
    /**
     * **[brick:conversionEfficiency](https://brickschema.org/schema/Brick#conversionEfficiency)**
     *
     * The percent efficiency of the conversion process (usually to power or energy) carried out by the entity
     *
     * @type        property
     * @range       brick:EfficiencyShape
     */
    conversionEfficiency = this.toIri().concat('conversionEfficiency');
    /**
     * **[brick:coolingCapacity](https://brickschema.org/schema/Brick#coolingCapacity)**
     *
     * Measurement of a chiller ability to remove heat (adopted from Project Haystack)
     *
     * @type        property
     * @domain      brick:Chiller
     * @range       brick:CoolingCapacityShape
     */
    coolingCapacity = this.toIri().concat('coolingCapacity');
    /**
     * **[brick:coordinates](https://brickschema.org/schema/Brick#coordinates)**
     *
     * The location of an entity in latitude/longitude
     *
     * @type        property
     * @range       brick:CoordinateShape
     */
    coordinates = this.toIri().concat('coordinates');
    /**
     * **[brick:currentFlowType](https://brickschema.org/schema/Brick#currentFlowType)**
     *
     * The current flow type of the entity
     *
     * @type        property
     * @range       brick:CurrentFlowTypeShape
     */
    currentFlowType = this.toIri().concat('currentFlowType');
    /**
     * **[brick:electricalPhaseCount](https://brickschema.org/schema/Brick#electricalPhaseCount)**
     *
     * Entity has these phases
     *
     * @type        property
     * @range       brick:PhaseCountShape
     */
    electricalPhaseCount = this.toIri().concat('electricalPhaseCount');
    /**
     * **[brick:electricalPhases](https://brickschema.org/schema/Brick#electricalPhases)**
     *
     * Entity has these electrical AC phases
     *
     * @type        property
     * @range       brick:PhasesShape
     */
    electricalPhases = this.toIri().concat('electricalPhases');
    /**
     * **[brick:feeds](https://brickschema.org/schema/Brick#feeds)**
     *
     * The subject is upstream of the object in the context of some sequential process; some media is passed between them
     *
     * @type        property
     */
    feeds = this.toIri().concat('feeds');
    /**
     * **[brick:feedsAir](https://brickschema.org/schema/Brick#feedsAir)**
     *
     * Passes air
     *
     * @type        property
     * @parent      brick:feeds
     */
    feedsAir = this.toIri().concat('feedsAir');
    /**
     * **[brick:grossArea](https://brickschema.org/schema/Brick#grossArea)**
     *
     * Entity has gross 2-dimensional area
     *
     * @type        property
     * @parent      brick:area
     * @range       brick:AreaShape
     */
    grossArea = this.toIri().concat('grossArea');
    /**
     * **[brick:hasAddress](https://brickschema.org/schema/Brick#hasAddress)**
     *
     * To specify the address of a building.
     *
     * @type        property
     * @parent      http://www.w3.org/2006/vcard/ns#hasAddress
     * @domain      brick:Building
     * @range       http://www.w3.org/2006/vcard/ns#Address
     */
    hasAddress = this.toIri().concat('hasAddress');
    /**
     * **[brick:hasAssociatedTag](https://brickschema.org/schema/Brick#hasAssociatedTag)**
     *
     * The class is associated with the given tag
     *
     * @type        property
     * @domain      http://www.w3.org/2002/07/owl#Class
     * @range       brick:Tag
     */
    hasAssociatedTag = this.toIri().concat('hasAssociatedTag');
    /**
     * **[brick:hasInputSubstance](https://brickschema.org/schema/Brick#hasInputSubstance)**
     *
     * The subject receives the given substance as an input to its internal process
     *
     * @type        property
     * @range       brick:Substance
     */
    hasInputSubstance = this.toIri().concat('hasInputSubstance');
    /**
     * **[brick:hasLocation](https://brickschema.org/schema/Brick#hasLocation)**
     *
     * Subject is physically located in the location given by the object
     *
     * @type        property
     * @range       brick:Location
     */
    hasLocation = this.toIri().concat('hasLocation');
    /**
     * **[brick:hasOutputSubstance](https://brickschema.org/schema/Brick#hasOutputSubstance)**
     *
     * The subject produces or exports the given substance from its internal process
     *
     * @type        property
     * @range       brick:Substance
     */
    hasOutputSubstance = this.toIri().concat('hasOutputSubstance');
    /**
     * **[brick:hasPart](https://brickschema.org/schema/Brick#hasPart)**
     *
     * The subject is composed in part of the entity given by the object
     *
     * @type        property
     */
    hasPart = this.toIri().concat('hasPart');
    /**
     * **[brick:hasPoint](https://brickschema.org/schema/Brick#hasPoint)**
     *
     * The subject has a source of telemetry identified by the object. In some systems the source of telemetry may be represented as a digital/analog input/output point
     *
     * @type        property
     * @range       brick:Point
     */
    hasPoint = this.toIri().concat('hasPoint');
    /**
     * **[brick:hasQUDTReference](https://brickschema.org/schema/Brick#hasQUDTReference)**
     *
     * Points to the relevant QUDT definition
     *
     * @type        property
     */
    hasQUDTReference = this.toIri().concat('hasQUDTReference');
    /**
     * **[brick:hasTag](https://brickschema.org/schema/Brick#hasTag)**
     *
     * The subject has the given tag
     *
     * @type        property
     * @range       brick:Tag
     */
    hasTag = this.toIri().concat('hasTag');
    /**
     * **[brick:hasTimeseriesId](https://brickschema.org/schema/Brick#hasTimeseriesId)**
     *
     * The unique identifier (primary key) for this TimeseriesReference in some database
     *
     * @type        property
     * @domain      brick:TimeseriesReference
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    hasTimeseriesId = this.toIri().concat('hasTimeseriesId');
    /**
     * **[brick:hasUnit](https://brickschema.org/schema/Brick#hasUnit)**
     *
     * The QUDT unit associated with this Brick entity (usually a Brick Point instance or Entity Property)
     *
     * @type        property
     * @range       http://qudt.org/vocab/unit/Unit
     */
    hasUnit = this.toIri().concat('hasUnit');
    /**
     * **[brick:isAssociatedWith](https://brickschema.org/schema/Brick#isAssociatedWith)**
     *
     * The tag is associated with the given class
     *
     * @type        property
     * @domain      brick:Tag
     * @range       http://www.w3.org/2002/07/owl#Class
     */
    isAssociatedWith = this.toIri().concat('isAssociatedWith');
    /**
     * **[brick:isFedBy](https://brickschema.org/schema/Brick#isFedBy)**
     *
     * @type        property
     */
    isFedBy = this.toIri().concat('isFedBy');
    /**
     * **[brick:isLocationOf](https://brickschema.org/schema/Brick#isLocationOf)**
     *
     * Subject is the physical location encapsulating the object
     *
     * @type        property
     * @domain      brick:Location
     */
    isLocationOf = this.toIri().concat('isLocationOf');
    /**
     * **[brick:isMeasuredBy](https://brickschema.org/schema/Brick#isMeasuredBy)**
     *
     * @type        property
     * @domain      brick:Measurable
     * @range       brick:Point
     */
    isMeasuredBy = this.toIri().concat('isMeasuredBy');
    /**
     * **[brick:isPartOf](https://brickschema.org/schema/Brick#isPartOf)**
     *
     * @type        property
     */
    isPartOf = this.toIri().concat('isPartOf');
    /**
     * **[brick:isPointOf](https://brickschema.org/schema/Brick#isPointOf)**
     *
     * The subject is a source of telemetry related to the object. In some systems the source of telemetry may be represented as a digital/analog input/output point
     *
     * @type        property
     * @domain      brick:Point
     */
    isPointOf = this.toIri().concat('isPointOf');
    /**
     * **[brick:isRegulatedBy](https://brickschema.org/schema/Brick#isRegulatedBy)**
     *
     * @type        property
     * @domain      brick:Substance
     * @range       brick:Equipment
     */
    isRegulatedBy = this.toIri().concat('isRegulatedBy');
    /**
     * **[brick:isTagOf](https://brickschema.org/schema/Brick#isTagOf)**
     *
     * @type        property
     * @domain      brick:Tag
     */
    isTagOf = this.toIri().concat('isTagOf');
    /**
     * **[brick:latitutde](https://brickschema.org/schema/Brick#latitutde)**
     *
     * @type        property
     * @parent      http://schema.org/latitude
     */
    latitutde = this.toIri().concat('latitutde');
    /**
     * **[brick:longitude](https://brickschema.org/schema/Brick#longitude)**
     *
     * @type        property
     * @parent      http://schema.org/longitude
     */
    longitude = this.toIri().concat('longitude');
    /**
     * **[brick:measuredModuleConversionEfficiency](https://brickschema.org/schema/Brick#measuredModuleConversionEfficiency)**
     *
     * The measured percentage of sunlight that is converted into usable power
     *
     * @type        property
     * @parent      brick:conversionEfficiency
     * @domain      brick:PV_Panel
     * @range       brick:EfficiencyShape
     */
    measuredModuleConversionEfficiency = this.toIri().concat('measuredModuleConversionEfficiency');
    /**
     * **[brick:measuredPowerOutput](https://brickschema.org/schema/Brick#measuredPowerOutput)**
     *
     * The nominal measured power output of the entity
     *
     * @type        property
     * @range       brick:PowerOutputShape
     */
    measuredPowerOutput = this.toIri().concat('measuredPowerOutput');
    /**
     * **[brick:measures](https://brickschema.org/schema/Brick#measures)**
     *
     * The subject measures a quantity or substance given by the object
     *
     * @type        property
     * @domain      brick:Point
     * @range       brick:Measurable
     */
    measures = this.toIri().concat('measures');
    /**
     * **[brick:netArea](https://brickschema.org/schema/Brick#netArea)**
     *
     * Entity has net 2-dimensional area
     *
     * @type        property
     * @parent      brick:area
     * @range       brick:AreaShape
     */
    netArea = this.toIri().concat('netArea');
    /**
     * **[brick:operationalStage](https://brickschema.org/schema/Brick#operationalStage)**
     *
     * The associated operational stage
     *
     * @type        property
     * @range       brick:StageShape
     */
    operationalStage = this.toIri().concat('operationalStage');
    /**
     * **[brick:operationalStageCount](https://brickschema.org/schema/Brick#operationalStageCount)**
     *
     * The number of operational stages supported by this eqiupment
     *
     * @type        property
     * @domain      brick:Equipment
     * @range       brick:StageShape
     */
    operationalStageCount = this.toIri().concat('operationalStageCount');
    /**
     * **[brick:panelArea](https://brickschema.org/schema/Brick#panelArea)**
     *
     * Surface area of a panel, such as a PV panel
     *
     * @type        property
     * @parent      brick:area
     * @range       brick:AreaShape
     */
    panelArea = this.toIri().concat('panelArea');
    /**
     * **[brick:powerComplexity](https://brickschema.org/schema/Brick#powerComplexity)**
     *
     * Entity has this power complexity
     *
     * @type        property
     * @range       brick:PowerComplexityShape
     */
    powerComplexity = this.toIri().concat('powerComplexity');
    /**
     * **[brick:powerFlow](https://brickschema.org/schema/Brick#powerFlow)**
     *
     * Entity has this power flow relative to the building'
     *
     * @type        property
     * @range       brick:PowerFlowShape
     */
    powerFlow = this.toIri().concat('powerFlow');
    /**
     * **[brick:ratedModuleConversionEfficiency](https://brickschema.org/schema/Brick#ratedModuleConversionEfficiency)**
     *
     * The *rated* percentage of sunlight that is converted into usable power, as measured using Standard Test Conditions (STC): 1000 W/sqm irradiance, 25 degC panel temperature, no wind
     *
     * @type        property
     * @parent      brick:conversionEfficiency
     * @domain      brick:PV_Panel
     * @range       brick:EfficiencyShape
     */
    ratedModuleConversionEfficiency = this.toIri().concat('ratedModuleConversionEfficiency');
    /**
     * **[brick:ratedPowerOutput](https://brickschema.org/schema/Brick#ratedPowerOutput)**
     *
     * The nominal rated power output of the entity
     *
     * @type        property
     * @range       brick:PowerOutputShape
     */
    ratedPowerOutput = this.toIri().concat('ratedPowerOutput');
    /**
     * **[brick:regulates](https://brickschema.org/schema/Brick#regulates)**
     *
     * The subject contributes to or performs the regulation of the substance given by the object
     *
     * @type        property
     * @domain      brick:Equipment
     * @range       brick:Substance
     */
    regulates = this.toIri().concat('regulates');
    /**
     * **[brick:storedAt](https://brickschema.org/schema/Brick#storedAt)**
     *
     * A reference to where the data for this TimeseriesReference is stored
     *
     * @type        property
     * @domain      brick:TimeseriesReference
     */
    storedAt = this.toIri().concat('storedAt');
    /**
     * **[brick:temperatureCoefficientofPmax](https://brickschema.org/schema/Brick#temperatureCoefficientofPmax)**
     *
     * The % change in power output for every degree celsius that the entity is hotter than 25 degrees celsius
     *
     * @type        property
     * @range       brick:TemperatureCoefficientPerDegreeCelsiusShape
     */
    temperatureCoefficientofPmax = this.toIri().concat('temperatureCoefficientofPmax');
    /**
     * **[brick:thermalTransmittance](https://brickschema.org/schema/Brick#thermalTransmittance)**
     *
     * The area-weighted average heat transfer coefficient (commonly referred to as a U-value)
     *
     * @type        property
     * @range       brick:ThermalTransmittanceShape
     */
    thermalTransmittance = this.toIri().concat('thermalTransmittance');
    /**
     * **[brick:tilt](https://brickschema.org/schema/Brick#tilt)**
     *
     * The direction an entity is facing in degrees above the horizon
     *
     * @type        property
     * @range       brick:TiltShape
     */
    tilt = this.toIri().concat('tilt');
    /**
     * **[brick:timeseries](https://brickschema.org/schema/Brick#timeseries)**
     *
     * Relates a Brick point to the TimeseriesReference that indicates where and how the data for this point is stored
     *
     * @type        property
     * @domain      brick:Point
     * @range       brick:TimeseriesReference
     */
    timeseries = this.toIri().concat('timeseries');
    /**
     * **[brick:value](https://brickschema.org/schema/Brick#value)**
     *
     * The basic value of an entity property
     *
     * @type        property
     * @parent      http://qudt.org/schema/qudt/value
     */
    value = this.toIri().concat('value');
    /**
     * **[brick:volume](https://brickschema.org/schema/Brick#volume)**
     *
     * Entity has 3-dimensional volume
     *
     * @type        property
     * @range       brick:VolumeShape
     */
    volume = this.toIri().concat('volume');
    /**
     * **[brick:yearBuilt](https://brickschema.org/schema/Brick#yearBuilt)**
     *
     * Four digit year that a building was first built. (adopted from Project Haystack)
     *
     * @type        property
     * @domain      brick:Building
     * @range       brick:YearBuiltShape
     */
    yearBuilt = this.toIri().concat('yearBuilt');
}
/**
 * prefix **brick:** <<https://brickschema.org/schema/Brick#>>
 *
 * Brick: A uniform metadata schema for buildings
 *
 * Brick is an open-source effort to standardize semantic descriptions of the physical, logical and virtual assets in buildings and the relationships between them.  Brick consists of an extensible dictionary of terms and concepts in and around buildings, a set of relationships for linking and composing concepts together, and a flexible data model permitting seamless integration of Brick with existing tools and databases.  Through the use of powerful Semantic Web technology, Brick can describe the broad set of idiosyncratic and custom features, assets and subsystems found across the building stock in a consistent matter.
 *
 * Adopting Brick as the canonical description of a building enables the following:
 *
 * - Brick lowers the cost of deploying analytics, energy efficiency measures and intelligent controls across buildings
 * - Brick presents an integrated, cross-vendor representation of the multitude of subsystems in modern buildings: HVAC, lighting, fire, security and so on
 * - Brick simplifies the development of smart analytics and control applications
 * - Brick reduces the reliance upon the non-standard, unstructured labels endemic to building management systems
 *
 * Brick is free and open-sourced under the BSD 3-Clause license.  The source code for Brick, this website, and related tools developed by the Brick team are available on [GitHub](https://github.com/BrickSchema).
 */
const brick = new Vocabulary('https://brickschema.org/schema/Brick#');
export default brick;
//# sourceMappingURL=brick.js.map