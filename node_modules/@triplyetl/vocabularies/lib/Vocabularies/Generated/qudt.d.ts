/**
 * Quantities, Units, Dimensions and Types (QUDT)
 * qudt.ts (2023-08-08T17:30:09.334Z)
 */
import VocabularyBase from '../../Classes/Vocabulary.js';
declare class Vocabulary extends VocabularyBase<'http://qudt.org/schema/qudt/'> {
    /**
     * **[qudt:Quantity Kind (abstract)](http://qudt.org/schema/qudt/AbstractQuantityKind)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1b70c639f094d2293c49a589c217b2bb
     */
    readonly AbstractQuantityKind: import("../index.js").Iri<"http://qudt.org/schema/qudt/AbstractQuantityKind">;
    /**
     * **[qudt:Angle unit](http://qudt.org/schema/qudt/AngleUnit)**
     *
     * All units relating to specification of angles.
     *
     * @type        class
     * @parent      qudt:DimensionlessUnit
     */
    readonly AngleUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/AngleUnit">;
    /**
     * **[qudt:QUDT Aspect](http://qudt.org/schema/qudt/Aspect)**
     *
     * @type        class
     * @parent      http://www.w3.org/2002/07/owl#Thing
     */
    readonly Aspect: import("../index.js").Iri<"http://qudt.org/schema/qudt/Aspect">;
    /**
     * **[qudt:Aspect Class](http://qudt.org/schema/qudt/AspectClass)**
     *
     * @type        class
     * @parent      http://www.w3.org/2000/01/rdf-schema#Class
     */
    readonly AspectClass: import("../index.js").Iri<"http://qudt.org/schema/qudt/AspectClass">;
    /**
     * **[qudt:Base Dimension Magnitude](http://qudt.org/schema/qudt/BaseDimensionMagnitude)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/118aa94719d50ae864545ee4ce9a4615
     */
    readonly BaseDimensionMagnitude: import("../index.js").Iri<"http://qudt.org/schema/qudt/BaseDimensionMagnitude">;
    /**
     * **[qudt:Big Endian](http://qudt.org/schema/qudt/BigEndian)**
     *
     * @type        instance
     */
    readonly BigEndian: import("../index.js").Iri<"http://qudt.org/schema/qudt/BigEndian">;
    /**
     * **[qudt:Binary Prefix](http://qudt.org/schema/qudt/BinaryPrefix)**
     *
     * A <em>Binary Prefix</em> is a prefix for multiples of units in data processing, data transmission, and digital information, notably the bit and the byte, to indicate multiplication by a power of 2.
     *
     * @type        class
     * @parent      qudt:Prefix
     */
    readonly BinaryPrefix: import("../index.js").Iri<"http://qudt.org/schema/qudt/BinaryPrefix">;
    /**
     * **[qudt:Bit Encoding](http://qudt.org/schema/qudt/BitEncoding)**
     *
     * @type        instance
     */
    readonly BitEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/BitEncoding">;
    /**
     * **[qudt:Bit Encoding](http://qudt.org/schema/qudt/BitEncodingType)**
     *
     * A bit encoding is a correspondence between the two possible values of a bit, 0 or 1, and some interpretation. For example, in a boolean encoding, a bit denotes a truth value, where 0 corresponds to False and 1 corresponds to True.
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    readonly BitEncodingType: import("../index.js").Iri<"http://qudt.org/schema/qudt/BitEncodingType">;
    /**
     * **[qudt:Boolean Encoding](http://qudt.org/schema/qudt/BooleanEncoding)**
     *
     * @type        instance
     */
    readonly BooleanEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/BooleanEncoding">;
    /**
     * **[qudt:Boolean encoding type](http://qudt.org/schema/qudt/BooleanEncodingType)**
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    readonly BooleanEncodingType: import("../index.js").Iri<"http://qudt.org/schema/qudt/BooleanEncodingType">;
    /**
     * **[qudt:Byte Encoding](http://qudt.org/schema/qudt/ByteEncodingType)**
     *
     * This class contains the various ways that information may be encoded into bytes.
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    readonly ByteEncodingType: import("../index.js").Iri<"http://qudt.org/schema/qudt/ByteEncodingType">;
    /**
     * **[qudt:Countably Infinite Cardinality Type](http://qudt.org/schema/qudt/'CT_COUNTABLY-INFINITE')**
     *
     * A set of numbers is called countably infinite if there is a way to enumerate them.  Formally this is done with a bijection function that associates each number in the set with exactly one of the positive integers.  The set of all fractions is also countably infinite.  In other words, any set \(X\) that has the same cardinality as the set of the natural numbers, or \(| X | \; =  \; | \mathbb N | \; = \; \aleph0\), is said to be a countably infinite set.
     *
     * @type        instance
     */
    readonly 'CT_COUNTABLY-INFINITE': import("../index.js").Iri<"http://qudt.org/schema/qudt/CT_COUNTABLY-INFINITE">;
    /**
     * **[qudt:Finite Cardinality Type](http://qudt.org/schema/qudt/CT_FINITE)**
     *
     * Any set \(X\) with cardinality less than that of the natural numbers, or \(| X | \\; <  \; | \\mathbb N | \), is said to be a finite set.
     *
     * @type        instance
     */
    readonly CT_FINITE: import("../index.js").Iri<"http://qudt.org/schema/qudt/CT_FINITE">;
    /**
     * **[qudt:Uncountable Cardinality Type](http://qudt.org/schema/qudt/CT_UNCOUNTABLE)**
     *
     * Any set with cardinality greater than that of the natural numbers, or \(| X | \; >  \; | \mathbb N | \),  for example \(| R| \; =  \;  c  \; > |\mathbb N |\), is said to be uncountable.
     *
     * @type        instance
     */
    readonly CT_UNCOUNTABLE: import("../index.js").Iri<"http://qudt.org/schema/qudt/CT_UNCOUNTABLE">;
    /**
     * **[qudt:Cardinality Type](http://qudt.org/schema/qudt/CardinalityType)**
     *
     * In mathematics, the cardinality of a set is a measure of the number of elements of the set.  For example, the set \(A = {2, 4, 6}\) contains 3 elements, and therefore \(A\) has a cardinality of 3. There are two approaches to cardinality – one which compares sets directly using bijections and injections, and another which uses cardinal numbers.
     *
     * @type        class
     * @parent      qudt:EnumeratedValue
     */
    readonly CardinalityType: import("../index.js").Iri<"http://qudt.org/schema/qudt/CardinalityType">;
    /**
     * **[qudt:Char Encoding](http://qudt.org/schema/qudt/CharEncoding)**
     *
     * @type        instance
     */
    readonly CharEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/CharEncoding">;
    /**
     * **[qudt:Char Encoding Type](http://qudt.org/schema/qudt/CharEncodingType)**
     *
     * The class of all character encoding schemes, each of which defines a rule or algorithm for encoding character data as a sequence of bits or bytes.
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    readonly CharEncodingType: import("../index.js").Iri<"http://qudt.org/schema/qudt/CharEncodingType">;
    /**
     * **[qudt:Citation](http://qudt.org/schema/qudt/Citation)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/04ca2c945694cee5579c553aa95a7671
     */
    readonly Citation: import("../index.js").Iri<"http://qudt.org/schema/qudt/Citation">;
    /**
     * **[qudt:Comment](http://qudt.org/schema/qudt/Comment)**
     *
     * @type        class
     * @parent      http://www.w3.org/2002/07/owl#Thing
     */
    readonly Comment: import("../index.js").Iri<"http://qudt.org/schema/qudt/Comment">;
    /**
     * **[qudt:QUDT Concept](http://qudt.org/schema/qudt/Concept)**
     *
     * @type        class
     * @parent      http://www.w3.org/2002/07/owl#Thing
     */
    readonly Concept: import("../index.js").Iri<"http://qudt.org/schema/qudt/Concept">;
    /**
     * **[qudt:Constant value](http://qudt.org/schema/qudt/ConstantValue)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/16de4d083a8a64ea06809ad805920776
     */
    readonly ConstantValue: import("../index.js").Iri<"http://qudt.org/schema/qudt/ConstantValue">;
    /**
     * **[qudt:Counting Unit](http://qudt.org/schema/qudt/CountingUnit)**
     *
     * @type        class
     * @parent      qudt:DimensionlessUnit
     */
    readonly CountingUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/CountingUnit">;
    /**
     * **[qudt:Currency Unit](http://qudt.org/schema/qudt/CurrencyUnit)**
     *
     * @type        class
     * @parent      qudt:DimensionlessUnit
     */
    readonly CurrencyUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/CurrencyUnit">;
    /**
     * **[qudt:Data Encoding](http://qudt.org/schema/qudt/DataEncoding)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/136e9f8ba2de653dc071d63e7577f0d1
     */
    readonly DataEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/DataEncoding">;
    /**
     * **[qudt:QUDT Datatype](http://qudt.org/schema/qudt/Datatype)**
     *
     * A data type is a definition of a set of values (for example, "all integers between 0 and 10"), and the allowable operations on those values; the meaning of the data; and the way values of that type can be stored. Some types are primitive - built-in to the language, with no visible internal structure - e.g. Boolean; others are composite - constructed from one or more other types (of either kind) - e.g. lists, arrays, structures, unions. Object-oriented programming extends this with classes which encapsulate both the structure of a type and the operations that can be performed on it. Some languages provide strong typing, others allow implicit type conversion and/or explicit type conversion.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1715dcc63ea34dc4af66e5b62f58a12f
     */
    readonly Datatype: import("../index.js").Iri<"http://qudt.org/schema/qudt/Datatype">;
    /**
     * **[qudt:Date Time String Encoding Type](http://qudt.org/schema/qudt/DateTimeStringEncodingType)**
     *
     * Date Time encodings are logical encodings for expressing date/time quantities as strings by applying unambiguous formatting and parsing rules.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/ef7f61915d46e59fd89260c1687aa1b2
     */
    readonly DateTimeStringEncodingType: import("../index.js").Iri<"http://qudt.org/schema/qudt/DateTimeStringEncodingType">;
    /**
     * **[qudt:Decimal Prefix](http://qudt.org/schema/qudt/DecimalPrefix)**
     *
     * A <em>Decimal Prefix</em> is a prefix for multiples of units that are powers of 10.
     *
     * @type        class
     * @parent      qudt:Prefix
     */
    readonly DecimalPrefix: import("../index.js").Iri<"http://qudt.org/schema/qudt/DecimalPrefix">;
    /**
     * **[qudt:Derived Unit](http://qudt.org/schema/qudt/DerivedUnit)**
     *
     * @type        class
     * @parent      qudt:Unit
     */
    readonly DerivedUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/DerivedUnit">;
    /**
     * **[qudt:Dimensionless Unit](http://qudt.org/schema/qudt/DimensionlessUnit)**
     *
     * @type        class
     * @parent      qudt:Unit
     */
    readonly DimensionlessUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/DimensionlessUnit">;
    /**
     * **[qudt:Discipline](http://qudt.org/schema/qudt/Discipline)**
     *
     * @type        class
     * @parent      qudt:Concept
     */
    readonly Discipline: import("../index.js").Iri<"http://qudt.org/schema/qudt/Discipline">;
    /**
     * **[qudt:Single Precision Real Encoding](http://qudt.org/schema/qudt/DoublePrecisionEncoding)**
     *
     * @type        instance
     */
    readonly DoublePrecisionEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/DoublePrecisionEncoding">;
    /**
     * **[qudt:Encoding](http://qudt.org/schema/qudt/Encoding)**
     *
     * An encoding is a rule or algorithm that is used to convert data from a native, or unspecified form into a specific form that satisfies the encoding rules. Examples of encodings include character encodings, such as UTF-8.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/329dcd1ff491d0821193ffc7048bb0a8
     */
    readonly Encoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/Encoding">;
    /**
     * **[qudt:Endian Type](http://qudt.org/schema/qudt/EndianType)**
     *
     * @type        class
     * @parent      qudt:EnumeratedValue
     */
    readonly EndianType: import("../index.js").Iri<"http://qudt.org/schema/qudt/EndianType">;
    /**
     * **[qudt:Enumerated Quantity](http://qudt.org/schema/qudt/EnumeratedQuantity)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/0d284d19c014d1624a23504987743498
     */
    readonly EnumeratedQuantity: import("../index.js").Iri<"http://qudt.org/schema/qudt/EnumeratedQuantity">;
    /**
     * **[qudt:Enumerated Value](http://qudt.org/schema/qudt/EnumeratedValue)**
     *
     * @type        class
     * @parent      http://www.linkedmodel.org/schema/dtype#EnumeratedValue
     */
    readonly EnumeratedValue: import("../index.js").Iri<"http://qudt.org/schema/qudt/EnumeratedValue">;
    /**
     * **[qudt:Enumeration](http://qudt.org/schema/qudt/Enumeration)**
     *
     * @type        class
     * @parent      http://www.linkedmodel.org/schema/dtype#Enumeration
     */
    readonly Enumeration: import("../index.js").Iri<"http://qudt.org/schema/qudt/Enumeration">;
    /**
     * **[qudt:Enumeration scale](http://qudt.org/schema/qudt/EnumerationScale)**
     *
     * @type        class
     * @parent      http://www.linkedmodel.org/schema/dtype#Enumeration
     */
    readonly EnumerationScale: import("../index.js").Iri<"http://qudt.org/schema/qudt/EnumerationScale">;
    /**
     * **[qudt:Figure](http://qudt.org/schema/qudt/Figure)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/060fd2332b5a06c90ce9c8964c6c3f9f
     */
    readonly Figure: import("../index.js").Iri<"http://qudt.org/schema/qudt/Figure">;
    /**
     * **[qudt:Floating Point Encoding](http://qudt.org/schema/qudt/FloatingPointEncodingType)**
     *
     * A "Encoding" with the following instance(s): "Double Precision Encoding", "Single Precision Real Encoding".
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    readonly FloatingPointEncodingType: import("../index.js").Iri<"http://qudt.org/schema/qudt/FloatingPointEncodingType">;
    /**
     * **[qudt:IEEE 754 1985 Real Encoding](http://qudt.org/schema/qudt/IEEE754_1985RealEncoding)**
     *
     * @type        instance
     */
    readonly IEEE754_1985RealEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/IEEE754_1985RealEncoding">;
    /**
     * **[qudt:ISO 8601 UTC Date Time - Basic Format](http://qudt.org/schema/qudt/'ISO8601-UTCDateTime-BasicFormat')**
     *
     * @type        instance
     */
    readonly 'ISO8601-UTCDateTime-BasicFormat': import("../index.js").Iri<"http://qudt.org/schema/qudt/ISO8601-UTCDateTime-BasicFormat">;
    /**
     * **[qudt:Integer Encoding](http://qudt.org/schema/qudt/IntegerEncodingType)**
     *
     * The encoding scheme for integer types
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    readonly IntegerEncodingType: import("../index.js").Iri<"http://qudt.org/schema/qudt/IntegerEncodingType">;
    /**
     * **[qudt:Interval scale](http://qudt.org/schema/qudt/IntervalScale)**
     *
     * @type        class
     * @parent      qudt:Scale
     */
    readonly IntervalScale: import("../index.js").Iri<"http://qudt.org/schema/qudt/IntervalScale">;
    /**
     * **[qudt:Latex String](http://qudt.org/schema/qudt/LatexString)**
     *
     * A type of string in which some characters may be wrapped with '\(' and '\) characters for LaTeX rendering.
     *
     * @type        datatype
     * @parent      http://www.w3.org/2001/XMLSchema#string
     */
    readonly LatexString: import("../index.js").Iri<"http://qudt.org/schema/qudt/LatexString">;
    /**
     * **[qudt:Little Endian](http://qudt.org/schema/qudt/LittleEndian)**
     *
     * @type        instance
     */
    readonly LittleEndian: import("../index.js").Iri<"http://qudt.org/schema/qudt/LittleEndian">;
    /**
     * **[qudt:Logarithmic Unit](http://qudt.org/schema/qudt/LogarithmicUnit)**
     *
     * @type        class
     * @parent      qudt:DimensionlessUnit
     */
    readonly LogarithmicUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/LogarithmicUnit">;
    /**
     * **[qudt:Long Unsigned Integer Encoding](http://qudt.org/schema/qudt/LongUnsignedIntegerEncoding)**
     *
     * @type        instance
     */
    readonly LongUnsignedIntegerEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/LongUnsignedIntegerEncoding">;
    /**
     * **[qudt:Maths Function Type](http://qudt.org/schema/qudt/MathsFunctionType)**
     *
     * @type        class
     * @parent      qudt:Concept
     */
    readonly MathsFunctionType: import("../index.js").Iri<"http://qudt.org/schema/qudt/MathsFunctionType">;
    /**
     * **[qudt:NIST SP~811 Comment](http://qudt.org/schema/qudt/NIST_SP811_Comment)**
     *
     * @type        class
     * @parent      qudt:Comment
     */
    readonly NIST_SP811_Comment: import("../index.js").Iri<"http://qudt.org/schema/qudt/NIST_SP811_Comment">;
    /**
     * **[qudt:Nominal scale](http://qudt.org/schema/qudt/NominalScale)**
     *
     * @type        class
     * @parent      qudt:Scale
     */
    readonly NominalScale: import("../index.js").Iri<"http://qudt.org/schema/qudt/NominalScale">;
    /**
     * **[qudt:Numeric union](http://qudt.org/schema/qudt/NumericUnion)**
     *
     * @type        class
     * @parent      http://www.linkedmodel.org/schema/dtype#numericUnion
     */
    readonly NumericUnion: import("../index.js").Iri<"http://qudt.org/schema/qudt/NumericUnion">;
    /**
     * **[qudt:OCTET Encoding](http://qudt.org/schema/qudt/OctetEncoding)**
     *
     * @type        instance
     */
    readonly OctetEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/OctetEncoding">;
    /**
     * **[qudt:Ordered type](http://qudt.org/schema/qudt/OrderedType)**
     *
     * Describes how a data or information structure is ordered.
     *
     * @type        class
     * @parent      qudt:EnumeratedValue
     */
    readonly OrderedType: import("../index.js").Iri<"http://qudt.org/schema/qudt/OrderedType">;
    /**
     * **[qudt:Ordinal scale](http://qudt.org/schema/qudt/OrdinalScale)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/85bb938dc0a50ddf66ff7919aeca6407
     */
    readonly OrdinalScale: import("../index.js").Iri<"http://qudt.org/schema/qudt/OrdinalScale">;
    /**
     * **[qudt:Organization](http://qudt.org/schema/qudt/Organization)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/4d556581481faab22f91fc1b94eaacc8
     */
    readonly Organization: import("../index.js").Iri<"http://qudt.org/schema/qudt/Organization">;
    /**
     * **[qudt:Partially Ordered](http://qudt.org/schema/qudt/PartiallyOrdered)**
     *
     * @type        instance
     */
    readonly PartiallyOrdered: import("../index.js").Iri<"http://qudt.org/schema/qudt/PartiallyOrdered">;
    /**
     * **[qudt:Physical Constant](http://qudt.org/schema/qudt/PhysicalConstant)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/21040084c247a1e6087848c64716d44f
     */
    readonly PhysicalConstant: import("../index.js").Iri<"http://qudt.org/schema/qudt/PhysicalConstant">;
    /**
     * **[qudt:Plane Angle Unit](http://qudt.org/schema/qudt/PlaneAngleUnit)**
     *
     * @type        class
     * @parent      qudt:AngleUnit
     */
    readonly PlaneAngleUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/PlaneAngleUnit">;
    /**
     * **[qudt:Prefix](http://qudt.org/schema/qudt/Prefix)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1756cfb77f9905203e474df3e1366841
     */
    readonly Prefix: import("../index.js").Iri<"http://qudt.org/schema/qudt/Prefix">;
    /**
     * **[qudt:Quantifiable](http://qudt.org/schema/qudt/Quantifiable)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1eaf6573ea322b226e417f8e50bf2857
     */
    readonly Quantifiable: import("../index.js").Iri<"http://qudt.org/schema/qudt/Quantifiable">;
    /**
     * **[qudt:Quantity](http://qudt.org/schema/qudt/Quantity)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/367f1b4937935f503a0c1d349905a376
     */
    readonly Quantity: import("../index.js").Iri<"http://qudt.org/schema/qudt/Quantity">;
    /**
     * **[qudt:Quantity Kind](http://qudt.org/schema/qudt/QuantityKind)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/0c6459bf373f16c0b6c9c620cdc609ca
     */
    readonly QuantityKind: import("../index.js").Iri<"http://qudt.org/schema/qudt/QuantityKind">;
    /**
     * **[qudt:Quantity Kind Dimension Vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1ac7720fe5439ef8688dc5c89aacfccb
     */
    readonly QuantityKindDimensionVector: import("../index.js").Iri<"http://qudt.org/schema/qudt/QuantityKindDimensionVector">;
    /**
     * **[qudt:CGS Dimension vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector_CGS)**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector
     */
    readonly QuantityKindDimensionVector_CGS: import("../index.js").Iri<"http://qudt.org/schema/qudt/QuantityKindDimensionVector_CGS">;
    /**
     * **[qudt:CGS EMU Dimension vector](http://qudt.org/schema/qudt/'QuantityKindDimensionVector_CGS-EMU')**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector_CGS
     */
    readonly 'QuantityKindDimensionVector_CGS-EMU': import("../index.js").Iri<"http://qudt.org/schema/qudt/QuantityKindDimensionVector_CGS-EMU">;
    /**
     * **[qudt:CGS ESU Dimension vector](http://qudt.org/schema/qudt/'QuantityKindDimensionVector_CGS-ESU')**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector_CGS
     */
    readonly 'QuantityKindDimensionVector_CGS-ESU': import("../index.js").Iri<"http://qudt.org/schema/qudt/QuantityKindDimensionVector_CGS-ESU">;
    /**
     * **[qudt:CGS GAUSS Dimension vector](http://qudt.org/schema/qudt/'QuantityKindDimensionVector_CGS-GAUSS')**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector_CGS
     */
    readonly 'QuantityKindDimensionVector_CGS-GAUSS': import("../index.js").Iri<"http://qudt.org/schema/qudt/QuantityKindDimensionVector_CGS-GAUSS">;
    /**
     * **[qudt:CGS LH Dimension vector](http://qudt.org/schema/qudt/'QuantityKindDimensionVector_CGS-LH')**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector_CGS
     */
    readonly 'QuantityKindDimensionVector_CGS-LH': import("../index.js").Iri<"http://qudt.org/schema/qudt/QuantityKindDimensionVector_CGS-LH">;
    /**
     * **[qudt:ISO Dimension vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector_ISO)**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector
     */
    readonly QuantityKindDimensionVector_ISO: import("../index.js").Iri<"http://qudt.org/schema/qudt/QuantityKindDimensionVector_ISO">;
    /**
     * **[qudt:Imperial dimension vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector_Imperial)**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector
     */
    readonly QuantityKindDimensionVector_Imperial: import("../index.js").Iri<"http://qudt.org/schema/qudt/QuantityKindDimensionVector_Imperial">;
    /**
     * **[qudt:Quantity Kind Dimension vector (SI)](http://qudt.org/schema/qudt/QuantityKindDimensionVector_SI)**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector
     */
    readonly QuantityKindDimensionVector_SI: import("../index.js").Iri<"http://qudt.org/schema/qudt/QuantityKindDimensionVector_SI">;
    /**
     * **[qudt:Quantity type](http://qudt.org/schema/qudt/QuantityType)**
     *
     * \(\textit{Quantity Type}\) is an enumeration of quanity kinds. It specializes \(\boxed{dtype:EnumeratedValue}\) by constrinaing \(\boxed{dtype:value}\) to instances of \(\boxed{qudt:QuantityKind}\).
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/38862538f61ad0802d037b3484f12994
     */
    readonly QuantityType: import("../index.js").Iri<"http://qudt.org/schema/qudt/QuantityType">;
    /**
     * **[qudt:Quantity value](http://qudt.org/schema/qudt/QuantityValue)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/09b851ef909e1a6a41d57836b010b1d8
     */
    readonly QuantityValue: import("../index.js").Iri<"http://qudt.org/schema/qudt/QuantityValue">;
    /**
     * **[qudt:Ratio scale](http://qudt.org/schema/qudt/RatioScale)**
     *
     * @type        class
     * @parent      qudt:Scale
     */
    readonly RatioScale: import("../index.js").Iri<"http://qudt.org/schema/qudt/RatioScale">;
    /**
     * **[qudt:Rule](http://qudt.org/schema/qudt/Rule)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/3f5d590b3566176fc6d436649660faa3
     */
    readonly Rule: import("../index.js").Iri<"http://qudt.org/schema/qudt/Rule">;
    /**
     * **[qudt:Rule Type](http://qudt.org/schema/qudt/RuleType)**
     *
     * @type        class
     * @parent      qudt:EnumeratedValue
     */
    readonly RuleType: import("../index.js").Iri<"http://qudt.org/schema/qudt/RuleType">;
    /**
     * **[qudt:Signed](http://qudt.org/schema/qudt/SIGNED)**
     *
     * @type        instance
     */
    readonly SIGNED: import("../index.js").Iri<"http://qudt.org/schema/qudt/SIGNED">;
    /**
     * **[qudt:Scalar Datatype](http://qudt.org/schema/qudt/ScalarDatatype)**
     *
     * Scalar data types are those that have a single value. The permissible values are defined over a domain that may be integers, float, character or boolean. Often a scalar data type is referred to as a primitive data type.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/18c61b2bb7bd80b4d8f14a7b062dbe94
     */
    readonly ScalarDatatype: import("../index.js").Iri<"http://qudt.org/schema/qudt/ScalarDatatype">;
    /**
     * **[qudt:Scale](http://qudt.org/schema/qudt/Scale)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/0a902525f68b845d849e361818b55388
     */
    readonly Scale: import("../index.js").Iri<"http://qudt.org/schema/qudt/Scale">;
    /**
     * **[qudt:Scale type](http://qudt.org/schema/qudt/ScaleType)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/3f460f7bc38b27d18277dcc262510654
     */
    readonly ScaleType: import("../index.js").Iri<"http://qudt.org/schema/qudt/ScaleType">;
    /**
     * **[qudt:Short Signed Integer Encoding](http://qudt.org/schema/qudt/ShortSignedIntegerEncoding)**
     *
     * @type        instance
     */
    readonly ShortSignedIntegerEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/ShortSignedIntegerEncoding">;
    /**
     * **[qudt:Short Unsigned Integer Encoding](http://qudt.org/schema/qudt/ShortUnsignedIntegerEncoding)**
     *
     * @type        instance
     */
    readonly ShortUnsignedIntegerEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/ShortUnsignedIntegerEncoding">;
    /**
     * **[qudt:Signed Integer Encoding](http://qudt.org/schema/qudt/SignedIntegerEncoding)**
     *
     * @type        instance
     */
    readonly SignedIntegerEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/SignedIntegerEncoding">;
    /**
     * **[qudt:Signedness type](http://qudt.org/schema/qudt/SignednessType)**
     *
     * Specifics whether a value should be signed or unsigned.
     *
     * @type        class
     * @parent      qudt:EnumeratedValue
     */
    readonly SignednessType: import("../index.js").Iri<"http://qudt.org/schema/qudt/SignednessType">;
    /**
     * **[qudt:Single Precision Real Encoding](http://qudt.org/schema/qudt/SinglePrecisionRealEncoding)**
     *
     * @type        instance
     */
    readonly SinglePrecisionRealEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/SinglePrecisionRealEncoding">;
    /**
     * **[qudt:Solid Angle Unit](http://qudt.org/schema/qudt/SolidAngleUnit)**
     *
     * The solid angle subtended by a surface S is defined as the surface area of a unit sphere covered by the surface S's projection onto the sphere. A solid angle is related to the surface of a sphere in the same way an ordinary angle is related to the circumference of a circle. Since the total surface area of the unit sphere is 4*pi, the measure of solid angle will always be between 0 and 4*pi.
     *
     * @type        class
     * @parent      qudt:AngleUnit
     */
    readonly SolidAngleUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/SolidAngleUnit">;
    /**
     * **[qudt:Statement](http://qudt.org/schema/qudt/Statement)**
     *
     * @type        class
     * @parent      http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement
     */
    readonly Statement: import("../index.js").Iri<"http://qudt.org/schema/qudt/Statement">;
    /**
     * **[qudt:String Encoding Type](http://qudt.org/schema/qudt/StringEncodingType)**
     *
     * A "Encoding" with the following instance(s): "UTF-16 String", "UTF-8 Encoding".
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    readonly StringEncodingType: import("../index.js").Iri<"http://qudt.org/schema/qudt/StringEncodingType">;
    /**
     * **[qudt:Structured Data Type](http://qudt.org/schema/qudt/StructuredDatatype)**
     *
     * A "Structured Datatype", in contrast to scalar data types, is used to characterize classes of more complex data structures, such as linked or indexed lists, trees, ordered trees, and multi-dimensional file formats.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/5b96d2532593a5ee30cdfc81f3430c6c
     */
    readonly StructuredDatatype: import("../index.js").Iri<"http://qudt.org/schema/qudt/StructuredDatatype">;
    /**
     * **[qudt:Symbol](http://qudt.org/schema/qudt/Symbol)**
     *
     * @type        class
     * @parent      qudt:Concept
     */
    readonly Symbol: import("../index.js").Iri<"http://qudt.org/schema/qudt/Symbol">;
    /**
     * **[qudt:System of Quantity Kinds](http://qudt.org/schema/qudt/SystemOfQuantityKinds)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1ae165e92c83a57c46b8837b26448536
     */
    readonly SystemOfQuantityKinds: import("../index.js").Iri<"http://qudt.org/schema/qudt/SystemOfQuantityKinds">;
    /**
     * **[qudt:System of Units](http://qudt.org/schema/qudt/SystemOfUnits)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/34b17eefb0ecfe1683bb274146d74dc0
     */
    readonly SystemOfUnits: import("../index.js").Iri<"http://qudt.org/schema/qudt/SystemOfUnits">;
    /**
     * **[qudt:Totally Ordered](http://qudt.org/schema/qudt/TotallyOrdered)**
     *
     * @type        instance
     */
    readonly TotallyOrdered: import("../index.js").Iri<"http://qudt.org/schema/qudt/TotallyOrdered">;
    /**
     * **[qudt:Transform type](http://qudt.org/schema/qudt/TransformType)**
     *
     * @type        class
     * @parent      qudt:EnumeratedValue
     */
    readonly TransformType: import("../index.js").Iri<"http://qudt.org/schema/qudt/TransformType">;
    /**
     * **[qudt:case-insensitive UCUM code](http://qudt.org/schema/qudt/UCUMci)**
     *
     * Lexical pattern for the case-insensitive version of UCUM code
     *
     * @type        datatype
     * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
     */
    readonly UCUMci: import("../index.js").Iri<"http://qudt.org/schema/qudt/UCUMci">;
    /**
     * **[qudt:case-insensitive UCUM term](http://qudt.org/schema/qudt/'UCUMci-term')**
     *
     * Lexical pattern for the terminal symbols in the case-insensitive version of UCUM code
     *
     * @type        datatype
     * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
     */
    readonly 'UCUMci-term': import("../index.js").Iri<"http://qudt.org/schema/qudt/UCUMci-term">;
    /**
     * **[qudt:case-sensitive UCUM code](http://qudt.org/schema/qudt/UCUMcs)**
     *
     * Lexical pattern for the case-sensitive version of UCUM code
     *
     * @type        datatype
     * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
     */
    readonly UCUMcs: import("../index.js").Iri<"http://qudt.org/schema/qudt/UCUMcs">;
    /**
     * **[qudt:case-sensitive UCUM terminal](http://qudt.org/schema/qudt/'UCUMcs-term')**
     *
     * Lexical pattern for the terminal symbols in the case-sensitive version of UCUM code
     *
     * @type        datatype
     * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
     */
    readonly 'UCUMcs-term': import("../index.js").Iri<"http://qudt.org/schema/qudt/UCUMcs-term">;
    /**
     * **[qudt:Unsigned](http://qudt.org/schema/qudt/UNSIGNED)**
     *
     * @type        instance
     */
    readonly UNSIGNED: import("../index.js").Iri<"http://qudt.org/schema/qudt/UNSIGNED">;
    /**
     * **[qudt:UTF-16 String](http://qudt.org/schema/qudt/'UTF16-StringEncoding')**
     *
     * @type        instance
     */
    readonly 'UTF16-StringEncoding': import("../index.js").Iri<"http://qudt.org/schema/qudt/UTF16-StringEncoding">;
    /**
     * **[qudt:UTF-8 Encoding](http://qudt.org/schema/qudt/'UTF8-StringEncoding')**
     *
     * @type        instance
     */
    readonly 'UTF8-StringEncoding': import("../index.js").Iri<"http://qudt.org/schema/qudt/UTF8-StringEncoding">;
    /**
     * **[qudt:Unit](http://qudt.org/schema/qudt/Unit)**
     *
     * A unit of measure, or unit, is a particular quantity value that has been chosen as a scale for measuring other quantities the same kind (more generally of equivalent dimension). For example, the meter is a quantity of length that has been rigorously defined and standardized by the BIPM (International Board of Weights and Measures). Any measurement of the length can be expressed as a number multiplied by the unit meter. More formally, the value of a physical quantity Q with respect to a unit (U) is expressed as the scalar multiple of a real number (n) and U, as  \(Q = nU\).
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/07eee89b65875cb28e78d9690dde64ba
     */
    readonly Unit: import("../index.js").Iri<"http://qudt.org/schema/qudt/Unit">;
    /**
     * **[qudt:Unordered](http://qudt.org/schema/qudt/Unordered)**
     *
     * @type        instance
     */
    readonly Unordered: import("../index.js").Iri<"http://qudt.org/schema/qudt/Unordered">;
    /**
     * **[qudt:Unsigned Integer Encoding](http://qudt.org/schema/qudt/UnsignedIntegerEncoding)**
     *
     * @type        instance
     */
    readonly UnsignedIntegerEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/UnsignedIntegerEncoding">;
    /**
     * **[qudt:User Quantity Kind](http://qudt.org/schema/qudt/UserQuantityKind)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/7b2ee07f9f766f46dc2e743205c35cd3
     */
    readonly UserQuantityKind: import("../index.js").Iri<"http://qudt.org/schema/qudt/UserQuantityKind">;
    /**
     * **[qudt:Verifiable](http://qudt.org/schema/qudt/Verifiable)**
     *
     * An aspect class that holds properties that provide external knowledge and specifications of a given resource.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/625a68790a5855da95f51870eb0391ea
     */
    readonly Verifiable: import("../index.js").Iri<"http://qudt.org/schema/qudt/Verifiable">;
    /**
     * **[qudt:Wikipedia](http://qudt.org/schema/qudt/Wikipedia)**
     *
     * @type        instance
     */
    readonly Wikipedia: import("../index.js").Iri<"http://qudt.org/schema/qudt/Wikipedia">;
    /**
     * **[qudt:abbreviation](http://qudt.org/schema/qudt/abbreviation)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly abbreviation: import("../index.js").Iri<"http://qudt.org/schema/qudt/abbreviation">;
    /**
     * **[qudt:acronym](http://qudt.org/schema/qudt/acronym)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly acronym: import("../index.js").Iri<"http://qudt.org/schema/qudt/acronym">;
    /**
     * **[qudt:allowed pattern](http://qudt.org/schema/qudt/allowedPattern)**
     *
     * @type        property
     */
    readonly allowedPattern: import("../index.js").Iri<"http://qudt.org/schema/qudt/allowedPattern">;
    /**
     * **[qudt:allowed unit of system](http://qudt.org/schema/qudt/allowedUnitOfSystem)**
     *
     * @type        property
     * @parent      qudt:unitOfSystem
     */
    readonly allowedUnitOfSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/allowedUnitOfSystem">;
    /**
     * **[qudt:ANSI SQL Name](http://qudt.org/schema/qudt/ansiSQLName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly ansiSQLName: import("../index.js").Iri<"http://qudt.org/schema/qudt/ansiSQLName">;
    /**
     * **[qudt:applicable CGS unit](http://qudt.org/schema/qudt/applicableCGSUnit)**
     *
     * @type        property
     * @parent      qudt:applicableUnit
     * @range       qudt:Unit
     */
    readonly applicableCGSUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/applicableCGSUnit">;
    /**
     * **[qudt:applicable ISO unit](http://qudt.org/schema/qudt/applicableISOUnit)**
     *
     * @type        property
     * @parent      qudt:applicableUnit
     * @range       qudt:Unit
     */
    readonly applicableISOUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/applicableISOUnit">;
    /**
     * **[qudt:applicable Imperial unit](http://qudt.org/schema/qudt/applicableImperialUnit)**
     *
     * @type        property
     * @parent      qudt:applicableUnit
     * @range       qudt:Unit
     */
    readonly applicableImperialUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/applicableImperialUnit">;
    /**
     * **[qudt:applicable physical constant](http://qudt.org/schema/qudt/applicablePhysicalConstant)**
     *
     * @type        property
     */
    readonly applicablePhysicalConstant: import("../index.js").Iri<"http://qudt.org/schema/qudt/applicablePhysicalConstant">;
    /**
     * **[qudt:applicable Planck unit](http://qudt.org/schema/qudt/applicablePlanckUnit)**
     *
     * @type        property
     * @parent      qudt:applicableUnit
     * @range       qudt:Unit
     */
    readonly applicablePlanckUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/applicablePlanckUnit">;
    /**
     * **[qudt:applicable SI unit](http://qudt.org/schema/qudt/applicableSIUnit)**
     *
     * @type        property
     * @parent      qudt:applicableUnit
     * @range       qudt:Unit
     */
    readonly applicableSIUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/applicableSIUnit">;
    /**
     * **[qudt:applicable US Customary unit](http://qudt.org/schema/qudt/applicableUSCustomaryUnit)**
     *
     * @type        property
     * @parent      qudt:applicableUnit
     * @range       qudt:Unit
     */
    readonly applicableUSCustomaryUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/applicableUSCustomaryUnit">;
    /**
     * **[qudt:applicable unit](http://qudt.org/schema/qudt/applicableUnit)**
     *
     * @type        property
     * @range       qudt:Unit
     */
    readonly applicableUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/applicableUnit">;
    /**
     * **[qudt:base dimension enumeration](http://qudt.org/schema/qudt/baseDimensionEnumeration)**
     *
     * @type        property
     * @range       qudt:Enumeration
     */
    readonly baseDimensionEnumeration: import("../index.js").Iri<"http://qudt.org/schema/qudt/baseDimensionEnumeration">;
    /**
     * **[qudt:is base unit of system](http://qudt.org/schema/qudt/baseUnitOfSystem)**
     *
     * @type        property
     * @parent      qudt:coherentUnitOfSystem
     */
    readonly baseUnitOfSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/baseUnitOfSystem">;
    /**
     * **[qudt:basis](http://qudt.org/schema/qudt/basis)**
     *
     * @type        property
     */
    readonly basis: import("../index.js").Iri<"http://qudt.org/schema/qudt/basis">;
    /**
     * **[qudt:belongs to system of quantities](http://qudt.org/schema/qudt/belongsToSystemOfQuantities)**
     *
     * @type        property
     * @domain      qudt:QuantityKind
     * @range       qudt:SystemOfQuantityKinds
     */
    readonly belongsToSystemOfQuantities: import("../index.js").Iri<"http://qudt.org/schema/qudt/belongsToSystemOfQuantities">;
    /**
     * **[qudt:bit order](http://qudt.org/schema/qudt/bitOrder)**
     *
     * @type        property
     * @range       qudt:EndianType
     */
    readonly bitOrder: import("../index.js").Iri<"http://qudt.org/schema/qudt/bitOrder">;
    /**
     * **[qudt:bits](http://qudt.org/schema/qudt/bits)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#integer
     */
    readonly bits: import("../index.js").Iri<"http://qudt.org/schema/qudt/bits">;
    /**
     * **[qudt:bounded](http://qudt.org/schema/qudt/bounded)**
     *
     * @type        property
     */
    readonly bounded: import("../index.js").Iri<"http://qudt.org/schema/qudt/bounded">;
    /**
     * **[qudt:byte order](http://qudt.org/schema/qudt/byteOrder)**
     *
     * Byte order is an enumeration of two values: 'Big Endian' and 'Little Endian' and is used to denote whether the most signiticant byte is either first or last, respectively.
     *
     * @type        property
     * @range       qudt:EndianType
     */
    readonly byteOrder: import("../index.js").Iri<"http://qudt.org/schema/qudt/byteOrder">;
    /**
     * **[qudt:bytes](http://qudt.org/schema/qudt/bytes)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#integer
     */
    readonly bytes: import("../index.js").Iri<"http://qudt.org/schema/qudt/bytes">;
    /**
     * **[qudt:C Language name](http://qudt.org/schema/qudt/cName)**
     *
     * Datatype name in the C programming language
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly cName: import("../index.js").Iri<"http://qudt.org/schema/qudt/cName">;
    /**
     * **[qudt:cardinality](http://qudt.org/schema/qudt/cardinality)**
     *
     * @type        property
     */
    readonly cardinality: import("../index.js").Iri<"http://qudt.org/schema/qudt/cardinality">;
    /**
     * **[qudt:categorized as](http://qudt.org/schema/qudt/categorizedAs)**
     *
     * @type        property
     */
    readonly categorizedAs: import("../index.js").Iri<"http://qudt.org/schema/qudt/categorizedAs">;
    /**
     * **[qudt:citation](http://qudt.org/schema/qudt/citation)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly citation: import("../index.js").Iri<"http://qudt.org/schema/qudt/citation">;
    /**
     * **[qudt:code](http://qudt.org/schema/qudt/code)**
     *
     * @type        property
     * @domain      qudt:Concept
     */
    readonly code: import("../index.js").Iri<"http://qudt.org/schema/qudt/code">;
    /**
     * **[qudt:is coherent unit of system](http://qudt.org/schema/qudt/coherentUnitOfSystem)**
     *
     * A coherent unit of measurement for a unit system is a defined unit that may be expressed as a product of powers of the system's base units with the proportionality factor of one. A system of units is coherent with respect to a system of quantities and equations if the system of units is chosen in such a way that the equations between numerical values have exactly the same form (including the numerical factors) as the corresponding equations between the quantities. For example, the 'newton' and the 'joule'. These two are, respectively, the force that causes one kilogram to be accelerated at 1 metre per second per  second, and the work done by 1 newton acting over 1 metre. Being coherent refers to this consistent use of 1. In the old c.g.s. system , with its base units the centimetre and the gram, the corresponding coherent units were the dyne and the erg, respectively the force that causes 1 gram to be accelerated at 1 centimetre per second per second, and the work done by 1 dyne acting over 1 centimetre. So \(1 newton = 10^5\,dyne\), \(1 joule = 10^7\,erg\), making each of the four compatible in a decimal sense within its respective other system, but not coherent therein.
     *
     * @type        property
     * @parent      qudt:definedUnitOfSystem
     * @range       qudt:SystemOfUnits
     */
    readonly coherentUnitOfSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/coherentUnitOfSystem">;
    /**
     * **[qudt:coherent unit system](http://qudt.org/schema/qudt/coherentUnitSystem)**
     *
     * <p>A system of units is coherent with respect to a system of quantities and equations if the system of units is chosen in such a way that the equations between numerical values have exactly the same form (including the numerical factors) as the corresponding equations between the quantities. In such a coherent system, no numerical factor other than the number 1 ever occurs in the expressions for the derived units in terms of the base units. For example, the \(newton\) and the \(joule\). These two are, respectively, the force that causes one kilogram to be accelerated at 1 metre per (1) second per (1) second, and the work done by 1 newton acting over 1 metre. Being coherent refers to this consistent use of 1. In the old c.g.s. system , with its base units the centimetre and the gram, the corresponding coherent units were the dyne and the erg, respectively the force that causes 1 gram to be accelerated at 1 centimetre per (1) second per (1) second, and the work done by 1 dyne acting over 1 centimetre. So \(1\,newton = 10^5 dyne\), \(1 joule = 10^7 erg\), making each of the four compatible in a decimal sense within its respective other system, but not coherent therein.</p>
     *
     * @type        property
     * @parent      qudt:hasUnitSystem
     */
    readonly coherentUnitSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/coherentUnitSystem">;
    /**
     * **[qudt:conversion coefficient](http://qudt.org/schema/qudt/conversionCoefficient)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#double
     */
    readonly conversionCoefficient: import("../index.js").Iri<"http://qudt.org/schema/qudt/conversionCoefficient">;
    /**
     * **[qudt:conversion multiplier](http://qudt.org/schema/qudt/conversionMultiplier)**
     *
     * @type        property
     * @range       http://www.linkedmodel.org/schema/dtype#numericUnion
     */
    readonly conversionMultiplier: import("../index.js").Iri<"http://qudt.org/schema/qudt/conversionMultiplier">;
    /**
     * **[qudt:conversion offset](http://qudt.org/schema/qudt/conversionOffset)**
     *
     * @type        property
     * @range       http://www.linkedmodel.org/schema/dtype#numericUnion
     */
    readonly conversionOffset: import("../index.js").Iri<"http://qudt.org/schema/qudt/conversionOffset">;
    /**
     * **[qudt:currency code](http://qudt.org/schema/qudt/currencyCode)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly currencyCode: import("../index.js").Iri<"http://qudt.org/schema/qudt/currencyCode">;
    /**
     * **[qudt:currency exponent](http://qudt.org/schema/qudt/currencyExponent)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#integer
     */
    readonly currencyExponent: import("../index.js").Iri<"http://qudt.org/schema/qudt/currencyExponent">;
    /**
     * **[qudt:currency number](http://qudt.org/schema/qudt/currencyNumber)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#positiveInteger
     */
    readonly currencyNumber: import("../index.js").Iri<"http://qudt.org/schema/qudt/currencyNumber">;
    /**
     * **[qudt:data encoding](http://qudt.org/schema/qudt/dataEncoding)**
     *
     * @type        property
     * @range       qudt:DataEncoding
     */
    readonly dataEncoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/dataEncoding">;
    /**
     * **[qudt:data structure](http://qudt.org/schema/qudt/dataStructure)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly dataStructure: import("../index.js").Iri<"http://qudt.org/schema/qudt/dataStructure">;
    /**
     * **[qudt:datatype](http://qudt.org/schema/qudt/dataType)**
     *
     * @type        property
     */
    readonly dataType: import("../index.js").Iri<"http://qudt.org/schema/qudt/dataType">;
    /**
     * **[qudt:dbpedia match](http://qudt.org/schema/qudt/dbpediaMatch)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    readonly dbpediaMatch: import("../index.js").Iri<"http://qudt.org/schema/qudt/dbpediaMatch">;
    /**
     * **[qudt:default](http://qudt.org/schema/qudt/default)**
     *
     * @type        property
     */
    readonly default: import("../index.js").Iri<"http://qudt.org/schema/qudt/default">;
    /**
     * **[qudt:defined unit of system](http://qudt.org/schema/qudt/definedUnitOfSystem)**
     *
     * @type        property
     * @parent      qudt:unitOfSystem
     */
    readonly definedUnitOfSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/definedUnitOfSystem">;
    /**
     * **[qudt:denominator dimension vector](http://qudt.org/schema/qudt/denominatorDimensionVector)**
     *
     * @type        property
     * @range       qudt:QuantityKindDimensionVector
     */
    readonly denominatorDimensionVector: import("../index.js").Iri<"http://qudt.org/schema/qudt/denominatorDimensionVector">;
    /**
     * **[qudt:is coherent derived unit of system](http://qudt.org/schema/qudt/derivedCoherentUnitOfSystem)**
     *
     * @type        property
     * @parent      qudt:coherentUnitOfSystem
     */
    readonly derivedCoherentUnitOfSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/derivedCoherentUnitOfSystem">;
    /**
     * **[qudt:is non-coherent derived unit of system](http://qudt.org/schema/qudt/derivedNonCoherentUnitOfSystem)**
     *
     * @type        property
     * @parent      qudt:derivedUnitOfSystem
     * @range       qudt:SystemOfUnits
     */
    readonly derivedNonCoherentUnitOfSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/derivedNonCoherentUnitOfSystem">;
    /**
     * **[qudt:derived quantity kind of system](http://qudt.org/schema/qudt/derivedQuantityKindOfSystem)**
     *
     * @type        property
     * @parent      qudt:isQuantityKindOf
     */
    readonly derivedQuantityKindOfSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/derivedQuantityKindOfSystem">;
    /**
     * **[qudt:is derived unit of system](http://qudt.org/schema/qudt/derivedUnitOfSystem)**
     *
     * @type        property
     * @parent      qudt:unitOfSystem
     */
    readonly derivedUnitOfSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/derivedUnitOfSystem">;
    /**
     * **[qudt:dimension exponent](http://qudt.org/schema/qudt/dimensionExponent)**
     *
     * @type        property
     */
    readonly dimensionExponent: import("../index.js").Iri<"http://qudt.org/schema/qudt/dimensionExponent">;
    /**
     * **[qudt:dimension exponent for amount of substance](http://qudt.org/schema/qudt/dimensionExponentForAmountOfSubstance)**
     *
     * @type        property
     */
    readonly dimensionExponentForAmountOfSubstance: import("../index.js").Iri<"http://qudt.org/schema/qudt/dimensionExponentForAmountOfSubstance">;
    /**
     * **[qudt:dimension exponent for electric current](http://qudt.org/schema/qudt/dimensionExponentForElectricCurrent)**
     *
     * @type        property
     */
    readonly dimensionExponentForElectricCurrent: import("../index.js").Iri<"http://qudt.org/schema/qudt/dimensionExponentForElectricCurrent">;
    /**
     * **[qudt:dimension exponent for length](http://qudt.org/schema/qudt/dimensionExponentForLength)**
     *
     * @type        property
     */
    readonly dimensionExponentForLength: import("../index.js").Iri<"http://qudt.org/schema/qudt/dimensionExponentForLength">;
    /**
     * **[qudt:dimension exponent for luminous intensity](http://qudt.org/schema/qudt/dimensionExponentForLuminousIntensity)**
     *
     * @type        property
     */
    readonly dimensionExponentForLuminousIntensity: import("../index.js").Iri<"http://qudt.org/schema/qudt/dimensionExponentForLuminousIntensity">;
    /**
     * **[qudt:dimension exponent for mass](http://qudt.org/schema/qudt/dimensionExponentForMass)**
     *
     * @type        property
     */
    readonly dimensionExponentForMass: import("../index.js").Iri<"http://qudt.org/schema/qudt/dimensionExponentForMass">;
    /**
     * **[qudt:dimension exponent for thermodynamic temperature](http://qudt.org/schema/qudt/dimensionExponentForThermodynamicTemperature)**
     *
     * @type        property
     */
    readonly dimensionExponentForThermodynamicTemperature: import("../index.js").Iri<"http://qudt.org/schema/qudt/dimensionExponentForThermodynamicTemperature">;
    /**
     * **[qudt:dimension exponent for time](http://qudt.org/schema/qudt/dimensionExponentForTime)**
     *
     * @type        property
     */
    readonly dimensionExponentForTime: import("../index.js").Iri<"http://qudt.org/schema/qudt/dimensionExponentForTime">;
    /**
     * **[qudt:dimension inverse](http://qudt.org/schema/qudt/dimensionInverse)**
     *
     * @type        property
     */
    readonly dimensionInverse: import("../index.js").Iri<"http://qudt.org/schema/qudt/dimensionInverse">;
    /**
     * **[qudt:dimension vector for SI](http://qudt.org/schema/qudt/dimensionVectorForSI)**
     *
     * @type        property
     * @range       qudt:QuantityKindDimensionVector_SI
     */
    readonly dimensionVectorForSI: import("../index.js").Iri<"http://qudt.org/schema/qudt/dimensionVectorForSI">;
    /**
     * **[qudt:dimensionless exponent](http://qudt.org/schema/qudt/dimensionlessExponent)**
     *
     * @type        property
     */
    readonly dimensionlessExponent: import("../index.js").Iri<"http://qudt.org/schema/qudt/dimensionlessExponent">;
    /**
     * **[qudt:element](http://qudt.org/schema/qudt/element)**
     *
     * @type        property
     */
    readonly element: import("../index.js").Iri<"http://qudt.org/schema/qudt/element">;
    /**
     * **[qudt:element kind](http://qudt.org/schema/qudt/elementKind)**
     *
     * @type        property
     */
    readonly elementKind: import("../index.js").Iri<"http://qudt.org/schema/qudt/elementKind">;
    /**
     * **[qudt:element type](http://qudt.org/schema/qudt/elementType)**
     *
     * @type        property
     */
    readonly elementType: import("../index.js").Iri<"http://qudt.org/schema/qudt/elementType">;
    /**
     * **[qudt:encoding](http://qudt.org/schema/qudt/encoding)**
     *
     * @type        property
     */
    readonly encoding: import("../index.js").Iri<"http://qudt.org/schema/qudt/encoding">;
    /**
     * **[qudt:enumerated value](http://qudt.org/schema/qudt/enumeratedValue)**
     *
     * @type        property
     * @range       qudt:EnumeratedValue
     */
    readonly enumeratedValue: import("../index.js").Iri<"http://qudt.org/schema/qudt/enumeratedValue">;
    /**
     * **[qudt:enumeration](http://qudt.org/schema/qudt/enumeration)**
     *
     * @type        property
     * @range       qudt:Enumeration
     */
    readonly enumeration: import("../index.js").Iri<"http://qudt.org/schema/qudt/enumeration">;
    /**
     * **[qudt:exact constant](http://qudt.org/schema/qudt/exactConstant)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#boolean
     */
    readonly exactConstant: import("../index.js").Iri<"http://qudt.org/schema/qudt/exactConstant">;
    /**
     * **[qudt:exact match](http://qudt.org/schema/qudt/exactMatch)**
     *
     * @type        property
     * @parent      http://www.w3.org/2002/07/owl#sameAs
     * @range       qudt:Unit
     */
    readonly exactMatch: import("../index.js").Iri<"http://qudt.org/schema/qudt/exactMatch">;
    /**
     * **[qudt:example](http://qudt.org/schema/qudt/example)**
     *
     * @type        property
     */
    readonly example: import("../index.js").Iri<"http://qudt.org/schema/qudt/example">;
    /**
     * **[qudt:expression](http://qudt.org/schema/qudt/expression)**
     *
     * @type        property
     */
    readonly expression: import("../index.js").Iri<"http://qudt.org/schema/qudt/expression">;
    /**
     * **[qudt:field code](http://qudt.org/schema/qudt/fieldCode)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly fieldCode: import("../index.js").Iri<"http://qudt.org/schema/qudt/fieldCode">;
    /**
     * **[qudt:figure](http://qudt.org/schema/qudt/figure)**
     *
     * @type        property
     * @range       qudt:Figure
     */
    readonly figure: import("../index.js").Iri<"http://qudt.org/schema/qudt/figure">;
    /**
     * **[qudt:figure caption](http://qudt.org/schema/qudt/figureCaption)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly figureCaption: import("../index.js").Iri<"http://qudt.org/schema/qudt/figureCaption">;
    /**
     * **[qudt:figure label](http://qudt.org/schema/qudt/figureLabel)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly figureLabel: import("../index.js").Iri<"http://qudt.org/schema/qudt/figureLabel">;
    /**
     * **[qudt:float percentage](http://qudt.org/schema/qudt/floatPercentage)**
     *
     * @type        datatype
     * @parent      http://www.w3.org/2001/XMLSchema#float
     */
    readonly floatPercentage: import("../index.js").Iri<"http://qudt.org/schema/qudt/floatPercentage">;
    /**
     * **[qudt:generalization](http://qudt.org/schema/qudt/generalization)**
     *
     * @type        property
     */
    readonly generalization: import("../index.js").Iri<"http://qudt.org/schema/qudt/generalization">;
    /**
     * **[qudt:guidance](http://qudt.org/schema/qudt/guidance)**
     *
     * @type        property
     * @domain      qudt:Concept
     * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML
     */
    readonly guidance: import("../index.js").Iri<"http://qudt.org/schema/qudt/guidance">;
    /**
     * **[qudt:allowed unit](http://qudt.org/schema/qudt/hasAllowedUnit)**
     *
     * @type        property
     * @parent      qudt:hasUnit
     */
    readonly hasAllowedUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasAllowedUnit">;
    /**
     * **[qudt:has base quantity kind](http://qudt.org/schema/qudt/hasBaseQuantityKind)**
     *
     * @type        property
     * @parent      qudt:hasQuantityKind
     */
    readonly hasBaseQuantityKind: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasBaseQuantityKind">;
    /**
     * **[qudt:base unit](http://qudt.org/schema/qudt/hasBaseUnit)**
     *
     * @type        property
     * @parent      qudt:hasCoherentUnit
     */
    readonly hasBaseUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasBaseUnit">;
    /**
     * **[qudt:coherent unit](http://qudt.org/schema/qudt/hasCoherentUnit)**
     *
     * @type        property
     * @parent      qudt:hasDefinedUnit
     */
    readonly hasCoherentUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasCoherentUnit">;
    /**
     * **[qudt:defined unit](http://qudt.org/schema/qudt/hasDefinedUnit)**
     *
     * @type        property
     * @parent      qudt:hasUnit
     */
    readonly hasDefinedUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasDefinedUnit">;
    /**
     * **[qudt:has quantity kind dimension vector denominator part](http://qudt.org/schema/qudt/hasDenominatorPart)**
     *
     * @type        property
     */
    readonly hasDenominatorPart: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasDenominatorPart">;
    /**
     * **[qudt:derived coherent unit](http://qudt.org/schema/qudt/hasDerivedCoherentUnit)**
     *
     * @type        property
     * @parent      qudt:hasCoherentUnit
     */
    readonly hasDerivedCoherentUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasDerivedCoherentUnit">;
    /**
     * **[qudt:has coherent derived unit](http://qudt.org/schema/qudt/hasDerivedNonCoherentUnit)**
     *
     * @type        property
     * @parent      qudt:hasDerivedUnit
     */
    readonly hasDerivedNonCoherentUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasDerivedNonCoherentUnit">;
    /**
     * **[qudt:derived unit](http://qudt.org/schema/qudt/hasDerivedUnit)**
     *
     * @type        property
     */
    readonly hasDerivedUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasDerivedUnit">;
    /**
     * **[qudt:has dimension](http://qudt.org/schema/qudt/hasDimension)**
     *
     * @type        property
     */
    readonly hasDimension: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasDimension">;
    /**
     * **[qudt:dimension expression](http://qudt.org/schema/qudt/hasDimensionExpression)**
     *
     * @type        property
     */
    readonly hasDimensionExpression: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasDimensionExpression">;
    /**
     * **[qudt:has dimension vector](http://qudt.org/schema/qudt/hasDimensionVector)**
     *
     * @type        property
     * @range       qudt:QuantityKindDimensionVector
     */
    readonly hasDimensionVector: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasDimensionVector">;
    /**
     * **[qudt:has non-coherent unit](http://qudt.org/schema/qudt/hasNonCoherentUnit)**
     *
     * @type        property
     * @parent      qudt:hasDefinedUnit
     */
    readonly hasNonCoherentUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasNonCoherentUnit">;
    /**
     * **[qudt:has quantity kind dimension vector numerator part](http://qudt.org/schema/qudt/hasNumeratorPart)**
     *
     * @type        property
     */
    readonly hasNumeratorPart: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasNumeratorPart">;
    /**
     * **[qudt:prefix unit](http://qudt.org/schema/qudt/hasPrefixUnit)**
     *
     * @type        property
     * @parent      qudt:hasDefinedUnit
     */
    readonly hasPrefixUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasPrefixUnit">;
    /**
     * **[qudt:has quantity](http://qudt.org/schema/qudt/hasQuantity)**
     *
     * @type        property
     * @range       qudt:Quantity
     */
    readonly hasQuantity: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasQuantity">;
    /**
     * **[qudt:has quantity kind](http://qudt.org/schema/qudt/hasQuantityKind)**
     *
     * @type        property
     * @range       qudt:QuantityKind
     */
    readonly hasQuantityKind: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasQuantityKind">;
    /**
     * **[qudt:has reference quantity kind](http://qudt.org/schema/qudt/hasReferenceQuantityKind)**
     *
     * @type        property
     */
    readonly hasReferenceQuantityKind: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasReferenceQuantityKind">;
    /**
     * **[qudt:has rule](http://qudt.org/schema/qudt/hasRule)**
     *
     * @type        property
     */
    readonly hasRule: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasRule">;
    /**
     * **[qudt:has unit](http://qudt.org/schema/qudt/hasUnit)**
     *
     * @type        property
     */
    readonly hasUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasUnit">;
    /**
     * **[qudt:has unit system](http://qudt.org/schema/qudt/hasUnitSystem)**
     *
     * @type        property
     */
    readonly hasUnitSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasUnitSystem">;
    /**
     * **[qudt:has vocabulary](http://qudt.org/schema/qudt/hasVocabulary)**
     *
     * @type        property
     * @range       http://www.w3.org/2002/07/owl#Ontology
     */
    readonly hasVocabulary: import("../index.js").Iri<"http://qudt.org/schema/qudt/hasVocabulary">;
    /**
     * **[qudt:height](http://qudt.org/schema/qudt/height)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly height: import("../index.js").Iri<"http://qudt.org/schema/qudt/height">;
    /**
     * **[qudt:qudt id](http://qudt.org/schema/qudt/id)**
     *
     * @type        property
     * @domain      qudt:Concept
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly id: import("../index.js").Iri<"http://qudt.org/schema/qudt/id">;
    /**
     * **[qudt:iec-61360 code](http://qudt.org/schema/qudt/iec61360Code)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly iec61360Code: import("../index.js").Iri<"http://qudt.org/schema/qudt/iec61360Code">;
    /**
     * **[qudt:image](http://qudt.org/schema/qudt/image)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    readonly image: import("../index.js").Iri<"http://qudt.org/schema/qudt/image">;
    /**
     * **[qudt:image location](http://qudt.org/schema/qudt/imageLocation)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    readonly imageLocation: import("../index.js").Iri<"http://qudt.org/schema/qudt/imageLocation">;
    /**
     * **[qudt:informative reference](http://qudt.org/schema/qudt/informativeReference)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    readonly informativeReference: import("../index.js").Iri<"http://qudt.org/schema/qudt/informativeReference">;
    /**
     * **[qudt:integer percentage](http://qudt.org/schema/qudt/integerPercentage)**
     *
     * @type        datatype
     * @parent      http://www.w3.org/2001/XMLSchema#integer
     */
    readonly integerPercentage: import("../index.js").Iri<"http://qudt.org/schema/qudt/integerPercentage">;
    /**
     * **[qudt:is base quantity kind of system](http://qudt.org/schema/qudt/isBaseQuantityKindOfSystem)**
     *
     * @type        property
     * @parent      qudt:isQuantityKindOf
     */
    readonly isBaseQuantityKindOfSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/isBaseQuantityKindOfSystem">;
    /**
     * **[qudt:is Delta Quantity](http://qudt.org/schema/qudt/isDeltaQuantity)**
     *
     * This property is used to identify a Quantity instance that is a measure of a change, or interval, of some property, rather than a measure of its absolute value. This is important for measurements such as temperature differences where the conversion among units would be calculated differently because of offsets.
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#boolean
     */
    readonly isDeltaQuantity: import("../index.js").Iri<"http://qudt.org/schema/qudt/isDeltaQuantity">;
    /**
     * **[qudt:is dimension in system](http://qudt.org/schema/qudt/isDimensionInSystem)**
     *
     * @type        property
     */
    readonly isDimensionInSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/isDimensionInSystem">;
    /**
     * **[qudt:is metric unit](http://qudt.org/schema/qudt/isMetricUnit)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#boolean
     */
    readonly isMetricUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/isMetricUnit">;
    /**
     * **[qudt:is quantity kind of](http://qudt.org/schema/qudt/isQuantityKindOf)**
     *
     * @type        property
     */
    readonly isQuantityKindOf: import("../index.js").Iri<"http://qudt.org/schema/qudt/isQuantityKindOf">;
    /**
     * **[qudt:normative reference (ISO)](http://qudt.org/schema/qudt/isoNormativeReference)**
     *
     * @type        property
     * @parent      qudt:normativeReference
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    readonly isoNormativeReference: import("../index.js").Iri<"http://qudt.org/schema/qudt/isoNormativeReference">;
    /**
     * **[qudt:java name](http://qudt.org/schema/qudt/javaName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly javaName: import("../index.js").Iri<"http://qudt.org/schema/qudt/javaName">;
    /**
     * **[qudt:Javascript name](http://qudt.org/schema/qudt/jsName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly jsName: import("../index.js").Iri<"http://qudt.org/schema/qudt/jsName">;
    /**
     * **[qudt:landscape](http://qudt.org/schema/qudt/landscape)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#boolean
     */
    readonly landscape: import("../index.js").Iri<"http://qudt.org/schema/qudt/landscape">;
    /**
     * **[qudt:latex definition](http://qudt.org/schema/qudt/latexDefinition)**
     *
     * @type        property
     * @range       qudt:LatexString
     */
    readonly latexDefinition: import("../index.js").Iri<"http://qudt.org/schema/qudt/latexDefinition">;
    /**
     * **[qudt:latex symbol](http://qudt.org/schema/qudt/latexSymbol)**
     *
     * The symbol is a glyph that is used to represent some concept, typically a unit or a quantity, in a compact form. For example, the symbol for an Ohm is \(ohm\). This contrasts with 'unit:abbreviation', which gives a short alphanumeric abbreviation for the unit, 'ohm' for Ohm.
     *
     * @type        property
     * @range       qudt:LatexString
     */
    readonly latexSymbol: import("../index.js").Iri<"http://qudt.org/schema/qudt/latexSymbol">;
    /**
     * **[qudt:length](http://qudt.org/schema/qudt/length)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#integer
     */
    readonly length: import("../index.js").Iri<"http://qudt.org/schema/qudt/length">;
    /**
     * **[qudt:literal](http://qudt.org/schema/qudt/literal)**
     *
     * @type        property
     * @parent      http://www.linkedmodel.org/schema/dtype#literal
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly literal: import("../index.js").Iri<"http://qudt.org/schema/qudt/literal">;
    /**
     * **[qudt:lower bound](http://qudt.org/schema/qudt/lowerBound)**
     *
     * @type        property
     */
    readonly lowerBound: import("../index.js").Iri<"http://qudt.org/schema/qudt/lowerBound">;
    /**
     * **[qudt:math definition](http://qudt.org/schema/qudt/mathDefinition)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly mathDefinition: import("../index.js").Iri<"http://qudt.org/schema/qudt/mathDefinition">;
    /**
     * **[qudt:mathML definition](http://qudt.org/schema/qudt/mathMLdefinition)**
     *
     * @type        property
     * @parent      qudt:mathDefinition
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly mathMLdefinition: import("../index.js").Iri<"http://qudt.org/schema/qudt/mathMLdefinition">;
    /**
     * **[qudt:matlab name](http://qudt.org/schema/qudt/matlabName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly matlabName: import("../index.js").Iri<"http://qudt.org/schema/qudt/matlabName">;
    /**
     * **[qudt:max exclusive](http://qudt.org/schema/qudt/maxExclusive)**
     *
     * maxExclusive is the exclusive upper bound of the value space for a datatype with the ordered property. The value of maxExclusive must be in the value space of the base type or be equal to {value} in {base type definition}.
     *
     * @type        property
     * @parent      qudt:upperBound
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly maxExclusive: import("../index.js").Iri<"http://qudt.org/schema/qudt/maxExclusive">;
    /**
     * **[qudt:max inclusive](http://qudt.org/schema/qudt/maxInclusive)**
     *
     * maxInclusive is the inclusive upper bound of the value space for a datatype with the ordered property. The value of maxInclusive must be in the value space of the base type.
     *
     * @type        property
     * @parent      qudt:upperBound
     */
    readonly maxInclusive: import("../index.js").Iri<"http://qudt.org/schema/qudt/maxInclusive">;
    /**
     * **[qudt:Microsoft SQL Server name](http://qudt.org/schema/qudt/microsoftSQLServerName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly microsoftSQLServerName: import("../index.js").Iri<"http://qudt.org/schema/qudt/microsoftSQLServerName">;
    /**
     * **[qudt:min exclusive](http://qudt.org/schema/qudt/minExclusive)**
     *
     * minExclusive is the exclusive lower bound of the value space for a datatype with the ordered property. The value of minExclusive must be in the value space of the base type or be equal to {value} in {base type definition}.
     *
     * @type        property
     * @parent      qudt:lowerBound
     */
    readonly minExclusive: import("../index.js").Iri<"http://qudt.org/schema/qudt/minExclusive">;
    /**
     * **[qudt:min inclusive](http://qudt.org/schema/qudt/minInclusive)**
     *
     * minInclusive is the inclusive lower bound of the value space for a datatype with the ordered property. The value of minInclusive must be in the value space of the base type.
     *
     * @type        property
     * @parent      qudt:lowerBound
     */
    readonly minInclusive: import("../index.js").Iri<"http://qudt.org/schema/qudt/minInclusive">;
    /**
     * **[qudt:MySQL name](http://qudt.org/schema/qudt/mySQLName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly mySQLName: import("../index.js").Iri<"http://qudt.org/schema/qudt/mySQLName">;
    /**
     * **[qudt:negative delta limit](http://qudt.org/schema/qudt/negativeDeltaLimit)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly negativeDeltaLimit: import("../index.js").Iri<"http://qudt.org/schema/qudt/negativeDeltaLimit">;
    /**
     * **[qudt:normative reference](http://qudt.org/schema/qudt/normativeReference)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    readonly normativeReference: import("../index.js").Iri<"http://qudt.org/schema/qudt/normativeReference">;
    /**
     * **[qudt:numerator dimension vector](http://qudt.org/schema/qudt/numeratorDimensionVector)**
     *
     * @type        property
     * @range       qudt:QuantityKindDimensionVector
     */
    readonly numeratorDimensionVector: import("../index.js").Iri<"http://qudt.org/schema/qudt/numeratorDimensionVector">;
    /**
     * **[qudt:numeric value](http://qudt.org/schema/qudt/numericValue)**
     *
     * @type        property
     * @range       qudt:NumericUnion
     */
    readonly numericValue: import("../index.js").Iri<"http://qudt.org/schema/qudt/numericValue">;
    /**
     * **[qudt:ODBC name](http://qudt.org/schema/qudt/odbcName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly odbcName: import("../index.js").Iri<"http://qudt.org/schema/qudt/odbcName">;
    /**
     * **[qudt:OLE DB name](http://qudt.org/schema/qudt/oleDBName)**
     *
     * OLE DB (Object Linking and Embedding, Database, sometimes written as OLEDB or OLE-DB), an API designed by Microsoft, allows accessing data from a variety of sources in a uniform manner. The API provides a set of interfaces implemented using the Component Object Model (COM); it is otherwise unrelated to OLE.
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly oleDBName: import("../index.js").Iri<"http://qudt.org/schema/qudt/oleDBName">;
    /**
     * **[qudt:om unit](http://qudt.org/schema/qudt/omUnit)**
     *
     * @type        property
     * @domain      qudt:Unit
     */
    readonly omUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/omUnit">;
    /**
     * **[qudt:online reference](http://qudt.org/schema/qudt/onlineReference)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    readonly onlineReference: import("../index.js").Iri<"http://qudt.org/schema/qudt/onlineReference">;
    /**
     * **[qudt:ORACLE SQL name](http://qudt.org/schema/qudt/oracleSQLName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly oracleSQLName: import("../index.js").Iri<"http://qudt.org/schema/qudt/oracleSQLName">;
    /**
     * **[qudt:order](http://qudt.org/schema/qudt/order)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#nonNegativeInteger
     */
    readonly order: import("../index.js").Iri<"http://qudt.org/schema/qudt/order">;
    /**
     * **[qudt:ordered type](http://qudt.org/schema/qudt/orderedType)**
     *
     * @type        property
     */
    readonly orderedType: import("../index.js").Iri<"http://qudt.org/schema/qudt/orderedType">;
    /**
     * **[qudt:out of scope](http://qudt.org/schema/qudt/outOfScope)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#boolean
     */
    readonly outOfScope: import("../index.js").Iri<"http://qudt.org/schema/qudt/outOfScope">;
    /**
     * **[qudt:permissible maths](http://qudt.org/schema/qudt/permissibleMaths)**
     *
     * @type        property
     */
    readonly permissibleMaths: import("../index.js").Iri<"http://qudt.org/schema/qudt/permissibleMaths">;
    /**
     * **[qudt:permissible transformation](http://qudt.org/schema/qudt/permissibleTransformation)**
     *
     * @type        property
     */
    readonly permissibleTransformation: import("../index.js").Iri<"http://qudt.org/schema/qudt/permissibleTransformation">;
    /**
     * **[qudt:description (plain text)](http://qudt.org/schema/qudt/plainTextDescription)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly plainTextDescription: import("../index.js").Iri<"http://qudt.org/schema/qudt/plainTextDescription">;
    /**
     * **[qudt:Positive delta limit](http://qudt.org/schema/qudt/positiveDeltaLimit)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly positiveDeltaLimit: import("../index.js").Iri<"http://qudt.org/schema/qudt/positiveDeltaLimit">;
    /**
     * **[qudt:prefix](http://qudt.org/schema/qudt/prefix)**
     *
     * Associates a unit with the appropriate prefix, if any.
     *
     * @type        property
     * @range       qudt:Prefix
     */
    readonly prefix: import("../index.js").Iri<"http://qudt.org/schema/qudt/prefix">;
    /**
     * **[qudt:prefix multiplier](http://qudt.org/schema/qudt/prefixMultiplier)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#double
     */
    readonly prefixMultiplier: import("../index.js").Iri<"http://qudt.org/schema/qudt/prefixMultiplier">;
    /**
     * **[qudt:protocol buffers name](http://qudt.org/schema/qudt/protocolBuffersName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly protocolBuffersName: import("../index.js").Iri<"http://qudt.org/schema/qudt/protocolBuffersName">;
    /**
     * **[qudt:python name](http://qudt.org/schema/qudt/pythonName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly pythonName: import("../index.js").Iri<"http://qudt.org/schema/qudt/pythonName">;
    /**
     * **[qudt:denominator dimension vector](http://qudt.org/schema/qudt/qkdvDenominator)**
     *
     * @type        property
     * @range       qudt:QuantityKindDimensionVector
     */
    readonly qkdvDenominator: import("../index.js").Iri<"http://qudt.org/schema/qudt/qkdvDenominator">;
    /**
     * **[qudt:numerator dimension vector](http://qudt.org/schema/qudt/qkdvNumerator)**
     *
     * @type        property
     * @range       qudt:QuantityKindDimensionVector
     */
    readonly qkdvNumerator: import("../index.js").Iri<"http://qudt.org/schema/qudt/qkdvNumerator">;
    /**
     * **[qudt:quantity](http://qudt.org/schema/qudt/quantity)**
     *
     * @type        property
     */
    readonly quantity: import("../index.js").Iri<"http://qudt.org/schema/qudt/quantity">;
    /**
     * **[qudt:quantity value](http://qudt.org/schema/qudt/quantityValue)**
     *
     * @type        property
     * @range       qudt:QuantityValue
     */
    readonly quantityValue: import("../index.js").Iri<"http://qudt.org/schema/qudt/quantityValue">;
    /**
     * **[qudt:rationale](http://qudt.org/schema/qudt/rationale)**
     *
     * @type        property
     * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML
     */
    readonly rationale: import("../index.js").Iri<"http://qudt.org/schema/qudt/rationale">;
    /**
     * **[qudt:rdfs datatype](http://qudt.org/schema/qudt/rdfsDatatype)**
     *
     * @type        property
     */
    readonly rdfsDatatype: import("../index.js").Iri<"http://qudt.org/schema/qudt/rdfsDatatype">;
    /**
     * **[qudt:reference](http://qudt.org/schema/qudt/reference)**
     *
     * @type        property
     */
    readonly reference: import("../index.js").Iri<"http://qudt.org/schema/qudt/reference">;
    /**
     * **[qudt:reference unit](http://qudt.org/schema/qudt/referenceUnit)**
     *
     * @type        property
     */
    readonly referenceUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/referenceUnit">;
    /**
     * **[qudt:relative standard uncertainty](http://qudt.org/schema/qudt/relativeStandardUncertainty)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#double
     */
    readonly relativeStandardUncertainty: import("../index.js").Iri<"http://qudt.org/schema/qudt/relativeStandardUncertainty">;
    /**
     * **[qudt:relevant quantity kind](http://qudt.org/schema/qudt/relevantQuantityKind)**
     *
     * @type        property
     * @range       qudt:QuantityKind
     */
    readonly relevantQuantityKind: import("../index.js").Iri<"http://qudt.org/schema/qudt/relevantQuantityKind">;
    /**
     * **[qudt:Relevant Unit](http://qudt.org/schema/qudt/relevantUnit)**
     *
     * This property is used for qudt:Discipline instances to identify the Unit instances that are used within a given discipline.
     *
     * @type        property
     * @range       qudt:Unit
     */
    readonly relevantUnit: import("../index.js").Iri<"http://qudt.org/schema/qudt/relevantUnit">;
    /**
     * **[qudt:rule type](http://qudt.org/schema/qudt/ruleType)**
     *
     * @type        property
     */
    readonly ruleType: import("../index.js").Iri<"http://qudt.org/schema/qudt/ruleType">;
    /**
     * **[qudt:scale type](http://qudt.org/schema/qudt/scaleType)**
     *
     * @type        property
     */
    readonly scaleType: import("../index.js").Iri<"http://qudt.org/schema/qudt/scaleType">;
    /**
     * **[qudt:si units expression](http://qudt.org/schema/qudt/siUnitsExpression)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly siUnitsExpression: import("../index.js").Iri<"http://qudt.org/schema/qudt/siUnitsExpression">;
    /**
     * **[qudt:specialization](http://qudt.org/schema/qudt/specialization)**
     *
     * @type        property
     */
    readonly specialization: import("../index.js").Iri<"http://qudt.org/schema/qudt/specialization">;
    /**
     * **[qudt:standard uncertainty](http://qudt.org/schema/qudt/standardUncertainty)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#double
     */
    readonly standardUncertainty: import("../index.js").Iri<"http://qudt.org/schema/qudt/standardUncertainty">;
    /**
     * **[qudt:superceded by](http://qudt.org/schema/qudt/supercededBy)**
     *
     * @type        property
     */
    readonly supercededBy: import("../index.js").Iri<"http://qudt.org/schema/qudt/supercededBy">;
    /**
     * **[qudt:symbol](http://qudt.org/schema/qudt/symbol)**
     *
     * The symbol is a glyph that is used to represent some concept, typically a unit or a quantity, in a compact form. For example, the symbol for an Ohm is \(ohm\). This contrasts with 'unit:abbreviation', which gives a short alphanumeric abbreviation for the unit, 'ohm' for Ohm.
     *
     * @type        property
     * @parent      qudt:literal
     */
    readonly symbol: import("../index.js").Iri<"http://qudt.org/schema/qudt/symbol">;
    /**
     * **[qudt:system definition](http://qudt.org/schema/qudt/systemDefinition)**
     *
     * @type        property
     */
    readonly systemDefinition: import("../index.js").Iri<"http://qudt.org/schema/qudt/systemDefinition">;
    /**
     * **[qudt:system derived quantity kind](http://qudt.org/schema/qudt/systemDerivedQuantityKind)**
     *
     * @type        property
     * @parent      qudt:hasQuantityKind
     */
    readonly systemDerivedQuantityKind: import("../index.js").Iri<"http://qudt.org/schema/qudt/systemDerivedQuantityKind">;
    /**
     * **[qudt:system dimension](http://qudt.org/schema/qudt/systemDimension)**
     *
     * @type        property
     */
    readonly systemDimension: import("../index.js").Iri<"http://qudt.org/schema/qudt/systemDimension">;
    /**
     * **[qudt:ucum case-insensitive code](http://qudt.org/schema/qudt/ucumCaseInsensitiveCode)**
     *
     * @type        property
     * @parent      qudt:ucumCode
     */
    readonly ucumCaseInsensitiveCode: import("../index.js").Iri<"http://qudt.org/schema/qudt/ucumCaseInsensitiveCode">;
    /**
     * **[qudt:ucum case-sensitive code](http://qudt.org/schema/qudt/ucumCaseSensitiveCode)**
     *
     * @type        property
     * @parent      qudt:ucumCode
     */
    readonly ucumCaseSensitiveCode: import("../index.js").Iri<"http://qudt.org/schema/qudt/ucumCaseSensitiveCode">;
    /**
     * **[qudt:ucum code](http://qudt.org/schema/qudt/ucumCode)**
     *
     * @type        property
     * @parent      http://www.w3.org/2004/02/skos/core#notation
     * @range       qudt:UCUMcs or qudt:UCUMcs-term
     */
    readonly ucumCode: import("../index.js").Iri<"http://qudt.org/schema/qudt/ucumCode">;
    /**
     * **[qudt:udunits code](http://qudt.org/schema/qudt/udunitsCode)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly udunitsCode: import("../index.js").Iri<"http://qudt.org/schema/qudt/udunitsCode">;
    /**
     * **[qudt:unece common code](http://qudt.org/schema/qudt/uneceCommonCode)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly uneceCommonCode: import("../index.js").Iri<"http://qudt.org/schema/qudt/uneceCommonCode">;
    /**
     * **[qudt:unit](http://qudt.org/schema/qudt/unit)**
     *
     * @type        property
     * @range       qudt:Unit
     */
    readonly unit: import("../index.js").Iri<"http://qudt.org/schema/qudt/unit">;
    /**
     * **[qudt:unit for](http://qudt.org/schema/qudt/unitFor)**
     *
     * @type        property
     */
    readonly unitFor: import("../index.js").Iri<"http://qudt.org/schema/qudt/unitFor">;
    /**
     * **[qudt:is unit of system](http://qudt.org/schema/qudt/unitOfSystem)**
     *
     * @type        property
     * @domain      qudt:Unit
     * @range       qudt:SystemOfUnits
     */
    readonly unitOfSystem: import("../index.js").Iri<"http://qudt.org/schema/qudt/unitOfSystem">;
    /**
     * **[qudt:upper bound](http://qudt.org/schema/qudt/upperBound)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anySimpleType
     */
    readonly upperBound: import("../index.js").Iri<"http://qudt.org/schema/qudt/upperBound">;
    /**
     * **[qudt:url](http://qudt.org/schema/qudt/url)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    readonly url: import("../index.js").Iri<"http://qudt.org/schema/qudt/url">;
    /**
     * **[qudt:value](http://qudt.org/schema/qudt/value)**
     *
     * @type        property
     */
    readonly value: import("../index.js").Iri<"http://qudt.org/schema/qudt/value">;
    /**
     * **[qudt:value for quantity](http://qudt.org/schema/qudt/valueQuantity)**
     *
     * @type        property
     */
    readonly valueQuantity: import("../index.js").Iri<"http://qudt.org/schema/qudt/valueQuantity">;
    /**
     * **[qudt:value union](http://qudt.org/schema/qudt/valueUnion)**
     *
     * A datatype that is the union of numeric xsd data types. "numericUnion" is equivalent to the xsd specification that uses an xsd:union of memberTypes="xsd:decimal xsd:double xsd:float xsd:integer".
     *
     * @type        datatype
     * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
     */
    readonly valueUnion: import("../index.js").Iri<"http://qudt.org/schema/qudt/valueUnion">;
    /**
     * **[qudt:Vusal Basic name](http://qudt.org/schema/qudt/vbName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly vbName: import("../index.js").Iri<"http://qudt.org/schema/qudt/vbName">;
    /**
     * **[qudt:vector magnitude](http://qudt.org/schema/qudt/vectorMagnitude)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#float
     */
    readonly vectorMagnitude: import("../index.js").Iri<"http://qudt.org/schema/qudt/vectorMagnitude">;
    /**
     * **[qudt:width](http://qudt.org/schema/qudt/width)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly width: import("../index.js").Iri<"http://qudt.org/schema/qudt/width">;
}
/**
 * prefix **qudt:** <<http://qudt.org/schema/qudt/>>
 *
 * Quantities, Units, Dimensions and Types (QUDT)
 *
 * The QUDT, or “Quantity, Unit, Dimension and Type” schema defines the base classes properties, and restrictions used for modeling physical quantities, units of measure, and their dimensions in various measurement systems.  The goal of the QUDT ontology is to provide a unified model of, measurable quantities, units for measuring different kinds of quantities, the numerical values of quantities in different units of measure and the data structures and data types used to store and manipulate these objects in software.
 *
 * Except for unit prefixes, all units are specified in separate vocabularies.  Descriptions are provided in both HTML and LaTeX formats.  A quantity is a measure of an observable phenomenon, that, when associated with something, becomes a property of that thing; a particular object, event, or physical system.
 *
 * A quantity has meaning in the context of a measurement (i.e. the thing measured, the measured value, the accuracy of measurement, etc.) whereas the underlying quantity kind is independent of any particular measurement.  Thus, length is a quantity kind while the height of a rocket is a specific quantity of length; its magnitude that may be expressed in meters, feet, inches, etc.  Or, as stated at Wikipedia, in the language of measurement, quantities are quantifiable aspects of the world, such as time, distance, velocity, mass, momentum, energy, and weight, and units are used to describe their measure.  Many of these quantities are related to each other by various physical laws, and as a result the units of some of the quantities can be expressed as products (or ratios) of powers of other units (e.g., momentum is mass times velocity and velocity is measured in distance divided by time).
 *
 * Version: 2.1.2
 */
declare const qudt: Vocabulary;
export default qudt;
//# sourceMappingURL=qudt.d.ts.map