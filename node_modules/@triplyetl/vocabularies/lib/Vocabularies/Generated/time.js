/**
 * Time Ontology
 * time.ts (2023-08-08T17:30:10.348Z)
 */
import VocabularyBase from '../../Classes/Vocabulary.js';
class Vocabulary extends VocabularyBase {
    /**
     * **[time:Date-Time description](http://www.w3.org/2006/time#DateTimeDescription)**
     *
     * Description of date and time structured with separate values for the various elements of a calendar-clock system. The temporal reference system is fixed to Gregorian Calendar, and the range of year, month, day properties restricted to corresponding XML Schema types xsd:gYear, xsd:gMonth and xsd:gDay, respectively.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/0138842de1a03bbdd49daa2aac9bcc32
     */
    DateTimeDescription = this.toIri().concat('DateTimeDescription');
    /**
     * **[time:Date-time interval](http://www.w3.org/2006/time#DateTimeInterval)**
     *
     * DateTimeInterval is a subclass of ProperInterval, defined using the multi-element DateTimeDescription.
     *
     * @type        class
     * @parent      time:ProperInterval
     */
    DateTimeInterval = this.toIri().concat('DateTimeInterval');
    /**
     * **[time:Day of week](http://www.w3.org/2006/time#DayOfWeek)**
     *
     * The day of week
     *
     * @type        class
     * @parent      http://www.w3.org/2002/07/owl#Thing
     */
    DayOfWeek = this.toIri().concat('DayOfWeek');
    /**
     * **[time:Time duration](http://www.w3.org/2006/time#Duration)**
     *
     * Duration of a temporal extent expressed as a number scaled by a temporal unit
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/c993f9e5517e8e2be4def7b550f0caa0
     */
    Duration = this.toIri().concat('Duration');
    /**
     * **[time:Duration description](http://www.w3.org/2006/time#DurationDescription)**
     *
     * Description of temporal extent structured with separate values for the various elements of a calendar-clock system. The temporal reference system is fixed to Gregorian Calendar, and the range of each of the numeric properties is restricted to xsd:decimal
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/80aaaabd3636eaf7a2dba89c2a9fd158
     */
    DurationDescription = this.toIri().concat('DurationDescription');
    /**
     * **[time:Friday](http://www.w3.org/2006/time#Friday)**
     *
     * @type        instance
     */
    Friday = this.toIri().concat('Friday');
    /**
     * **[time:Generalized date-time description](http://www.w3.org/2006/time#GeneralDateTimeDescription)**
     *
     * Description of date and time structured with separate values for the various elements of a calendar-clock system
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/04ff96e9a8941746e66989c51b7724fa
     */
    GeneralDateTimeDescription = this.toIri().concat('GeneralDateTimeDescription');
    /**
     * **[time:Generalized duration description](http://www.w3.org/2006/time#GeneralDurationDescription)**
     *
     * Description of temporal extent structured with separate values for the various elements of a calendar-clock system.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/4822f6b0c2cfe6b7eb907c419595e18b
     */
    GeneralDurationDescription = this.toIri().concat('GeneralDurationDescription');
    /**
     * **[time:Time instant](http://www.w3.org/2006/time#Instant)**
     *
     * A temporal entity with zero extent or duration
     *
     * @type        class
     * @parent      time:TemporalEntity
     */
    Instant = this.toIri().concat('Instant');
    /**
     * **[time:Time interval](http://www.w3.org/2006/time#Interval)**
     *
     * A temporal entity with an extent or duration
     *
     * @type        class
     * @parent      time:TemporalEntity
     */
    Interval = this.toIri().concat('Interval');
    /**
     * **[time:January](http://www.w3.org/2006/time#January)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/686d0c5f40406e19a0366cba86b50504
     */
    January = this.toIri().concat('January');
    /**
     * **[time:Monday](http://www.w3.org/2006/time#Monday)**
     *
     * @type        instance
     */
    Monday = this.toIri().concat('Monday');
    /**
     * **[time:Month of year](http://www.w3.org/2006/time#MonthOfYear)**
     *
     * The month of the year
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/0c52b28ed437e5a87f9f7a35091cda08
     */
    MonthOfYear = this.toIri().concat('MonthOfYear');
    /**
     * **[time:Proper interval](http://www.w3.org/2006/time#ProperInterval)**
     *
     * A temporal entity with non-zero extent or duration, i.e. for which the value of the beginning and end are different
     *
     * @type        class
     * @parent      time:Interval
     */
    ProperInterval = this.toIri().concat('ProperInterval');
    /**
     * **[time:Saturday](http://www.w3.org/2006/time#Saturday)**
     *
     * @type        instance
     */
    Saturday = this.toIri().concat('Saturday');
    /**
     * **[time:Sunday](http://www.w3.org/2006/time#Sunday)**
     *
     * @type        instance
     */
    Sunday = this.toIri().concat('Sunday');
    /**
     * **[time:Temporal Reference System](http://www.w3.org/2006/time#TRS)**
     *
     * A temporal reference system, such as a temporal coordinate system (with an origin, direction, and scale), a calendar-clock combination, or a (possibly hierarchical) ordinal system. This is a stub class, representing the set of all temporal reference systems.
     *
     * @type        class
     */
    TRS = this.toIri().concat('TRS');
    /**
     * **[time:Temporal duration](http://www.w3.org/2006/time#TemporalDuration)**
     *
     * Time extent; duration of a time interval separate from its particular start position
     *
     * @type        class
     */
    TemporalDuration = this.toIri().concat('TemporalDuration');
    /**
     * **[time:Temporal entity](http://www.w3.org/2006/time#TemporalEntity)**
     *
     * A temporal interval or instant.
     *
     * @type        class
     * @parent      http://www.w3.org/2002/07/owl#Thing
     */
    TemporalEntity = this.toIri().concat('TemporalEntity');
    /**
     * **[time:Temporal position](http://www.w3.org/2006/time#TemporalPosition)**
     *
     * A position on a time-line
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/4b9be99ce927c8289904307800374772
     */
    TemporalPosition = this.toIri().concat('TemporalPosition');
    /**
     * **[time:Temporal unit](http://www.w3.org/2006/time#TemporalUnit)**
     *
     * A standard duration, which provides a scale factor for a time extent, or the granularity or precision for a time position.
     *
     * @type        class
     * @parent      time:TemporalDuration
     */
    TemporalUnit = this.toIri().concat('TemporalUnit');
    /**
     * **[time:Thursday](http://www.w3.org/2006/time#Thursday)**
     *
     * @type        instance
     */
    Thursday = this.toIri().concat('Thursday');
    /**
     * **[time:Time position](http://www.w3.org/2006/time#TimePosition)**
     *
     * A temporal position described using either a (nominal) value from an ordinal reference system, or a (numeric) value in a temporal coordinate system.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/eb59c6ad7f41b823f96025d98b76aca3
     */
    TimePosition = this.toIri().concat('TimePosition');
    /**
     * **[time:Time Zone](http://www.w3.org/2006/time#TimeZone)**
     *
     * A Time Zone specifies the amount by which the local time is offset from UTC.  A time zone is usually denoted geographically (e.g. Australian Eastern Daylight Time), with a constant value in a given region. The region where it applies and the offset from UTC are specified by a locally recognised governing authority.
     *
     * @type        class
     */
    TimeZone = this.toIri().concat('TimeZone');
    /**
     * **[time:Tuesday](http://www.w3.org/2006/time#Tuesday)**
     *
     * @type        instance
     */
    Tuesday = this.toIri().concat('Tuesday');
    /**
     * **[time:Wednesday](http://www.w3.org/2006/time#Wednesday)**
     *
     * @type        instance
     */
    Wednesday = this.toIri().concat('Wednesday');
    /**
     * **[time:Year](http://www.w3.org/2006/time#Year)**
     *
     * Year duration
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1f0225e05f9d198a6b76a93e1888ff6f
     */
    Year = this.toIri().concat('Year');
    /**
     * **[time:after](http://www.w3.org/2006/time#after)**
     *
     * Gives directionality to time. If a temporal entity T1 is after another temporal entity T2, then the beginning of T1 is after the end of T2.
     *
     * @type        property
     * @domain      time:TemporalEntity
     * @range       time:TemporalEntity
     */
    after = this.toIri().concat('after');
    /**
     * **[time:before](http://www.w3.org/2006/time#before)**
     *
     * Gives directionality to time. If a temporal entity T1 is before another temporal entity T2, then the end of T1 is before the beginning of T2. Thus, "before" can be considered to be basic to instants and derived for intervals.
     *
     * @type        property
     * @domain      time:TemporalEntity
     * @range       time:TemporalEntity
     */
    before = this.toIri().concat('before');
    /**
     * **[time:day](http://www.w3.org/2006/time#day)**
     *
     * Day position in a calendar-clock system.The range of this property is not specified, so can be replaced by any specific representation of a calendar day from any calendar.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     */
    day = this.toIri().concat('day');
    /**
     * **[time:day of week](http://www.w3.org/2006/time#dayOfWeek)**
     *
     * The day of week, whose value is a member of the class time:DayOfWeek
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       time:DayOfWeek
     */
    dayOfWeek = this.toIri().concat('dayOfWeek');
    /**
     * **[time:day of year](http://www.w3.org/2006/time#dayOfYear)**
     *
     * The number of the day within the year
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       http://www.w3.org/2001/XMLSchema#nonNegativeInteger
     */
    dayOfYear = this.toIri().concat('dayOfYear');
    /**
     * **[time:days duration](http://www.w3.org/2006/time#days)**
     *
     * length of, or element of the length of, a temporal extent expressed in days
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    days = this.toIri().concat('days');
    /**
     * **[time:Generalized day](http://www.w3.org/2006/time#generalDay)**
     *
     * Day of month - formulated as a text string with a pattern constraint to reproduce the same lexical form as gDay, except that values up to 99 are permitted, in order to support calendars with more than 31 days in a month. Note that the value-space is not defined, so a generic OWL2 processor cannot compute ordering relationships of values of this type.
     *
     * @type        datatype
     */
    generalDay = this.toIri().concat('generalDay');
    /**
     * **[time:Generalized month](http://www.w3.org/2006/time#generalMonth)**
     *
     * Month of year - formulated as a text string with a pattern constraint to reproduce the same lexical form as gMonth, except that values up to 20 are permitted, in order to support calendars with more than 12 months in the year. Note that the value-space is not defined, so a generic OWL2 processor cannot compute ordering relationships of values of this type.
     *
     * @type        datatype
     */
    generalMonth = this.toIri().concat('generalMonth');
    /**
     * **[time:Generalized year](http://www.w3.org/2006/time#generalYear)**
     *
     * Year number - formulated as a text string with a pattern constraint to reproduce the same lexical form as gYear, but not restricted to values from the Gregorian calendar. Note that the value-space is not defined, so a generic OWL2 processor cannot compute ordering relationships of values of this type.
     *
     * @type        datatype
     */
    generalYear = this.toIri().concat('generalYear');
    /**
     * **[time:has beginning](http://www.w3.org/2006/time#hasBeginning)**
     *
     * Beginning of a temporal entity
     *
     * @type        property
     * @parent      time:hasTime
     * @domain      time:TemporalEntity
     * @range       time:Instant
     */
    hasBeginning = this.toIri().concat('hasBeginning');
    /**
     * **[time:has Date-Time description](http://www.w3.org/2006/time#hasDateTimeDescription)**
     *
     * Value of DateTimeInterval expressed as a structured value. The beginning and end of the interval coincide with the limits of the shortest element in the description.
     *
     * @type        property
     * @domain      time:DateTimeInterval
     * @range       time:GeneralDateTimeDescription
     */
    hasDateTimeDescription = this.toIri().concat('hasDateTimeDescription');
    /**
     * **[time:has duration](http://www.w3.org/2006/time#hasDuration)**
     *
     * Duration of a temporal entity, event or activity, or thing, expressed as a scaled value
     *
     * @type        property
     * @parent      time:hasTemporalDuration
     * @range       time:Duration
     */
    hasDuration = this.toIri().concat('hasDuration');
    /**
     * **[time:has duration description](http://www.w3.org/2006/time#hasDurationDescription)**
     *
     * Duration of a temporal entity, expressed using a structured description
     *
     * @type        property
     * @parent      time:hasTemporalDuration
     * @range       time:GeneralDurationDescription
     */
    hasDurationDescription = this.toIri().concat('hasDurationDescription');
    /**
     * **[time:has end](http://www.w3.org/2006/time#hasEnd)**
     *
     * End of a temporal entity.
     *
     * @type        property
     * @parent      time:hasTime
     * @domain      time:TemporalEntity
     * @range       time:Instant
     */
    hasEnd = this.toIri().concat('hasEnd');
    /**
     * **[time:Temporal reference system used](http://www.w3.org/2006/time#hasTRS)**
     *
     * The temporal reference system used by a temporal position or extent description.
     *
     * @type        property
     * @domain      time:TemporalPosition or time:GeneralDurationDescription
     * @range       time:TRS
     */
    hasTRS = this.toIri().concat('hasTRS');
    /**
     * **[time:has temporal duration](http://www.w3.org/2006/time#hasTemporalDuration)**
     *
     * Duration of a temporal entity.
     *
     * @type        property
     * @domain      time:TemporalEntity
     * @range       time:TemporalDuration
     */
    hasTemporalDuration = this.toIri().concat('hasTemporalDuration');
    /**
     * **[time:has time](http://www.w3.org/2006/time#hasTime)**
     *
     * Supports the association of a temporal entity (instant or interval) to any thing
     *
     * @type        property
     * @range       time:TemporalEntity
     */
    hasTime = this.toIri().concat('hasTime');
    /**
     * **[time:has XSD duration](http://www.w3.org/2006/time#hasXSDDuration)**
     *
     * Extent of a temporal entity, expressed using xsd:duration
     *
     * @type        property
     * @domain      time:TemporalEntity
     * @range       http://www.w3.org/2001/XMLSchema#duration
     */
    hasXSDDuration = this.toIri().concat('hasXSDDuration');
    /**
     * **[time:hour](http://www.w3.org/2006/time#hour)**
     *
     * Hour position in a calendar-clock system.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       http://www.w3.org/2001/XMLSchema#nonNegativeInteger
     */
    hour = this.toIri().concat('hour');
    /**
     * **[time:hours duration](http://www.w3.org/2006/time#hours)**
     *
     * length of, or element of the length of, a temporal extent expressed in hours
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    hours = this.toIri().concat('hours');
    /**
     * **[time:in date-time description](http://www.w3.org/2006/time#inDateTime)**
     *
     * Position of an instant, expressed using a structured description
     *
     * @type        property
     * @parent      time:inTemporalPosition
     * @domain      time:Instant
     * @range       time:GeneralDateTimeDescription
     */
    inDateTime = this.toIri().concat('inDateTime');
    /**
     * **[time:Temporal position](http://www.w3.org/2006/time#inTemporalPosition)**
     *
     * Position of a time instant
     *
     * @type        property
     * @domain      time:Instant
     * @range       time:TemporalPosition
     */
    inTemporalPosition = this.toIri().concat('inTemporalPosition');
    /**
     * **[time:Time position](http://www.w3.org/2006/time#inTimePosition)**
     *
     * Position of a time instant expressed as a TimePosition
     *
     * @type        property
     * @parent      time:inTemporalPosition
     * @domain      time:Instant
     * @range       time:TimePosition
     */
    inTimePosition = this.toIri().concat('inTimePosition');
    /**
     * **[time:in XSD date](http://www.w3.org/2006/time#inXSDDate)**
     *
     * Position of an instant, expressed using xsd:date
     *
     * @type        property
     * @domain      time:Instant
     * @range       http://www.w3.org/2001/XMLSchema#date
     */
    inXSDDate = this.toIri().concat('inXSDDate');
    /**
     * **[time:in XSD Date-Time](http://www.w3.org/2006/time#inXSDDateTime)**
     *
     * Position of an instant, expressed using xsd:dateTime
     *
     * @type        property
     * @domain      time:Instant
     * @range       http://www.w3.org/2001/XMLSchema#dateTime
     */
    inXSDDateTime = this.toIri().concat('inXSDDateTime');
    /**
     * **[time:in XSD Date-Time-Stamp](http://www.w3.org/2006/time#inXSDDateTimeStamp)**
     *
     * Position of an instant, expressed using xsd:dateTimeStamp
     *
     * @type        property
     * @domain      time:Instant
     * @range       http://www.w3.org/2001/XMLSchema#dateTimeStamp
     */
    inXSDDateTimeStamp = this.toIri().concat('inXSDDateTimeStamp');
    /**
     * **[time:in XSD g-Year](http://www.w3.org/2006/time#inXSDgYear)**
     *
     * Position of an instant, expressed using xsd:gYear
     *
     * @type        property
     * @domain      time:Instant
     * @range       http://www.w3.org/2001/XMLSchema#gYear
     */
    inXSDgYear = this.toIri().concat('inXSDgYear');
    /**
     * **[time:in XSD g-YearMonth](http://www.w3.org/2006/time#inXSDgYearMonth)**
     *
     * Position of an instant, expressed using xsd:gYearMonth
     *
     * @type        property
     * @domain      time:Instant
     * @range       http://www.w3.org/2001/XMLSchema#gYearMonth
     */
    inXSDgYearMonth = this.toIri().concat('inXSDgYearMonth');
    /**
     * **[time:has time instant inside](http://www.w3.org/2006/time#inside)**
     *
     * An instant that falls inside the interval. It is not intended to include beginnings and ends of intervals.
     *
     * @type        property
     * @domain      time:Interval
     * @range       time:Instant
     */
    inside = this.toIri().concat('inside');
    /**
     * **[time:interval after](http://www.w3.org/2006/time#intervalAfter)**
     *
     * If a proper interval T1 is intervalAfter another proper interval T2, then the beginning of T1 is after the end of T2.
     *
     * @type        property
     * @parent      time:after
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalAfter = this.toIri().concat('intervalAfter');
    /**
     * **[time:interval before](http://www.w3.org/2006/time#intervalBefore)**
     *
     * If a proper interval T1 is intervalBefore another proper interval T2, then the end of T1 is before the beginning of T2.
     *
     * @type        property
     * @parent      time:before
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalBefore = this.toIri().concat('intervalBefore');
    /**
     * **[time:interval contains](http://www.w3.org/2006/time#intervalContains)**
     *
     * If a proper interval T1 is intervalContains another proper interval T2, then the beginning of T1 is before the beginning of T2, and the end of T1 is after the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalContains = this.toIri().concat('intervalContains');
    /**
     * **[time:interval disjoint](http://www.w3.org/2006/time#intervalDisjoint)**
     *
     * If a proper interval T1 is intervalDisjoint another proper interval T2, then the beginning of T1 is after the end of T2, or the end of T1 is before the beginning of T2, i.e. the intervals do not overlap in any way, but their ordering relationship is not known.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalDisjoint = this.toIri().concat('intervalDisjoint');
    /**
     * **[time:interval during](http://www.w3.org/2006/time#intervalDuring)**
     *
     * If a proper interval T1 is intervalDuring another proper interval T2, then the beginning of T1 is after the beginning of T2, and the end of T1 is before the end of T2.
     *
     * @type        property
     * @parent      time:intervalIn
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalDuring = this.toIri().concat('intervalDuring');
    /**
     * **[time:interval equals](http://www.w3.org/2006/time#intervalEquals)**
     *
     * If a proper interval T1 is intervalEquals another proper interval T2, then the beginning of T1 is coincident with the beginning of T2, and the end of T1 is coincident with the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalEquals = this.toIri().concat('intervalEquals');
    /**
     * **[time:interval finished by](http://www.w3.org/2006/time#intervalFinishedBy)**
     *
     * If a proper interval T1 is intervalFinishedBy another proper interval T2, then the beginning of T1 is before the beginning of T2, and the end of T1 is coincident with the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalFinishedBy = this.toIri().concat('intervalFinishedBy');
    /**
     * **[time:interval finishes](http://www.w3.org/2006/time#intervalFinishes)**
     *
     * If a proper interval T1 is intervalFinishes another proper interval T2, then the beginning of T1 is after the beginning of T2, and the end of T1 is coincident with the end of T2.
     *
     * @type        property
     * @parent      time:intervalIn
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalFinishes = this.toIri().concat('intervalFinishes');
    /**
     * **[time:interval in](http://www.w3.org/2006/time#intervalIn)**
     *
     * If a proper interval T1 is intervalIn another proper interval T2, then the beginning of T1 is after the beginning of T2 or is coincident with the beginning of T2, and the end of T1 is before the end of T2, or is coincident with the end of T2, except that end of T1 may not be coincident with the end of T2 if the beginning of T1 is coincident with the beginning of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalIn = this.toIri().concat('intervalIn');
    /**
     * **[time:interval meets](http://www.w3.org/2006/time#intervalMeets)**
     *
     * If a proper interval T1 is intervalMeets another proper interval T2, then the end of T1 is coincident with the beginning of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalMeets = this.toIri().concat('intervalMeets');
    /**
     * **[time:interval met by](http://www.w3.org/2006/time#intervalMetBy)**
     *
     * If a proper interval T1 is intervalMetBy another proper interval T2, then the beginning of T1 is coincident with the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalMetBy = this.toIri().concat('intervalMetBy');
    /**
     * **[time:interval overlapped by](http://www.w3.org/2006/time#intervalOverlappedBy)**
     *
     * If a proper interval T1 is intervalOverlappedBy another proper interval T2, then the beginning of T1 is after the beginning of T2, the beginning of T1 is before the end of T2, and the end of T1 is after the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalOverlappedBy = this.toIri().concat('intervalOverlappedBy');
    /**
     * **[time:interval overlaps](http://www.w3.org/2006/time#intervalOverlaps)**
     *
     * If a proper interval T1 is intervalOverlaps another proper interval T2, then the beginning of T1 is before the beginning of T2, the end of T1 is after the beginning of T2, and the end of T1 is before the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalOverlaps = this.toIri().concat('intervalOverlaps');
    /**
     * **[time:interval started by](http://www.w3.org/2006/time#intervalStartedBy)**
     *
     * If a proper interval T1 is intervalStarted another proper interval T2, then the beginning of T1 is coincident with the beginning of T2, and the end of T1 is after the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalStartedBy = this.toIri().concat('intervalStartedBy');
    /**
     * **[time:interval starts](http://www.w3.org/2006/time#intervalStarts)**
     *
     * If a proper interval T1 is intervalStarts another proper interval T2, then the beginning of T1 is coincident with the beginning of T2, and the end of T1 is before the end of T2.
     *
     * @type        property
     * @parent      time:intervalIn
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    intervalStarts = this.toIri().concat('intervalStarts');
    /**
     * **[time:minute](http://www.w3.org/2006/time#minute)**
     *
     * Minute position in a calendar-clock system.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       http://www.w3.org/2001/XMLSchema#nonNegativeInteger
     */
    minute = this.toIri().concat('minute');
    /**
     * **[time:minutes](http://www.w3.org/2006/time#minutes)**
     *
     * length, or element of, a temporal extent expressed in minutes
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    minutes = this.toIri().concat('minutes');
    /**
     * **[time:month](http://www.w3.org/2006/time#month)**
     *
     * Month position in a calendar-clock system.The range of this property is not specified, so can be replaced by any specific representation of a calendar month from any calendar.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     */
    month = this.toIri().concat('month');
    /**
     * **[time:month of year](http://www.w3.org/2006/time#monthOfYear)**
     *
     * The month of the year, whose value is a member of the class time:MonthOfYear
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       time:MonthOfYear
     */
    monthOfYear = this.toIri().concat('monthOfYear');
    /**
     * **[time:months duration](http://www.w3.org/2006/time#months)**
     *
     * length of, or element of the length of, a temporal extent expressed in months
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    months = this.toIri().concat('months');
    /**
     * **[time:Name of temporal position](http://www.w3.org/2006/time#nominalPosition)**
     *
     * The (nominal) value indicating temporal position in an ordinal reference system
     *
     * @type        property
     * @domain      time:TimePosition
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    nominalPosition = this.toIri().concat('nominalPosition');
    /**
     * **[time:Numeric value of temporal duration](http://www.w3.org/2006/time#numericDuration)**
     *
     * Value of a temporal extent expressed as a decimal number scaled by a temporal unit
     *
     * @type        property
     * @domain      time:Duration
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    numericDuration = this.toIri().concat('numericDuration');
    /**
     * **[time:Numeric value of temporal position](http://www.w3.org/2006/time#numericPosition)**
     *
     * The (numeric) value indicating position within a temporal coordinate system
     *
     * @type        property
     * @domain      time:TimePosition
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    numericPosition = this.toIri().concat('numericPosition');
    /**
     * **[time:second](http://www.w3.org/2006/time#second)**
     *
     * Second position in a calendar-clock system.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    second = this.toIri().concat('second');
    /**
     * **[time:seconds duration](http://www.w3.org/2006/time#seconds)**
     *
     * length of, or element of the length of, a temporal extent expressed in seconds
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    seconds = this.toIri().concat('seconds');
    /**
     * **[time:in time zone](http://www.w3.org/2006/time#timeZone)**
     *
     * The time zone for clock elements in the temporal position
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       time:TimeZone
     */
    timeZone = this.toIri().concat('timeZone');
    /**
     * **[time:Day (unit of temporal duration)](http://www.w3.org/2006/time#unitDay)**
     *
     * @type        instance
     */
    unitDay = this.toIri().concat('unitDay');
    /**
     * **[time:Hour (unit of temporal duration)](http://www.w3.org/2006/time#unitHour)**
     *
     * @type        instance
     */
    unitHour = this.toIri().concat('unitHour');
    /**
     * **[time:Minute (unit of temporal duration)](http://www.w3.org/2006/time#unitMinute)**
     *
     * @type        instance
     */
    unitMinute = this.toIri().concat('unitMinute');
    /**
     * **[time:Month (unit of temporal duration)](http://www.w3.org/2006/time#unitMonth)**
     *
     * @type        instance
     */
    unitMonth = this.toIri().concat('unitMonth');
    /**
     * **[time:Second (unit of temporal duration)](http://www.w3.org/2006/time#unitSecond)**
     *
     * @type        instance
     */
    unitSecond = this.toIri().concat('unitSecond');
    /**
     * **[time:temporal unit type](http://www.w3.org/2006/time#unitType)**
     *
     * The temporal unit which provides the precision of a date-time value or scale of a temporal extent
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription or time:Duration
     * @range       time:TemporalUnit
     */
    unitType = this.toIri().concat('unitType');
    /**
     * **[time:Week (unit of temporal duration)](http://www.w3.org/2006/time#unitWeek)**
     *
     * @type        instance
     */
    unitWeek = this.toIri().concat('unitWeek');
    /**
     * **[time:Year (unit of temporal duration)](http://www.w3.org/2006/time#unitYear)**
     *
     * @type        instance
     */
    unitYear = this.toIri().concat('unitYear');
    /**
     * **[time:week](http://www.w3.org/2006/time#week)**
     *
     * Week number within the year.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       http://www.w3.org/2001/XMLSchema#nonNegativeInteger
     */
    week = this.toIri().concat('week');
    /**
     * **[time:weeks duration](http://www.w3.org/2006/time#weeks)**
     *
     * length of, or element of the length of, a temporal extent expressed in weeks
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    weeks = this.toIri().concat('weeks');
    /**
     * **[time:has XSD date-time](http://www.w3.org/2006/time#xsdDateTime)**
     *
     * Value of DateTimeInterval expressed as a compact value.
     *
     * @type        property
     * @domain      time:DateTimeInterval
     * @range       http://www.w3.org/2001/XMLSchema#dateTime
     */
    xsdDateTime = this.toIri().concat('xsdDateTime');
    /**
     * **[time:year](http://www.w3.org/2006/time#year)**
     *
     * Year position in a calendar-clock system.The range of this property is not specified, so can be replaced by any specific representation of a calendar year from any calendar.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     */
    year = this.toIri().concat('year');
    /**
     * **[time:years duration](http://www.w3.org/2006/time#years)**
     *
     * length of, or element of the length of, a temporal extent expressed in years
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    years = this.toIri().concat('years');
}
/**
 * prefix **time:** <<http://www.w3.org/2006/time#>>
 *
 * Time Ontology
 *
 * OWL-Time is an OWL-2 DL ontology of temporal concepts, for describing the temporal properties of resources in the world or described in Web pages.  The ontology provides a vocabulary for expressing facts about topological (ordering) relations among instants and intervals, together with information about durations, and about temporal position including date-time information.  Time positions and durations may be expressed using either the conventional (Gregorian) calendar and clock, or using another temporal reference system such as Unix-time, geologic time, or different calendars.
 *
 * Version: 1.0.0
 *
 *  - [SPARQL endpoint](https://triplydb.com/w3c/time/sparql/time)
 */
const time = new Vocabulary('http://www.w3.org/2006/time#');
export default time;
//# sourceMappingURL=time.js.map