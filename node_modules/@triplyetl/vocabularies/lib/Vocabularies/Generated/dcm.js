/**
 * Dublin Core Type Vocabulary
 * dcm.ts (2023-08-08T17:30:08.887Z)
 */
import VocabularyBase from '../../Classes/Vocabulary.js';
class Vocabulary extends VocabularyBase {
    /**
     * **[dcm:Collection](http://purl.org/dc/dcmitype/Collection)**
     *
     * A collection is described as a group; its parts may also be separately described.
     *
     * @type        class
     */
    Collection = this.toIri().concat('Collection');
    /**
     * **[dcm:Dataset](http://purl.org/dc/dcmitype/Dataset)**
     *
     * Data encoded in a defined structure.
     *
     * @type        class
     */
    Dataset = this.toIri().concat('Dataset');
    /**
     * **[dcm:Event](http://purl.org/dc/dcmitype/Event)**
     *
     * A non-persistent, time-based occurrence.
     *
     * @type        class
     */
    Event = this.toIri().concat('Event');
    /**
     * **[dcm:Image](http://purl.org/dc/dcmitype/Image)**
     *
     * A visual representation other than text.
     *
     * @type        class
     */
    Image = this.toIri().concat('Image');
    /**
     * **[dcm:Interactive Resource](http://purl.org/dc/dcmitype/InteractiveResource)**
     *
     * A resource requiring interaction from the user to be understood, executed, or experienced.
     *
     * @type        class
     */
    InteractiveResource = this.toIri().concat('InteractiveResource');
    /**
     * **[dcm:Moving Image](http://purl.org/dc/dcmitype/MovingImage)**
     *
     * A series of visual representations imparting an impression of motion when shown in succession.
     *
     * @type        class
     * @parent      dcm:Image
     */
    MovingImage = this.toIri().concat('MovingImage');
    /**
     * **[dcm:Physical Object](http://purl.org/dc/dcmitype/PhysicalObject)**
     *
     * An inanimate, three-dimensional object or substance.
     *
     * @type        class
     */
    PhysicalObject = this.toIri().concat('PhysicalObject');
    /**
     * **[dcm:Service](http://purl.org/dc/dcmitype/Service)**
     *
     * A system that provides one or more functions.
     *
     * @type        class
     */
    Service = this.toIri().concat('Service');
    /**
     * **[dcm:Software](http://purl.org/dc/dcmitype/Software)**
     *
     * A computer program in source or compiled form.
     *
     * @type        class
     */
    Software = this.toIri().concat('Software');
    /**
     * **[dcm:Sound](http://purl.org/dc/dcmitype/Sound)**
     *
     * A resource primarily intended to be heard.
     *
     * @type        class
     */
    Sound = this.toIri().concat('Sound');
    /**
     * **[dcm:Still Image](http://purl.org/dc/dcmitype/StillImage)**
     *
     * A static visual representation.
     *
     * @type        class
     * @parent      dcm:Image
     */
    StillImage = this.toIri().concat('StillImage');
    /**
     * **[dcm:Text](http://purl.org/dc/dcmitype/Text)**
     *
     * A resource consisting primarily of words for reading.
     *
     * @type        class
     */
    Text = this.toIri().concat('Text');
}
/**
 * prefix **dcm:** <<http://purl.org/dc/dcmitype/>>
 *
 * Dublin Core Type Vocabulary
 *
 * The DCMI Type Vocabulary was created in 2001.  It defines classes for basic types of thing that can be described using DCMI metadata terms.
 *
 * Version: 2012-06-14
 */
const dcm = new Vocabulary('http://purl.org/dc/dcmitype/');
export default dcm;
//# sourceMappingURL=dcm.js.map