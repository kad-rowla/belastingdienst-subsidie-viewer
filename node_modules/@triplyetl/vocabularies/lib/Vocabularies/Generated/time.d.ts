/**
 * Time Ontology
 * time.ts (2023-08-08T17:30:10.348Z)
 */
import VocabularyBase from '../../Classes/Vocabulary.js';
declare class Vocabulary extends VocabularyBase<'http://www.w3.org/2006/time#'> {
    /**
     * **[time:Date-Time description](http://www.w3.org/2006/time#DateTimeDescription)**
     *
     * Description of date and time structured with separate values for the various elements of a calendar-clock system. The temporal reference system is fixed to Gregorian Calendar, and the range of year, month, day properties restricted to corresponding XML Schema types xsd:gYear, xsd:gMonth and xsd:gDay, respectively.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/0138842de1a03bbdd49daa2aac9bcc32
     */
    readonly DateTimeDescription: import("../index.js").Iri<"http://www.w3.org/2006/time#DateTimeDescription">;
    /**
     * **[time:Date-time interval](http://www.w3.org/2006/time#DateTimeInterval)**
     *
     * DateTimeInterval is a subclass of ProperInterval, defined using the multi-element DateTimeDescription.
     *
     * @type        class
     * @parent      time:ProperInterval
     */
    readonly DateTimeInterval: import("../index.js").Iri<"http://www.w3.org/2006/time#DateTimeInterval">;
    /**
     * **[time:Day of week](http://www.w3.org/2006/time#DayOfWeek)**
     *
     * The day of week
     *
     * @type        class
     * @parent      http://www.w3.org/2002/07/owl#Thing
     */
    readonly DayOfWeek: import("../index.js").Iri<"http://www.w3.org/2006/time#DayOfWeek">;
    /**
     * **[time:Time duration](http://www.w3.org/2006/time#Duration)**
     *
     * Duration of a temporal extent expressed as a number scaled by a temporal unit
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/c993f9e5517e8e2be4def7b550f0caa0
     */
    readonly Duration: import("../index.js").Iri<"http://www.w3.org/2006/time#Duration">;
    /**
     * **[time:Duration description](http://www.w3.org/2006/time#DurationDescription)**
     *
     * Description of temporal extent structured with separate values for the various elements of a calendar-clock system. The temporal reference system is fixed to Gregorian Calendar, and the range of each of the numeric properties is restricted to xsd:decimal
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/80aaaabd3636eaf7a2dba89c2a9fd158
     */
    readonly DurationDescription: import("../index.js").Iri<"http://www.w3.org/2006/time#DurationDescription">;
    /**
     * **[time:Friday](http://www.w3.org/2006/time#Friday)**
     *
     * @type        instance
     */
    readonly Friday: import("../index.js").Iri<"http://www.w3.org/2006/time#Friday">;
    /**
     * **[time:Generalized date-time description](http://www.w3.org/2006/time#GeneralDateTimeDescription)**
     *
     * Description of date and time structured with separate values for the various elements of a calendar-clock system
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/04ff96e9a8941746e66989c51b7724fa
     */
    readonly GeneralDateTimeDescription: import("../index.js").Iri<"http://www.w3.org/2006/time#GeneralDateTimeDescription">;
    /**
     * **[time:Generalized duration description](http://www.w3.org/2006/time#GeneralDurationDescription)**
     *
     * Description of temporal extent structured with separate values for the various elements of a calendar-clock system.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/4822f6b0c2cfe6b7eb907c419595e18b
     */
    readonly GeneralDurationDescription: import("../index.js").Iri<"http://www.w3.org/2006/time#GeneralDurationDescription">;
    /**
     * **[time:Time instant](http://www.w3.org/2006/time#Instant)**
     *
     * A temporal entity with zero extent or duration
     *
     * @type        class
     * @parent      time:TemporalEntity
     */
    readonly Instant: import("../index.js").Iri<"http://www.w3.org/2006/time#Instant">;
    /**
     * **[time:Time interval](http://www.w3.org/2006/time#Interval)**
     *
     * A temporal entity with an extent or duration
     *
     * @type        class
     * @parent      time:TemporalEntity
     */
    readonly Interval: import("../index.js").Iri<"http://www.w3.org/2006/time#Interval">;
    /**
     * **[time:January](http://www.w3.org/2006/time#January)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/686d0c5f40406e19a0366cba86b50504
     */
    readonly January: import("../index.js").Iri<"http://www.w3.org/2006/time#January">;
    /**
     * **[time:Monday](http://www.w3.org/2006/time#Monday)**
     *
     * @type        instance
     */
    readonly Monday: import("../index.js").Iri<"http://www.w3.org/2006/time#Monday">;
    /**
     * **[time:Month of year](http://www.w3.org/2006/time#MonthOfYear)**
     *
     * The month of the year
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/0c52b28ed437e5a87f9f7a35091cda08
     */
    readonly MonthOfYear: import("../index.js").Iri<"http://www.w3.org/2006/time#MonthOfYear">;
    /**
     * **[time:Proper interval](http://www.w3.org/2006/time#ProperInterval)**
     *
     * A temporal entity with non-zero extent or duration, i.e. for which the value of the beginning and end are different
     *
     * @type        class
     * @parent      time:Interval
     */
    readonly ProperInterval: import("../index.js").Iri<"http://www.w3.org/2006/time#ProperInterval">;
    /**
     * **[time:Saturday](http://www.w3.org/2006/time#Saturday)**
     *
     * @type        instance
     */
    readonly Saturday: import("../index.js").Iri<"http://www.w3.org/2006/time#Saturday">;
    /**
     * **[time:Sunday](http://www.w3.org/2006/time#Sunday)**
     *
     * @type        instance
     */
    readonly Sunday: import("../index.js").Iri<"http://www.w3.org/2006/time#Sunday">;
    /**
     * **[time:Temporal Reference System](http://www.w3.org/2006/time#TRS)**
     *
     * A temporal reference system, such as a temporal coordinate system (with an origin, direction, and scale), a calendar-clock combination, or a (possibly hierarchical) ordinal system. This is a stub class, representing the set of all temporal reference systems.
     *
     * @type        class
     */
    readonly TRS: import("../index.js").Iri<"http://www.w3.org/2006/time#TRS">;
    /**
     * **[time:Temporal duration](http://www.w3.org/2006/time#TemporalDuration)**
     *
     * Time extent; duration of a time interval separate from its particular start position
     *
     * @type        class
     */
    readonly TemporalDuration: import("../index.js").Iri<"http://www.w3.org/2006/time#TemporalDuration">;
    /**
     * **[time:Temporal entity](http://www.w3.org/2006/time#TemporalEntity)**
     *
     * A temporal interval or instant.
     *
     * @type        class
     * @parent      http://www.w3.org/2002/07/owl#Thing
     */
    readonly TemporalEntity: import("../index.js").Iri<"http://www.w3.org/2006/time#TemporalEntity">;
    /**
     * **[time:Temporal position](http://www.w3.org/2006/time#TemporalPosition)**
     *
     * A position on a time-line
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/4b9be99ce927c8289904307800374772
     */
    readonly TemporalPosition: import("../index.js").Iri<"http://www.w3.org/2006/time#TemporalPosition">;
    /**
     * **[time:Temporal unit](http://www.w3.org/2006/time#TemporalUnit)**
     *
     * A standard duration, which provides a scale factor for a time extent, or the granularity or precision for a time position.
     *
     * @type        class
     * @parent      time:TemporalDuration
     */
    readonly TemporalUnit: import("../index.js").Iri<"http://www.w3.org/2006/time#TemporalUnit">;
    /**
     * **[time:Thursday](http://www.w3.org/2006/time#Thursday)**
     *
     * @type        instance
     */
    readonly Thursday: import("../index.js").Iri<"http://www.w3.org/2006/time#Thursday">;
    /**
     * **[time:Time position](http://www.w3.org/2006/time#TimePosition)**
     *
     * A temporal position described using either a (nominal) value from an ordinal reference system, or a (numeric) value in a temporal coordinate system.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/eb59c6ad7f41b823f96025d98b76aca3
     */
    readonly TimePosition: import("../index.js").Iri<"http://www.w3.org/2006/time#TimePosition">;
    /**
     * **[time:Time Zone](http://www.w3.org/2006/time#TimeZone)**
     *
     * A Time Zone specifies the amount by which the local time is offset from UTC.  A time zone is usually denoted geographically (e.g. Australian Eastern Daylight Time), with a constant value in a given region. The region where it applies and the offset from UTC are specified by a locally recognised governing authority.
     *
     * @type        class
     */
    readonly TimeZone: import("../index.js").Iri<"http://www.w3.org/2006/time#TimeZone">;
    /**
     * **[time:Tuesday](http://www.w3.org/2006/time#Tuesday)**
     *
     * @type        instance
     */
    readonly Tuesday: import("../index.js").Iri<"http://www.w3.org/2006/time#Tuesday">;
    /**
     * **[time:Wednesday](http://www.w3.org/2006/time#Wednesday)**
     *
     * @type        instance
     */
    readonly Wednesday: import("../index.js").Iri<"http://www.w3.org/2006/time#Wednesday">;
    /**
     * **[time:Year](http://www.w3.org/2006/time#Year)**
     *
     * Year duration
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1f0225e05f9d198a6b76a93e1888ff6f
     */
    readonly Year: import("../index.js").Iri<"http://www.w3.org/2006/time#Year">;
    /**
     * **[time:after](http://www.w3.org/2006/time#after)**
     *
     * Gives directionality to time. If a temporal entity T1 is after another temporal entity T2, then the beginning of T1 is after the end of T2.
     *
     * @type        property
     * @domain      time:TemporalEntity
     * @range       time:TemporalEntity
     */
    readonly after: import("../index.js").Iri<"http://www.w3.org/2006/time#after">;
    /**
     * **[time:before](http://www.w3.org/2006/time#before)**
     *
     * Gives directionality to time. If a temporal entity T1 is before another temporal entity T2, then the end of T1 is before the beginning of T2. Thus, "before" can be considered to be basic to instants and derived for intervals.
     *
     * @type        property
     * @domain      time:TemporalEntity
     * @range       time:TemporalEntity
     */
    readonly before: import("../index.js").Iri<"http://www.w3.org/2006/time#before">;
    /**
     * **[time:day](http://www.w3.org/2006/time#day)**
     *
     * Day position in a calendar-clock system.The range of this property is not specified, so can be replaced by any specific representation of a calendar day from any calendar.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     */
    readonly day: import("../index.js").Iri<"http://www.w3.org/2006/time#day">;
    /**
     * **[time:day of week](http://www.w3.org/2006/time#dayOfWeek)**
     *
     * The day of week, whose value is a member of the class time:DayOfWeek
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       time:DayOfWeek
     */
    readonly dayOfWeek: import("../index.js").Iri<"http://www.w3.org/2006/time#dayOfWeek">;
    /**
     * **[time:day of year](http://www.w3.org/2006/time#dayOfYear)**
     *
     * The number of the day within the year
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       http://www.w3.org/2001/XMLSchema#nonNegativeInteger
     */
    readonly dayOfYear: import("../index.js").Iri<"http://www.w3.org/2006/time#dayOfYear">;
    /**
     * **[time:days duration](http://www.w3.org/2006/time#days)**
     *
     * length of, or element of the length of, a temporal extent expressed in days
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    readonly days: import("../index.js").Iri<"http://www.w3.org/2006/time#days">;
    /**
     * **[time:Generalized day](http://www.w3.org/2006/time#generalDay)**
     *
     * Day of month - formulated as a text string with a pattern constraint to reproduce the same lexical form as gDay, except that values up to 99 are permitted, in order to support calendars with more than 31 days in a month. Note that the value-space is not defined, so a generic OWL2 processor cannot compute ordering relationships of values of this type.
     *
     * @type        datatype
     */
    readonly generalDay: import("../index.js").Iri<"http://www.w3.org/2006/time#generalDay">;
    /**
     * **[time:Generalized month](http://www.w3.org/2006/time#generalMonth)**
     *
     * Month of year - formulated as a text string with a pattern constraint to reproduce the same lexical form as gMonth, except that values up to 20 are permitted, in order to support calendars with more than 12 months in the year. Note that the value-space is not defined, so a generic OWL2 processor cannot compute ordering relationships of values of this type.
     *
     * @type        datatype
     */
    readonly generalMonth: import("../index.js").Iri<"http://www.w3.org/2006/time#generalMonth">;
    /**
     * **[time:Generalized year](http://www.w3.org/2006/time#generalYear)**
     *
     * Year number - formulated as a text string with a pattern constraint to reproduce the same lexical form as gYear, but not restricted to values from the Gregorian calendar. Note that the value-space is not defined, so a generic OWL2 processor cannot compute ordering relationships of values of this type.
     *
     * @type        datatype
     */
    readonly generalYear: import("../index.js").Iri<"http://www.w3.org/2006/time#generalYear">;
    /**
     * **[time:has beginning](http://www.w3.org/2006/time#hasBeginning)**
     *
     * Beginning of a temporal entity
     *
     * @type        property
     * @parent      time:hasTime
     * @domain      time:TemporalEntity
     * @range       time:Instant
     */
    readonly hasBeginning: import("../index.js").Iri<"http://www.w3.org/2006/time#hasBeginning">;
    /**
     * **[time:has Date-Time description](http://www.w3.org/2006/time#hasDateTimeDescription)**
     *
     * Value of DateTimeInterval expressed as a structured value. The beginning and end of the interval coincide with the limits of the shortest element in the description.
     *
     * @type        property
     * @domain      time:DateTimeInterval
     * @range       time:GeneralDateTimeDescription
     */
    readonly hasDateTimeDescription: import("../index.js").Iri<"http://www.w3.org/2006/time#hasDateTimeDescription">;
    /**
     * **[time:has duration](http://www.w3.org/2006/time#hasDuration)**
     *
     * Duration of a temporal entity, event or activity, or thing, expressed as a scaled value
     *
     * @type        property
     * @parent      time:hasTemporalDuration
     * @range       time:Duration
     */
    readonly hasDuration: import("../index.js").Iri<"http://www.w3.org/2006/time#hasDuration">;
    /**
     * **[time:has duration description](http://www.w3.org/2006/time#hasDurationDescription)**
     *
     * Duration of a temporal entity, expressed using a structured description
     *
     * @type        property
     * @parent      time:hasTemporalDuration
     * @range       time:GeneralDurationDescription
     */
    readonly hasDurationDescription: import("../index.js").Iri<"http://www.w3.org/2006/time#hasDurationDescription">;
    /**
     * **[time:has end](http://www.w3.org/2006/time#hasEnd)**
     *
     * End of a temporal entity.
     *
     * @type        property
     * @parent      time:hasTime
     * @domain      time:TemporalEntity
     * @range       time:Instant
     */
    readonly hasEnd: import("../index.js").Iri<"http://www.w3.org/2006/time#hasEnd">;
    /**
     * **[time:Temporal reference system used](http://www.w3.org/2006/time#hasTRS)**
     *
     * The temporal reference system used by a temporal position or extent description.
     *
     * @type        property
     * @domain      time:TemporalPosition or time:GeneralDurationDescription
     * @range       time:TRS
     */
    readonly hasTRS: import("../index.js").Iri<"http://www.w3.org/2006/time#hasTRS">;
    /**
     * **[time:has temporal duration](http://www.w3.org/2006/time#hasTemporalDuration)**
     *
     * Duration of a temporal entity.
     *
     * @type        property
     * @domain      time:TemporalEntity
     * @range       time:TemporalDuration
     */
    readonly hasTemporalDuration: import("../index.js").Iri<"http://www.w3.org/2006/time#hasTemporalDuration">;
    /**
     * **[time:has time](http://www.w3.org/2006/time#hasTime)**
     *
     * Supports the association of a temporal entity (instant or interval) to any thing
     *
     * @type        property
     * @range       time:TemporalEntity
     */
    readonly hasTime: import("../index.js").Iri<"http://www.w3.org/2006/time#hasTime">;
    /**
     * **[time:has XSD duration](http://www.w3.org/2006/time#hasXSDDuration)**
     *
     * Extent of a temporal entity, expressed using xsd:duration
     *
     * @type        property
     * @domain      time:TemporalEntity
     * @range       http://www.w3.org/2001/XMLSchema#duration
     */
    readonly hasXSDDuration: import("../index.js").Iri<"http://www.w3.org/2006/time#hasXSDDuration">;
    /**
     * **[time:hour](http://www.w3.org/2006/time#hour)**
     *
     * Hour position in a calendar-clock system.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       http://www.w3.org/2001/XMLSchema#nonNegativeInteger
     */
    readonly hour: import("../index.js").Iri<"http://www.w3.org/2006/time#hour">;
    /**
     * **[time:hours duration](http://www.w3.org/2006/time#hours)**
     *
     * length of, or element of the length of, a temporal extent expressed in hours
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    readonly hours: import("../index.js").Iri<"http://www.w3.org/2006/time#hours">;
    /**
     * **[time:in date-time description](http://www.w3.org/2006/time#inDateTime)**
     *
     * Position of an instant, expressed using a structured description
     *
     * @type        property
     * @parent      time:inTemporalPosition
     * @domain      time:Instant
     * @range       time:GeneralDateTimeDescription
     */
    readonly inDateTime: import("../index.js").Iri<"http://www.w3.org/2006/time#inDateTime">;
    /**
     * **[time:Temporal position](http://www.w3.org/2006/time#inTemporalPosition)**
     *
     * Position of a time instant
     *
     * @type        property
     * @domain      time:Instant
     * @range       time:TemporalPosition
     */
    readonly inTemporalPosition: import("../index.js").Iri<"http://www.w3.org/2006/time#inTemporalPosition">;
    /**
     * **[time:Time position](http://www.w3.org/2006/time#inTimePosition)**
     *
     * Position of a time instant expressed as a TimePosition
     *
     * @type        property
     * @parent      time:inTemporalPosition
     * @domain      time:Instant
     * @range       time:TimePosition
     */
    readonly inTimePosition: import("../index.js").Iri<"http://www.w3.org/2006/time#inTimePosition">;
    /**
     * **[time:in XSD date](http://www.w3.org/2006/time#inXSDDate)**
     *
     * Position of an instant, expressed using xsd:date
     *
     * @type        property
     * @domain      time:Instant
     * @range       http://www.w3.org/2001/XMLSchema#date
     */
    readonly inXSDDate: import("../index.js").Iri<"http://www.w3.org/2006/time#inXSDDate">;
    /**
     * **[time:in XSD Date-Time](http://www.w3.org/2006/time#inXSDDateTime)**
     *
     * Position of an instant, expressed using xsd:dateTime
     *
     * @type        property
     * @domain      time:Instant
     * @range       http://www.w3.org/2001/XMLSchema#dateTime
     */
    readonly inXSDDateTime: import("../index.js").Iri<"http://www.w3.org/2006/time#inXSDDateTime">;
    /**
     * **[time:in XSD Date-Time-Stamp](http://www.w3.org/2006/time#inXSDDateTimeStamp)**
     *
     * Position of an instant, expressed using xsd:dateTimeStamp
     *
     * @type        property
     * @domain      time:Instant
     * @range       http://www.w3.org/2001/XMLSchema#dateTimeStamp
     */
    readonly inXSDDateTimeStamp: import("../index.js").Iri<"http://www.w3.org/2006/time#inXSDDateTimeStamp">;
    /**
     * **[time:in XSD g-Year](http://www.w3.org/2006/time#inXSDgYear)**
     *
     * Position of an instant, expressed using xsd:gYear
     *
     * @type        property
     * @domain      time:Instant
     * @range       http://www.w3.org/2001/XMLSchema#gYear
     */
    readonly inXSDgYear: import("../index.js").Iri<"http://www.w3.org/2006/time#inXSDgYear">;
    /**
     * **[time:in XSD g-YearMonth](http://www.w3.org/2006/time#inXSDgYearMonth)**
     *
     * Position of an instant, expressed using xsd:gYearMonth
     *
     * @type        property
     * @domain      time:Instant
     * @range       http://www.w3.org/2001/XMLSchema#gYearMonth
     */
    readonly inXSDgYearMonth: import("../index.js").Iri<"http://www.w3.org/2006/time#inXSDgYearMonth">;
    /**
     * **[time:has time instant inside](http://www.w3.org/2006/time#inside)**
     *
     * An instant that falls inside the interval. It is not intended to include beginnings and ends of intervals.
     *
     * @type        property
     * @domain      time:Interval
     * @range       time:Instant
     */
    readonly inside: import("../index.js").Iri<"http://www.w3.org/2006/time#inside">;
    /**
     * **[time:interval after](http://www.w3.org/2006/time#intervalAfter)**
     *
     * If a proper interval T1 is intervalAfter another proper interval T2, then the beginning of T1 is after the end of T2.
     *
     * @type        property
     * @parent      time:after
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalAfter: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalAfter">;
    /**
     * **[time:interval before](http://www.w3.org/2006/time#intervalBefore)**
     *
     * If a proper interval T1 is intervalBefore another proper interval T2, then the end of T1 is before the beginning of T2.
     *
     * @type        property
     * @parent      time:before
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalBefore: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalBefore">;
    /**
     * **[time:interval contains](http://www.w3.org/2006/time#intervalContains)**
     *
     * If a proper interval T1 is intervalContains another proper interval T2, then the beginning of T1 is before the beginning of T2, and the end of T1 is after the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalContains: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalContains">;
    /**
     * **[time:interval disjoint](http://www.w3.org/2006/time#intervalDisjoint)**
     *
     * If a proper interval T1 is intervalDisjoint another proper interval T2, then the beginning of T1 is after the end of T2, or the end of T1 is before the beginning of T2, i.e. the intervals do not overlap in any way, but their ordering relationship is not known.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalDisjoint: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalDisjoint">;
    /**
     * **[time:interval during](http://www.w3.org/2006/time#intervalDuring)**
     *
     * If a proper interval T1 is intervalDuring another proper interval T2, then the beginning of T1 is after the beginning of T2, and the end of T1 is before the end of T2.
     *
     * @type        property
     * @parent      time:intervalIn
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalDuring: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalDuring">;
    /**
     * **[time:interval equals](http://www.w3.org/2006/time#intervalEquals)**
     *
     * If a proper interval T1 is intervalEquals another proper interval T2, then the beginning of T1 is coincident with the beginning of T2, and the end of T1 is coincident with the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalEquals: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalEquals">;
    /**
     * **[time:interval finished by](http://www.w3.org/2006/time#intervalFinishedBy)**
     *
     * If a proper interval T1 is intervalFinishedBy another proper interval T2, then the beginning of T1 is before the beginning of T2, and the end of T1 is coincident with the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalFinishedBy: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalFinishedBy">;
    /**
     * **[time:interval finishes](http://www.w3.org/2006/time#intervalFinishes)**
     *
     * If a proper interval T1 is intervalFinishes another proper interval T2, then the beginning of T1 is after the beginning of T2, and the end of T1 is coincident with the end of T2.
     *
     * @type        property
     * @parent      time:intervalIn
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalFinishes: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalFinishes">;
    /**
     * **[time:interval in](http://www.w3.org/2006/time#intervalIn)**
     *
     * If a proper interval T1 is intervalIn another proper interval T2, then the beginning of T1 is after the beginning of T2 or is coincident with the beginning of T2, and the end of T1 is before the end of T2, or is coincident with the end of T2, except that end of T1 may not be coincident with the end of T2 if the beginning of T1 is coincident with the beginning of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalIn: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalIn">;
    /**
     * **[time:interval meets](http://www.w3.org/2006/time#intervalMeets)**
     *
     * If a proper interval T1 is intervalMeets another proper interval T2, then the end of T1 is coincident with the beginning of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalMeets: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalMeets">;
    /**
     * **[time:interval met by](http://www.w3.org/2006/time#intervalMetBy)**
     *
     * If a proper interval T1 is intervalMetBy another proper interval T2, then the beginning of T1 is coincident with the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalMetBy: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalMetBy">;
    /**
     * **[time:interval overlapped by](http://www.w3.org/2006/time#intervalOverlappedBy)**
     *
     * If a proper interval T1 is intervalOverlappedBy another proper interval T2, then the beginning of T1 is after the beginning of T2, the beginning of T1 is before the end of T2, and the end of T1 is after the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalOverlappedBy: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalOverlappedBy">;
    /**
     * **[time:interval overlaps](http://www.w3.org/2006/time#intervalOverlaps)**
     *
     * If a proper interval T1 is intervalOverlaps another proper interval T2, then the beginning of T1 is before the beginning of T2, the end of T1 is after the beginning of T2, and the end of T1 is before the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalOverlaps: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalOverlaps">;
    /**
     * **[time:interval started by](http://www.w3.org/2006/time#intervalStartedBy)**
     *
     * If a proper interval T1 is intervalStarted another proper interval T2, then the beginning of T1 is coincident with the beginning of T2, and the end of T1 is after the end of T2.
     *
     * @type        property
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalStartedBy: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalStartedBy">;
    /**
     * **[time:interval starts](http://www.w3.org/2006/time#intervalStarts)**
     *
     * If a proper interval T1 is intervalStarts another proper interval T2, then the beginning of T1 is coincident with the beginning of T2, and the end of T1 is before the end of T2.
     *
     * @type        property
     * @parent      time:intervalIn
     * @domain      time:ProperInterval
     * @range       time:ProperInterval
     */
    readonly intervalStarts: import("../index.js").Iri<"http://www.w3.org/2006/time#intervalStarts">;
    /**
     * **[time:minute](http://www.w3.org/2006/time#minute)**
     *
     * Minute position in a calendar-clock system.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       http://www.w3.org/2001/XMLSchema#nonNegativeInteger
     */
    readonly minute: import("../index.js").Iri<"http://www.w3.org/2006/time#minute">;
    /**
     * **[time:minutes](http://www.w3.org/2006/time#minutes)**
     *
     * length, or element of, a temporal extent expressed in minutes
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    readonly minutes: import("../index.js").Iri<"http://www.w3.org/2006/time#minutes">;
    /**
     * **[time:month](http://www.w3.org/2006/time#month)**
     *
     * Month position in a calendar-clock system.The range of this property is not specified, so can be replaced by any specific representation of a calendar month from any calendar.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     */
    readonly month: import("../index.js").Iri<"http://www.w3.org/2006/time#month">;
    /**
     * **[time:month of year](http://www.w3.org/2006/time#monthOfYear)**
     *
     * The month of the year, whose value is a member of the class time:MonthOfYear
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       time:MonthOfYear
     */
    readonly monthOfYear: import("../index.js").Iri<"http://www.w3.org/2006/time#monthOfYear">;
    /**
     * **[time:months duration](http://www.w3.org/2006/time#months)**
     *
     * length of, or element of the length of, a temporal extent expressed in months
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    readonly months: import("../index.js").Iri<"http://www.w3.org/2006/time#months">;
    /**
     * **[time:Name of temporal position](http://www.w3.org/2006/time#nominalPosition)**
     *
     * The (nominal) value indicating temporal position in an ordinal reference system
     *
     * @type        property
     * @domain      time:TimePosition
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly nominalPosition: import("../index.js").Iri<"http://www.w3.org/2006/time#nominalPosition">;
    /**
     * **[time:Numeric value of temporal duration](http://www.w3.org/2006/time#numericDuration)**
     *
     * Value of a temporal extent expressed as a decimal number scaled by a temporal unit
     *
     * @type        property
     * @domain      time:Duration
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    readonly numericDuration: import("../index.js").Iri<"http://www.w3.org/2006/time#numericDuration">;
    /**
     * **[time:Numeric value of temporal position](http://www.w3.org/2006/time#numericPosition)**
     *
     * The (numeric) value indicating position within a temporal coordinate system
     *
     * @type        property
     * @domain      time:TimePosition
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    readonly numericPosition: import("../index.js").Iri<"http://www.w3.org/2006/time#numericPosition">;
    /**
     * **[time:second](http://www.w3.org/2006/time#second)**
     *
     * Second position in a calendar-clock system.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    readonly second: import("../index.js").Iri<"http://www.w3.org/2006/time#second">;
    /**
     * **[time:seconds duration](http://www.w3.org/2006/time#seconds)**
     *
     * length of, or element of the length of, a temporal extent expressed in seconds
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    readonly seconds: import("../index.js").Iri<"http://www.w3.org/2006/time#seconds">;
    /**
     * **[time:in time zone](http://www.w3.org/2006/time#timeZone)**
     *
     * The time zone for clock elements in the temporal position
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       time:TimeZone
     */
    readonly timeZone: import("../index.js").Iri<"http://www.w3.org/2006/time#timeZone">;
    /**
     * **[time:Day (unit of temporal duration)](http://www.w3.org/2006/time#unitDay)**
     *
     * @type        instance
     */
    readonly unitDay: import("../index.js").Iri<"http://www.w3.org/2006/time#unitDay">;
    /**
     * **[time:Hour (unit of temporal duration)](http://www.w3.org/2006/time#unitHour)**
     *
     * @type        instance
     */
    readonly unitHour: import("../index.js").Iri<"http://www.w3.org/2006/time#unitHour">;
    /**
     * **[time:Minute (unit of temporal duration)](http://www.w3.org/2006/time#unitMinute)**
     *
     * @type        instance
     */
    readonly unitMinute: import("../index.js").Iri<"http://www.w3.org/2006/time#unitMinute">;
    /**
     * **[time:Month (unit of temporal duration)](http://www.w3.org/2006/time#unitMonth)**
     *
     * @type        instance
     */
    readonly unitMonth: import("../index.js").Iri<"http://www.w3.org/2006/time#unitMonth">;
    /**
     * **[time:Second (unit of temporal duration)](http://www.w3.org/2006/time#unitSecond)**
     *
     * @type        instance
     */
    readonly unitSecond: import("../index.js").Iri<"http://www.w3.org/2006/time#unitSecond">;
    /**
     * **[time:temporal unit type](http://www.w3.org/2006/time#unitType)**
     *
     * The temporal unit which provides the precision of a date-time value or scale of a temporal extent
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription or time:Duration
     * @range       time:TemporalUnit
     */
    readonly unitType: import("../index.js").Iri<"http://www.w3.org/2006/time#unitType">;
    /**
     * **[time:Week (unit of temporal duration)](http://www.w3.org/2006/time#unitWeek)**
     *
     * @type        instance
     */
    readonly unitWeek: import("../index.js").Iri<"http://www.w3.org/2006/time#unitWeek">;
    /**
     * **[time:Year (unit of temporal duration)](http://www.w3.org/2006/time#unitYear)**
     *
     * @type        instance
     */
    readonly unitYear: import("../index.js").Iri<"http://www.w3.org/2006/time#unitYear">;
    /**
     * **[time:week](http://www.w3.org/2006/time#week)**
     *
     * Week number within the year.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     * @range       http://www.w3.org/2001/XMLSchema#nonNegativeInteger
     */
    readonly week: import("../index.js").Iri<"http://www.w3.org/2006/time#week">;
    /**
     * **[time:weeks duration](http://www.w3.org/2006/time#weeks)**
     *
     * length of, or element of the length of, a temporal extent expressed in weeks
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    readonly weeks: import("../index.js").Iri<"http://www.w3.org/2006/time#weeks">;
    /**
     * **[time:has XSD date-time](http://www.w3.org/2006/time#xsdDateTime)**
     *
     * Value of DateTimeInterval expressed as a compact value.
     *
     * @type        property
     * @domain      time:DateTimeInterval
     * @range       http://www.w3.org/2001/XMLSchema#dateTime
     */
    readonly xsdDateTime: import("../index.js").Iri<"http://www.w3.org/2006/time#xsdDateTime">;
    /**
     * **[time:year](http://www.w3.org/2006/time#year)**
     *
     * Year position in a calendar-clock system.The range of this property is not specified, so can be replaced by any specific representation of a calendar year from any calendar.
     *
     * @type        property
     * @domain      time:GeneralDateTimeDescription
     */
    readonly year: import("../index.js").Iri<"http://www.w3.org/2006/time#year">;
    /**
     * **[time:years duration](http://www.w3.org/2006/time#years)**
     *
     * length of, or element of the length of, a temporal extent expressed in years
     *
     * @type        property
     * @domain      time:GeneralDurationDescription
     * @range       http://www.w3.org/2001/XMLSchema#decimal
     */
    readonly years: import("../index.js").Iri<"http://www.w3.org/2006/time#years">;
}
/**
 * prefix **time:** <<http://www.w3.org/2006/time#>>
 *
 * Time Ontology
 *
 * OWL-Time is an OWL-2 DL ontology of temporal concepts, for describing the temporal properties of resources in the world or described in Web pages.  The ontology provides a vocabulary for expressing facts about topological (ordering) relations among instants and intervals, together with information about durations, and about temporal position including date-time information.  Time positions and durations may be expressed using either the conventional (Gregorian) calendar and clock, or using another temporal reference system such as Unix-time, geologic time, or different calendars.
 *
 * Version: 1.0.0
 *
 *  - [SPARQL endpoint](https://triplydb.com/w3c/time/sparql/time)
 */
declare const time: Vocabulary;
export default time;
//# sourceMappingURL=time.d.ts.map