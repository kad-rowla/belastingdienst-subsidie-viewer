/**
 * Quantities, Units, Dimensions and Types (QUDT)
 * qudt.ts (2023-08-08T17:30:09.334Z)
 */
import VocabularyBase from '../../Classes/Vocabulary.js';
class Vocabulary extends VocabularyBase {
    /**
     * **[qudt:Quantity Kind (abstract)](http://qudt.org/schema/qudt/AbstractQuantityKind)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1b70c639f094d2293c49a589c217b2bb
     */
    AbstractQuantityKind = this.toIri().concat('AbstractQuantityKind');
    /**
     * **[qudt:Angle unit](http://qudt.org/schema/qudt/AngleUnit)**
     *
     * All units relating to specification of angles.
     *
     * @type        class
     * @parent      qudt:DimensionlessUnit
     */
    AngleUnit = this.toIri().concat('AngleUnit');
    /**
     * **[qudt:QUDT Aspect](http://qudt.org/schema/qudt/Aspect)**
     *
     * @type        class
     * @parent      http://www.w3.org/2002/07/owl#Thing
     */
    Aspect = this.toIri().concat('Aspect');
    /**
     * **[qudt:Aspect Class](http://qudt.org/schema/qudt/AspectClass)**
     *
     * @type        class
     * @parent      http://www.w3.org/2000/01/rdf-schema#Class
     */
    AspectClass = this.toIri().concat('AspectClass');
    /**
     * **[qudt:Base Dimension Magnitude](http://qudt.org/schema/qudt/BaseDimensionMagnitude)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/118aa94719d50ae864545ee4ce9a4615
     */
    BaseDimensionMagnitude = this.toIri().concat('BaseDimensionMagnitude');
    /**
     * **[qudt:Big Endian](http://qudt.org/schema/qudt/BigEndian)**
     *
     * @type        instance
     */
    BigEndian = this.toIri().concat('BigEndian');
    /**
     * **[qudt:Binary Prefix](http://qudt.org/schema/qudt/BinaryPrefix)**
     *
     * A <em>Binary Prefix</em> is a prefix for multiples of units in data processing, data transmission, and digital information, notably the bit and the byte, to indicate multiplication by a power of 2.
     *
     * @type        class
     * @parent      qudt:Prefix
     */
    BinaryPrefix = this.toIri().concat('BinaryPrefix');
    /**
     * **[qudt:Bit Encoding](http://qudt.org/schema/qudt/BitEncoding)**
     *
     * @type        instance
     */
    BitEncoding = this.toIri().concat('BitEncoding');
    /**
     * **[qudt:Bit Encoding](http://qudt.org/schema/qudt/BitEncodingType)**
     *
     * A bit encoding is a correspondence between the two possible values of a bit, 0 or 1, and some interpretation. For example, in a boolean encoding, a bit denotes a truth value, where 0 corresponds to False and 1 corresponds to True.
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    BitEncodingType = this.toIri().concat('BitEncodingType');
    /**
     * **[qudt:Boolean Encoding](http://qudt.org/schema/qudt/BooleanEncoding)**
     *
     * @type        instance
     */
    BooleanEncoding = this.toIri().concat('BooleanEncoding');
    /**
     * **[qudt:Boolean encoding type](http://qudt.org/schema/qudt/BooleanEncodingType)**
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    BooleanEncodingType = this.toIri().concat('BooleanEncodingType');
    /**
     * **[qudt:Byte Encoding](http://qudt.org/schema/qudt/ByteEncodingType)**
     *
     * This class contains the various ways that information may be encoded into bytes.
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    ByteEncodingType = this.toIri().concat('ByteEncodingType');
    /**
     * **[qudt:Countably Infinite Cardinality Type](http://qudt.org/schema/qudt/'CT_COUNTABLY-INFINITE')**
     *
     * A set of numbers is called countably infinite if there is a way to enumerate them.  Formally this is done with a bijection function that associates each number in the set with exactly one of the positive integers.  The set of all fractions is also countably infinite.  In other words, any set \(X\) that has the same cardinality as the set of the natural numbers, or \(| X | \; =  \; | \mathbb N | \; = \; \aleph0\), is said to be a countably infinite set.
     *
     * @type        instance
     */
    'CT_COUNTABLY-INFINITE' = this.toIri().concat('CT_COUNTABLY-INFINITE');
    /**
     * **[qudt:Finite Cardinality Type](http://qudt.org/schema/qudt/CT_FINITE)**
     *
     * Any set \(X\) with cardinality less than that of the natural numbers, or \(| X | \\; <  \; | \\mathbb N | \), is said to be a finite set.
     *
     * @type        instance
     */
    CT_FINITE = this.toIri().concat('CT_FINITE');
    /**
     * **[qudt:Uncountable Cardinality Type](http://qudt.org/schema/qudt/CT_UNCOUNTABLE)**
     *
     * Any set with cardinality greater than that of the natural numbers, or \(| X | \; >  \; | \mathbb N | \),  for example \(| R| \; =  \;  c  \; > |\mathbb N |\), is said to be uncountable.
     *
     * @type        instance
     */
    CT_UNCOUNTABLE = this.toIri().concat('CT_UNCOUNTABLE');
    /**
     * **[qudt:Cardinality Type](http://qudt.org/schema/qudt/CardinalityType)**
     *
     * In mathematics, the cardinality of a set is a measure of the number of elements of the set.  For example, the set \(A = {2, 4, 6}\) contains 3 elements, and therefore \(A\) has a cardinality of 3. There are two approaches to cardinality – one which compares sets directly using bijections and injections, and another which uses cardinal numbers.
     *
     * @type        class
     * @parent      qudt:EnumeratedValue
     */
    CardinalityType = this.toIri().concat('CardinalityType');
    /**
     * **[qudt:Char Encoding](http://qudt.org/schema/qudt/CharEncoding)**
     *
     * @type        instance
     */
    CharEncoding = this.toIri().concat('CharEncoding');
    /**
     * **[qudt:Char Encoding Type](http://qudt.org/schema/qudt/CharEncodingType)**
     *
     * The class of all character encoding schemes, each of which defines a rule or algorithm for encoding character data as a sequence of bits or bytes.
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    CharEncodingType = this.toIri().concat('CharEncodingType');
    /**
     * **[qudt:Citation](http://qudt.org/schema/qudt/Citation)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/04ca2c945694cee5579c553aa95a7671
     */
    Citation = this.toIri().concat('Citation');
    /**
     * **[qudt:Comment](http://qudt.org/schema/qudt/Comment)**
     *
     * @type        class
     * @parent      http://www.w3.org/2002/07/owl#Thing
     */
    Comment = this.toIri().concat('Comment');
    /**
     * **[qudt:QUDT Concept](http://qudt.org/schema/qudt/Concept)**
     *
     * @type        class
     * @parent      http://www.w3.org/2002/07/owl#Thing
     */
    Concept = this.toIri().concat('Concept');
    /**
     * **[qudt:Constant value](http://qudt.org/schema/qudt/ConstantValue)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/16de4d083a8a64ea06809ad805920776
     */
    ConstantValue = this.toIri().concat('ConstantValue');
    /**
     * **[qudt:Counting Unit](http://qudt.org/schema/qudt/CountingUnit)**
     *
     * @type        class
     * @parent      qudt:DimensionlessUnit
     */
    CountingUnit = this.toIri().concat('CountingUnit');
    /**
     * **[qudt:Currency Unit](http://qudt.org/schema/qudt/CurrencyUnit)**
     *
     * @type        class
     * @parent      qudt:DimensionlessUnit
     */
    CurrencyUnit = this.toIri().concat('CurrencyUnit');
    /**
     * **[qudt:Data Encoding](http://qudt.org/schema/qudt/DataEncoding)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/136e9f8ba2de653dc071d63e7577f0d1
     */
    DataEncoding = this.toIri().concat('DataEncoding');
    /**
     * **[qudt:QUDT Datatype](http://qudt.org/schema/qudt/Datatype)**
     *
     * A data type is a definition of a set of values (for example, "all integers between 0 and 10"), and the allowable operations on those values; the meaning of the data; and the way values of that type can be stored. Some types are primitive - built-in to the language, with no visible internal structure - e.g. Boolean; others are composite - constructed from one or more other types (of either kind) - e.g. lists, arrays, structures, unions. Object-oriented programming extends this with classes which encapsulate both the structure of a type and the operations that can be performed on it. Some languages provide strong typing, others allow implicit type conversion and/or explicit type conversion.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1715dcc63ea34dc4af66e5b62f58a12f
     */
    Datatype = this.toIri().concat('Datatype');
    /**
     * **[qudt:Date Time String Encoding Type](http://qudt.org/schema/qudt/DateTimeStringEncodingType)**
     *
     * Date Time encodings are logical encodings for expressing date/time quantities as strings by applying unambiguous formatting and parsing rules.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/ef7f61915d46e59fd89260c1687aa1b2
     */
    DateTimeStringEncodingType = this.toIri().concat('DateTimeStringEncodingType');
    /**
     * **[qudt:Decimal Prefix](http://qudt.org/schema/qudt/DecimalPrefix)**
     *
     * A <em>Decimal Prefix</em> is a prefix for multiples of units that are powers of 10.
     *
     * @type        class
     * @parent      qudt:Prefix
     */
    DecimalPrefix = this.toIri().concat('DecimalPrefix');
    /**
     * **[qudt:Derived Unit](http://qudt.org/schema/qudt/DerivedUnit)**
     *
     * @type        class
     * @parent      qudt:Unit
     */
    DerivedUnit = this.toIri().concat('DerivedUnit');
    /**
     * **[qudt:Dimensionless Unit](http://qudt.org/schema/qudt/DimensionlessUnit)**
     *
     * @type        class
     * @parent      qudt:Unit
     */
    DimensionlessUnit = this.toIri().concat('DimensionlessUnit');
    /**
     * **[qudt:Discipline](http://qudt.org/schema/qudt/Discipline)**
     *
     * @type        class
     * @parent      qudt:Concept
     */
    Discipline = this.toIri().concat('Discipline');
    /**
     * **[qudt:Single Precision Real Encoding](http://qudt.org/schema/qudt/DoublePrecisionEncoding)**
     *
     * @type        instance
     */
    DoublePrecisionEncoding = this.toIri().concat('DoublePrecisionEncoding');
    /**
     * **[qudt:Encoding](http://qudt.org/schema/qudt/Encoding)**
     *
     * An encoding is a rule or algorithm that is used to convert data from a native, or unspecified form into a specific form that satisfies the encoding rules. Examples of encodings include character encodings, such as UTF-8.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/329dcd1ff491d0821193ffc7048bb0a8
     */
    Encoding = this.toIri().concat('Encoding');
    /**
     * **[qudt:Endian Type](http://qudt.org/schema/qudt/EndianType)**
     *
     * @type        class
     * @parent      qudt:EnumeratedValue
     */
    EndianType = this.toIri().concat('EndianType');
    /**
     * **[qudt:Enumerated Quantity](http://qudt.org/schema/qudt/EnumeratedQuantity)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/0d284d19c014d1624a23504987743498
     */
    EnumeratedQuantity = this.toIri().concat('EnumeratedQuantity');
    /**
     * **[qudt:Enumerated Value](http://qudt.org/schema/qudt/EnumeratedValue)**
     *
     * @type        class
     * @parent      http://www.linkedmodel.org/schema/dtype#EnumeratedValue
     */
    EnumeratedValue = this.toIri().concat('EnumeratedValue');
    /**
     * **[qudt:Enumeration](http://qudt.org/schema/qudt/Enumeration)**
     *
     * @type        class
     * @parent      http://www.linkedmodel.org/schema/dtype#Enumeration
     */
    Enumeration = this.toIri().concat('Enumeration');
    /**
     * **[qudt:Enumeration scale](http://qudt.org/schema/qudt/EnumerationScale)**
     *
     * @type        class
     * @parent      http://www.linkedmodel.org/schema/dtype#Enumeration
     */
    EnumerationScale = this.toIri().concat('EnumerationScale');
    /**
     * **[qudt:Figure](http://qudt.org/schema/qudt/Figure)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/060fd2332b5a06c90ce9c8964c6c3f9f
     */
    Figure = this.toIri().concat('Figure');
    /**
     * **[qudt:Floating Point Encoding](http://qudt.org/schema/qudt/FloatingPointEncodingType)**
     *
     * A "Encoding" with the following instance(s): "Double Precision Encoding", "Single Precision Real Encoding".
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    FloatingPointEncodingType = this.toIri().concat('FloatingPointEncodingType');
    /**
     * **[qudt:IEEE 754 1985 Real Encoding](http://qudt.org/schema/qudt/IEEE754_1985RealEncoding)**
     *
     * @type        instance
     */
    IEEE754_1985RealEncoding = this.toIri().concat('IEEE754_1985RealEncoding');
    /**
     * **[qudt:ISO 8601 UTC Date Time - Basic Format](http://qudt.org/schema/qudt/'ISO8601-UTCDateTime-BasicFormat')**
     *
     * @type        instance
     */
    'ISO8601-UTCDateTime-BasicFormat' = this.toIri().concat('ISO8601-UTCDateTime-BasicFormat');
    /**
     * **[qudt:Integer Encoding](http://qudt.org/schema/qudt/IntegerEncodingType)**
     *
     * The encoding scheme for integer types
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    IntegerEncodingType = this.toIri().concat('IntegerEncodingType');
    /**
     * **[qudt:Interval scale](http://qudt.org/schema/qudt/IntervalScale)**
     *
     * @type        class
     * @parent      qudt:Scale
     */
    IntervalScale = this.toIri().concat('IntervalScale');
    /**
     * **[qudt:Latex String](http://qudt.org/schema/qudt/LatexString)**
     *
     * A type of string in which some characters may be wrapped with '\(' and '\) characters for LaTeX rendering.
     *
     * @type        datatype
     * @parent      http://www.w3.org/2001/XMLSchema#string
     */
    LatexString = this.toIri().concat('LatexString');
    /**
     * **[qudt:Little Endian](http://qudt.org/schema/qudt/LittleEndian)**
     *
     * @type        instance
     */
    LittleEndian = this.toIri().concat('LittleEndian');
    /**
     * **[qudt:Logarithmic Unit](http://qudt.org/schema/qudt/LogarithmicUnit)**
     *
     * @type        class
     * @parent      qudt:DimensionlessUnit
     */
    LogarithmicUnit = this.toIri().concat('LogarithmicUnit');
    /**
     * **[qudt:Long Unsigned Integer Encoding](http://qudt.org/schema/qudt/LongUnsignedIntegerEncoding)**
     *
     * @type        instance
     */
    LongUnsignedIntegerEncoding = this.toIri().concat('LongUnsignedIntegerEncoding');
    /**
     * **[qudt:Maths Function Type](http://qudt.org/schema/qudt/MathsFunctionType)**
     *
     * @type        class
     * @parent      qudt:Concept
     */
    MathsFunctionType = this.toIri().concat('MathsFunctionType');
    /**
     * **[qudt:NIST SP~811 Comment](http://qudt.org/schema/qudt/NIST_SP811_Comment)**
     *
     * @type        class
     * @parent      qudt:Comment
     */
    NIST_SP811_Comment = this.toIri().concat('NIST_SP811_Comment');
    /**
     * **[qudt:Nominal scale](http://qudt.org/schema/qudt/NominalScale)**
     *
     * @type        class
     * @parent      qudt:Scale
     */
    NominalScale = this.toIri().concat('NominalScale');
    /**
     * **[qudt:Numeric union](http://qudt.org/schema/qudt/NumericUnion)**
     *
     * @type        class
     * @parent      http://www.linkedmodel.org/schema/dtype#numericUnion
     */
    NumericUnion = this.toIri().concat('NumericUnion');
    /**
     * **[qudt:OCTET Encoding](http://qudt.org/schema/qudt/OctetEncoding)**
     *
     * @type        instance
     */
    OctetEncoding = this.toIri().concat('OctetEncoding');
    /**
     * **[qudt:Ordered type](http://qudt.org/schema/qudt/OrderedType)**
     *
     * Describes how a data or information structure is ordered.
     *
     * @type        class
     * @parent      qudt:EnumeratedValue
     */
    OrderedType = this.toIri().concat('OrderedType');
    /**
     * **[qudt:Ordinal scale](http://qudt.org/schema/qudt/OrdinalScale)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/85bb938dc0a50ddf66ff7919aeca6407
     */
    OrdinalScale = this.toIri().concat('OrdinalScale');
    /**
     * **[qudt:Organization](http://qudt.org/schema/qudt/Organization)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/4d556581481faab22f91fc1b94eaacc8
     */
    Organization = this.toIri().concat('Organization');
    /**
     * **[qudt:Partially Ordered](http://qudt.org/schema/qudt/PartiallyOrdered)**
     *
     * @type        instance
     */
    PartiallyOrdered = this.toIri().concat('PartiallyOrdered');
    /**
     * **[qudt:Physical Constant](http://qudt.org/schema/qudt/PhysicalConstant)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/21040084c247a1e6087848c64716d44f
     */
    PhysicalConstant = this.toIri().concat('PhysicalConstant');
    /**
     * **[qudt:Plane Angle Unit](http://qudt.org/schema/qudt/PlaneAngleUnit)**
     *
     * @type        class
     * @parent      qudt:AngleUnit
     */
    PlaneAngleUnit = this.toIri().concat('PlaneAngleUnit');
    /**
     * **[qudt:Prefix](http://qudt.org/schema/qudt/Prefix)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1756cfb77f9905203e474df3e1366841
     */
    Prefix = this.toIri().concat('Prefix');
    /**
     * **[qudt:Quantifiable](http://qudt.org/schema/qudt/Quantifiable)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1eaf6573ea322b226e417f8e50bf2857
     */
    Quantifiable = this.toIri().concat('Quantifiable');
    /**
     * **[qudt:Quantity](http://qudt.org/schema/qudt/Quantity)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/367f1b4937935f503a0c1d349905a376
     */
    Quantity = this.toIri().concat('Quantity');
    /**
     * **[qudt:Quantity Kind](http://qudt.org/schema/qudt/QuantityKind)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/0c6459bf373f16c0b6c9c620cdc609ca
     */
    QuantityKind = this.toIri().concat('QuantityKind');
    /**
     * **[qudt:Quantity Kind Dimension Vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1ac7720fe5439ef8688dc5c89aacfccb
     */
    QuantityKindDimensionVector = this.toIri().concat('QuantityKindDimensionVector');
    /**
     * **[qudt:CGS Dimension vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector_CGS)**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector
     */
    QuantityKindDimensionVector_CGS = this.toIri().concat('QuantityKindDimensionVector_CGS');
    /**
     * **[qudt:CGS EMU Dimension vector](http://qudt.org/schema/qudt/'QuantityKindDimensionVector_CGS-EMU')**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector_CGS
     */
    'QuantityKindDimensionVector_CGS-EMU' = this.toIri().concat('QuantityKindDimensionVector_CGS-EMU');
    /**
     * **[qudt:CGS ESU Dimension vector](http://qudt.org/schema/qudt/'QuantityKindDimensionVector_CGS-ESU')**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector_CGS
     */
    'QuantityKindDimensionVector_CGS-ESU' = this.toIri().concat('QuantityKindDimensionVector_CGS-ESU');
    /**
     * **[qudt:CGS GAUSS Dimension vector](http://qudt.org/schema/qudt/'QuantityKindDimensionVector_CGS-GAUSS')**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector_CGS
     */
    'QuantityKindDimensionVector_CGS-GAUSS' = this.toIri().concat('QuantityKindDimensionVector_CGS-GAUSS');
    /**
     * **[qudt:CGS LH Dimension vector](http://qudt.org/schema/qudt/'QuantityKindDimensionVector_CGS-LH')**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector_CGS
     */
    'QuantityKindDimensionVector_CGS-LH' = this.toIri().concat('QuantityKindDimensionVector_CGS-LH');
    /**
     * **[qudt:ISO Dimension vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector_ISO)**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector
     */
    QuantityKindDimensionVector_ISO = this.toIri().concat('QuantityKindDimensionVector_ISO');
    /**
     * **[qudt:Imperial dimension vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector_Imperial)**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector
     */
    QuantityKindDimensionVector_Imperial = this.toIri().concat('QuantityKindDimensionVector_Imperial');
    /**
     * **[qudt:Quantity Kind Dimension vector (SI)](http://qudt.org/schema/qudt/QuantityKindDimensionVector_SI)**
     *
     * @type        class
     * @parent      qudt:QuantityKindDimensionVector
     */
    QuantityKindDimensionVector_SI = this.toIri().concat('QuantityKindDimensionVector_SI');
    /**
     * **[qudt:Quantity type](http://qudt.org/schema/qudt/QuantityType)**
     *
     * \(\textit{Quantity Type}\) is an enumeration of quanity kinds. It specializes \(\boxed{dtype:EnumeratedValue}\) by constrinaing \(\boxed{dtype:value}\) to instances of \(\boxed{qudt:QuantityKind}\).
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/38862538f61ad0802d037b3484f12994
     */
    QuantityType = this.toIri().concat('QuantityType');
    /**
     * **[qudt:Quantity value](http://qudt.org/schema/qudt/QuantityValue)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/09b851ef909e1a6a41d57836b010b1d8
     */
    QuantityValue = this.toIri().concat('QuantityValue');
    /**
     * **[qudt:Ratio scale](http://qudt.org/schema/qudt/RatioScale)**
     *
     * @type        class
     * @parent      qudt:Scale
     */
    RatioScale = this.toIri().concat('RatioScale');
    /**
     * **[qudt:Rule](http://qudt.org/schema/qudt/Rule)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/3f5d590b3566176fc6d436649660faa3
     */
    Rule = this.toIri().concat('Rule');
    /**
     * **[qudt:Rule Type](http://qudt.org/schema/qudt/RuleType)**
     *
     * @type        class
     * @parent      qudt:EnumeratedValue
     */
    RuleType = this.toIri().concat('RuleType');
    /**
     * **[qudt:Signed](http://qudt.org/schema/qudt/SIGNED)**
     *
     * @type        instance
     */
    SIGNED = this.toIri().concat('SIGNED');
    /**
     * **[qudt:Scalar Datatype](http://qudt.org/schema/qudt/ScalarDatatype)**
     *
     * Scalar data types are those that have a single value. The permissible values are defined over a domain that may be integers, float, character or boolean. Often a scalar data type is referred to as a primitive data type.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/18c61b2bb7bd80b4d8f14a7b062dbe94
     */
    ScalarDatatype = this.toIri().concat('ScalarDatatype');
    /**
     * **[qudt:Scale](http://qudt.org/schema/qudt/Scale)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/0a902525f68b845d849e361818b55388
     */
    Scale = this.toIri().concat('Scale');
    /**
     * **[qudt:Scale type](http://qudt.org/schema/qudt/ScaleType)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/3f460f7bc38b27d18277dcc262510654
     */
    ScaleType = this.toIri().concat('ScaleType');
    /**
     * **[qudt:Short Signed Integer Encoding](http://qudt.org/schema/qudt/ShortSignedIntegerEncoding)**
     *
     * @type        instance
     */
    ShortSignedIntegerEncoding = this.toIri().concat('ShortSignedIntegerEncoding');
    /**
     * **[qudt:Short Unsigned Integer Encoding](http://qudt.org/schema/qudt/ShortUnsignedIntegerEncoding)**
     *
     * @type        instance
     */
    ShortUnsignedIntegerEncoding = this.toIri().concat('ShortUnsignedIntegerEncoding');
    /**
     * **[qudt:Signed Integer Encoding](http://qudt.org/schema/qudt/SignedIntegerEncoding)**
     *
     * @type        instance
     */
    SignedIntegerEncoding = this.toIri().concat('SignedIntegerEncoding');
    /**
     * **[qudt:Signedness type](http://qudt.org/schema/qudt/SignednessType)**
     *
     * Specifics whether a value should be signed or unsigned.
     *
     * @type        class
     * @parent      qudt:EnumeratedValue
     */
    SignednessType = this.toIri().concat('SignednessType');
    /**
     * **[qudt:Single Precision Real Encoding](http://qudt.org/schema/qudt/SinglePrecisionRealEncoding)**
     *
     * @type        instance
     */
    SinglePrecisionRealEncoding = this.toIri().concat('SinglePrecisionRealEncoding');
    /**
     * **[qudt:Solid Angle Unit](http://qudt.org/schema/qudt/SolidAngleUnit)**
     *
     * The solid angle subtended by a surface S is defined as the surface area of a unit sphere covered by the surface S's projection onto the sphere. A solid angle is related to the surface of a sphere in the same way an ordinary angle is related to the circumference of a circle. Since the total surface area of the unit sphere is 4*pi, the measure of solid angle will always be between 0 and 4*pi.
     *
     * @type        class
     * @parent      qudt:AngleUnit
     */
    SolidAngleUnit = this.toIri().concat('SolidAngleUnit');
    /**
     * **[qudt:Statement](http://qudt.org/schema/qudt/Statement)**
     *
     * @type        class
     * @parent      http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement
     */
    Statement = this.toIri().concat('Statement');
    /**
     * **[qudt:String Encoding Type](http://qudt.org/schema/qudt/StringEncodingType)**
     *
     * A "Encoding" with the following instance(s): "UTF-16 String", "UTF-8 Encoding".
     *
     * @type        class
     * @parent      qudt:Encoding
     */
    StringEncodingType = this.toIri().concat('StringEncodingType');
    /**
     * **[qudt:Structured Data Type](http://qudt.org/schema/qudt/StructuredDatatype)**
     *
     * A "Structured Datatype", in contrast to scalar data types, is used to characterize classes of more complex data structures, such as linked or indexed lists, trees, ordered trees, and multi-dimensional file formats.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/5b96d2532593a5ee30cdfc81f3430c6c
     */
    StructuredDatatype = this.toIri().concat('StructuredDatatype');
    /**
     * **[qudt:Symbol](http://qudt.org/schema/qudt/Symbol)**
     *
     * @type        class
     * @parent      qudt:Concept
     */
    Symbol = this.toIri().concat('Symbol');
    /**
     * **[qudt:System of Quantity Kinds](http://qudt.org/schema/qudt/SystemOfQuantityKinds)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/1ae165e92c83a57c46b8837b26448536
     */
    SystemOfQuantityKinds = this.toIri().concat('SystemOfQuantityKinds');
    /**
     * **[qudt:System of Units](http://qudt.org/schema/qudt/SystemOfUnits)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/34b17eefb0ecfe1683bb274146d74dc0
     */
    SystemOfUnits = this.toIri().concat('SystemOfUnits');
    /**
     * **[qudt:Totally Ordered](http://qudt.org/schema/qudt/TotallyOrdered)**
     *
     * @type        instance
     */
    TotallyOrdered = this.toIri().concat('TotallyOrdered');
    /**
     * **[qudt:Transform type](http://qudt.org/schema/qudt/TransformType)**
     *
     * @type        class
     * @parent      qudt:EnumeratedValue
     */
    TransformType = this.toIri().concat('TransformType');
    /**
     * **[qudt:case-insensitive UCUM code](http://qudt.org/schema/qudt/UCUMci)**
     *
     * Lexical pattern for the case-insensitive version of UCUM code
     *
     * @type        datatype
     * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
     */
    UCUMci = this.toIri().concat('UCUMci');
    /**
     * **[qudt:case-insensitive UCUM term](http://qudt.org/schema/qudt/'UCUMci-term')**
     *
     * Lexical pattern for the terminal symbols in the case-insensitive version of UCUM code
     *
     * @type        datatype
     * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
     */
    'UCUMci-term' = this.toIri().concat('UCUMci-term');
    /**
     * **[qudt:case-sensitive UCUM code](http://qudt.org/schema/qudt/UCUMcs)**
     *
     * Lexical pattern for the case-sensitive version of UCUM code
     *
     * @type        datatype
     * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
     */
    UCUMcs = this.toIri().concat('UCUMcs');
    /**
     * **[qudt:case-sensitive UCUM terminal](http://qudt.org/schema/qudt/'UCUMcs-term')**
     *
     * Lexical pattern for the terminal symbols in the case-sensitive version of UCUM code
     *
     * @type        datatype
     * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
     */
    'UCUMcs-term' = this.toIri().concat('UCUMcs-term');
    /**
     * **[qudt:Unsigned](http://qudt.org/schema/qudt/UNSIGNED)**
     *
     * @type        instance
     */
    UNSIGNED = this.toIri().concat('UNSIGNED');
    /**
     * **[qudt:UTF-16 String](http://qudt.org/schema/qudt/'UTF16-StringEncoding')**
     *
     * @type        instance
     */
    'UTF16-StringEncoding' = this.toIri().concat('UTF16-StringEncoding');
    /**
     * **[qudt:UTF-8 Encoding](http://qudt.org/schema/qudt/'UTF8-StringEncoding')**
     *
     * @type        instance
     */
    'UTF8-StringEncoding' = this.toIri().concat('UTF8-StringEncoding');
    /**
     * **[qudt:Unit](http://qudt.org/schema/qudt/Unit)**
     *
     * A unit of measure, or unit, is a particular quantity value that has been chosen as a scale for measuring other quantities the same kind (more generally of equivalent dimension). For example, the meter is a quantity of length that has been rigorously defined and standardized by the BIPM (International Board of Weights and Measures). Any measurement of the length can be expressed as a number multiplied by the unit meter. More formally, the value of a physical quantity Q with respect to a unit (U) is expressed as the scalar multiple of a real number (n) and U, as  \(Q = nU\).
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/07eee89b65875cb28e78d9690dde64ba
     */
    Unit = this.toIri().concat('Unit');
    /**
     * **[qudt:Unordered](http://qudt.org/schema/qudt/Unordered)**
     *
     * @type        instance
     */
    Unordered = this.toIri().concat('Unordered');
    /**
     * **[qudt:Unsigned Integer Encoding](http://qudt.org/schema/qudt/UnsignedIntegerEncoding)**
     *
     * @type        instance
     */
    UnsignedIntegerEncoding = this.toIri().concat('UnsignedIntegerEncoding');
    /**
     * **[qudt:User Quantity Kind](http://qudt.org/schema/qudt/UserQuantityKind)**
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/7b2ee07f9f766f46dc2e743205c35cd3
     */
    UserQuantityKind = this.toIri().concat('UserQuantityKind');
    /**
     * **[qudt:Verifiable](http://qudt.org/schema/qudt/Verifiable)**
     *
     * An aspect class that holds properties that provide external knowledge and specifications of a given resource.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/625a68790a5855da95f51870eb0391ea
     */
    Verifiable = this.toIri().concat('Verifiable');
    /**
     * **[qudt:Wikipedia](http://qudt.org/schema/qudt/Wikipedia)**
     *
     * @type        instance
     */
    Wikipedia = this.toIri().concat('Wikipedia');
    /**
     * **[qudt:abbreviation](http://qudt.org/schema/qudt/abbreviation)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    abbreviation = this.toIri().concat('abbreviation');
    /**
     * **[qudt:acronym](http://qudt.org/schema/qudt/acronym)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    acronym = this.toIri().concat('acronym');
    /**
     * **[qudt:allowed pattern](http://qudt.org/schema/qudt/allowedPattern)**
     *
     * @type        property
     */
    allowedPattern = this.toIri().concat('allowedPattern');
    /**
     * **[qudt:allowed unit of system](http://qudt.org/schema/qudt/allowedUnitOfSystem)**
     *
     * @type        property
     * @parent      qudt:unitOfSystem
     */
    allowedUnitOfSystem = this.toIri().concat('allowedUnitOfSystem');
    /**
     * **[qudt:ANSI SQL Name](http://qudt.org/schema/qudt/ansiSQLName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    ansiSQLName = this.toIri().concat('ansiSQLName');
    /**
     * **[qudt:applicable CGS unit](http://qudt.org/schema/qudt/applicableCGSUnit)**
     *
     * @type        property
     * @parent      qudt:applicableUnit
     * @range       qudt:Unit
     */
    applicableCGSUnit = this.toIri().concat('applicableCGSUnit');
    /**
     * **[qudt:applicable ISO unit](http://qudt.org/schema/qudt/applicableISOUnit)**
     *
     * @type        property
     * @parent      qudt:applicableUnit
     * @range       qudt:Unit
     */
    applicableISOUnit = this.toIri().concat('applicableISOUnit');
    /**
     * **[qudt:applicable Imperial unit](http://qudt.org/schema/qudt/applicableImperialUnit)**
     *
     * @type        property
     * @parent      qudt:applicableUnit
     * @range       qudt:Unit
     */
    applicableImperialUnit = this.toIri().concat('applicableImperialUnit');
    /**
     * **[qudt:applicable physical constant](http://qudt.org/schema/qudt/applicablePhysicalConstant)**
     *
     * @type        property
     */
    applicablePhysicalConstant = this.toIri().concat('applicablePhysicalConstant');
    /**
     * **[qudt:applicable Planck unit](http://qudt.org/schema/qudt/applicablePlanckUnit)**
     *
     * @type        property
     * @parent      qudt:applicableUnit
     * @range       qudt:Unit
     */
    applicablePlanckUnit = this.toIri().concat('applicablePlanckUnit');
    /**
     * **[qudt:applicable SI unit](http://qudt.org/schema/qudt/applicableSIUnit)**
     *
     * @type        property
     * @parent      qudt:applicableUnit
     * @range       qudt:Unit
     */
    applicableSIUnit = this.toIri().concat('applicableSIUnit');
    /**
     * **[qudt:applicable US Customary unit](http://qudt.org/schema/qudt/applicableUSCustomaryUnit)**
     *
     * @type        property
     * @parent      qudt:applicableUnit
     * @range       qudt:Unit
     */
    applicableUSCustomaryUnit = this.toIri().concat('applicableUSCustomaryUnit');
    /**
     * **[qudt:applicable unit](http://qudt.org/schema/qudt/applicableUnit)**
     *
     * @type        property
     * @range       qudt:Unit
     */
    applicableUnit = this.toIri().concat('applicableUnit');
    /**
     * **[qudt:base dimension enumeration](http://qudt.org/schema/qudt/baseDimensionEnumeration)**
     *
     * @type        property
     * @range       qudt:Enumeration
     */
    baseDimensionEnumeration = this.toIri().concat('baseDimensionEnumeration');
    /**
     * **[qudt:is base unit of system](http://qudt.org/schema/qudt/baseUnitOfSystem)**
     *
     * @type        property
     * @parent      qudt:coherentUnitOfSystem
     */
    baseUnitOfSystem = this.toIri().concat('baseUnitOfSystem');
    /**
     * **[qudt:basis](http://qudt.org/schema/qudt/basis)**
     *
     * @type        property
     */
    basis = this.toIri().concat('basis');
    /**
     * **[qudt:belongs to system of quantities](http://qudt.org/schema/qudt/belongsToSystemOfQuantities)**
     *
     * @type        property
     * @domain      qudt:QuantityKind
     * @range       qudt:SystemOfQuantityKinds
     */
    belongsToSystemOfQuantities = this.toIri().concat('belongsToSystemOfQuantities');
    /**
     * **[qudt:bit order](http://qudt.org/schema/qudt/bitOrder)**
     *
     * @type        property
     * @range       qudt:EndianType
     */
    bitOrder = this.toIri().concat('bitOrder');
    /**
     * **[qudt:bits](http://qudt.org/schema/qudt/bits)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#integer
     */
    bits = this.toIri().concat('bits');
    /**
     * **[qudt:bounded](http://qudt.org/schema/qudt/bounded)**
     *
     * @type        property
     */
    bounded = this.toIri().concat('bounded');
    /**
     * **[qudt:byte order](http://qudt.org/schema/qudt/byteOrder)**
     *
     * Byte order is an enumeration of two values: 'Big Endian' and 'Little Endian' and is used to denote whether the most signiticant byte is either first or last, respectively.
     *
     * @type        property
     * @range       qudt:EndianType
     */
    byteOrder = this.toIri().concat('byteOrder');
    /**
     * **[qudt:bytes](http://qudt.org/schema/qudt/bytes)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#integer
     */
    bytes = this.toIri().concat('bytes');
    /**
     * **[qudt:C Language name](http://qudt.org/schema/qudt/cName)**
     *
     * Datatype name in the C programming language
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    cName = this.toIri().concat('cName');
    /**
     * **[qudt:cardinality](http://qudt.org/schema/qudt/cardinality)**
     *
     * @type        property
     */
    cardinality = this.toIri().concat('cardinality');
    /**
     * **[qudt:categorized as](http://qudt.org/schema/qudt/categorizedAs)**
     *
     * @type        property
     */
    categorizedAs = this.toIri().concat('categorizedAs');
    /**
     * **[qudt:citation](http://qudt.org/schema/qudt/citation)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    citation = this.toIri().concat('citation');
    /**
     * **[qudt:code](http://qudt.org/schema/qudt/code)**
     *
     * @type        property
     * @domain      qudt:Concept
     */
    code = this.toIri().concat('code');
    /**
     * **[qudt:is coherent unit of system](http://qudt.org/schema/qudt/coherentUnitOfSystem)**
     *
     * A coherent unit of measurement for a unit system is a defined unit that may be expressed as a product of powers of the system's base units with the proportionality factor of one. A system of units is coherent with respect to a system of quantities and equations if the system of units is chosen in such a way that the equations between numerical values have exactly the same form (including the numerical factors) as the corresponding equations between the quantities. For example, the 'newton' and the 'joule'. These two are, respectively, the force that causes one kilogram to be accelerated at 1 metre per second per  second, and the work done by 1 newton acting over 1 metre. Being coherent refers to this consistent use of 1. In the old c.g.s. system , with its base units the centimetre and the gram, the corresponding coherent units were the dyne and the erg, respectively the force that causes 1 gram to be accelerated at 1 centimetre per second per second, and the work done by 1 dyne acting over 1 centimetre. So \(1 newton = 10^5\,dyne\), \(1 joule = 10^7\,erg\), making each of the four compatible in a decimal sense within its respective other system, but not coherent therein.
     *
     * @type        property
     * @parent      qudt:definedUnitOfSystem
     * @range       qudt:SystemOfUnits
     */
    coherentUnitOfSystem = this.toIri().concat('coherentUnitOfSystem');
    /**
     * **[qudt:coherent unit system](http://qudt.org/schema/qudt/coherentUnitSystem)**
     *
     * <p>A system of units is coherent with respect to a system of quantities and equations if the system of units is chosen in such a way that the equations between numerical values have exactly the same form (including the numerical factors) as the corresponding equations between the quantities. In such a coherent system, no numerical factor other than the number 1 ever occurs in the expressions for the derived units in terms of the base units. For example, the \(newton\) and the \(joule\). These two are, respectively, the force that causes one kilogram to be accelerated at 1 metre per (1) second per (1) second, and the work done by 1 newton acting over 1 metre. Being coherent refers to this consistent use of 1. In the old c.g.s. system , with its base units the centimetre and the gram, the corresponding coherent units were the dyne and the erg, respectively the force that causes 1 gram to be accelerated at 1 centimetre per (1) second per (1) second, and the work done by 1 dyne acting over 1 centimetre. So \(1\,newton = 10^5 dyne\), \(1 joule = 10^7 erg\), making each of the four compatible in a decimal sense within its respective other system, but not coherent therein.</p>
     *
     * @type        property
     * @parent      qudt:hasUnitSystem
     */
    coherentUnitSystem = this.toIri().concat('coherentUnitSystem');
    /**
     * **[qudt:conversion coefficient](http://qudt.org/schema/qudt/conversionCoefficient)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#double
     */
    conversionCoefficient = this.toIri().concat('conversionCoefficient');
    /**
     * **[qudt:conversion multiplier](http://qudt.org/schema/qudt/conversionMultiplier)**
     *
     * @type        property
     * @range       http://www.linkedmodel.org/schema/dtype#numericUnion
     */
    conversionMultiplier = this.toIri().concat('conversionMultiplier');
    /**
     * **[qudt:conversion offset](http://qudt.org/schema/qudt/conversionOffset)**
     *
     * @type        property
     * @range       http://www.linkedmodel.org/schema/dtype#numericUnion
     */
    conversionOffset = this.toIri().concat('conversionOffset');
    /**
     * **[qudt:currency code](http://qudt.org/schema/qudt/currencyCode)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    currencyCode = this.toIri().concat('currencyCode');
    /**
     * **[qudt:currency exponent](http://qudt.org/schema/qudt/currencyExponent)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#integer
     */
    currencyExponent = this.toIri().concat('currencyExponent');
    /**
     * **[qudt:currency number](http://qudt.org/schema/qudt/currencyNumber)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#positiveInteger
     */
    currencyNumber = this.toIri().concat('currencyNumber');
    /**
     * **[qudt:data encoding](http://qudt.org/schema/qudt/dataEncoding)**
     *
     * @type        property
     * @range       qudt:DataEncoding
     */
    dataEncoding = this.toIri().concat('dataEncoding');
    /**
     * **[qudt:data structure](http://qudt.org/schema/qudt/dataStructure)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    dataStructure = this.toIri().concat('dataStructure');
    /**
     * **[qudt:datatype](http://qudt.org/schema/qudt/dataType)**
     *
     * @type        property
     */
    dataType = this.toIri().concat('dataType');
    /**
     * **[qudt:dbpedia match](http://qudt.org/schema/qudt/dbpediaMatch)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    dbpediaMatch = this.toIri().concat('dbpediaMatch');
    /**
     * **[qudt:default](http://qudt.org/schema/qudt/default)**
     *
     * @type        property
     */
    default = this.toIri().concat('default');
    /**
     * **[qudt:defined unit of system](http://qudt.org/schema/qudt/definedUnitOfSystem)**
     *
     * @type        property
     * @parent      qudt:unitOfSystem
     */
    definedUnitOfSystem = this.toIri().concat('definedUnitOfSystem');
    /**
     * **[qudt:denominator dimension vector](http://qudt.org/schema/qudt/denominatorDimensionVector)**
     *
     * @type        property
     * @range       qudt:QuantityKindDimensionVector
     */
    denominatorDimensionVector = this.toIri().concat('denominatorDimensionVector');
    /**
     * **[qudt:is coherent derived unit of system](http://qudt.org/schema/qudt/derivedCoherentUnitOfSystem)**
     *
     * @type        property
     * @parent      qudt:coherentUnitOfSystem
     */
    derivedCoherentUnitOfSystem = this.toIri().concat('derivedCoherentUnitOfSystem');
    /**
     * **[qudt:is non-coherent derived unit of system](http://qudt.org/schema/qudt/derivedNonCoherentUnitOfSystem)**
     *
     * @type        property
     * @parent      qudt:derivedUnitOfSystem
     * @range       qudt:SystemOfUnits
     */
    derivedNonCoherentUnitOfSystem = this.toIri().concat('derivedNonCoherentUnitOfSystem');
    /**
     * **[qudt:derived quantity kind of system](http://qudt.org/schema/qudt/derivedQuantityKindOfSystem)**
     *
     * @type        property
     * @parent      qudt:isQuantityKindOf
     */
    derivedQuantityKindOfSystem = this.toIri().concat('derivedQuantityKindOfSystem');
    /**
     * **[qudt:is derived unit of system](http://qudt.org/schema/qudt/derivedUnitOfSystem)**
     *
     * @type        property
     * @parent      qudt:unitOfSystem
     */
    derivedUnitOfSystem = this.toIri().concat('derivedUnitOfSystem');
    /**
     * **[qudt:dimension exponent](http://qudt.org/schema/qudt/dimensionExponent)**
     *
     * @type        property
     */
    dimensionExponent = this.toIri().concat('dimensionExponent');
    /**
     * **[qudt:dimension exponent for amount of substance](http://qudt.org/schema/qudt/dimensionExponentForAmountOfSubstance)**
     *
     * @type        property
     */
    dimensionExponentForAmountOfSubstance = this.toIri().concat('dimensionExponentForAmountOfSubstance');
    /**
     * **[qudt:dimension exponent for electric current](http://qudt.org/schema/qudt/dimensionExponentForElectricCurrent)**
     *
     * @type        property
     */
    dimensionExponentForElectricCurrent = this.toIri().concat('dimensionExponentForElectricCurrent');
    /**
     * **[qudt:dimension exponent for length](http://qudt.org/schema/qudt/dimensionExponentForLength)**
     *
     * @type        property
     */
    dimensionExponentForLength = this.toIri().concat('dimensionExponentForLength');
    /**
     * **[qudt:dimension exponent for luminous intensity](http://qudt.org/schema/qudt/dimensionExponentForLuminousIntensity)**
     *
     * @type        property
     */
    dimensionExponentForLuminousIntensity = this.toIri().concat('dimensionExponentForLuminousIntensity');
    /**
     * **[qudt:dimension exponent for mass](http://qudt.org/schema/qudt/dimensionExponentForMass)**
     *
     * @type        property
     */
    dimensionExponentForMass = this.toIri().concat('dimensionExponentForMass');
    /**
     * **[qudt:dimension exponent for thermodynamic temperature](http://qudt.org/schema/qudt/dimensionExponentForThermodynamicTemperature)**
     *
     * @type        property
     */
    dimensionExponentForThermodynamicTemperature = this.toIri().concat('dimensionExponentForThermodynamicTemperature');
    /**
     * **[qudt:dimension exponent for time](http://qudt.org/schema/qudt/dimensionExponentForTime)**
     *
     * @type        property
     */
    dimensionExponentForTime = this.toIri().concat('dimensionExponentForTime');
    /**
     * **[qudt:dimension inverse](http://qudt.org/schema/qudt/dimensionInverse)**
     *
     * @type        property
     */
    dimensionInverse = this.toIri().concat('dimensionInverse');
    /**
     * **[qudt:dimension vector for SI](http://qudt.org/schema/qudt/dimensionVectorForSI)**
     *
     * @type        property
     * @range       qudt:QuantityKindDimensionVector_SI
     */
    dimensionVectorForSI = this.toIri().concat('dimensionVectorForSI');
    /**
     * **[qudt:dimensionless exponent](http://qudt.org/schema/qudt/dimensionlessExponent)**
     *
     * @type        property
     */
    dimensionlessExponent = this.toIri().concat('dimensionlessExponent');
    /**
     * **[qudt:element](http://qudt.org/schema/qudt/element)**
     *
     * @type        property
     */
    element = this.toIri().concat('element');
    /**
     * **[qudt:element kind](http://qudt.org/schema/qudt/elementKind)**
     *
     * @type        property
     */
    elementKind = this.toIri().concat('elementKind');
    /**
     * **[qudt:element type](http://qudt.org/schema/qudt/elementType)**
     *
     * @type        property
     */
    elementType = this.toIri().concat('elementType');
    /**
     * **[qudt:encoding](http://qudt.org/schema/qudt/encoding)**
     *
     * @type        property
     */
    encoding = this.toIri().concat('encoding');
    /**
     * **[qudt:enumerated value](http://qudt.org/schema/qudt/enumeratedValue)**
     *
     * @type        property
     * @range       qudt:EnumeratedValue
     */
    enumeratedValue = this.toIri().concat('enumeratedValue');
    /**
     * **[qudt:enumeration](http://qudt.org/schema/qudt/enumeration)**
     *
     * @type        property
     * @range       qudt:Enumeration
     */
    enumeration = this.toIri().concat('enumeration');
    /**
     * **[qudt:exact constant](http://qudt.org/schema/qudt/exactConstant)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#boolean
     */
    exactConstant = this.toIri().concat('exactConstant');
    /**
     * **[qudt:exact match](http://qudt.org/schema/qudt/exactMatch)**
     *
     * @type        property
     * @parent      http://www.w3.org/2002/07/owl#sameAs
     * @range       qudt:Unit
     */
    exactMatch = this.toIri().concat('exactMatch');
    /**
     * **[qudt:example](http://qudt.org/schema/qudt/example)**
     *
     * @type        property
     */
    example = this.toIri().concat('example');
    /**
     * **[qudt:expression](http://qudt.org/schema/qudt/expression)**
     *
     * @type        property
     */
    expression = this.toIri().concat('expression');
    /**
     * **[qudt:field code](http://qudt.org/schema/qudt/fieldCode)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    fieldCode = this.toIri().concat('fieldCode');
    /**
     * **[qudt:figure](http://qudt.org/schema/qudt/figure)**
     *
     * @type        property
     * @range       qudt:Figure
     */
    figure = this.toIri().concat('figure');
    /**
     * **[qudt:figure caption](http://qudt.org/schema/qudt/figureCaption)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    figureCaption = this.toIri().concat('figureCaption');
    /**
     * **[qudt:figure label](http://qudt.org/schema/qudt/figureLabel)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    figureLabel = this.toIri().concat('figureLabel');
    /**
     * **[qudt:float percentage](http://qudt.org/schema/qudt/floatPercentage)**
     *
     * @type        datatype
     * @parent      http://www.w3.org/2001/XMLSchema#float
     */
    floatPercentage = this.toIri().concat('floatPercentage');
    /**
     * **[qudt:generalization](http://qudt.org/schema/qudt/generalization)**
     *
     * @type        property
     */
    generalization = this.toIri().concat('generalization');
    /**
     * **[qudt:guidance](http://qudt.org/schema/qudt/guidance)**
     *
     * @type        property
     * @domain      qudt:Concept
     * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML
     */
    guidance = this.toIri().concat('guidance');
    /**
     * **[qudt:allowed unit](http://qudt.org/schema/qudt/hasAllowedUnit)**
     *
     * @type        property
     * @parent      qudt:hasUnit
     */
    hasAllowedUnit = this.toIri().concat('hasAllowedUnit');
    /**
     * **[qudt:has base quantity kind](http://qudt.org/schema/qudt/hasBaseQuantityKind)**
     *
     * @type        property
     * @parent      qudt:hasQuantityKind
     */
    hasBaseQuantityKind = this.toIri().concat('hasBaseQuantityKind');
    /**
     * **[qudt:base unit](http://qudt.org/schema/qudt/hasBaseUnit)**
     *
     * @type        property
     * @parent      qudt:hasCoherentUnit
     */
    hasBaseUnit = this.toIri().concat('hasBaseUnit');
    /**
     * **[qudt:coherent unit](http://qudt.org/schema/qudt/hasCoherentUnit)**
     *
     * @type        property
     * @parent      qudt:hasDefinedUnit
     */
    hasCoherentUnit = this.toIri().concat('hasCoherentUnit');
    /**
     * **[qudt:defined unit](http://qudt.org/schema/qudt/hasDefinedUnit)**
     *
     * @type        property
     * @parent      qudt:hasUnit
     */
    hasDefinedUnit = this.toIri().concat('hasDefinedUnit');
    /**
     * **[qudt:has quantity kind dimension vector denominator part](http://qudt.org/schema/qudt/hasDenominatorPart)**
     *
     * @type        property
     */
    hasDenominatorPart = this.toIri().concat('hasDenominatorPart');
    /**
     * **[qudt:derived coherent unit](http://qudt.org/schema/qudt/hasDerivedCoherentUnit)**
     *
     * @type        property
     * @parent      qudt:hasCoherentUnit
     */
    hasDerivedCoherentUnit = this.toIri().concat('hasDerivedCoherentUnit');
    /**
     * **[qudt:has coherent derived unit](http://qudt.org/schema/qudt/hasDerivedNonCoherentUnit)**
     *
     * @type        property
     * @parent      qudt:hasDerivedUnit
     */
    hasDerivedNonCoherentUnit = this.toIri().concat('hasDerivedNonCoherentUnit');
    /**
     * **[qudt:derived unit](http://qudt.org/schema/qudt/hasDerivedUnit)**
     *
     * @type        property
     */
    hasDerivedUnit = this.toIri().concat('hasDerivedUnit');
    /**
     * **[qudt:has dimension](http://qudt.org/schema/qudt/hasDimension)**
     *
     * @type        property
     */
    hasDimension = this.toIri().concat('hasDimension');
    /**
     * **[qudt:dimension expression](http://qudt.org/schema/qudt/hasDimensionExpression)**
     *
     * @type        property
     */
    hasDimensionExpression = this.toIri().concat('hasDimensionExpression');
    /**
     * **[qudt:has dimension vector](http://qudt.org/schema/qudt/hasDimensionVector)**
     *
     * @type        property
     * @range       qudt:QuantityKindDimensionVector
     */
    hasDimensionVector = this.toIri().concat('hasDimensionVector');
    /**
     * **[qudt:has non-coherent unit](http://qudt.org/schema/qudt/hasNonCoherentUnit)**
     *
     * @type        property
     * @parent      qudt:hasDefinedUnit
     */
    hasNonCoherentUnit = this.toIri().concat('hasNonCoherentUnit');
    /**
     * **[qudt:has quantity kind dimension vector numerator part](http://qudt.org/schema/qudt/hasNumeratorPart)**
     *
     * @type        property
     */
    hasNumeratorPart = this.toIri().concat('hasNumeratorPart');
    /**
     * **[qudt:prefix unit](http://qudt.org/schema/qudt/hasPrefixUnit)**
     *
     * @type        property
     * @parent      qudt:hasDefinedUnit
     */
    hasPrefixUnit = this.toIri().concat('hasPrefixUnit');
    /**
     * **[qudt:has quantity](http://qudt.org/schema/qudt/hasQuantity)**
     *
     * @type        property
     * @range       qudt:Quantity
     */
    hasQuantity = this.toIri().concat('hasQuantity');
    /**
     * **[qudt:has quantity kind](http://qudt.org/schema/qudt/hasQuantityKind)**
     *
     * @type        property
     * @range       qudt:QuantityKind
     */
    hasQuantityKind = this.toIri().concat('hasQuantityKind');
    /**
     * **[qudt:has reference quantity kind](http://qudt.org/schema/qudt/hasReferenceQuantityKind)**
     *
     * @type        property
     */
    hasReferenceQuantityKind = this.toIri().concat('hasReferenceQuantityKind');
    /**
     * **[qudt:has rule](http://qudt.org/schema/qudt/hasRule)**
     *
     * @type        property
     */
    hasRule = this.toIri().concat('hasRule');
    /**
     * **[qudt:has unit](http://qudt.org/schema/qudt/hasUnit)**
     *
     * @type        property
     */
    hasUnit = this.toIri().concat('hasUnit');
    /**
     * **[qudt:has unit system](http://qudt.org/schema/qudt/hasUnitSystem)**
     *
     * @type        property
     */
    hasUnitSystem = this.toIri().concat('hasUnitSystem');
    /**
     * **[qudt:has vocabulary](http://qudt.org/schema/qudt/hasVocabulary)**
     *
     * @type        property
     * @range       http://www.w3.org/2002/07/owl#Ontology
     */
    hasVocabulary = this.toIri().concat('hasVocabulary');
    /**
     * **[qudt:height](http://qudt.org/schema/qudt/height)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    height = this.toIri().concat('height');
    /**
     * **[qudt:qudt id](http://qudt.org/schema/qudt/id)**
     *
     * @type        property
     * @domain      qudt:Concept
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    id = this.toIri().concat('id');
    /**
     * **[qudt:iec-61360 code](http://qudt.org/schema/qudt/iec61360Code)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    iec61360Code = this.toIri().concat('iec61360Code');
    /**
     * **[qudt:image](http://qudt.org/schema/qudt/image)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    image = this.toIri().concat('image');
    /**
     * **[qudt:image location](http://qudt.org/schema/qudt/imageLocation)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    imageLocation = this.toIri().concat('imageLocation');
    /**
     * **[qudt:informative reference](http://qudt.org/schema/qudt/informativeReference)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    informativeReference = this.toIri().concat('informativeReference');
    /**
     * **[qudt:integer percentage](http://qudt.org/schema/qudt/integerPercentage)**
     *
     * @type        datatype
     * @parent      http://www.w3.org/2001/XMLSchema#integer
     */
    integerPercentage = this.toIri().concat('integerPercentage');
    /**
     * **[qudt:is base quantity kind of system](http://qudt.org/schema/qudt/isBaseQuantityKindOfSystem)**
     *
     * @type        property
     * @parent      qudt:isQuantityKindOf
     */
    isBaseQuantityKindOfSystem = this.toIri().concat('isBaseQuantityKindOfSystem');
    /**
     * **[qudt:is Delta Quantity](http://qudt.org/schema/qudt/isDeltaQuantity)**
     *
     * This property is used to identify a Quantity instance that is a measure of a change, or interval, of some property, rather than a measure of its absolute value. This is important for measurements such as temperature differences where the conversion among units would be calculated differently because of offsets.
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#boolean
     */
    isDeltaQuantity = this.toIri().concat('isDeltaQuantity');
    /**
     * **[qudt:is dimension in system](http://qudt.org/schema/qudt/isDimensionInSystem)**
     *
     * @type        property
     */
    isDimensionInSystem = this.toIri().concat('isDimensionInSystem');
    /**
     * **[qudt:is metric unit](http://qudt.org/schema/qudt/isMetricUnit)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#boolean
     */
    isMetricUnit = this.toIri().concat('isMetricUnit');
    /**
     * **[qudt:is quantity kind of](http://qudt.org/schema/qudt/isQuantityKindOf)**
     *
     * @type        property
     */
    isQuantityKindOf = this.toIri().concat('isQuantityKindOf');
    /**
     * **[qudt:normative reference (ISO)](http://qudt.org/schema/qudt/isoNormativeReference)**
     *
     * @type        property
     * @parent      qudt:normativeReference
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    isoNormativeReference = this.toIri().concat('isoNormativeReference');
    /**
     * **[qudt:java name](http://qudt.org/schema/qudt/javaName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    javaName = this.toIri().concat('javaName');
    /**
     * **[qudt:Javascript name](http://qudt.org/schema/qudt/jsName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    jsName = this.toIri().concat('jsName');
    /**
     * **[qudt:landscape](http://qudt.org/schema/qudt/landscape)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#boolean
     */
    landscape = this.toIri().concat('landscape');
    /**
     * **[qudt:latex definition](http://qudt.org/schema/qudt/latexDefinition)**
     *
     * @type        property
     * @range       qudt:LatexString
     */
    latexDefinition = this.toIri().concat('latexDefinition');
    /**
     * **[qudt:latex symbol](http://qudt.org/schema/qudt/latexSymbol)**
     *
     * The symbol is a glyph that is used to represent some concept, typically a unit or a quantity, in a compact form. For example, the symbol for an Ohm is \(ohm\). This contrasts with 'unit:abbreviation', which gives a short alphanumeric abbreviation for the unit, 'ohm' for Ohm.
     *
     * @type        property
     * @range       qudt:LatexString
     */
    latexSymbol = this.toIri().concat('latexSymbol');
    /**
     * **[qudt:length](http://qudt.org/schema/qudt/length)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#integer
     */
    length = this.toIri().concat('length');
    /**
     * **[qudt:literal](http://qudt.org/schema/qudt/literal)**
     *
     * @type        property
     * @parent      http://www.linkedmodel.org/schema/dtype#literal
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    literal = this.toIri().concat('literal');
    /**
     * **[qudt:lower bound](http://qudt.org/schema/qudt/lowerBound)**
     *
     * @type        property
     */
    lowerBound = this.toIri().concat('lowerBound');
    /**
     * **[qudt:math definition](http://qudt.org/schema/qudt/mathDefinition)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    mathDefinition = this.toIri().concat('mathDefinition');
    /**
     * **[qudt:mathML definition](http://qudt.org/schema/qudt/mathMLdefinition)**
     *
     * @type        property
     * @parent      qudt:mathDefinition
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    mathMLdefinition = this.toIri().concat('mathMLdefinition');
    /**
     * **[qudt:matlab name](http://qudt.org/schema/qudt/matlabName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    matlabName = this.toIri().concat('matlabName');
    /**
     * **[qudt:max exclusive](http://qudt.org/schema/qudt/maxExclusive)**
     *
     * maxExclusive is the exclusive upper bound of the value space for a datatype with the ordered property. The value of maxExclusive must be in the value space of the base type or be equal to {value} in {base type definition}.
     *
     * @type        property
     * @parent      qudt:upperBound
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    maxExclusive = this.toIri().concat('maxExclusive');
    /**
     * **[qudt:max inclusive](http://qudt.org/schema/qudt/maxInclusive)**
     *
     * maxInclusive is the inclusive upper bound of the value space for a datatype with the ordered property. The value of maxInclusive must be in the value space of the base type.
     *
     * @type        property
     * @parent      qudt:upperBound
     */
    maxInclusive = this.toIri().concat('maxInclusive');
    /**
     * **[qudt:Microsoft SQL Server name](http://qudt.org/schema/qudt/microsoftSQLServerName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    microsoftSQLServerName = this.toIri().concat('microsoftSQLServerName');
    /**
     * **[qudt:min exclusive](http://qudt.org/schema/qudt/minExclusive)**
     *
     * minExclusive is the exclusive lower bound of the value space for a datatype with the ordered property. The value of minExclusive must be in the value space of the base type or be equal to {value} in {base type definition}.
     *
     * @type        property
     * @parent      qudt:lowerBound
     */
    minExclusive = this.toIri().concat('minExclusive');
    /**
     * **[qudt:min inclusive](http://qudt.org/schema/qudt/minInclusive)**
     *
     * minInclusive is the inclusive lower bound of the value space for a datatype with the ordered property. The value of minInclusive must be in the value space of the base type.
     *
     * @type        property
     * @parent      qudt:lowerBound
     */
    minInclusive = this.toIri().concat('minInclusive');
    /**
     * **[qudt:MySQL name](http://qudt.org/schema/qudt/mySQLName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    mySQLName = this.toIri().concat('mySQLName');
    /**
     * **[qudt:negative delta limit](http://qudt.org/schema/qudt/negativeDeltaLimit)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    negativeDeltaLimit = this.toIri().concat('negativeDeltaLimit');
    /**
     * **[qudt:normative reference](http://qudt.org/schema/qudt/normativeReference)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    normativeReference = this.toIri().concat('normativeReference');
    /**
     * **[qudt:numerator dimension vector](http://qudt.org/schema/qudt/numeratorDimensionVector)**
     *
     * @type        property
     * @range       qudt:QuantityKindDimensionVector
     */
    numeratorDimensionVector = this.toIri().concat('numeratorDimensionVector');
    /**
     * **[qudt:numeric value](http://qudt.org/schema/qudt/numericValue)**
     *
     * @type        property
     * @range       qudt:NumericUnion
     */
    numericValue = this.toIri().concat('numericValue');
    /**
     * **[qudt:ODBC name](http://qudt.org/schema/qudt/odbcName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    odbcName = this.toIri().concat('odbcName');
    /**
     * **[qudt:OLE DB name](http://qudt.org/schema/qudt/oleDBName)**
     *
     * OLE DB (Object Linking and Embedding, Database, sometimes written as OLEDB or OLE-DB), an API designed by Microsoft, allows accessing data from a variety of sources in a uniform manner. The API provides a set of interfaces implemented using the Component Object Model (COM); it is otherwise unrelated to OLE.
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    oleDBName = this.toIri().concat('oleDBName');
    /**
     * **[qudt:om unit](http://qudt.org/schema/qudt/omUnit)**
     *
     * @type        property
     * @domain      qudt:Unit
     */
    omUnit = this.toIri().concat('omUnit');
    /**
     * **[qudt:online reference](http://qudt.org/schema/qudt/onlineReference)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    onlineReference = this.toIri().concat('onlineReference');
    /**
     * **[qudt:ORACLE SQL name](http://qudt.org/schema/qudt/oracleSQLName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    oracleSQLName = this.toIri().concat('oracleSQLName');
    /**
     * **[qudt:order](http://qudt.org/schema/qudt/order)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#nonNegativeInteger
     */
    order = this.toIri().concat('order');
    /**
     * **[qudt:ordered type](http://qudt.org/schema/qudt/orderedType)**
     *
     * @type        property
     */
    orderedType = this.toIri().concat('orderedType');
    /**
     * **[qudt:out of scope](http://qudt.org/schema/qudt/outOfScope)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#boolean
     */
    outOfScope = this.toIri().concat('outOfScope');
    /**
     * **[qudt:permissible maths](http://qudt.org/schema/qudt/permissibleMaths)**
     *
     * @type        property
     */
    permissibleMaths = this.toIri().concat('permissibleMaths');
    /**
     * **[qudt:permissible transformation](http://qudt.org/schema/qudt/permissibleTransformation)**
     *
     * @type        property
     */
    permissibleTransformation = this.toIri().concat('permissibleTransformation');
    /**
     * **[qudt:description (plain text)](http://qudt.org/schema/qudt/plainTextDescription)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    plainTextDescription = this.toIri().concat('plainTextDescription');
    /**
     * **[qudt:Positive delta limit](http://qudt.org/schema/qudt/positiveDeltaLimit)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    positiveDeltaLimit = this.toIri().concat('positiveDeltaLimit');
    /**
     * **[qudt:prefix](http://qudt.org/schema/qudt/prefix)**
     *
     * Associates a unit with the appropriate prefix, if any.
     *
     * @type        property
     * @range       qudt:Prefix
     */
    prefix = this.toIri().concat('prefix');
    /**
     * **[qudt:prefix multiplier](http://qudt.org/schema/qudt/prefixMultiplier)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#double
     */
    prefixMultiplier = this.toIri().concat('prefixMultiplier');
    /**
     * **[qudt:protocol buffers name](http://qudt.org/schema/qudt/protocolBuffersName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    protocolBuffersName = this.toIri().concat('protocolBuffersName');
    /**
     * **[qudt:python name](http://qudt.org/schema/qudt/pythonName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    pythonName = this.toIri().concat('pythonName');
    /**
     * **[qudt:denominator dimension vector](http://qudt.org/schema/qudt/qkdvDenominator)**
     *
     * @type        property
     * @range       qudt:QuantityKindDimensionVector
     */
    qkdvDenominator = this.toIri().concat('qkdvDenominator');
    /**
     * **[qudt:numerator dimension vector](http://qudt.org/schema/qudt/qkdvNumerator)**
     *
     * @type        property
     * @range       qudt:QuantityKindDimensionVector
     */
    qkdvNumerator = this.toIri().concat('qkdvNumerator');
    /**
     * **[qudt:quantity](http://qudt.org/schema/qudt/quantity)**
     *
     * @type        property
     */
    quantity = this.toIri().concat('quantity');
    /**
     * **[qudt:quantity value](http://qudt.org/schema/qudt/quantityValue)**
     *
     * @type        property
     * @range       qudt:QuantityValue
     */
    quantityValue = this.toIri().concat('quantityValue');
    /**
     * **[qudt:rationale](http://qudt.org/schema/qudt/rationale)**
     *
     * @type        property
     * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML
     */
    rationale = this.toIri().concat('rationale');
    /**
     * **[qudt:rdfs datatype](http://qudt.org/schema/qudt/rdfsDatatype)**
     *
     * @type        property
     */
    rdfsDatatype = this.toIri().concat('rdfsDatatype');
    /**
     * **[qudt:reference](http://qudt.org/schema/qudt/reference)**
     *
     * @type        property
     */
    reference = this.toIri().concat('reference');
    /**
     * **[qudt:reference unit](http://qudt.org/schema/qudt/referenceUnit)**
     *
     * @type        property
     */
    referenceUnit = this.toIri().concat('referenceUnit');
    /**
     * **[qudt:relative standard uncertainty](http://qudt.org/schema/qudt/relativeStandardUncertainty)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#double
     */
    relativeStandardUncertainty = this.toIri().concat('relativeStandardUncertainty');
    /**
     * **[qudt:relevant quantity kind](http://qudt.org/schema/qudt/relevantQuantityKind)**
     *
     * @type        property
     * @range       qudt:QuantityKind
     */
    relevantQuantityKind = this.toIri().concat('relevantQuantityKind');
    /**
     * **[qudt:Relevant Unit](http://qudt.org/schema/qudt/relevantUnit)**
     *
     * This property is used for qudt:Discipline instances to identify the Unit instances that are used within a given discipline.
     *
     * @type        property
     * @range       qudt:Unit
     */
    relevantUnit = this.toIri().concat('relevantUnit');
    /**
     * **[qudt:rule type](http://qudt.org/schema/qudt/ruleType)**
     *
     * @type        property
     */
    ruleType = this.toIri().concat('ruleType');
    /**
     * **[qudt:scale type](http://qudt.org/schema/qudt/scaleType)**
     *
     * @type        property
     */
    scaleType = this.toIri().concat('scaleType');
    /**
     * **[qudt:si units expression](http://qudt.org/schema/qudt/siUnitsExpression)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    siUnitsExpression = this.toIri().concat('siUnitsExpression');
    /**
     * **[qudt:specialization](http://qudt.org/schema/qudt/specialization)**
     *
     * @type        property
     */
    specialization = this.toIri().concat('specialization');
    /**
     * **[qudt:standard uncertainty](http://qudt.org/schema/qudt/standardUncertainty)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#double
     */
    standardUncertainty = this.toIri().concat('standardUncertainty');
    /**
     * **[qudt:superceded by](http://qudt.org/schema/qudt/supercededBy)**
     *
     * @type        property
     */
    supercededBy = this.toIri().concat('supercededBy');
    /**
     * **[qudt:symbol](http://qudt.org/schema/qudt/symbol)**
     *
     * The symbol is a glyph that is used to represent some concept, typically a unit or a quantity, in a compact form. For example, the symbol for an Ohm is \(ohm\). This contrasts with 'unit:abbreviation', which gives a short alphanumeric abbreviation for the unit, 'ohm' for Ohm.
     *
     * @type        property
     * @parent      qudt:literal
     */
    symbol = this.toIri().concat('symbol');
    /**
     * **[qudt:system definition](http://qudt.org/schema/qudt/systemDefinition)**
     *
     * @type        property
     */
    systemDefinition = this.toIri().concat('systemDefinition');
    /**
     * **[qudt:system derived quantity kind](http://qudt.org/schema/qudt/systemDerivedQuantityKind)**
     *
     * @type        property
     * @parent      qudt:hasQuantityKind
     */
    systemDerivedQuantityKind = this.toIri().concat('systemDerivedQuantityKind');
    /**
     * **[qudt:system dimension](http://qudt.org/schema/qudt/systemDimension)**
     *
     * @type        property
     */
    systemDimension = this.toIri().concat('systemDimension');
    /**
     * **[qudt:ucum case-insensitive code](http://qudt.org/schema/qudt/ucumCaseInsensitiveCode)**
     *
     * @type        property
     * @parent      qudt:ucumCode
     */
    ucumCaseInsensitiveCode = this.toIri().concat('ucumCaseInsensitiveCode');
    /**
     * **[qudt:ucum case-sensitive code](http://qudt.org/schema/qudt/ucumCaseSensitiveCode)**
     *
     * @type        property
     * @parent      qudt:ucumCode
     */
    ucumCaseSensitiveCode = this.toIri().concat('ucumCaseSensitiveCode');
    /**
     * **[qudt:ucum code](http://qudt.org/schema/qudt/ucumCode)**
     *
     * @type        property
     * @parent      http://www.w3.org/2004/02/skos/core#notation
     * @range       qudt:UCUMcs or qudt:UCUMcs-term
     */
    ucumCode = this.toIri().concat('ucumCode');
    /**
     * **[qudt:udunits code](http://qudt.org/schema/qudt/udunitsCode)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    udunitsCode = this.toIri().concat('udunitsCode');
    /**
     * **[qudt:unece common code](http://qudt.org/schema/qudt/uneceCommonCode)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    uneceCommonCode = this.toIri().concat('uneceCommonCode');
    /**
     * **[qudt:unit](http://qudt.org/schema/qudt/unit)**
     *
     * @type        property
     * @range       qudt:Unit
     */
    unit = this.toIri().concat('unit');
    /**
     * **[qudt:unit for](http://qudt.org/schema/qudt/unitFor)**
     *
     * @type        property
     */
    unitFor = this.toIri().concat('unitFor');
    /**
     * **[qudt:is unit of system](http://qudt.org/schema/qudt/unitOfSystem)**
     *
     * @type        property
     * @domain      qudt:Unit
     * @range       qudt:SystemOfUnits
     */
    unitOfSystem = this.toIri().concat('unitOfSystem');
    /**
     * **[qudt:upper bound](http://qudt.org/schema/qudt/upperBound)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anySimpleType
     */
    upperBound = this.toIri().concat('upperBound');
    /**
     * **[qudt:url](http://qudt.org/schema/qudt/url)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#anyURI
     */
    url = this.toIri().concat('url');
    /**
     * **[qudt:value](http://qudt.org/schema/qudt/value)**
     *
     * @type        property
     */
    value = this.toIri().concat('value');
    /**
     * **[qudt:value for quantity](http://qudt.org/schema/qudt/valueQuantity)**
     *
     * @type        property
     */
    valueQuantity = this.toIri().concat('valueQuantity');
    /**
     * **[qudt:value union](http://qudt.org/schema/qudt/valueUnion)**
     *
     * A datatype that is the union of numeric xsd data types. "numericUnion" is equivalent to the xsd specification that uses an xsd:union of memberTypes="xsd:decimal xsd:double xsd:float xsd:integer".
     *
     * @type        datatype
     * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
     */
    valueUnion = this.toIri().concat('valueUnion');
    /**
     * **[qudt:Vusal Basic name](http://qudt.org/schema/qudt/vbName)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    vbName = this.toIri().concat('vbName');
    /**
     * **[qudt:vector magnitude](http://qudt.org/schema/qudt/vectorMagnitude)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#float
     */
    vectorMagnitude = this.toIri().concat('vectorMagnitude');
    /**
     * **[qudt:width](http://qudt.org/schema/qudt/width)**
     *
     * @type        property
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    width = this.toIri().concat('width');
}
/**
 * prefix **qudt:** <<http://qudt.org/schema/qudt/>>
 *
 * Quantities, Units, Dimensions and Types (QUDT)
 *
 * The QUDT, or “Quantity, Unit, Dimension and Type” schema defines the base classes properties, and restrictions used for modeling physical quantities, units of measure, and their dimensions in various measurement systems.  The goal of the QUDT ontology is to provide a unified model of, measurable quantities, units for measuring different kinds of quantities, the numerical values of quantities in different units of measure and the data structures and data types used to store and manipulate these objects in software.
 *
 * Except for unit prefixes, all units are specified in separate vocabularies.  Descriptions are provided in both HTML and LaTeX formats.  A quantity is a measure of an observable phenomenon, that, when associated with something, becomes a property of that thing; a particular object, event, or physical system.
 *
 * A quantity has meaning in the context of a measurement (i.e. the thing measured, the measured value, the accuracy of measurement, etc.) whereas the underlying quantity kind is independent of any particular measurement.  Thus, length is a quantity kind while the height of a rocket is a specific quantity of length; its magnitude that may be expressed in meters, feet, inches, etc.  Or, as stated at Wikipedia, in the language of measurement, quantities are quantifiable aspects of the world, such as time, distance, velocity, mass, momentum, energy, and weight, and units are used to describe their measure.  Many of these quantities are related to each other by various physical laws, and as a result the units of some of the quantities can be expressed as products (or ratios) of powers of other units (e.g., momentum is mass times velocity and velocity is measured in distance divided by time).
 *
 * Version: 2.1.2
 */
const qudt = new Vocabulary('http://qudt.org/schema/qudt/');
export default qudt;
//# sourceMappingURL=qudt.js.map