/**
 * Brick: A uniform metadata schema for buildings
 * brick.ts (2023-08-08T17:30:07.967Z)
 */
import VocabularyBase from '../../Classes/Vocabulary.js';
declare class Vocabulary extends VocabularyBase<'https://brickschema.org/schema/Brick#'> {
    /**
     * **[brick:AED](https://brickschema.org/schema/Brick#AED)**
     *
     * @type        class
     * @parent      brick:Safety_Equipment
     */
    readonly AED: import("../index.js").Iri<"https://brickschema.org/schema/Brick#AED">;
    /**
     * **[brick:AHU](https://brickschema.org/schema/Brick#AHU)**
     *
     * Assembly consisting of sections containing a fan or fans and other necessary equipment to perform one or more of the following functions: circulating, filtration, heating, cooling, heat recovery, humidifying, dehumidifying, and mixing of air. Is usually connected to an air-distribution system.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly AHU: import("../index.js").Iri<"https://brickschema.org/schema/Brick#AHU">;
    /**
     * **[brick:Ablutions_Room](https://brickschema.org/schema/Brick#Ablutions_Room)**
     *
     * A room for performing cleansing rituals before prayer
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Ablutions_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Ablutions_Room">;
    /**
     * **[brick:Absolute_Humidity](https://brickschema.org/schema/Brick#Absolute_Humidity)**
     *
     * @type        instance
     */
    readonly Absolute_Humidity: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Absolute_Humidity">;
    /**
     * **[brick:Absorption_Chiller](https://brickschema.org/schema/Brick#Absorption_Chiller)**
     *
     * A chiller that utilizes a thermal or/and chemical process to produce the refrigeration effect necessary to provide chilled water. There is no mechanical compression of the refrigerant taking place within the machine, as occurs within more traditional vapor compression type chillers.
     *
     * @type        class
     * @parent      brick:Chiller
     */
    readonly Absorption_Chiller: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Absorption_Chiller">;
    /**
     * **[brick:Acceleration_Time](https://brickschema.org/schema/Brick#Acceleration_Time)**
     *
     * @type        instance
     */
    readonly Acceleration_Time: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Acceleration_Time">;
    /**
     * **[brick:Acceleration_Time_Setpoint](https://brickschema.org/schema/Brick#Acceleration_Time_Setpoint)**
     *
     * @type        class
     * @parent      brick:Time_Setpoint
     */
    readonly Acceleration_Time_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Acceleration_Time_Setpoint">;
    /**
     * **[brick:Access_Control_Equipment](https://brickschema.org/schema/Brick#Access_Control_Equipment)**
     *
     * @type        class
     * @parent      brick:Security_Equipment
     */
    readonly Access_Control_Equipment: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Access_Control_Equipment">;
    /**
     * **[brick:Access_Reader](https://brickschema.org/schema/Brick#Access_Reader)**
     *
     * @type        class
     * @parent      brick:Access_Control_Equipment
     */
    readonly Access_Reader: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Access_Reader">;
    /**
     * **[brick:Active_Energy](https://brickschema.org/schema/Brick#Active_Energy)**
     *
     * The integral of the active power over a time interval
     *
     * @type        instance
     */
    readonly Active_Energy: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Active_Energy">;
    /**
     * **[brick:Active_Power](https://brickschema.org/schema/Brick#Active_Power)**
     *
     * (Active Power) is, under periodic conditions, the mean value, taken over one period (T), of the instantaneous power (p). In complex notation, (P = Re \; S), where (S) is (complex power)".
     *
     * @type        instance
     */
    readonly Active_Power: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Active_Power">;
    /**
     * **[brick:Active_Power_Sensor](https://brickschema.org/schema/Brick#Active_Power_Sensor)**
     *
     * Measures the portion of power that, averaged over a complete cycle of the AC waveform, results in net transfer of energy in one direction
     *
     * @type        class
     * @parent      brick:Electrical_Power_Sensor
     */
    readonly Active_Power_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Active_Power_Sensor">;
    /**
     * **[brick:Adjust_Sensor](https://brickschema.org/schema/Brick#Adjust_Sensor)**
     *
     * Measures user-provided adjustment of some value
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Adjust_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Adjust_Sensor">;
    /**
     * **[brick:AggregationShape](https://brickschema.org/schema/Brick#AggregationShape)**
     *
     * @type        class
     */
    readonly AggregationShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#AggregationShape">;
    /**
     * **[brick:Air](https://brickschema.org/schema/Brick#Air)**
     *
     * the invisible gaseous substance surrounding the earth, a mixture mainly of oxygen and nitrogen.
     *
     * @type        class
     * @parent      brick:Gas
     */
    readonly Air: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air">;
    /**
     * **[brick:Air_Alarm](https://brickschema.org/schema/Brick#Air_Alarm)**
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Air_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Alarm">;
    /**
     * **[brick:Air_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Air_Differential_Pressure_Sensor)**
     *
     * Measures the difference in pressure between two regions of air
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Sensor
     */
    readonly Air_Differential_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Differential_Pressure_Sensor">;
    /**
     * **[brick:Air_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Air_Differential_Pressure_Setpoint)**
     *
     * Sets the target air differential pressure between an upstream and downstream point in a air duct or conduit
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint
     */
    readonly Air_Differential_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Differential_Pressure_Setpoint">;
    /**
     * **[brick:Air_Diffuser](https://brickschema.org/schema/Brick#Air_Diffuser)**
     *
     * A device that is a component of the air distribution system that controls the delivery of conditioned and/or ventilating air into a room
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    readonly Air_Diffuser: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Diffuser">;
    /**
     * **[brick:Air_Enthalpy_Sensor](https://brickschema.org/schema/Brick#Air_Enthalpy_Sensor)**
     *
     * Measures the total heat content of air
     *
     * @type        class
     * @parent      brick:Enthalpy_Sensor
     */
    readonly Air_Enthalpy_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Enthalpy_Sensor">;
    /**
     * **[brick:Air_Flow_Deadband_Setpoint](https://brickschema.org/schema/Brick#Air_Flow_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of air flow
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint
     */
    readonly Air_Flow_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Flow_Deadband_Setpoint">;
    /**
     * **[brick:Air_Flow_Demand_Setpoint](https://brickschema.org/schema/Brick#Air_Flow_Demand_Setpoint)**
     *
     * Sets the rate of air flow required for a process
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint
     */
    readonly Air_Flow_Demand_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Flow_Demand_Setpoint">;
    /**
     * **[brick:Air_Flow_Loss_Alarm](https://brickschema.org/schema/Brick#Air_Flow_Loss_Alarm)**
     *
     * An alarm that indicates loss in air flow.
     *
     * @type        class
     * @parent      brick:Air_Alarm
     */
    readonly Air_Flow_Loss_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Flow_Loss_Alarm">;
    /**
     * **[brick:Air_Flow_Sensor](https://brickschema.org/schema/Brick#Air_Flow_Sensor)**
     *
     * Measures the rate of flow of air
     *
     * @type        class
     * @parent      brick:Flow_Sensor
     */
    readonly Air_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Flow_Sensor">;
    /**
     * **[brick:Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Air_Flow_Setpoint)**
     *
     * Sets air flow
     *
     * @type        class
     * @parent      brick:Flow_Setpoint
     */
    readonly Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Flow_Setpoint">;
    /**
     * **[brick:Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    readonly Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Air_Grains_Sensor](https://brickschema.org/schema/Brick#Air_Grains_Sensor)**
     *
     * Measures the mass of water vapor in air
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Air_Grains_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Grains_Sensor">;
    /**
     * **[brick:Air_Handler_Unit](https://brickschema.org/schema/Brick#Air_Handler_Unit)**
     *
     * Assembly consisting of sections containing a fan or fans and other necessary equipment to perform one or more of the following functions: circulating, filtration, heating, cooling, heat recovery, humidifying, dehumidifying, and mixing of air. Is usually connected to an air-distribution system.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Air_Handler_Unit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Handler_Unit">;
    /**
     * **[brick:Air_Handling_Unit](https://brickschema.org/schema/Brick#Air_Handling_Unit)**
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Air_Handling_Unit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Handling_Unit">;
    /**
     * **[brick:Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Air_Humidity_Setpoint)**
     *
     * @type        class
     * @parent      brick:Humidity_Setpoint
     */
    readonly Air_Humidity_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Humidity_Setpoint">;
    /**
     * **[brick:Air_Loop](https://brickschema.org/schema/Brick#Air_Loop)**
     *
     * The set of connected equipment serving one path of air
     *
     * @type        class
     * @parent      brick:Loop
     */
    readonly Air_Loop: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Loop">;
    /**
     * **[brick:Air_Plenum](https://brickschema.org/schema/Brick#Air_Plenum)**
     *
     * A component of the HVAC the receives air from the air handling unit or room to distribute or exhaust to or from the building
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Air_Plenum: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Plenum">;
    /**
     * **[brick:Air_Quality](https://brickschema.org/schema/Brick#Air_Quality)**
     *
     * @type        instance
     */
    readonly Air_Quality: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Quality">;
    /**
     * **[brick:Air_Quality_Sensor](https://brickschema.org/schema/Brick#Air_Quality_Sensor)**
     *
     * A sensor which provides a measure of air quality
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Air_Quality_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Quality_Sensor">;
    /**
     * **[brick:Air_Static_Pressure_Step_Parameter](https://brickschema.org/schema/Brick#Air_Static_Pressure_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Static_Pressure_Step_Parameter
     */
    readonly Air_Static_Pressure_Step_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Static_Pressure_Step_Parameter">;
    /**
     * **[brick:Air_System](https://brickschema.org/schema/Brick#Air_System)**
     *
     * The equipment, distribution systems and terminals that introduce or exhaust, either collectively or individually, the air into and from the building
     *
     * @type        class
     * @parent      brick:Heating_Ventilation_Air_Conditioning_System
     */
    readonly Air_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_System">;
    /**
     * **[brick:Air_Temperature_Alarm](https://brickschema.org/schema/Brick#Air_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with the temperature of air.
     *
     * @type        class
     * @parent      brick:Air_Alarm
     */
    readonly Air_Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Temperature_Alarm">;
    /**
     * **[brick:Air_Temperature_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Air_Temperature_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Integral_Time_Parameter
     */
    readonly Air_Temperature_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Temperature_Integral_Time_Parameter">;
    /**
     * **[brick:Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Air_Temperature_Sensor)**
     *
     * Measures the temperature of air
     *
     * @type        class
     * @parent      brick:Temperature_Sensor
     */
    readonly Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Temperature_Sensor">;
    /**
     * **[brick:Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Air_Temperature_Setpoint)**
     *
     * Sets temperature of air
     *
     * @type        class
     * @parent      brick:Temperature_Setpoint
     */
    readonly Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Temperature_Setpoint">;
    /**
     * **[brick:Air_Temperature_Setpoint_Limit](https://brickschema.org/schema/Brick#Air_Temperature_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Air_Temperature_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    readonly Air_Temperature_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Temperature_Setpoint_Limit">;
    /**
     * **[brick:Air_Temperature_Step_Parameter](https://brickschema.org/schema/Brick#Air_Temperature_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Temperature_Step_Parameter
     */
    readonly Air_Temperature_Step_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Temperature_Step_Parameter">;
    /**
     * **[brick:Air_Wet_Bulb_Temperature_Sensor](https://brickschema.org/schema/Brick#Air_Wet_Bulb_Temperature_Sensor)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    readonly Air_Wet_Bulb_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Air_Wet_Bulb_Temperature_Sensor">;
    /**
     * **[brick:Alarm](https://brickschema.org/schema/Brick#Alarm)**
     *
     * Alarm points are signals (either audible or visual) that alert an operator to an off-normal condition which requires some form of corrective action
     *
     * @type        class
     * @parent      brick:Point
     */
    readonly Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Alarm">;
    /**
     * **[brick:Alarm_Delay_Parameter](https://brickschema.org/schema/Brick#Alarm_Delay_Parameter)**
     *
     * A parameter determining how long to delay an alarm after sufficient conditions have been met
     *
     * @type        class
     * @parent      brick:Delay_Parameter
     */
    readonly Alarm_Delay_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Alarm_Delay_Parameter">;
    /**
     * **[brick:Alternating_Current_Frequency](https://brickschema.org/schema/Brick#Alternating_Current_Frequency)**
     *
     * The frequency of the oscillations of alternating current
     *
     * @type        instance
     */
    readonly Alternating_Current_Frequency: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Alternating_Current_Frequency">;
    /**
     * **[brick:Angle](https://brickschema.org/schema/Brick#Angle)**
     *
     * The inclination to each other of two intersecting lines, measured by the arc of a circle intercepted between the two lines forming the angle, the center of the circle being the point of intersection.  An acute angle is less than (90^\circ), a right angle (90^\circ); an obtuse angle, more than (90^\circ) but less than (180^\circ); a straight angle, (180^\circ); a reflex angle, more than (180^\circ) but less than (360^\circ); a perigon, (360^\circ). Any angle not a multiple of (90^\circ) is an oblique angle. If the sum of two angles is (90^\circ), they are complementary angles; if (180^\circ), supplementary angles; if (360^\circ), explementary angles.
     *
     * @type        instance
     */
    readonly Angle: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Angle">;
    /**
     * **[brick:Angle_Sensor](https://brickschema.org/schema/Brick#Angle_Sensor)**
     *
     * Measues the planar angle of some phenomenon
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Angle_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Angle_Sensor">;
    /**
     * **[brick:Apparent_Energy](https://brickschema.org/schema/Brick#Apparent_Energy)**
     *
     * The integral of the apparent power over a time interval
     *
     * @type        instance
     */
    readonly Apparent_Energy: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Apparent_Energy">;
    /**
     * **[brick:Apparent_Power](https://brickschema.org/schema/Brick#Apparent_Power)**
     *
     * Apparent Power is the product of the rms voltage (U) between the terminals of a two-terminal element or two-terminal circuit and the rms electric current I in the element or circuit. Under sinusoidal conditions, the apparent power is the modulus of the complex power.
     *
     * @type        instance
     */
    readonly Apparent_Power: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Apparent_Power">;
    /**
     * **[brick:AreaShape](https://brickschema.org/schema/Brick#AreaShape)**
     *
     * @type        class
     */
    readonly AreaShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#AreaShape">;
    /**
     * **[brick:Atmospheric_Pressure](https://brickschema.org/schema/Brick#Atmospheric_Pressure)**
     *
     * The pressure exerted by the weight of the air above it at any point on the earth's surface. At sea level the atmosphere will support a column of mercury about (760 mm) high. This decreases with increasing altitude. The standard value for the atmospheric pressure at sea level in SI units is (101,325 pascals).
     *
     * @type        instance
     */
    readonly Atmospheric_Pressure: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Atmospheric_Pressure">;
    /**
     * **[brick:Auditorium](https://brickschema.org/schema/Brick#Auditorium)**
     *
     * A space for performances or larger gatherings
     *
     * @type        class
     * @parent      brick:Common_Space
     */
    readonly Auditorium: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Auditorium">;
    /**
     * **[brick:Automated_External_Defibrillator](https://brickschema.org/schema/Brick#Automated_External_Defibrillator)**
     *
     * @type        class
     * @parent      brick:Safety_Equipment
     */
    readonly Automated_External_Defibrillator: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Automated_External_Defibrillator">;
    /**
     * **[brick:Automatic_Mode_Command](https://brickschema.org/schema/Brick#Automatic_Mode_Command)**
     *
     * Controls whether or not a device or controller is operating in "Automatic" mode
     *
     * @type        class
     * @parent      brick:Mode_Command
     */
    readonly Automatic_Mode_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Automatic_Mode_Command">;
    /**
     * **[brick:Availability_Status](https://brickschema.org/schema/Brick#Availability_Status)**
     *
     * Indicates if a piece of equipment, system, or functionality is available for operation
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Availability_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Availability_Status">;
    /**
     * **[brick:Average_Cooling_Demand_Sensor](https://brickschema.org/schema/Brick#Average_Cooling_Demand_Sensor)**
     *
     * Measures the average power consumed by a cooling process as the amount of power consumed over some interval
     *
     * @type        class
     * @parent      brick:Cooling_Demand_Sensor
     */
    readonly Average_Cooling_Demand_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Average_Cooling_Demand_Sensor">;
    /**
     * **[brick:Average_Discharge_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Average_Discharge_Air_Flow_Sensor)**
     *
     * The computed average flow of discharge air over some interval
     *
     * @type        class
     * @parent      brick:Discharge_Air_Flow_Sensor
     */
    readonly Average_Discharge_Air_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Average_Discharge_Air_Flow_Sensor">;
    /**
     * **[brick:Average_Exhaust_Air_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Average_Exhaust_Air_Static_Pressure_Sensor)**
     *
     * The computed average static pressure of air in exhaust regions of an HVAC system over some period of time
     *
     * @type        class
     * @parent      brick:Exhaust_Air_Static_Pressure_Sensor
     */
    readonly Average_Exhaust_Air_Static_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Average_Exhaust_Air_Static_Pressure_Sensor">;
    /**
     * **[brick:Average_Heating_Demand_Sensor](https://brickschema.org/schema/Brick#Average_Heating_Demand_Sensor)**
     *
     * Measures the average power consumed by a heating process as the amount of power consumed over some interval
     *
     * @type        class
     * @parent      brick:Heating_Demand_Sensor
     */
    readonly Average_Heating_Demand_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Average_Heating_Demand_Sensor">;
    /**
     * **[brick:Average_Supply_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Average_Supply_Air_Flow_Sensor)**
     *
     * The computed average flow of supply air over some interval
     *
     * @type        class
     * @parent      brick:Supply_Air_Flow_Sensor
     */
    readonly Average_Supply_Air_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Average_Supply_Air_Flow_Sensor">;
    /**
     * **[brick:Average_Zone_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Average_Zone_Air_Temperature_Sensor)**
     *
     * The computed average temperature of air in a zone, over some period of time
     *
     * @type        class
     * @parent      brick:Zone_Air_Temperature_Sensor
     */
    readonly Average_Zone_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Average_Zone_Air_Temperature_Sensor">;
    /**
     * **[brick:AzimuthShape](https://brickschema.org/schema/Brick#AzimuthShape)**
     *
     * @type        class
     */
    readonly AzimuthShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#AzimuthShape">;
    /**
     * **[brick:Baseboard_Radiator](https://brickschema.org/schema/Brick#Baseboard_Radiator)**
     *
     * Steam, hydronic, or electric heating device located at or near the floor.
     *
     * @type        class
     * @parent      brick:Radiator
     */
    readonly Baseboard_Radiator: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Baseboard_Radiator">;
    /**
     * **[brick:Basement](https://brickschema.org/schema/Brick#Basement)**
     *
     * The floor of a building which is partly or entirely below ground level.
     *
     * @type        class
     * @parent      brick:Floor
     */
    readonly Basement: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Basement">;
    /**
     * **[brick:Battery](https://brickschema.org/schema/Brick#Battery)**
     *
     * A container that stores chemical energy that can be converted into electricity and used as a source of power
     *
     * @type        class
     * @parent      brick:Energy_Storage
     */
    readonly Battery: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Battery">;
    /**
     * **[brick:Battery_Energy_Storage_System](https://brickschema.org/schema/Brick#Battery_Energy_Storage_System)**
     *
     * A collection of batteries that provides energy storage, along with their supporting equipment
     *
     * @type        class
     * @parent      brick:Energy_Storage_System
     */
    readonly Battery_Energy_Storage_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Battery_Energy_Storage_System">;
    /**
     * **[brick:Battery_Room](https://brickschema.org/schema/Brick#Battery_Room)**
     *
     * A room used to hold batteries for backup power
     *
     * @type        class
     * @parent      brick:Electrical_Room
     */
    readonly Battery_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Battery_Room">;
    /**
     * **[brick:Battery_Voltage_Sensor](https://brickschema.org/schema/Brick#Battery_Voltage_Sensor)**
     *
     * Measures the capacity of a battery
     *
     * @type        class
     * @parent      brick:Voltage_Sensor
     */
    readonly Battery_Voltage_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Battery_Voltage_Sensor">;
    /**
     * **[brick:Bench_Space](https://brickschema.org/schema/Brick#Bench_Space)**
     *
     * For areas of play in a stadium, the area for partcipants and referees by the side of the field
     *
     * @type        class
     * @parent      brick:Outdoor_Area
     */
    readonly Bench_Space: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Bench_Space">;
    /**
     * **[brick:Blowdown_Water](https://brickschema.org/schema/Brick#Blowdown_Water)**
     *
     * Water expelled from a system to remove mineral build up
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Blowdown_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Blowdown_Water">;
    /**
     * **[brick:Boiler](https://brickschema.org/schema/Brick#Boiler)**
     *
     * A closed, pressure vessel that uses fuel or electricity for heating water or other fluids to supply steam or hot water for heating, humidification, or other applications.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Boiler: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Boiler">;
    /**
     * **[brick:Booster_Fan](https://brickschema.org/schema/Brick#Booster_Fan)**
     *
     * Fan activated to increase airflow beyond what is provided by the default configuration
     *
     * @type        class
     * @parent      brick:Fan
     */
    readonly Booster_Fan: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Booster_Fan">;
    /**
     * **[brick:Box_Mode_Command](https://brickschema.org/schema/Brick#Box_Mode_Command)**
     *
     * @type        class
     * @parent      brick:Mode_Command
     */
    readonly Box_Mode_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Box_Mode_Command">;
    /**
     * **[brick:Break_Room](https://brickschema.org/schema/Brick#Break_Room)**
     *
     * A space for people to relax while not working
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Break_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Break_Room">;
    /**
     * **[brick:Breaker_Panel](https://brickschema.org/schema/Brick#Breaker_Panel)**
     *
     * Breaker Panel distributes power into various end-uses.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    readonly Breaker_Panel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Breaker_Panel">;
    /**
     * **[brick:Breakroom](https://brickschema.org/schema/Brick#Breakroom)**
     *
     * A space for people to relax while not working
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Breakroom: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Breakroom">;
    /**
     * **[brick:Broadcast_Room](https://brickschema.org/schema/Brick#Broadcast_Room)**
     *
     * A space to organize and manage a broadcast. Separate from studio
     *
     * @type        class
     * @parent      brick:Media_Room
     */
    readonly Broadcast_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Broadcast_Room">;
    /**
     * **[brick:Building](https://brickschema.org/schema/Brick#Building)**
     *
     * An independent unit of the built environment with a characteristic spatial structure, intended to serve at least one function or user activity [ISO 12006-2:2013]
     *
     * @type        class
     * @parent      brick:Location
     */
    readonly Building: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Building">;
    /**
     * **[brick:BuildingPrimaryFunctionShape](https://brickschema.org/schema/Brick#BuildingPrimaryFunctionShape)**
     *
     * @type        class
     */
    readonly BuildingPrimaryFunctionShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#BuildingPrimaryFunctionShape">;
    /**
     * **[brick:Building_Air](https://brickschema.org/schema/Brick#Building_Air)**
     *
     * air contained within a building
     *
     * @type        class
     * @parent      brick:Air
     */
    readonly Building_Air: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Building_Air">;
    /**
     * **[brick:Building_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Building_Air_Humidity_Setpoint)**
     *
     * Setpoint for humidity in a building
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    readonly Building_Air_Humidity_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Building_Air_Humidity_Setpoint">;
    /**
     * **[brick:Building_Air_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Building_Air_Static_Pressure_Sensor)**
     *
     * The static pressure of air within a building
     *
     * @type        class
     * @parent      brick:Static_Pressure_Sensor
     */
    readonly Building_Air_Static_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Building_Air_Static_Pressure_Sensor">;
    /**
     * **[brick:Building_Air_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Building_Air_Static_Pressure_Setpoint)**
     *
     * Sets static pressure of the entire building
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    readonly Building_Air_Static_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Building_Air_Static_Pressure_Setpoint">;
    /**
     * **[brick:Building_Chilled_Water_Meter](https://brickschema.org/schema/Brick#Building_Chilled_Water_Meter)**
     *
     * A meter that measures the usage or consumption of chilled water of a whole building
     *
     * @type        class
     * @parent      brick:Building_Meter
     */
    readonly Building_Chilled_Water_Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Building_Chilled_Water_Meter">;
    /**
     * **[brick:Building_Electrical_Meter](https://brickschema.org/schema/Brick#Building_Electrical_Meter)**
     *
     * A meter that measures the usage or consumption of electricity of a whole building
     *
     * @type        class
     * @parent      brick:Building_Meter
     */
    readonly Building_Electrical_Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Building_Electrical_Meter">;
    /**
     * **[brick:Building_Gas_Meter](https://brickschema.org/schema/Brick#Building_Gas_Meter)**
     *
     * A meter that measures the usage or consumption of gas of a whole building
     *
     * @type        class
     * @parent      brick:Building_Meter
     */
    readonly Building_Gas_Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Building_Gas_Meter">;
    /**
     * **[brick:Building_Hot_Water_Meter](https://brickschema.org/schema/Brick#Building_Hot_Water_Meter)**
     *
     * A meter that measures the usage or consumption of hot water of a whole building
     *
     * @type        class
     * @parent      brick:Building_Meter
     */
    readonly Building_Hot_Water_Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Building_Hot_Water_Meter">;
    /**
     * **[brick:Building_Meter](https://brickschema.org/schema/Brick#Building_Meter)**
     *
     * A meter that measures usage or consumption of some media for a whole building
     *
     * @type        class
     * @parent      brick:Meter
     */
    readonly Building_Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Building_Meter">;
    /**
     * **[brick:Building_Water_Meter](https://brickschema.org/schema/Brick#Building_Water_Meter)**
     *
     * A meter that measures the usage or consumption of water of a whole building
     *
     * @type        class
     * @parent      brick:Building_Meter
     */
    readonly Building_Water_Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Building_Water_Meter">;
    /**
     * **[brick:Bus_Riser](https://brickschema.org/schema/Brick#Bus_Riser)**
     *
     * Bus Risers are commonly fed from a switchgear and rise up through a series of floors to the main power distribution source for each floor.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    readonly Bus_Riser: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Bus_Riser">;
    /**
     * **[brick:Bypass_Air](https://brickschema.org/schema/Brick#Bypass_Air)**
     *
     * air in a bypass duct, used to relieve static pressure
     *
     * @type        class
     * @parent      brick:Air
     */
    readonly Bypass_Air: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Bypass_Air">;
    /**
     * **[brick:Bypass_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Bypass_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of bypass air
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    readonly Bypass_Air_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Bypass_Air_Flow_Sensor">;
    /**
     * **[brick:Bypass_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Bypass_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for bypass air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    readonly Bypass_Air_Humidity_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Bypass_Air_Humidity_Setpoint">;
    /**
     * **[brick:Bypass_Command](https://brickschema.org/schema/Brick#Bypass_Command)**
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Bypass_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Bypass_Command">;
    /**
     * **[brick:Bypass_Valve](https://brickschema.org/schema/Brick#Bypass_Valve)**
     *
     * A type of valve installed in a bypass pipeline
     *
     * @type        class
     * @parent      brick:Valve
     */
    readonly Bypass_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Bypass_Valve">;
    /**
     * **[brick:Bypass_Water](https://brickschema.org/schema/Brick#Bypass_Water)**
     *
     * Water that circumvents a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Bypass_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Bypass_Water">;
    /**
     * **[brick:Bypass_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Bypass_Water_Flow_Sensor)**
     *
     * Measures the rate of flow of bypass water
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    readonly Bypass_Water_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Bypass_Water_Flow_Sensor">;
    /**
     * **[brick:Bypass_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Bypass_Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of bypass water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    readonly Bypass_Water_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Bypass_Water_Flow_Setpoint">;
    /**
     * **[brick:CAV](https://brickschema.org/schema/Brick#CAV)**
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    readonly CAV: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CAV">;
    /**
     * **[brick:CO](https://brickschema.org/schema/Brick#CO)**
     *
     * Carbon Monoxide in the vapor phase
     *
     * @type        class
     * @parent      brick:Gas
     */
    readonly CO: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CO">;
    /**
     * **[brick:CO2](https://brickschema.org/schema/Brick#CO2)**
     *
     * Carbon Dioxide in the vapor phase
     *
     * @type        class
     * @parent      brick:Gas
     */
    readonly CO2: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CO2">;
    /**
     * **[brick:CO2_Alarm](https://brickschema.org/schema/Brick#CO2_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with the presence of carbon dioxide.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly CO2_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CO2_Alarm">;
    /**
     * **[brick:CO2Concentration](https://brickschema.org/schema/Brick#CO2_Concentration)**
     *
     * The concentration of carbon dioxide in a medium
     *
     * @type        instance
     */
    readonly CO2_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CO2_Concentration">;
    /**
     * **[brick:CO2_Differential_Sensor](https://brickschema.org/schema/Brick#CO2_Differential_Sensor)**
     *
     * Measures the difference between CO2 levels of inside and outside air
     *
     * @type        class
     * @parent      brick:CO2_Sensor
     */
    readonly CO2_Differential_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CO2_Differential_Sensor">;
    /**
     * **[brick:CO2_Level_Sensor](https://brickschema.org/schema/Brick#CO2_Level_Sensor)**
     *
     * Measures the concentration of CO2 in air
     *
     * @type        class
     * @parent      brick:CO2_Sensor
     */
    readonly CO2_Level_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CO2_Level_Sensor">;
    /**
     * **[brick:CO2_Sensor](https://brickschema.org/schema/Brick#CO2_Sensor)**
     *
     * Measures properties of CO2 in air
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    readonly CO2_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CO2_Sensor">;
    /**
     * **[brick:CO2_Setpoint](https://brickschema.org/schema/Brick#CO2_Setpoint)**
     *
     * Sets some property of CO2
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly CO2_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CO2_Setpoint">;
    /**
     * **[brick:COConcentration](https://brickschema.org/schema/Brick#CO_Concentration)**
     *
     * The concentration of carbon monoxide in a medium
     *
     * @type        instance
     */
    readonly CO_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CO_Concentration">;
    /**
     * **[brick:CO_Differential_Sensor](https://brickschema.org/schema/Brick#CO_Differential_Sensor)**
     *
     * @type        class
     * @parent      brick:CO_Sensor
     */
    readonly CO_Differential_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CO_Differential_Sensor">;
    /**
     * **[brick:CO_Level_Sensor](https://brickschema.org/schema/Brick#CO_Level_Sensor)**
     *
     * Measures the concentration of CO
     *
     * @type        class
     * @parent      brick:CO_Sensor
     */
    readonly CO_Level_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CO_Level_Sensor">;
    /**
     * **[brick:CO_Sensor](https://brickschema.org/schema/Brick#CO_Sensor)**
     *
     * Measures properties of CO
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    readonly CO_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CO_Sensor">;
    /**
     * **[brick:CRAC](https://brickschema.org/schema/Brick#CRAC)**
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly CRAC: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CRAC">;
    /**
     * **[brick:Cafeteria](https://brickschema.org/schema/Brick#Cafeteria)**
     *
     * A space to serve food and beverages
     *
     * @type        class
     * @parent      brick:Common_Space
     */
    readonly Cafeteria: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cafeteria">;
    /**
     * **[brick:Camera](https://brickschema.org/schema/Brick#Camera)**
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Camera: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Camera">;
    /**
     * **[brick:Capacity](https://brickschema.org/schema/Brick#Capacity)**
     *
     * @type        instance
     */
    readonly Capacity: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Capacity">;
    /**
     * **[brick:Capacity_Sensor](https://brickschema.org/schema/Brick#Capacity_Sensor)**
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Capacity_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Capacity_Sensor">;
    /**
     * **[brick:Ceiling_Fan](https://brickschema.org/schema/Brick#Ceiling_Fan)**
     *
     * A fan installed on the ceiling of a room for the purpose of air circulation
     *
     * @type        class
     * @parent      brick:Fan
     */
    readonly Ceiling_Fan: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Ceiling_Fan">;
    /**
     * **[brick:Centrifugal_Chiller](https://brickschema.org/schema/Brick#Centrifugal_Chiller)**
     *
     * A chiller that uses the vapor compression cycle to chill water. It throws off the heat collected from the chilled water plus the heat from the compressor to a water loop
     *
     * @type        class
     * @parent      brick:Chiller
     */
    readonly Centrifugal_Chiller: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Centrifugal_Chiller">;
    /**
     * **[brick:Change_Filter_Alarm](https://brickschema.org/schema/Brick#Change_Filter_Alarm)**
     *
     * An alarm that indicates that a filter must be changed
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Change_Filter_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Change_Filter_Alarm">;
    /**
     * **[brick:Chilled_Water](https://brickschema.org/schema/Brick#Chilled_Water)**
     *
     * water used as a cooling medium (particularly in air-conditioning systems or in processes) at below ambient temperature.
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Chilled_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water">;
    /**
     * **[brick:Chilled_Water_Coil](https://brickschema.org/schema/Brick#Chilled_Water_Coil)**
     *
     * A cooling element made of pipe or tube that removes heat from equipment, machines or airflows that is filled with chilled water.
     *
     * @type        class
     * @parent      brick:Cooling_Coil
     */
    readonly Chilled_Water_Coil: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Coil">;
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of differential pressure of chilled water
     *
     * @type        class
     * @parent      brick:Chilled_Water_Differential_Pressure_Setpoint
     */
    readonly Chilled_Water_Differential_Pressure_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Deadband_Setpoint">;
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Integral_Time_Parameter
     */
    readonly Chilled_Water_Differential_Pressure_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Integral_Time_Parameter">;
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Load_Shed_Reset_Status](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Load_Shed_Reset_Status)**
     *
     * @type        class
     * @parent      brick:Chilled_Water_Differential_Pressure_Load_Shed_Status
     */
    readonly Chilled_Water_Differential_Pressure_Load_Shed_Reset_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Load_Shed_Reset_Status">;
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Load_Shed_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Load_Shed_Setpoint)**
     *
     * @type        class
     * @parent      brick:Chilled_Water_Differential_Pressure_Setpoint
     */
    readonly Chilled_Water_Differential_Pressure_Load_Shed_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Load_Shed_Setpoint">;
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Load_Shed_Status](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Load_Shed_Status
     */
    readonly Chilled_Water_Differential_Pressure_Load_Shed_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Load_Shed_Status">;
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Proportional_Band
     */
    readonly Chilled_Water_Differential_Pressure_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Proportional_Band_Parameter">;
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Sensor)**
     *
     * Measures the difference in water pressure on either side of a chilled water valve
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Sensor
     */
    readonly Chilled_Water_Differential_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Sensor">;
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Setpoint)**
     *
     * Sets the target water differential pressure between an upstream and downstream point in a water pipe or conduit used to carry chilled water
     *
     * @type        class
     * @parent      brick:Water_Differential_Pressure_Setpoint
     */
    readonly Chilled_Water_Differential_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Setpoint">;
    /**
     * **[brick:Chilled_Water_Differential_Pressure_Step_Parameter](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Step_Parameter
     */
    readonly Chilled_Water_Differential_Pressure_Step_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Differential_Pressure_Step_Parameter">;
    /**
     * **[brick:Chilled_Water_Differential_Temperature_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Differential_Temperature_Sensor)**
     *
     * Measures the difference in temperature between the entering water to the chiller or other water cooling device and leaving water from the same chiller or other water cooling device
     *
     * @type        class
     * @parent      brick:Chilled_Water_Temperature_Sensor
     */
    readonly Chilled_Water_Differential_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Differential_Temperature_Sensor">;
    /**
     * **[brick:Chilled_Water_Discharge_Flow_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Discharge_Flow_Sensor)**
     *
     * Measures the rate of flow of chilled discharge water
     *
     * @type        class
     * @parent      brick:Discharge_Water_Flow_Sensor
     */
    readonly Chilled_Water_Discharge_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Discharge_Flow_Sensor">;
    /**
     * **[brick:Chilled_Water_Discharge_Flow_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Discharge_Flow_Setpoint)**
     *
     * Sets the target flow rate of chilled discharge water
     *
     * @type        class
     * @parent      brick:Chilled_Water_Flow_Setpoint
     */
    readonly Chilled_Water_Discharge_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Discharge_Flow_Setpoint">;
    /**
     * **[brick:Chilled_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Flow_Sensor)**
     *
     * Measures the rate of flow in a chilled water circuit
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    readonly Chilled_Water_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Flow_Sensor">;
    /**
     * **[brick:Chilled_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of chilled water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    readonly Chilled_Water_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Flow_Setpoint">;
    /**
     * **[brick:Chilled_Water_Loop](https://brickschema.org/schema/Brick#Chilled_Water_Loop)**
     *
     * A collection of equipment that transport and regulate chilled water among each other
     *
     * @type        class
     * @parent      brick:Water_Loop
     */
    readonly Chilled_Water_Loop: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Loop">;
    /**
     * **[brick:Chilled_Water_Meter](https://brickschema.org/schema/Brick#Chilled_Water_Meter)**
     *
     * A meter that measures the usage or consumption of chilled water
     *
     * @type        class
     * @parent      brick:Water_Meter
     */
    readonly Chilled_Water_Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Meter">;
    /**
     * **[brick:Chilled_Water_Pump](https://brickschema.org/schema/Brick#Chilled_Water_Pump)**
     *
     * A pump that performs work on chilled water; typically part of a chilled water system
     *
     * @type        class
     * @parent      brick:Water_Pump
     */
    readonly Chilled_Water_Pump: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Pump">;
    /**
     * **[brick:Chilled_Water_Pump_Differential_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Pump_Differential_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of differential pressure of chilled water in a chilled water pump
     *
     * @type        class
     * @parent      brick:Chilled_Water_Differential_Pressure_Deadband_Setpoint
     */
    readonly Chilled_Water_Pump_Differential_Pressure_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Pump_Differential_Pressure_Deadband_Setpoint">;
    /**
     * **[brick:Chilled_Water_Return_Temperature_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Return_Temperature_Sensor)**
     *
     * Measures the temperature of chilled water that is returned to a cooling tower
     *
     * @type        class
     * @parent      brick:Chilled_Water_Temperature_Sensor
     */
    readonly Chilled_Water_Return_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Return_Temperature_Sensor">;
    /**
     * **[brick:Chilled_Water_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Static_Pressure_Setpoint)**
     *
     * Sets static pressure of chilled water
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    readonly Chilled_Water_Static_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Static_Pressure_Setpoint">;
    /**
     * **[brick:Chilled_Water_Supply_Flow_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Supply_Flow_Sensor)**
     *
     * Measures the rate of flow of chilled supply water
     *
     * @type        class
     * @parent      brick:Chilled_Water_Flow_Sensor
     */
    readonly Chilled_Water_Supply_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Supply_Flow_Sensor">;
    /**
     * **[brick:Chilled_Water_Supply_Flow_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Supply_Flow_Setpoint)**
     *
     * Sets the target flow rate of chilled supply water
     *
     * @type        class
     * @parent      brick:Chilled_Water_Flow_Setpoint
     */
    readonly Chilled_Water_Supply_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Supply_Flow_Setpoint">;
    /**
     * **[brick:Chilled_Water_Supply_Temperature_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Supply_Temperature_Sensor)**
     *
     * Measures the temperature of chilled water that is supplied from a chiller
     *
     * @type        class
     * @parent      brick:Chilled_Water_Temperature_Sensor
     */
    readonly Chilled_Water_Supply_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Supply_Temperature_Sensor">;
    /**
     * **[brick:Chilled_Water_System](https://brickschema.org/schema/Brick#Chilled_Water_System)**
     *
     * The equipment, devices and conduits that handle the production and distribution of chilled water in a building
     *
     * @type        class
     * @parent      brick:Water_System
     */
    readonly Chilled_Water_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_System">;
    /**
     * **[brick:Chilled_Water_System_Enable_Command](https://brickschema.org/schema/Brick#Chilled_Water_System_Enable_Command)**
     *
     * Enables operation of the chilled water system
     *
     * @type        class
     * @parent      brick:System_Enable_Command
     */
    readonly Chilled_Water_System_Enable_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_System_Enable_Command">;
    /**
     * **[brick:Chilled_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Chilled_Water_Temperature_Sensor)**
     *
     * Measures the temperature of chilled water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    readonly Chilled_Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Temperature_Sensor">;
    /**
     * **[brick:Chilled_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Chilled_Water_Temperature_Setpoint)**
     *
     * Sets the temperature of chilled water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    readonly Chilled_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Temperature_Setpoint">;
    /**
     * **[brick:Chilled_Water_Valve](https://brickschema.org/schema/Brick#Chilled_Water_Valve)**
     *
     * A valve that modulates the flow of chilled water
     *
     * @type        class
     * @parent      brick:Water_Valve
     */
    readonly Chilled_Water_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chilled_Water_Valve">;
    /**
     * **[brick:Chiller](https://brickschema.org/schema/Brick#Chiller)**
     *
     * Refrigerating machine used to transfer heat between fluids. Chillers are either direct expansion with a compressor or absorption type.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Chiller: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Chiller">;
    /**
     * **[brick:Class](https://brickschema.org/schema/Brick#Class)**
     *
     * @type        class
     */
    readonly Class: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Class">;
    /**
     * **[brick:Close_Limit](https://brickschema.org/schema/Brick#Close_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Close_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    readonly Close_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Close_Limit">;
    /**
     * **[brick:Cloudage](https://brickschema.org/schema/Brick#Cloudage)**
     *
     * The fraction of the sky obscured by clouds when observed from a particular location
     *
     * @type        instance
     */
    readonly Cloudage: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cloudage">;
    /**
     * **[brick:Coil](https://brickschema.org/schema/Brick#Coil)**
     *
     * Cooling or heating element made of pipe or tube that may or may not be finned and formed into helical or serpentine shape (ASHRAE Dictionary)
     *
     * @type        class
     * @parent      brick:Heat_Exchanger
     */
    readonly Coil: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Coil">;
    /**
     * **[brick:Cold_Box](https://brickschema.org/schema/Brick#Cold_Box)**
     *
     * in a gas separation unit, the insulated section that contains the low-temperature heat exchangers and distillation columns.
     *
     * @type        class
     * @parent      brick:Laboratory
     */
    readonly Cold_Box: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cold_Box">;
    /**
     * **[brick:Coldest_Zone_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Coldest_Zone_Air_Temperature_Sensor)**
     *
     * The zone temperature that is coldest; drives the supply temperature of hot air. A computed value rather than a physical sensor. Also referred to as a 'Lowest Zone Air Temperature Sensor'
     *
     * @type        class
     * @parent      brick:Zone_Air_Temperature_Sensor
     */
    readonly Coldest_Zone_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Coldest_Zone_Air_Temperature_Sensor">;
    /**
     * **[brick:Collection](https://brickschema.org/schema/Brick#Collection)**
     *
     * @type        class
     * @parent      brick:Class
     */
    readonly Collection: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Collection">;
    /**
     * **[brick:Collection_Basin_Water](https://brickschema.org/schema/Brick#Collection_Basin_Water)**
     *
     * Water transiently collected and directed to the sump or pump suction line, typically integral with a cooling tower
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Collection_Basin_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Collection_Basin_Water">;
    /**
     * **[brick:Collection_Basin_Water_Heater](https://brickschema.org/schema/Brick#Collection_Basin_Water_Heater)**
     *
     * Basin heaters prevent cold water basin freeze-up, e.g. in cooling towers, closed circuit fluid coolers, or evaporative condensers
     *
     * @type        class
     * @parent      brick:Water_Heater
     */
    readonly Collection_Basin_Water_Heater: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Collection_Basin_Water_Heater">;
    /**
     * **[brick:Collection_Basin_Water_Level_Alarm](https://brickschema.org/schema/Brick#Collection_Basin_Water_Level_Alarm)**
     *
     * An alarm that indicates a high or low level of water in the collection basin, e.g. within a Cooling_Tower
     *
     * @type        class
     * @parent      brick:Water_Level_Alarm
     */
    readonly Collection_Basin_Water_Level_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Collection_Basin_Water_Level_Alarm">;
    /**
     * **[brick:Collection_Basin_Water_Level_Sensor](https://brickschema.org/schema/Brick#Collection_Basin_Water_Level_Sensor)**
     *
     * Measures the level of the water in the collection basin, e.g. within a Cooling_Tower
     *
     * @type        class
     * @parent      brick:Water_Level_Sensor
     */
    readonly Collection_Basin_Water_Level_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Collection_Basin_Water_Level_Sensor">;
    /**
     * **[brick:Collection_Basin_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Collection_Basin_Water_Temperature_Sensor)**
     *
     * Measures the temperature of the water in the collection basin, e.g. within a Cooling_Tower
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    readonly Collection_Basin_Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Collection_Basin_Water_Temperature_Sensor">;
    /**
     * **[brick:Command](https://brickschema.org/schema/Brick#Command)**
     *
     * A Command is an output point that directly determines the behavior of equipment and/or affects relevant operational points.
     *
     * @type        class
     * @parent      brick:Point
     */
    readonly Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Command">;
    /**
     * **[brick:Common_Space](https://brickschema.org/schema/Brick#Common_Space)**
     *
     * A class of spaces that are used by multiple people at the same time
     *
     * @type        class
     * @parent      brick:Space
     */
    readonly Common_Space: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Common_Space">;
    /**
     * **[brick:Communication_Loss_Alarm](https://brickschema.org/schema/Brick#Communication_Loss_Alarm)**
     *
     * An alarm that indicates a loss of communication e.g. with a device or controller
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Communication_Loss_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Communication_Loss_Alarm">;
    /**
     * **[brick:Complex_Power](https://brickschema.org/schema/Brick#Complex_Power)**
     *
     * Complex Power, under sinusoidal conditions, is the product of the phasor (U) representing the voltage between the terminals of a linear two-terminal element or two-terminal circuit and the complex conjugate of the phasor (I) representing the electric current in the element or circuit.
     *
     * @type        instance
     */
    readonly Complex_Power: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Complex_Power">;
    /**
     * **[brick:Compressor](https://brickschema.org/schema/Brick#Compressor)**
     *
     * (1) device for mechanically increasing the pressure of a gas. (2) often described as being either open, hermetic, or semihermetic to describe how the compressor and motor drive is situated in relation to the gas or vapor being compressed. Types include centrifugal, axial flow, reciprocating, rotary screw, rotary vane, scroll, or diaphragm. 1. device for mechanically increasing the pressure of a gas. 2. specific machine, with or without accessories, for compressing refrigerant vapor.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Compressor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Compressor">;
    /**
     * **[brick:Computer_Room_Air_Conditioning](https://brickschema.org/schema/Brick#Computer_Room_Air_Conditioning)**
     *
     * A device that monitors and maintains the temperature, air distribution and humidity in a network room or data center.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Computer_Room_Air_Conditioning: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Computer_Room_Air_Conditioning">;
    /**
     * **[brick:Concession](https://brickschema.org/schema/Brick#Concession)**
     *
     * A space to sell food and beverages. Usually embedded in a larger space and does not include a space where people consume their purchases
     *
     * @type        class
     * @parent      brick:Food_Service_Room
     */
    readonly Concession: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Concession">;
    /**
     * **[brick:Condensate_Leak_Alarm](https://brickschema.org/schema/Brick#Condensate_Leak_Alarm)**
     *
     * An alarm that indicates a leak of condensate from a cooling system
     *
     * @type        class
     * @parent      brick:Leak_Alarm
     */
    readonly Condensate_Leak_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Condensate_Leak_Alarm">;
    /**
     * **[brick:Condenser](https://brickschema.org/schema/Brick#Condenser)**
     *
     * A heat exchanger in which the primary heat transfer vapor changes its state to a liquid phase.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Condenser: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Condenser">;
    /**
     * **[brick:Condenser_Heat_Exchanger](https://brickschema.org/schema/Brick#Condenser_Heat_Exchanger)**
     *
     * A heat exchanger in which the primary heat transfer vapor changes its state to a liquid phase.
     *
     * @type        class
     * @parent      brick:Heat_Exchanger
     */
    readonly Condenser_Heat_Exchanger: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Condenser_Heat_Exchanger">;
    /**
     * **[brick:Condenser_Water](https://brickschema.org/schema/Brick#Condenser_Water)**
     *
     * Water used used to remove heat through condensation
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Condenser_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Condenser_Water">;
    /**
     * **[brick:Condenser_Water_Bypass_Valve](https://brickschema.org/schema/Brick#Condenser_Water_Bypass_Valve)**
     *
     * A valve installed in a bypass line of a condenser water loop
     *
     * @type        class
     * @parent      brick:Bypass_Valve
     */
    readonly Condenser_Water_Bypass_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Condenser_Water_Bypass_Valve">;
    /**
     * **[brick:Condenser_Water_Isolation_Valve](https://brickschema.org/schema/Brick#Condenser_Water_Isolation_Valve)**
     *
     * An isolation valve installed in the condenser water loop
     *
     * @type        class
     * @parent      brick:Isolation_Valve
     */
    readonly Condenser_Water_Isolation_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Condenser_Water_Isolation_Valve">;
    /**
     * **[brick:Condenser_Water_Pump](https://brickschema.org/schema/Brick#Condenser_Water_Pump)**
     *
     * A pump that is part of a condenser system; the pump circulates condenser water from the chiller back to the cooling tower
     *
     * @type        class
     * @parent      brick:Water_Pump
     */
    readonly Condenser_Water_Pump: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Condenser_Water_Pump">;
    /**
     * **[brick:Condenser_Water_System](https://brickschema.org/schema/Brick#Condenser_Water_System)**
     *
     * A heat rejection system consisting of (typically) cooling towers, condenser water pumps, chillers and the piping connecting the components
     *
     * @type        class
     * @parent      brick:Water_System
     */
    readonly Condenser_Water_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Condenser_Water_System">;
    /**
     * **[brick:Condenser_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Condenser_Water_Temperature_Sensor)**
     *
     * Measures the temperature of condenser water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    readonly Condenser_Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Condenser_Water_Temperature_Sensor">;
    /**
     * **[brick:Condenser_Water_Valve](https://brickschema.org/schema/Brick#Condenser_Water_Valve)**
     *
     * A valve that modulates the flow of condenser water
     *
     * @type        class
     * @parent      brick:Water_Valve
     */
    readonly Condenser_Water_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Condenser_Water_Valve">;
    /**
     * **[brick:Condensing_Natural_Gas_Boiler](https://brickschema.org/schema/Brick#Condensing_Natural_Gas_Boiler)**
     *
     * A closed, pressure vessel that uses natural gas and heat exchanger that capture and reuse any latent heat for heating water or other fluids to supply steam or hot water for heating, humidification, or other applications.
     *
     * @type        class
     * @parent      brick:Natural_Gas_Boiler
     */
    readonly Condensing_Natural_Gas_Boiler: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Condensing_Natural_Gas_Boiler">;
    /**
     * **[brick:Conductivity](https://brickschema.org/schema/Brick#Conductivity)**
     *
     * @type        instance
     */
    readonly Conductivity: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Conductivity">;
    /**
     * **[brick:Conductivity_Sensor](https://brickschema.org/schema/Brick#Conductivity_Sensor)**
     *
     * Measures electrical conductance
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Conductivity_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Conductivity_Sensor">;
    /**
     * **[brick:Conference_Room](https://brickschema.org/schema/Brick#Conference_Room)**
     *
     * A space dedicated in which to hold a meetings
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Conference_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Conference_Room">;
    /**
     * **[brick:Constant_Air_Volume_Box](https://brickschema.org/schema/Brick#Constant_Air_Volume_Box)**
     *
     * A terminal unit for which supply air flow rate is constant and the supply air temperature is varied to meet thermal load
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    readonly Constant_Air_Volume_Box: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Constant_Air_Volume_Box">;
    /**
     * **[brick:Contact_Sensor](https://brickschema.org/schema/Brick#Contact_Sensor)**
     *
     * Senses or detects contact, such as for determining if a door is closed.
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Contact_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Contact_Sensor">;
    /**
     * **[brick:Control_Room](https://brickschema.org/schema/Brick#Control_Room)**
     *
     * A space from which operations are managed
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Control_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Control_Room">;
    /**
     * **[brick:CoolingCapacityShape](https://brickschema.org/schema/Brick#CoolingCapacityShape)**
     *
     * @type        class
     */
    readonly CoolingCapacityShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CoolingCapacityShape">;
    /**
     * **[brick:Cooling_Coil](https://brickschema.org/schema/Brick#Cooling_Coil)**
     *
     * A cooling element made of pipe or tube that removes heat from equipment, machines or airflows. Typically filled with either refrigerant or cold water.
     *
     * @type        class
     * @parent      brick:Coil
     */
    readonly Cooling_Coil: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Coil">;
    /**
     * **[brick:Cooling_Command](https://brickschema.org/schema/Brick#Cooling_Command)**
     *
     * Controls the amount of cooling to be delivered (typically as a proportion of total cooling output)
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Cooling_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Command">;
    /**
     * **[brick:Cooling_Demand_Sensor](https://brickschema.org/schema/Brick#Cooling_Demand_Sensor)**
     *
     * Measures the amount of power consumed by a cooling process; typically found by multiplying the tonnage of a unit (e.g. RTU) by the efficiency rating in kW/ton
     *
     * @type        class
     * @parent      brick:Demand_Sensor
     */
    readonly Cooling_Demand_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Demand_Sensor">;
    /**
     * **[brick:Cooling_Demand_Setpoint](https://brickschema.org/schema/Brick#Cooling_Demand_Setpoint)**
     *
     * Sets the rate required for cooling
     *
     * @type        class
     * @parent      brick:Demand_Setpoint
     */
    readonly Cooling_Demand_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Demand_Setpoint">;
    /**
     * **[brick:Cooling_Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Cooling_Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow for cooling
     *
     * @type        class
     * @parent      brick:Discharge_Air_Flow_Setpoint
     */
    readonly Cooling_Discharge_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Discharge_Air_Flow_Setpoint">;
    /**
     * **[brick:Cooling_Discharge_Air_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Cooling_Discharge_Air_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of cooling discharge air
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Cooling_Setpoint
     */
    readonly Cooling_Discharge_Air_Temperature_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Discharge_Air_Temperature_Deadband_Setpoint">;
    /**
     * **[brick:Cooling_Discharge_Air_Temperature_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Cooling_Discharge_Air_Temperature_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Integral_Time_Parameter
     */
    readonly Cooling_Discharge_Air_Temperature_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Discharge_Air_Temperature_Integral_Time_Parameter">;
    /**
     * **[brick:Cooling_Discharge_Air_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Cooling_Discharge_Air_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Proportional_Band_Parameter
     */
    readonly Cooling_Discharge_Air_Temperature_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Discharge_Air_Temperature_Proportional_Band_Parameter">;
    /**
     * **[brick:Cooling_Start_Stop_Status](https://brickschema.org/schema/Brick#Cooling_Start_Stop_Status)**
     *
     * @type        class
     * @parent      brick:Start_Stop_Status
     */
    readonly Cooling_Start_Stop_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Start_Stop_Status">;
    /**
     * **[brick:Cooling_Supply_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Cooling_Supply_Air_Flow_Setpoint)**
     *
     * Sets supply air flow rate for cooling
     *
     * @type        class
     * @parent      brick:Supply_Air_Flow_Setpoint
     */
    readonly Cooling_Supply_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Supply_Air_Flow_Setpoint">;
    /**
     * **[brick:Cooling_Supply_Air_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Cooling_Supply_Air_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of supply air for cooling
     *
     * @type        class
     * @parent      brick:Cooling_Temperature_Setpoint
     */
    readonly Cooling_Supply_Air_Temperature_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Supply_Air_Temperature_Deadband_Setpoint">;
    /**
     * **[brick:Cooling_Supply_Air_Temperature_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Cooling_Supply_Air_Temperature_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Integral_Time_Parameter
     */
    readonly Cooling_Supply_Air_Temperature_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Supply_Air_Temperature_Integral_Time_Parameter">;
    /**
     * **[brick:Cooling_Supply_Air_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Cooling_Supply_Air_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Supply_Air_Temperature_Proportional_Band_Parameter
     */
    readonly Cooling_Supply_Air_Temperature_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Supply_Air_Temperature_Proportional_Band_Parameter">;
    /**
     * **[brick:Cooling_Temperature_Setpoint](https://brickschema.org/schema/Brick#Cooling_Temperature_Setpoint)**
     *
     * Sets temperature for cooling
     *
     * @type        class
     * @parent      brick:Temperature_Setpoint
     */
    readonly Cooling_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Temperature_Setpoint">;
    /**
     * **[brick:Cooling_Tower](https://brickschema.org/schema/Brick#Cooling_Tower)**
     *
     * A cooling tower is a heat rejection device that rejects waste heat to the atmosphere through the cooling of a water stream to a lower temperature. Cooling towers may either use the evaporation of water to remove process heat and cool the working fluid to near the wet-bulb air temperature or, in the case of closed circuit dry cooling towers, rely solely on air to cool the working fluid to near the dry-bulb air temperature.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Cooling_Tower: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Tower">;
    /**
     * **[brick:Cooling_Tower_Fan](https://brickschema.org/schema/Brick#Cooling_Tower_Fan)**
     *
     * A fan that pulls air through a cooling tower and across the louvers where the water falls to aid in heat exchange by the process of evaporation
     *
     * @type        class
     * @parent      brick:Fan
     */
    readonly Cooling_Tower_Fan: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Tower_Fan">;
    /**
     * **[brick:Cooling_Valve](https://brickschema.org/schema/Brick#Cooling_Valve)**
     *
     * A valve that controls air temperature by modulating the amount of cold water flowing through a cooling coil
     *
     * @type        class
     * @parent      brick:Valve
     */
    readonly Cooling_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cooling_Valve">;
    /**
     * **[brick:CoordinateShape](https://brickschema.org/schema/Brick#CoordinateShape)**
     *
     * @type        class
     */
    readonly CoordinateShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CoordinateShape">;
    /**
     * **[brick:Copy_Room](https://brickschema.org/schema/Brick#Copy_Room)**
     *
     * A room set aside for common office equipment, including printers and copiers
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Copy_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Copy_Room">;
    /**
     * **[brick:Core_Temperature_Sensor](https://brickschema.org/schema/Brick#Core_Temperature_Sensor)**
     *
     * Measures the internal temperature of the radiant layer at the heat source or sink level of the radiant heating and cooling HVAC system.
     *
     * @type        class
     * @parent      brick:Embedded_Temperature_Sensor
     */
    readonly Core_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Core_Temperature_Sensor">;
    /**
     * **[brick:Core_Temperature_Setpoint](https://brickschema.org/schema/Brick#Core_Temperature_Setpoint)**
     *
     * Sets temperature for the core, i.e. the temperature at the heat source or sink level, of the radiant panel.
     *
     * @type        class
     * @parent      brick:Embedded_Temperature_Setpoint
     */
    readonly Core_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Core_Temperature_Setpoint">;
    /**
     * **[brick:Cubicle](https://brickschema.org/schema/Brick#Cubicle)**
     *
     * A smaller space set aside for an individual, but not with a door and without full-height walls
     *
     * @type        class
     * @parent      brick:Office
     */
    readonly Cubicle: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cubicle">;
    /**
     * **[brick:CurrentFlowTypeShape](https://brickschema.org/schema/Brick#CurrentFlowTypeShape)**
     *
     * @type        class
     */
    readonly CurrentFlowTypeShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#CurrentFlowTypeShape">;
    /**
     * **[brick:CurrentAngle](https://brickschema.org/schema/Brick#Current_Angle)**
     *
     * Angle of current phasor
     *
     * @type        instance
     */
    readonly Current_Angle: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Current_Angle">;
    /**
     * **[brick:CurrentImbalance](https://brickschema.org/schema/Brick#Current_Imbalance)**
     *
     * The percent deviation from average current
     *
     * @type        instance
     */
    readonly Current_Imbalance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Current_Imbalance">;
    /**
     * **[brick:Current_Imbalance_Sensor](https://brickschema.org/schema/Brick#Current_Imbalance_Sensor)**
     *
     * A sensor which measures the current difference (imbalance) between phases of an electrical system
     *
     * @type        class
     * @parent      brick:Imbalance_Sensor
     */
    readonly Current_Imbalance_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Current_Imbalance_Sensor">;
    /**
     * **[brick:Current_Limit](https://brickschema.org/schema/Brick#Current_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Current_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    readonly Current_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Current_Limit">;
    /**
     * **[brick:Current_Output_Sensor](https://brickschema.org/schema/Brick#Current_Output_Sensor)**
     *
     * Senses the amperes of electrical current produced as output by a device
     *
     * @type        class
     * @parent      brick:Current_Sensor
     */
    readonly Current_Output_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Current_Output_Sensor">;
    /**
     * **[brick:Current_Sensor](https://brickschema.org/schema/Brick#Current_Sensor)**
     *
     * Senses the amperes of electrical current passing through the sensor
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Current_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Current_Sensor">;
    /**
     * **[brick:CurrentTotalHarmonicDistortion](https://brickschema.org/schema/Brick#Current_Total_Harmonic_Distortion)**
     *
     * Measurement of harmonic distortion present in a signal defined as the sum of the powers of all harmonic components to the power of the fundamental frequency. (https://en.wikipedia.org/wiki/Total_harmonic_distortion)
     *
     * @type        instance
     */
    readonly Current_Total_Harmonic_Distortion: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Current_Total_Harmonic_Distortion">;
    /**
     * **[brick:Curtailment_Override_Command](https://brickschema.org/schema/Brick#Curtailment_Override_Command)**
     *
     * @type        class
     * @parent      brick:Override_Command
     */
    readonly Curtailment_Override_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Curtailment_Override_Command">;
    /**
     * **[brick:Cycle_Alarm](https://brickschema.org/schema/Brick#Cycle_Alarm)**
     *
     * An alarm that indicates off-normal conditions associated with HVAC cycles
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Cycle_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Cycle_Alarm">;
    /**
     * **[brick:DC_Bus_Voltage_Sensor](https://brickschema.org/schema/Brick#DC_Bus_Voltage_Sensor)**
     *
     * Measures the voltage across a DC bus
     *
     * @type        class
     * @parent      brick:Voltage_Sensor
     */
    readonly DC_Bus_Voltage_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#DC_Bus_Voltage_Sensor">;
    /**
     * **[brick:DOAS](https://brickschema.org/schema/Brick#DOAS)**
     *
     * See Dedicated_Outdoor_Air_System_Unit
     *
     * @type        class
     * @parent      brick:AHU
     */
    readonly DOAS: import("../index.js").Iri<"https://brickschema.org/schema/Brick#DOAS">;
    /**
     * **[brick:Damper](https://brickschema.org/schema/Brick#Damper)**
     *
     * Element inserted into an air-distribution system or element of an air-distribution system permitting modification of the air resistance of the system and consequently changing the airflow rate or shutting off the airflow.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Damper: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Damper">;
    /**
     * **[brick:Damper_Command](https://brickschema.org/schema/Brick#Damper_Command)**
     *
     * Controls properties of dampers
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Damper_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Damper_Command">;
    /**
     * **[brick:Damper_Position_Command](https://brickschema.org/schema/Brick#Damper_Position_Command)**
     *
     * Controls the position (the degree of openness) of a damper
     *
     * @type        class
     * @parent      brick:Damper_Command
     */
    readonly Damper_Position_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Damper_Position_Command">;
    /**
     * **[brick:Damper_Position_Sensor](https://brickschema.org/schema/Brick#Damper_Position_Sensor)**
     *
     * Measures the current position of a damper in terms of the percent of fully open
     *
     * @type        class
     * @parent      brick:Position_Sensor
     */
    readonly Damper_Position_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Damper_Position_Sensor">;
    /**
     * **[brick:Damper_Position_Setpoint](https://brickschema.org/schema/Brick#Damper_Position_Setpoint)**
     *
     * Sets the position of damper
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Damper_Position_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Damper_Position_Setpoint">;
    /**
     * **[brick:Database](https://brickschema.org/schema/Brick#Database)**
     *
     * A database storing the timeseries data for the related point. Properties on this class are *to be determined*; feel free to add arbitrary properties onto Database instances for your particular deployment
     *
     * @type        class
     */
    readonly Database: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Database">;
    /**
     * **[brick:Deadband_Setpoint](https://brickschema.org/schema/Brick#Deadband_Setpoint)**
     *
     * Sets the size of a deadband
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Deadband_Setpoint">;
    /**
     * **[brick:Deceleration_Time](https://brickschema.org/schema/Brick#Deceleration_Time)**
     *
     * @type        instance
     */
    readonly Deceleration_Time: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Deceleration_Time">;
    /**
     * **[brick:Deceleration_Time_Setpoint](https://brickschema.org/schema/Brick#Deceleration_Time_Setpoint)**
     *
     * @type        class
     * @parent      brick:Time_Setpoint
     */
    readonly Deceleration_Time_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Deceleration_Time_Setpoint">;
    /**
     * **[brick:Dedicated_Outdoor_Air_System_Unit](https://brickschema.org/schema/Brick#Dedicated_Outdoor_Air_System_Unit)**
     *
     * A device that conditions and delivers 100% outdoor air to its assigned spaces. It decouples air-conditioning of the outdoor air, usually used to provide minimum outdoor air ventilation, from conditioning of the internal loads.
     *
     * @type        class
     * @parent      brick:AHU
     */
    readonly Dedicated_Outdoor_Air_System_Unit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Dedicated_Outdoor_Air_System_Unit">;
    /**
     * **[brick:Dehumidification_Start_Stop_Status](https://brickschema.org/schema/Brick#Dehumidification_Start_Stop_Status)**
     *
     * @type        class
     * @parent      brick:Start_Stop_Status
     */
    readonly Dehumidification_Start_Stop_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Dehumidification_Start_Stop_Status">;
    /**
     * **[brick:Deionised_Water_Conductivity_Sensor](https://brickschema.org/schema/Brick#Deionised_Water_Conductivity_Sensor)**
     *
     * Measures the electrical conductance of deionised water
     *
     * @type        class
     * @parent      brick:Conductivity_Sensor
     */
    readonly Deionised_Water_Conductivity_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Deionised_Water_Conductivity_Sensor">;
    /**
     * **[brick:Deionised_Water_Level_Sensor](https://brickschema.org/schema/Brick#Deionised_Water_Level_Sensor)**
     *
     * Measures the height/level of deionised water in some container
     *
     * @type        class
     * @parent      brick:Water_Level_Sensor
     */
    readonly Deionised_Water_Level_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Deionised_Water_Level_Sensor">;
    /**
     * **[brick:Deionized_Water](https://brickschema.org/schema/Brick#Deionized_Water)**
     *
     * Water which has been purified by removing its ions (constituting the majority of non-particulate contaminants)
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Deionized_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Deionized_Water">;
    /**
     * **[brick:Deionized_Water_Alarm](https://brickschema.org/schema/Brick#Deionized_Water_Alarm)**
     *
     * An alarm that indicates deionized water leaks.
     *
     * @type        class
     * @parent      brick:Water_Alarm
     */
    readonly Deionized_Water_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Deionized_Water_Alarm">;
    /**
     * **[brick:Delay_Parameter](https://brickschema.org/schema/Brick#Delay_Parameter)**
     *
     * A parameter determining how long to delay a subsequent action to take place after a received signal
     *
     * @type        class
     * @parent      brick:Parameter
     */
    readonly Delay_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Delay_Parameter">;
    /**
     * **[brick:Demand_Sensor](https://brickschema.org/schema/Brick#Demand_Sensor)**
     *
     * Measures the amount of power consumed by the use of some process; typically found by multiplying the tonnage of a unit (e.g. RTU) by the efficiency rating in kW/ton
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Demand_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Demand_Sensor">;
    /**
     * **[brick:Demand_Setpoint](https://brickschema.org/schema/Brick#Demand_Setpoint)**
     *
     * Sets the rate required for a process
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Demand_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Demand_Setpoint">;
    /**
     * **[brick:Derivative_Gain_Parameter](https://brickschema.org/schema/Brick#Derivative_Gain_Parameter)**
     *
     * @type        class
     * @parent      brick:Gain_Parameter
     */
    readonly Derivative_Gain_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Derivative_Gain_Parameter">;
    /**
     * **[brick:Derivative_Time_Parameter](https://brickschema.org/schema/Brick#Derivative_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Time_Parameter
     */
    readonly Derivative_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Derivative_Time_Parameter">;
    /**
     * **[brick:Detention_Room](https://brickschema.org/schema/Brick#Detention_Room)**
     *
     * A space for the temporary involuntary confinement of people
     *
     * @type        class
     * @parent      brick:Security_Service_Room
     */
    readonly Detention_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Detention_Room">;
    /**
     * **[brick:Dew_Point_Setpoint](https://brickschema.org/schema/Brick#Dew_Point_Setpoint)**
     *
     * Sets dew point
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Dew_Point_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Dew_Point_Setpoint">;
    /**
     * **[brick:Dewpoint](https://brickschema.org/schema/Brick#Dewpoint)**
     *
     * @type        instance
     */
    readonly Dewpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Dewpoint">;
    /**
     * **[brick:Dewpoint_Sensor](https://brickschema.org/schema/Brick#Dewpoint_Sensor)**
     *
     * Senses the dewpoint temperature . Dew point is the temperature to which air must be cooled to become saturated with water vapor
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Dewpoint_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Dewpoint_Sensor">;
    /**
     * **[brick:Differential_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Differential_Air_Temperature_Setpoint)**
     *
     * Sets temperature of diffrential air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Differential_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Air_Temperature_Setpoint">;
    /**
     * **[brick:ΔCO2Concentration](https://brickschema.org/schema/Brick#Differential_CO2_Concentration)**
     *
     * The difference in carbon dioxide concentration between two areas
     *
     * @type        instance
     */
    readonly Differential_CO2_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_CO2_Concentration">;
    /**
     * **[brick:ΔCOConcentration](https://brickschema.org/schema/Brick#Differential_CO_Concentration)**
     *
     * The difference in carbon monoxide concentration between two areas
     *
     * @type        instance
     */
    readonly Differential_CO_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_CO_Concentration">;
    /**
     * **[brick:Differential_Dry_Bulb_Temperature](https://brickschema.org/schema/Brick#Differential_Dry_Bulb_Temperature)**
     *
     * @type        instance
     */
    readonly Differential_Dry_Bulb_Temperature: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Dry_Bulb_Temperature">;
    /**
     * **[brick:Differential_Dynamic_Pressure](https://brickschema.org/schema/Brick#Differential_Dynamic_Pressure)**
     *
     * @type        instance
     */
    readonly Differential_Dynamic_Pressure: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Dynamic_Pressure">;
    /**
     * **[brick:Differential_Pressure](https://brickschema.org/schema/Brick#Differential_Pressure)**
     *
     * @type        instance
     */
    readonly Differential_Pressure: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Pressure">;
    /**
     * **[brick:Differential_Pressure_Bypass_Valve](https://brickschema.org/schema/Brick#Differential_Pressure_Bypass_Valve)**
     *
     * A 2-way, self contained proportional valve with an integral differential pressure adjustment setting.
     *
     * @type        class
     * @parent      brick:Bypass_Valve
     */
    readonly Differential_Pressure_Bypass_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Pressure_Bypass_Valve">;
    /**
     * **[brick:Differential_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Differential_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of differential pressure
     *
     * @type        class
     * @parent      brick:Deadband_Setpoint
     */
    readonly Differential_Pressure_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Pressure_Deadband_Setpoint">;
    /**
     * **[brick:Differential_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Differential_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Integral_Time_Parameter
     */
    readonly Differential_Pressure_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Pressure_Integral_Time_Parameter">;
    /**
     * **[brick:Differential_Pressure_Load_Shed_Status](https://brickschema.org/schema/Brick#Differential_Pressure_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Status
     */
    readonly Differential_Pressure_Load_Shed_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Pressure_Load_Shed_Status">;
    /**
     * **[brick:Differential_Pressure_Proportional_Band](https://brickschema.org/schema/Brick#Differential_Pressure_Proportional_Band)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    readonly Differential_Pressure_Proportional_Band: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Pressure_Proportional_Band">;
    /**
     * **[brick:Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Differential_Pressure_Sensor)**
     *
     * Measures the difference between two applied pressures
     *
     * @type        class
     * @parent      brick:Pressure_Sensor
     */
    readonly Differential_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Pressure_Sensor">;
    /**
     * **[brick:Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Differential_Pressure_Setpoint)**
     *
     * Sets differential pressure
     *
     * @type        class
     * @parent      brick:Pressure_Setpoint
     */
    readonly Differential_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Pressure_Setpoint">;
    /**
     * **[brick:Differential_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Differential_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Differential_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    readonly Differential_Pressure_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Pressure_Setpoint_Limit">;
    /**
     * **[brick:Differential_Pressure_Step_Parameter](https://brickschema.org/schema/Brick#Differential_Pressure_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Step_Parameter
     */
    readonly Differential_Pressure_Step_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Pressure_Step_Parameter">;
    /**
     * **[brick:Differential_Speed_Sensor](https://brickschema.org/schema/Brick#Differential_Speed_Sensor)**
     *
     * @type        class
     * @parent      brick:Speed_Sensor
     */
    readonly Differential_Speed_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Speed_Sensor">;
    /**
     * **[brick:Differential_Speed_Setpoint](https://brickschema.org/schema/Brick#Differential_Speed_Setpoint)**
     *
     * Sets differential speed
     *
     * @type        class
     * @parent      brick:Speed_Setpoint
     */
    readonly Differential_Speed_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Speed_Setpoint">;
    /**
     * **[brick:Differential_Static_Pressure](https://brickschema.org/schema/Brick#Differential_Static_Pressure)**
     *
     * @type        instance
     */
    readonly Differential_Static_Pressure: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Static_Pressure">;
    /**
     * **[brick:Differential_Supply_Return_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Differential_Supply_Return_Water_Temperature_Sensor)**
     *
     * Measures the difference in temperature between return and supply water of water a circuit
     *
     * @type        class
     * @parent      brick:Return_Water_Temperature_Sensor
     */
    readonly Differential_Supply_Return_Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Supply_Return_Water_Temperature_Sensor">;
    /**
     * **[brick:Differential_Temperature](https://brickschema.org/schema/Brick#Differential_Temperature)**
     *
     * @type        instance
     */
    readonly Differential_Temperature: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Differential_Temperature">;
    /**
     * **[brick:Dimmer](https://brickschema.org/schema/Brick#Dimmer)**
     *
     * A switch providing continuous control over all or part of a lighting installation; typically potentiometer-based
     *
     * @type        class
     * @parent      brick:Switch
     */
    readonly Dimmer: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Dimmer">;
    /**
     * **[brick:Direction](https://brickschema.org/schema/Brick#Direction)**
     *
     * @type        instance
     */
    readonly Direction: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Direction">;
    /**
     * **[brick:Direction_Command](https://brickschema.org/schema/Brick#Direction_Command)**
     *
     * Commands that affect the direction of some phenomenon
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Direction_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Direction_Command">;
    /**
     * **[brick:Direction_Sensor](https://brickschema.org/schema/Brick#Direction_Sensor)**
     *
     * Measures the direction in degrees in which a phenomenon is occuring
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Direction_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Direction_Sensor">;
    /**
     * **[brick:Direction_Status](https://brickschema.org/schema/Brick#Direction_Status)**
     *
     * Indicates which direction a device is operating in
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Direction_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Direction_Status">;
    /**
     * **[brick:Disable_Command](https://brickschema.org/schema/Brick#Disable_Command)**
     *
     * Commands that disable functionality
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Disable_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Disable_Command">;
    /**
     * **[brick:Disable_Differential_Enthalpy_Command](https://brickschema.org/schema/Brick#Disable_Differential_Enthalpy_Command)**
     *
     * Disables the use of differential enthalpy control
     *
     * @type        class
     * @parent      brick:Disable_Command
     */
    readonly Disable_Differential_Enthalpy_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Disable_Differential_Enthalpy_Command">;
    /**
     * **[brick:Disable_Differential_Temperature_Command](https://brickschema.org/schema/Brick#Disable_Differential_Temperature_Command)**
     *
     * Disables the use of differential temperature control
     *
     * @type        class
     * @parent      brick:Disable_Command
     */
    readonly Disable_Differential_Temperature_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Disable_Differential_Temperature_Command">;
    /**
     * **[brick:Disable_Fixed_Enthalpy_Command](https://brickschema.org/schema/Brick#Disable_Fixed_Enthalpy_Command)**
     *
     * Disables the use of fixed enthalpy control
     *
     * @type        class
     * @parent      brick:Disable_Command
     */
    readonly Disable_Fixed_Enthalpy_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Disable_Fixed_Enthalpy_Command">;
    /**
     * **[brick:Disable_Fixed_Temperature_Command](https://brickschema.org/schema/Brick#Disable_Fixed_Temperature_Command)**
     *
     * Disables the use of fixed temperature temperature
     *
     * @type        class
     * @parent      brick:Disable_Command
     */
    readonly Disable_Fixed_Temperature_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Disable_Fixed_Temperature_Command">;
    /**
     * **[brick:Disable_Hot_Water_System_Outside_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Disable_Hot_Water_System_Outside_Air_Temperature_Setpoint)**
     *
     * Disables hot water system when outside air temperature reaches the indicated value
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Setpoint
     */
    readonly Disable_Hot_Water_System_Outside_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Disable_Hot_Water_System_Outside_Air_Temperature_Setpoint">;
    /**
     * **[brick:Disable_Status](https://brickschema.org/schema/Brick#Disable_Status)**
     *
     * Indicates if functionality has been disabled
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Disable_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Disable_Status">;
    /**
     * **[brick:Discharge_Air](https://brickschema.org/schema/Brick#Discharge_Air)**
     *
     * the air exiting the registers (vents).
     *
     * @type        class
     * @parent      brick:Air
     */
    readonly Discharge_Air: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air">;
    /**
     * **[brick:Discharge_Air_Dewpoint_Sensor](https://brickschema.org/schema/Brick#Discharge_Air_Dewpoint_Sensor)**
     *
     * Measures dewpoint of discharge air
     *
     * @type        class
     * @parent      brick:Dewpoint_Sensor
     */
    readonly Discharge_Air_Dewpoint_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Dewpoint_Sensor">;
    /**
     * **[brick:Discharge_Air_Duct_Pressure_Status](https://brickschema.org/schema/Brick#Discharge_Air_Duct_Pressure_Status)**
     *
     * Indicates if air pressure in discharge duct is within expected bounds
     *
     * @type        class
     * @parent      brick:Pressure_Status
     */
    readonly Discharge_Air_Duct_Pressure_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Duct_Pressure_Status">;
    /**
     * **[brick:Discharge_Air_Flow_Demand_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Flow_Demand_Setpoint)**
     *
     * Sets the rate of discharge air flow required for a process
     *
     * @type        class
     * @parent      brick:Air_Flow_Demand_Setpoint
     */
    readonly Discharge_Air_Flow_Demand_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Flow_Demand_Setpoint">;
    /**
     * **[brick:Discharge_Air_Flow_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Flow_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Flow_Reset_Setpoint
     */
    readonly Discharge_Air_Flow_High_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Flow_High_Reset_Setpoint">;
    /**
     * **[brick:Discharge_Air_Flow_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Flow_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Flow_Reset_Setpoint
     */
    readonly Discharge_Air_Flow_Low_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Flow_Low_Reset_Setpoint">;
    /**
     * **[brick:Discharge_Air_Flow_Reset_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Flow_Reset_Setpoint)**
     *
     * Setpoints used in Reset strategies
     *
     * @type        class
     * @parent      brick:Reset_Setpoint
     */
    readonly Discharge_Air_Flow_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Flow_Reset_Setpoint">;
    /**
     * **[brick:Discharge_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Discharge_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of discharge air
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    readonly Discharge_Air_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Flow_Sensor">;
    /**
     * **[brick:Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint
     */
    readonly Discharge_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Flow_Setpoint">;
    /**
     * **[brick:Discharge_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Discharge_Air_Humidity_Sensor)**
     *
     * Measures the relative humidity of discharge air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    readonly Discharge_Air_Humidity_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Humidity_Sensor">;
    /**
     * **[brick:Discharge_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for discharge air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    readonly Discharge_Air_Humidity_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Humidity_Setpoint">;
    /**
     * **[brick:Discharge_Air_Smoke_Detection_Alarm](https://brickschema.org/schema/Brick#Discharge_Air_Smoke_Detection_Alarm)**
     *
     * @type        class
     * @parent      brick:Air_Alarm
     */
    readonly Discharge_Air_Smoke_Detection_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Smoke_Detection_Alarm">;
    /**
     * **[brick:Discharge_Air_Static_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of static pressure of discharge air
     *
     * @type        class
     * @parent      brick:Discharge_Air_Static_Pressure_Setpoint
     */
    readonly Discharge_Air_Static_Pressure_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Deadband_Setpoint">;
    /**
     * **[brick:Discharge_Air_Static_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Static_Pressure_Integral_Time_Parameter
     */
    readonly Discharge_Air_Static_Pressure_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Integral_Time_Parameter">;
    /**
     * **[brick:Discharge_Air_Static_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Static_Pressure_Proportional_Band_Parameter
     */
    readonly Discharge_Air_Static_Pressure_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Proportional_Band_Parameter">;
    /**
     * **[brick:Discharge_Air_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Sensor)**
     *
     * The static pressure of air within discharge regions of an HVAC system
     *
     * @type        class
     * @parent      brick:Static_Pressure_Sensor
     */
    readonly Discharge_Air_Static_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Sensor">;
    /**
     * **[brick:Discharge_Air_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Setpoint)**
     *
     * Sets static pressure of discharge air
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    readonly Discharge_Air_Static_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Setpoint">;
    /**
     * **[brick:Discharge_Air_Static_Pressure_Step_Parameter](https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Static_Pressure_Step_Parameter
     */
    readonly Discharge_Air_Static_Pressure_Step_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Static_Pressure_Step_Parameter">;
    /**
     * **[brick:Discharge_Air_Temperature_Alarm](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with the temperature of discharge air.
     *
     * @type        class
     * @parent      brick:Air_Temperature_Alarm
     */
    readonly Discharge_Air_Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Alarm">;
    /**
     * **[brick:Discharge_Air_Temperature_Cooling_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Cooling_Setpoint)**
     *
     * Sets temperature of discharge air for cooling
     *
     * @type        class
     * @parent      brick:Cooling_Temperature_Setpoint
     */
    readonly Discharge_Air_Temperature_Cooling_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Cooling_Setpoint">;
    /**
     * **[brick:Discharge_Air_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of discharge air
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint
     */
    readonly Discharge_Air_Temperature_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Deadband_Setpoint">;
    /**
     * **[brick:Discharge_Air_Temperature_Heating_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Heating_Setpoint)**
     *
     * Sets temperature of discharge air for heating
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint
     */
    readonly Discharge_Air_Temperature_Heating_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Heating_Setpoint">;
    /**
     * **[brick:Discharge_Air_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Reset_Differential_Setpoint
     */
    readonly Discharge_Air_Temperature_High_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Temperature_High_Reset_Setpoint">;
    /**
     * **[brick:Discharge_Air_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Reset_Differential_Setpoint
     */
    readonly Discharge_Air_Temperature_Low_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Low_Reset_Setpoint">;
    /**
     * **[brick:Discharge_Air_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    readonly Discharge_Air_Temperature_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Proportional_Band_Parameter">;
    /**
     * **[brick:Discharge_Air_Temperature_Reset_Differential_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Reset_Differential_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_Differential_Reset_Setpoint
     */
    readonly Discharge_Air_Temperature_Reset_Differential_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Reset_Differential_Setpoint">;
    /**
     * **[brick:Discharge_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Sensor)**
     *
     * Measures the temperature of discharge air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    readonly Discharge_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Sensor">;
    /**
     * **[brick:Discharge_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Setpoint)**
     *
     * Sets temperature of discharge air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Discharge_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Setpoint">;
    /**
     * **[brick:Discharge_Air_Temperature_Setpoint_Limit](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Discharge_Air_Temperature_Setpoint.
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint_Limit
     */
    readonly Discharge_Air_Temperature_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Setpoint_Limit">;
    /**
     * **[brick:Discharge_Air_Temperature_Step_Parameter](https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Step_Parameter
     */
    readonly Discharge_Air_Temperature_Step_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Temperature_Step_Parameter">;
    /**
     * **[brick:Discharge_Air_Velocity_Pressure_Sensor](https://brickschema.org/schema/Brick#Discharge_Air_Velocity_Pressure_Sensor)**
     *
     * @type        class
     * @parent      brick:Velocity_Pressure_Sensor
     */
    readonly Discharge_Air_Velocity_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Air_Velocity_Pressure_Sensor">;
    /**
     * **[brick:Discharge_Chilled_Water](https://brickschema.org/schema/Brick#Discharge_Chilled_Water)**
     *
     * @type        class
     * @parent      brick:Chilled_Water
     */
    readonly Discharge_Chilled_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Chilled_Water">;
    /**
     * **[brick:Discharge_Fan](https://brickschema.org/schema/Brick#Discharge_Fan)**
     *
     * Fan moving air discharged from HVAC vents
     *
     * @type        class
     * @parent      brick:Fan
     */
    readonly Discharge_Fan: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Fan">;
    /**
     * **[brick:Discharge_Hot_Water](https://brickschema.org/schema/Brick#Discharge_Hot_Water)**
     *
     * @type        class
     * @parent      brick:Discharge_Water
     */
    readonly Discharge_Hot_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Hot_Water">;
    /**
     * **[brick:Discharge_Water](https://brickschema.org/schema/Brick#Discharge_Water)**
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Discharge_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Water">;
    /**
     * **[brick:Discharge_Water_Differential_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Discharge_Water_Differential_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of differential pressure of discharge water
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Deadband_Setpoint
     */
    readonly Discharge_Water_Differential_Pressure_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Water_Differential_Pressure_Deadband_Setpoint">;
    /**
     * **[brick:Discharge_Water_Differential_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Discharge_Water_Differential_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Integral_Time_Parameter
     */
    readonly Discharge_Water_Differential_Pressure_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Water_Differential_Pressure_Integral_Time_Parameter">;
    /**
     * **[brick:Discharge_Water_Differential_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Discharge_Water_Differential_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Proportional_Band
     */
    readonly Discharge_Water_Differential_Pressure_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Water_Differential_Pressure_Proportional_Band_Parameter">;
    /**
     * **[brick:Discharge_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Discharge_Water_Flow_Sensor)**
     *
     * Measures the rate of flow of discharge water
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    readonly Discharge_Water_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Water_Flow_Sensor">;
    /**
     * **[brick:Discharge_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Discharge_Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of discharge water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    readonly Discharge_Water_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Water_Flow_Setpoint">;
    /**
     * **[brick:Discharge_Water_Temperature_Alarm](https://brickschema.org/schema/Brick#Discharge_Water_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with temperature of the discharge water.
     *
     * @type        class
     * @parent      brick:Water_Temperature_Alarm
     */
    readonly Discharge_Water_Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Water_Temperature_Alarm">;
    /**
     * **[brick:Discharge_Water_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Discharge_Water_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    readonly Discharge_Water_Temperature_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Water_Temperature_Proportional_Band_Parameter">;
    /**
     * **[brick:Discharge_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Discharge_Water_Temperature_Sensor)**
     *
     * Measures the temperature of discharge water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    readonly Discharge_Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Water_Temperature_Sensor">;
    /**
     * **[brick:Discharge_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Discharge_Water_Temperature_Setpoint)**
     *
     * Sets temperature of discharge water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    readonly Discharge_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Discharge_Water_Temperature_Setpoint">;
    /**
     * **[brick:Disconnect_Switch](https://brickschema.org/schema/Brick#Disconnect_Switch)**
     *
     * Building power is most commonly provided by utility company through a master disconnect switch (sometimes called a service disconnect) in the main electrical room of a building. The Utility Company provided master disconnect switch often owns or restricts access to this switch. There can also be other cases where a disconnect is placed into an electrical system to allow service cut-off to a portion of the building.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    readonly Disconnect_Switch: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Disconnect_Switch">;
    /**
     * **[brick:Displacement_Flow_Air_Diffuser](https://brickschema.org/schema/Brick#Displacement_Flow_Air_Diffuser)**
     *
     * An air diffuser that is designed for low discharge air speeds to minimize turbulence and induction of room air. This diffuser is used with displacement ventilation systems.
     *
     * @type        class
     * @parent      brick:Air_Diffuser
     */
    readonly Displacement_Flow_Air_Diffuser: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Displacement_Flow_Air_Diffuser">;
    /**
     * **[brick:Distribution_Frame](https://brickschema.org/schema/Brick#Distribution_Frame)**
     *
     * A class of spaces where the cables carrying signals meet and connect, e.g. a wiring closet or a broadcast downlink room
     *
     * @type        class
     * @parent      brick:Telecom_Room
     */
    readonly Distribution_Frame: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Distribution_Frame">;
    /**
     * **[brick:Domestic_Hot_Water_Supply_Temperature_Sensor](https://brickschema.org/schema/Brick#Domestic_Hot_Water_Supply_Temperature_Sensor)**
     *
     * Measures the temperature of domestic water supplied by a hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Sensor
     */
    readonly Domestic_Hot_Water_Supply_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Domestic_Hot_Water_Supply_Temperature_Sensor">;
    /**
     * **[brick:Domestic_Hot_Water_Supply_Temperature_Setpoint](https://brickschema.org/schema/Brick#Domestic_Hot_Water_Supply_Temperature_Setpoint)**
     *
     * Sets temperature of supplying part of domestic hot water
     *
     * @type        class
     * @parent      brick:Domestic_Hot_Water_Temperature_Setpoint
     */
    readonly Domestic_Hot_Water_Supply_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Domestic_Hot_Water_Supply_Temperature_Setpoint">;
    /**
     * **[brick:Domestic_Hot_Water_System](https://brickschema.org/schema/Brick#Domestic_Hot_Water_System)**
     *
     * The equipment, devices and conduits that handle the production and distribution of domestic hot water in a building
     *
     * @type        class
     * @parent      brick:System
     */
    readonly Domestic_Hot_Water_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Domestic_Hot_Water_System">;
    /**
     * **[brick:Domestic_Hot_Water_System_Enable_Command](https://brickschema.org/schema/Brick#Domestic_Hot_Water_System_Enable_Command)**
     *
     * Enables operation of the domestic hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_System_Enable_Command
     */
    readonly Domestic_Hot_Water_System_Enable_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Domestic_Hot_Water_System_Enable_Command">;
    /**
     * **[brick:Domestic_Hot_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Domestic_Hot_Water_Temperature_Setpoint)**
     *
     * Sets temperature of domestic hot water
     *
     * @type        class
     * @parent      brick:Hot_Water_Temperature_Setpoint
     */
    readonly Domestic_Hot_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Domestic_Hot_Water_Temperature_Setpoint">;
    /**
     * **[brick:Domestic_Hot_Water_Valve](https://brickschema.org/schema/Brick#Domestic_Hot_Water_Valve)**
     *
     * A valve regulating the flow of domestic hot water
     *
     * @type        class
     * @parent      brick:Hot_Water_Valve
     */
    readonly Domestic_Hot_Water_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Domestic_Hot_Water_Valve">;
    /**
     * **[brick:Domestic_Water](https://brickschema.org/schema/Brick#Domestic_Water)**
     *
     * A collection of equipment that transport and regulate domestic water among each other
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Domestic_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Domestic_Water">;
    /**
     * **[brick:Domestic_Water_Loop](https://brickschema.org/schema/Brick#Domestic_Water_Loop)**
     *
     * @type        class
     * @parent      brick:Water_Loop
     */
    readonly Domestic_Water_Loop: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Domestic_Water_Loop">;
    /**
     * **[brick:Drench_Hose](https://brickschema.org/schema/Brick#Drench_Hose)**
     *
     * @type        class
     * @parent      brick:Emergency_Wash_Station
     */
    readonly Drench_Hose: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Drench_Hose">;
    /**
     * **[brick:Drive_Ready_Status](https://brickschema.org/schema/Brick#Drive_Ready_Status)**
     *
     * Indicates if a hard drive or other storage device is ready to be used, e.g. in the context of RAID
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Drive_Ready_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Drive_Ready_Status">;
    /**
     * **[brick:Dry_Bulb_Temperature](https://brickschema.org/schema/Brick#Dry_Bulb_Temperature)**
     *
     * The temperature of air measured by a thermometer freely exposed to the air, but shielded from radiation and moisture. (https://en.wikipedia.org/wiki/Dry-bulb_temperature)
     *
     * @type        instance
     */
    readonly Dry_Bulb_Temperature: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Dry_Bulb_Temperature">;
    /**
     * **[brick:Duration_Sensor](https://brickschema.org/schema/Brick#Duration_Sensor)**
     *
     * Measures the duration of a phenomenon or event
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Duration_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Duration_Sensor">;
    /**
     * **[brick:Dynamic_Pressure](https://brickschema.org/schema/Brick#Dynamic_Pressure)**
     *
     * @type        instance
     */
    readonly Dynamic_Pressure: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Dynamic_Pressure">;
    /**
     * **[brick:ESS_Panel](https://brickschema.org/schema/Brick#ESS_Panel)**
     *
     * See Embedded_Surface_System_Panel
     *
     * @type        class
     * @parent      brick:Radiant_Panel
     */
    readonly ESS_Panel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#ESS_Panel">;
    /**
     * **[brick:EconCycle_Start_Stop_Status](https://brickschema.org/schema/Brick#EconCycle_Start_Stop_Status)**
     *
     * @type        class
     * @parent      brick:Start_Stop_Status
     */
    readonly EconCycle_Start_Stop_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#EconCycle_Start_Stop_Status">;
    /**
     * **[brick:Economizer](https://brickschema.org/schema/Brick#Economizer)**
     *
     * Device that, on proper variable sensing, initiates control signals or actions to conserve energy. A control system that reduces the mechanical heating and cooling requirement.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Economizer: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Economizer">;
    /**
     * **[brick:Economizer_Damper](https://brickschema.org/schema/Brick#Economizer_Damper)**
     *
     * A damper that is part of an economizer that is used to module the flow of air
     *
     * @type        class
     * @parent      brick:Damper
     */
    readonly Economizer_Damper: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Economizer_Damper">;
    /**
     * **[brick:Effective_Air_Temperature_Cooling_Setpoint](https://brickschema.org/schema/Brick#Effective_Air_Temperature_Cooling_Setpoint)**
     *
     * @type        class
     * @parent      brick:Cooling_Temperature_Setpoint
     */
    readonly Effective_Air_Temperature_Cooling_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Effective_Air_Temperature_Cooling_Setpoint">;
    /**
     * **[brick:Effective_Air_Temperature_Heating_Setpoint](https://brickschema.org/schema/Brick#Effective_Air_Temperature_Heating_Setpoint)**
     *
     * @type        class
     * @parent      brick:Effective_Air_Temperature_Setpoint
     */
    readonly Effective_Air_Temperature_Heating_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Effective_Air_Temperature_Heating_Setpoint">;
    /**
     * **[brick:Effective_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Effective_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Effective_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Effective_Air_Temperature_Setpoint">;
    /**
     * **[brick:Effective_Discharge_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Effective_Discharge_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint
     */
    readonly Effective_Discharge_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Effective_Discharge_Air_Temperature_Setpoint">;
    /**
     * **[brick:Effective_Return_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Effective_Return_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Effective_Air_Temperature_Setpoint
     */
    readonly Effective_Return_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Effective_Return_Air_Temperature_Setpoint">;
    /**
     * **[brick:Effective_Room_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Effective_Room_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Effective_Air_Temperature_Setpoint
     */
    readonly Effective_Room_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Effective_Room_Air_Temperature_Setpoint">;
    /**
     * **[brick:Effective_Supply_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Effective_Supply_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Effective_Air_Temperature_Setpoint
     */
    readonly Effective_Supply_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Effective_Supply_Air_Temperature_Setpoint">;
    /**
     * **[brick:Effective_Zone_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Effective_Zone_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Effective_Air_Temperature_Setpoint
     */
    readonly Effective_Zone_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Effective_Zone_Air_Temperature_Setpoint">;
    /**
     * **[brick:EfficiencyShape](https://brickschema.org/schema/Brick#EfficiencyShape)**
     *
     * @type        class
     */
    readonly EfficiencyShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#EfficiencyShape">;
    /**
     * **[brick:Electric_Baseboard_Radiator](https://brickschema.org/schema/Brick#Electric_Baseboard_Radiator)**
     *
     * Electric heating device located at or near the floor
     *
     * @type        class
     * @parent      brick:Baseboard_Radiator
     */
    readonly Electric_Baseboard_Radiator: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Electric_Baseboard_Radiator">;
    /**
     * **[brick:Electric_Boiler](https://brickschema.org/schema/Brick#Electric_Boiler)**
     *
     * A closed, pressure vessel that uses electricity for heating water or other fluids to supply steam or hot water for heating, humidification, or other applications.
     *
     * @type        class
     * @parent      brick:Boiler
     */
    readonly Electric_Boiler: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Electric_Boiler">;
    /**
     * **[brick:Electric_Current](https://brickschema.org/schema/Brick#Electric_Current)**
     *
     * @type        instance
     */
    readonly Electric_Current: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Electric_Current">;
    /**
     * **[brick:ElectricEnergy](https://brickschema.org/schema/Brick#Electric_Energy)**
     *
     * A form of energy resulting from the flow of electrical charge
     *
     * @type        instance
     */
    readonly Electric_Energy: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Electric_Energy">;
    /**
     * **[brick:Electric_Power](https://brickschema.org/schema/Brick#Electric_Power)**
     *
     * Electric Power is the rate at which electrical energy is transferred by an electric circuit. In the simple case of direct current circuits, electric power can be calculated as the product of the potential difference in the circuit (V) and the amount of current flowing in the circuit (I): (P = VI), where (P) is the power, (V) is the potential difference, and (I) is the current. However, in general electric power is calculated by taking the integral of the vector cross-product of the electrical and magnetic fields over a specified area.
     *
     * @type        instance
     */
    readonly Electric_Power: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Electric_Power">;
    /**
     * **[brick:Electric_Radiator](https://brickschema.org/schema/Brick#Electric_Radiator)**
     *
     * Electric heating device
     *
     * @type        class
     * @parent      brick:Radiator
     */
    readonly Electric_Radiator: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Electric_Radiator">;
    /**
     * **[brick:Electrical_Equipment](https://brickschema.org/schema/Brick#Electrical_Equipment)**
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Electrical_Equipment: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Electrical_Equipment">;
    /**
     * **[brick:Electrical_Meter](https://brickschema.org/schema/Brick#Electrical_Meter)**
     *
     * A meter that measures the usage or consumption of electricity
     *
     * @type        class
     * @parent      brick:Meter
     */
    readonly Electrical_Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Electrical_Meter">;
    /**
     * **[brick:Electrical_Power_Sensor](https://brickschema.org/schema/Brick#Electrical_Power_Sensor)**
     *
     * Measures the amount of instantaneous electric power consumed
     *
     * @type        class
     * @parent      brick:Power_Sensor
     */
    readonly Electrical_Power_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Electrical_Power_Sensor">;
    /**
     * **[brick:Electrical_Room](https://brickschema.org/schema/Brick#Electrical_Room)**
     *
     * A class of service rooms that house electrical equipment for a building
     *
     * @type        class
     * @parent      brick:Service_Room
     */
    readonly Electrical_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Electrical_Room">;
    /**
     * **[brick:Electrical_System](https://brickschema.org/schema/Brick#Electrical_System)**
     *
     * Devices that serve or are part of the electrical subsystem in the building
     *
     * @type        class
     * @parent      brick:System
     */
    readonly Electrical_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Electrical_System">;
    /**
     * **[brick:Elevator](https://brickschema.org/schema/Brick#Elevator)**
     *
     * A device that provides vertical transportation between floors, levels or decks of a building, vessel or other structure
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Elevator: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Elevator">;
    /**
     * **[brick:Elevator_Shaft](https://brickschema.org/schema/Brick#Elevator_Shaft)**
     *
     * The vertical space in which an elevator ascends and descends
     *
     * @type        class
     * @parent      brick:Vertical_Space
     */
    readonly Elevator_Shaft: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Elevator_Shaft">;
    /**
     * **[brick:Elevator_Space](https://brickschema.org/schema/Brick#Elevator_Space)**
     *
     * The vertical space in whcih an elevator ascends and descends
     *
     * @type        class
     * @parent      brick:Vertical_Space
     */
    readonly Elevator_Space: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Elevator_Space">;
    /**
     * **[brick:Embedded_Surface_System_Panel](https://brickschema.org/schema/Brick#Embedded_Surface_System_Panel)**
     *
     * Radiant panel heating and cooling system where the energy heat source or sink is embedded in a radiant layer which is thermally insulated from the building structure.
     *
     * @type        class
     * @parent      brick:Radiant_Panel
     */
    readonly Embedded_Surface_System_Panel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Embedded_Surface_System_Panel">;
    /**
     * **[brick:Embedded_Temperature_Sensor](https://brickschema.org/schema/Brick#Embedded_Temperature_Sensor)**
     *
     * Measures the internal temperature of the radiant layer of the radiant heating and cooling HVAC system.
     *
     * @type        class
     * @parent      brick:Radiant_Panel_Temperature_Sensor
     */
    readonly Embedded_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Embedded_Temperature_Sensor">;
    /**
     * **[brick:Embedded_Temperature_Setpoint](https://brickschema.org/schema/Brick#Embedded_Temperature_Setpoint)**
     *
     * Sets temperature for the internal material, e.g. concrete slab, of the radiant panel.
     *
     * @type        class
     * @parent      brick:Radiant_Panel_Temperature_Setpoint
     */
    readonly Embedded_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Embedded_Temperature_Setpoint">;
    /**
     * **[brick:Emergency_Air_Flow_System](https://brickschema.org/schema/Brick#Emergency_Air_Flow_System)**
     *
     * @type        class
     * @parent      brick:Safety_System
     */
    readonly Emergency_Air_Flow_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Emergency_Air_Flow_System">;
    /**
     * **[brick:Emergency_Air_Flow_System_Status](https://brickschema.org/schema/Brick#Emergency_Air_Flow_System_Status)**
     *
     * @type        class
     * @parent      brick:System_Status
     */
    readonly Emergency_Air_Flow_System_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Emergency_Air_Flow_System_Status">;
    /**
     * **[brick:Emergency_Alarm](https://brickschema.org/schema/Brick#Emergency_Alarm)**
     *
     * Alarms that indicate off-normal conditions associated with emergency systems
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Emergency_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Emergency_Alarm">;
    /**
     * **[brick:Emergency_Generator_Alarm](https://brickschema.org/schema/Brick#Emergency_Generator_Alarm)**
     *
     * An alarm that indicates off-normal conditions associated with an emergency generator
     *
     * @type        class
     * @parent      brick:Emergency_Alarm
     */
    readonly Emergency_Generator_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Emergency_Generator_Alarm">;
    /**
     * **[brick:Emergency_Generator_Status](https://brickschema.org/schema/Brick#Emergency_Generator_Status)**
     *
     * Indicates if an emergency generator is active
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Emergency_Generator_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Emergency_Generator_Status">;
    /**
     * **[brick:Emergency_Phone](https://brickschema.org/schema/Brick#Emergency_Phone)**
     *
     * @type        class
     * @parent      brick:Intercom_Equipment
     */
    readonly Emergency_Phone: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Emergency_Phone">;
    /**
     * **[brick:Emergency_Power_Off_System](https://brickschema.org/schema/Brick#Emergency_Power_Off_System)**
     *
     * A system that can power down a single piece of equipment or a single system from a single point
     *
     * @type        class
     * @parent      brick:Safety_System
     */
    readonly Emergency_Power_Off_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Emergency_Power_Off_System">;
    /**
     * **[brick:Emergency_Power_Off_System_Activated_By_High_Temperature_Status](https://brickschema.org/schema/Brick#Emergency_Power_Off_System_Activated_By_High_Temperature_Status)**
     *
     * @type        class
     * @parent      brick:Emergency_Power_Off_System_Status
     */
    readonly Emergency_Power_Off_System_Activated_By_High_Temperature_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Emergency_Power_Off_System_Activated_By_High_Temperature_Status">;
    /**
     * **[brick:Emergency_Power_Off_System_Activated_By_Leak_Detection_System_Status](https://brickschema.org/schema/Brick#Emergency_Power_Off_System_Activated_By_Leak_Detection_System_Status)**
     *
     * @type        class
     * @parent      brick:Emergency_Power_Off_System_Status
     */
    readonly Emergency_Power_Off_System_Activated_By_Leak_Detection_System_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Emergency_Power_Off_System_Activated_By_Leak_Detection_System_Status">;
    /**
     * **[brick:Emergency_Power_Off_System_Status](https://brickschema.org/schema/Brick#Emergency_Power_Off_System_Status)**
     *
     * @type        class
     * @parent      brick:Off_Status
     */
    readonly Emergency_Power_Off_System_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Emergency_Power_Off_System_Status">;
    /**
     * **[brick:Emergency_Push_Button_Status](https://brickschema.org/schema/Brick#Emergency_Push_Button_Status)**
     *
     * Indicates if an emergency button has been pushed
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Emergency_Push_Button_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Emergency_Push_Button_Status">;
    /**
     * **[brick:Emergency_Wash_Station](https://brickschema.org/schema/Brick#Emergency_Wash_Station)**
     *
     * @type        class
     * @parent      brick:Safety_Equipment
     */
    readonly Emergency_Wash_Station: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Emergency_Wash_Station">;
    /**
     * **[brick:Employee_Entrance_Lobby](https://brickschema.org/schema/Brick#Employee_Entrance_Lobby)**
     *
     * An open space near an entrance that is typicaly only used for employees
     *
     * @type        class
     * @parent      brick:Lobby
     */
    readonly Employee_Entrance_Lobby: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Employee_Entrance_Lobby">;
    /**
     * **[brick:Enable_Command](https://brickschema.org/schema/Brick#Enable_Command)**
     *
     * Commands that enable functionality
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Enable_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Enable_Command">;
    /**
     * **[brick:Enable_Differential_Enthalpy_Command](https://brickschema.org/schema/Brick#Enable_Differential_Enthalpy_Command)**
     *
     * Enables the use of differential enthalpy control
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    readonly Enable_Differential_Enthalpy_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Enable_Differential_Enthalpy_Command">;
    /**
     * **[brick:Enable_Differential_Temperature_Command](https://brickschema.org/schema/Brick#Enable_Differential_Temperature_Command)**
     *
     * Enables the use of differential temperature control
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    readonly Enable_Differential_Temperature_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Enable_Differential_Temperature_Command">;
    /**
     * **[brick:Enable_Fixed_Enthalpy_Command](https://brickschema.org/schema/Brick#Enable_Fixed_Enthalpy_Command)**
     *
     * Enables the use of fixed enthalpy control
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    readonly Enable_Fixed_Enthalpy_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Enable_Fixed_Enthalpy_Command">;
    /**
     * **[brick:Enable_Fixed_Temperature_Command](https://brickschema.org/schema/Brick#Enable_Fixed_Temperature_Command)**
     *
     * Enables the use of fixed temperature control
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    readonly Enable_Fixed_Temperature_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Enable_Fixed_Temperature_Command">;
    /**
     * **[brick:Enable_Hot_Water_System_Outside_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Enable_Hot_Water_System_Outside_Air_Temperature_Setpoint)**
     *
     * Enables hot water system when outside air temperature reaches the indicated value
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Setpoint
     */
    readonly Enable_Hot_Water_System_Outside_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Enable_Hot_Water_System_Outside_Air_Temperature_Setpoint">;
    /**
     * **[brick:Enable_Status](https://brickschema.org/schema/Brick#Enable_Status)**
     *
     * Indicates if a system or piece of functionality has been enabled
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Enable_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Enable_Status">;
    /**
     * **[brick:Enclosed_Office](https://brickschema.org/schema/Brick#Enclosed_Office)**
     *
     * A space for individuals to work with walls and a door
     *
     * @type        class
     * @parent      brick:Office
     */
    readonly Enclosed_Office: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Enclosed_Office">;
    /**
     * **[brick:Energy](https://brickschema.org/schema/Brick#Energy)**
     *
     * @type        instance
     */
    readonly Energy: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Energy">;
    /**
     * **[brick:Energy_Generation_System](https://brickschema.org/schema/Brick#Energy_Generation_System)**
     *
     * A collection of devices that generates electricity
     *
     * @type        class
     * @parent      brick:Energy_System
     */
    readonly Energy_Generation_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Energy_Generation_System">;
    /**
     * **[brick:Energy_Sensor](https://brickschema.org/schema/Brick#Energy_Sensor)**
     *
     * Measures energy consumption
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Energy_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Energy_Sensor">;
    /**
     * **[brick:Energy_Storage](https://brickschema.org/schema/Brick#Energy_Storage)**
     *
     * Devices or equipment that store energy in its various forms
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    readonly Energy_Storage: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Energy_Storage">;
    /**
     * **[brick:Energy_Storage_System](https://brickschema.org/schema/Brick#Energy_Storage_System)**
     *
     * A collection of devices that stores electricity
     *
     * @type        class
     * @parent      brick:Energy_System
     */
    readonly Energy_Storage_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Energy_Storage_System">;
    /**
     * **[brick:Energy_System](https://brickschema.org/schema/Brick#Energy_System)**
     *
     * A collection of devices that generates, stores or transports electricity
     *
     * @type        class
     * @parent      brick:Electrical_System
     */
    readonly Energy_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Energy_System">;
    /**
     * **[brick:Energy_Usage_Sensor](https://brickschema.org/schema/Brick#Energy_Usage_Sensor)**
     *
     * Measures the total amount of energy used over some period of time
     *
     * @type        class
     * @parent      brick:Energy_Sensor
     */
    readonly Energy_Usage_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Energy_Usage_Sensor">;
    /**
     * **[brick:Energy_Zone](https://brickschema.org/schema/Brick#Energy_Zone)**
     *
     * A space or group of spaces that are managed or monitored as one unit for energy purposes
     *
     * @type        class
     * @parent      brick:Zone
     */
    readonly Energy_Zone: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Energy_Zone">;
    /**
     * **[brick:Entering_Water](https://brickschema.org/schema/Brick#Entering_Water)**
     *
     * Water that is entering a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Entering_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Entering_Water">;
    /**
     * **[brick:Entering_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Entering_Water_Flow_Sensor)**
     *
     * Measures the rate of flow of water entering a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    readonly Entering_Water_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Entering_Water_Flow_Sensor">;
    /**
     * **[brick:Entering_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Entering_Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of entering water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    readonly Entering_Water_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Entering_Water_Flow_Setpoint">;
    /**
     * **[brick:Entering_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Entering_Water_Temperature_Sensor)**
     *
     * Measures the temperature of water entering a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    readonly Entering_Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Entering_Water_Temperature_Sensor">;
    /**
     * **[brick:Entering_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Entering_Water_Temperature_Setpoint)**
     *
     * Sets temperature of entering water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    readonly Entering_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Entering_Water_Temperature_Setpoint">;
    /**
     * **[brick:Enthalpy](https://brickschema.org/schema/Brick#Enthalpy)**
     *
     * (also known as heat content), thermodynamic quantity equal to the sum of the internal energy of a system plus the product of the pressure volume work done on the system. H = E + pv, where H = enthalpy or total heat content, E = internal energy of the system, p = pressure, and v = volume. (Compare to [[specific enthalpy]].)
     *
     * @type        instance
     */
    readonly Enthalpy: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Enthalpy">;
    /**
     * **[brick:Enthalpy_Sensor](https://brickschema.org/schema/Brick#Enthalpy_Sensor)**
     *
     * Measures the total heat content of some substance
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Enthalpy_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Enthalpy_Sensor">;
    /**
     * **[brick:Enthalpy_Setpoint](https://brickschema.org/schema/Brick#Enthalpy_Setpoint)**
     *
     * Sets enthalpy
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Enthalpy_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Enthalpy_Setpoint">;
    /**
     * **[brick:EntityProperty](https://brickschema.org/schema/Brick#EntityProperty)**
     *
     * @type        class
     * @parent      http://www.w3.org/2002/07/owl#ObjectProperty
     */
    readonly EntityProperty: import("../index.js").Iri<"https://brickschema.org/schema/Brick#EntityProperty">;
    /**
     * **[brick:Entrance](https://brickschema.org/schema/Brick#Entrance)**
     *
     * The location and space of a building where people enter and exit the building
     *
     * @type        class
     * @parent      brick:Space
     */
    readonly Entrance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Entrance">;
    /**
     * **[brick:Environment_Box](https://brickschema.org/schema/Brick#Environment_Box)**
     *
     * (also known as climatic chamber), enclosed space designed to create a particular environment.
     *
     * @type        class
     * @parent      brick:Laboratory
     */
    readonly Environment_Box: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Environment_Box">;
    /**
     * **[brick:Equipment](https://brickschema.org/schema/Brick#Equipment)**
     *
     * devices that serve all or part of the building and may include electric power, lighting, transportation, or service water heating, including, but not limited to, furnaces, boilers, air conditioners, heat pumps, chillers, water heaters, lamps, luminaires, ballasts, elevators, escalators, or other devices or installations.
     *
     * @type        class
     * @parent      brick:Class
     */
    readonly Equipment: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Equipment">;
    /**
     * **[brick:Equipment_Room](https://brickschema.org/schema/Brick#Equipment_Room)**
     *
     * A telecommunications room where equipment that serves the building is stored
     *
     * @type        class
     * @parent      brick:Telecom_Room
     */
    readonly Equipment_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Equipment_Room">;
    /**
     * **[brick:Evaporative_Heat_Exchanger](https://brickschema.org/schema/Brick#Evaporative_Heat_Exchanger)**
     *
     * @type        class
     * @parent      brick:Heat_Exchanger
     */
    readonly Evaporative_Heat_Exchanger: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Evaporative_Heat_Exchanger">;
    /**
     * **[brick:Even_Month_Status](https://brickschema.org/schema/Brick#Even_Month_Status)**
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Even_Month_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Even_Month_Status">;
    /**
     * **[brick:Exercise_Room](https://brickschema.org/schema/Brick#Exercise_Room)**
     *
     * An indoor room used for exercise and physical activities
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Exercise_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exercise_Room">;
    /**
     * **[brick:Exhaust_Air](https://brickschema.org/schema/Brick#Exhaust_Air)**
     *
     * air that must be removed from a space due to contaminants, regardless of pressurization
     *
     * @type        class
     * @parent      brick:Air
     */
    readonly Exhaust_Air: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air">;
    /**
     * **[brick:Exhaust_Air_Dewpoint_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Dewpoint_Sensor)**
     *
     * Measures dewpoint of exhaust air
     *
     * @type        class
     * @parent      brick:Dewpoint_Sensor
     */
    readonly Exhaust_Air_Dewpoint_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Dewpoint_Sensor">;
    /**
     * **[brick:Exhaust_Air_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Differential_Pressure_Sensor)**
     *
     * Measures the difference in pressure between an upstream and downstream of an air duct or other air conduit used to exhaust air from the building
     *
     * @type        class
     * @parent      brick:Air_Differential_Pressure_Sensor
     */
    readonly Exhaust_Air_Differential_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Differential_Pressure_Sensor">;
    /**
     * **[brick:Exhaust_Air_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Exhaust_Air_Differential_Pressure_Setpoint)**
     *
     * Sets the target air differential pressure between an upstream and downstream point in a exhaust air duct or conduit
     *
     * @type        class
     * @parent      brick:Air_Differential_Pressure_Setpoint
     */
    readonly Exhaust_Air_Differential_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Differential_Pressure_Setpoint">;
    /**
     * **[brick:Exhaust_Air_Flow_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Exhaust_Air_Flow_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Integral_Time_Parameter
     */
    readonly Exhaust_Air_Flow_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Flow_Integral_Time_Parameter">;
    /**
     * **[brick:Exhaust_Air_Flow_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Exhaust_Air_Flow_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    readonly Exhaust_Air_Flow_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Flow_Proportional_Band_Parameter">;
    /**
     * **[brick:Exhaust_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of exhaust air
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    readonly Exhaust_Air_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Flow_Sensor">;
    /**
     * **[brick:Exhaust_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Exhaust_Air_Flow_Setpoint)**
     *
     * Sets exhaust air flow rate
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint
     */
    readonly Exhaust_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Flow_Setpoint">;
    /**
     * **[brick:Exhaust_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Humidity_Sensor)**
     *
     * Measures the relative humidity of exhaust air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    readonly Exhaust_Air_Humidity_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Humidity_Sensor">;
    /**
     * **[brick:Exhaust_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Exhaust_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for exhaust air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    readonly Exhaust_Air_Humidity_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Humidity_Setpoint">;
    /**
     * **[brick:Exhaust_Air_Stack_Flow_Deadband_Setpoint](https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of exhaust air stack flow
     *
     * @type        class
     * @parent      brick:Air_Flow_Deadband_Setpoint
     */
    readonly Exhaust_Air_Stack_Flow_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Deadband_Setpoint">;
    /**
     * **[brick:Exhaust_Air_Stack_Flow_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Exhaust_Air_Flow_Integral_Time_Parameter
     */
    readonly Exhaust_Air_Stack_Flow_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Integral_Time_Parameter">;
    /**
     * **[brick:Exhaust_Air_Stack_Flow_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Exhaust_Air_Flow_Proportional_Band_Parameter
     */
    readonly Exhaust_Air_Stack_Flow_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Proportional_Band_Parameter">;
    /**
     * **[brick:Exhaust_Air_Stack_Flow_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Sensor)**
     *
     * Measures the rate of flow of air in the exhaust air stack
     *
     * @type        class
     * @parent      brick:Exhaust_Air_Flow_Sensor
     */
    readonly Exhaust_Air_Stack_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Sensor">;
    /**
     * **[brick:Exhaust_Air_Stack_Flow_Setpoint](https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Setpoint)**
     *
     * Sets exhaust air stack flow rate
     *
     * @type        class
     * @parent      brick:Exhaust_Air_Flow_Setpoint
     */
    readonly Exhaust_Air_Stack_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Stack_Flow_Setpoint">;
    /**
     * **[brick:Exhaust_Air_Static_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Exhaust_Air_Static_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Static_Pressure_Proportional_Band_Parameter
     */
    readonly Exhaust_Air_Static_Pressure_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Static_Pressure_Proportional_Band_Parameter">;
    /**
     * **[brick:Exhaust_Air_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Static_Pressure_Sensor)**
     *
     * The static pressure of air within exhaust regions of an HVAC system
     *
     * @type        class
     * @parent      brick:Static_Pressure_Sensor
     */
    readonly Exhaust_Air_Static_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Static_Pressure_Sensor">;
    /**
     * **[brick:Exhaust_Air_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Exhaust_Air_Static_Pressure_Setpoint)**
     *
     * Sets static pressure of exhaust air
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    readonly Exhaust_Air_Static_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Static_Pressure_Setpoint">;
    /**
     * **[brick:Exhaust_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Temperature_Sensor)**
     *
     * Measures the temperature of exhaust air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    readonly Exhaust_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Temperature_Sensor">;
    /**
     * **[brick:Exhaust_Air_Velocity_Pressure_Sensor](https://brickschema.org/schema/Brick#Exhaust_Air_Velocity_Pressure_Sensor)**
     *
     * @type        class
     * @parent      brick:Velocity_Pressure_Sensor
     */
    readonly Exhaust_Air_Velocity_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Air_Velocity_Pressure_Sensor">;
    /**
     * **[brick:Exhaust_Damper](https://brickschema.org/schema/Brick#Exhaust_Damper)**
     *
     * A damper that modulates the flow of exhaust air
     *
     * @type        class
     * @parent      brick:Damper
     */
    readonly Exhaust_Damper: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Damper">;
    /**
     * **[brick:Exhaust_Fan](https://brickschema.org/schema/Brick#Exhaust_Fan)**
     *
     * Fan moving exhaust air -- air that must be removed from a space due to contaminants
     *
     * @type        class
     * @parent      brick:Fan
     */
    readonly Exhaust_Fan: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Fan">;
    /**
     * **[brick:Exhaust_Fan_Disable_Command](https://brickschema.org/schema/Brick#Exhaust_Fan_Disable_Command)**
     *
     * Disables operation of the exhaust fan
     *
     * @type        class
     * @parent      brick:Disable_Command
     */
    readonly Exhaust_Fan_Disable_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Fan_Disable_Command">;
    /**
     * **[brick:Exhaust_Fan_Enable_Command](https://brickschema.org/schema/Brick#Exhaust_Fan_Enable_Command)**
     *
     * Enables operation of the exhaust fan
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    readonly Exhaust_Fan_Enable_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Exhaust_Fan_Enable_Command">;
    /**
     * **[brick:Eye_Wash_Station](https://brickschema.org/schema/Brick#Eye_Wash_Station)**
     *
     * @type        class
     * @parent      brick:Emergency_Wash_Station
     */
    readonly Eye_Wash_Station: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Eye_Wash_Station">;
    /**
     * **[brick:FCU](https://brickschema.org/schema/Brick#FCU)**
     *
     * See Fan_Coil_Unit
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    readonly FCU: import("../index.js").Iri<"https://brickschema.org/schema/Brick#FCU">;
    /**
     * **[brick:Failure_Alarm](https://brickschema.org/schema/Brick#Failure_Alarm)**
     *
     * Alarms that indicate the failure of devices, equipment, systems and control loops
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Failure_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Failure_Alarm">;
    /**
     * **[brick:Fan](https://brickschema.org/schema/Brick#Fan)**
     *
     * Any device with two or more blades or vanes attached to a rotating shaft used to produce an airflow for the purpose of comfort, ventilation, exhaust, heating, cooling, or any other gaseous transport.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Fan: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fan">;
    /**
     * **[brick:Fan_Coil_Unit](https://brickschema.org/schema/Brick#Fan_Coil_Unit)**
     *
     * Terminal device consisting of a heating and/or cooling heat exchanger or 'coil' and fan that is used to control the temperature in the space where it is installed
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    readonly Fan_Coil_Unit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fan_Coil_Unit">;
    /**
     * **[brick:Fan_On_Off_Status](https://brickschema.org/schema/Brick#Fan_On_Off_Status)**
     *
     * @type        class
     * @parent      brick:Fan_Status
     */
    readonly Fan_On_Off_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fan_On_Off_Status">;
    /**
     * **[brick:Fan_Status](https://brickschema.org/schema/Brick#Fan_Status)**
     *
     * Indicates properties of fans
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Fan_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fan_Status">;
    /**
     * **[brick:Fan_VFD](https://brickschema.org/schema/Brick#Fan_VFD)**
     *
     * Variable-frequency drive for fans
     *
     * @type        class
     * @parent      brick:VFD
     */
    readonly Fan_VFD: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fan_VFD">;
    /**
     * **[brick:Fault_Reset_Command](https://brickschema.org/schema/Brick#Fault_Reset_Command)**
     *
     * Clears a fault status
     *
     * @type        class
     * @parent      brick:Reset_Command
     */
    readonly Fault_Reset_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fault_Reset_Command">;
    /**
     * **[brick:Fault_Status](https://brickschema.org/schema/Brick#Fault_Status)**
     *
     * Indicates the presence of a fault in a device, system or control loop
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Fault_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fault_Status">;
    /**
     * **[brick:Field_Of_Play](https://brickschema.org/schema/Brick#Field_Of_Play)**
     *
     * The area of a stadium where athletic events occur, e.g. the soccer pitch
     *
     * @type        class
     * @parent      brick:Outdoor_Area
     */
    readonly Field_Of_Play: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Field_Of_Play">;
    /**
     * **[brick:Filter](https://brickschema.org/schema/Brick#Filter)**
     *
     * Device to remove gases from a mixture of gases or to remove solid material from a fluid
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Filter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Filter">;
    /**
     * **[brick:Filter_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Filter_Differential_Pressure_Sensor)**
     *
     * Measures the difference in pressure on either side of a filter
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Sensor
     */
    readonly Filter_Differential_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Filter_Differential_Pressure_Sensor">;
    /**
     * **[brick:Filter_Reset_Command](https://brickschema.org/schema/Brick#Filter_Reset_Command)**
     *
     * @type        class
     * @parent      brick:Reset_Command
     */
    readonly Filter_Reset_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Filter_Reset_Command">;
    /**
     * **[brick:Filter_Status](https://brickschema.org/schema/Brick#Filter_Status)**
     *
     * Indicates if a filter needs to be replaced
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Filter_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Filter_Status">;
    /**
     * **[brick:Final_Filter](https://brickschema.org/schema/Brick#Final_Filter)**
     *
     * The last, high-efficiency filter installed in a sequence to remove the finest particulates from the substance being filtered
     *
     * @type        class
     * @parent      brick:Filter
     */
    readonly Final_Filter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Final_Filter">;
    /**
     * **[brick:Fire_Control_Panel](https://brickschema.org/schema/Brick#Fire_Control_Panel)**
     *
     * A panel-mounted device that provides status and control of a fire safety system
     *
     * @type        class
     * @parent      brick:Fire_Safety_Equipment
     */
    readonly Fire_Control_Panel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fire_Control_Panel">;
    /**
     * **[brick:Fire_Safety_Equipment](https://brickschema.org/schema/Brick#Fire_Safety_Equipment)**
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Fire_Safety_Equipment: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fire_Safety_Equipment">;
    /**
     * **[brick:Fire_Safety_System](https://brickschema.org/schema/Brick#Fire_Safety_System)**
     *
     * A system containing devices and equipment that monitor, detect and suppress fire hazards
     *
     * @type        class
     * @parent      brick:Safety_System
     */
    readonly Fire_Safety_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fire_Safety_System">;
    /**
     * **[brick:Fire_Sensor](https://brickschema.org/schema/Brick#Fire_Sensor)**
     *
     * Measures the presence of fire
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Fire_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fire_Sensor">;
    /**
     * **[brick:Fire_Zone](https://brickschema.org/schema/Brick#Fire_Zone)**
     *
     * combustion chamber in a furnace or boiler.
     *
     * @type        class
     * @parent      brick:Zone
     */
    readonly Fire_Zone: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fire_Zone">;
    /**
     * **[brick:First_Aid_Kit](https://brickschema.org/schema/Brick#First_Aid_Kit)**
     *
     * @type        class
     * @parent      brick:Safety_Equipment
     */
    readonly First_Aid_Kit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#First_Aid_Kit">;
    /**
     * **[brick:First_Aid_Room](https://brickschema.org/schema/Brick#First_Aid_Room)**
     *
     * A room for a person with minor injuries can be treated or temporarily treated until transferred to a more advanced medical facility
     *
     * @type        class
     * @parent      brick:Medical_Room
     */
    readonly First_Aid_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#First_Aid_Room">;
    /**
     * **[brick:Floor](https://brickschema.org/schema/Brick#Floor)**
     *
     * A level, typically representing a horizontal aggregation of spaces that are vertically bound. (referring to IFC)
     *
     * @type        class
     * @parent      brick:Location
     */
    readonly Floor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Floor">;
    /**
     * **[brick:Flow](https://brickschema.org/schema/Brick#Flow)**
     *
     * @type        instance
     */
    readonly Flow: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Flow">;
    /**
     * **[brick:FlowLoss](https://brickschema.org/schema/Brick#Flow_Loss)**
     *
     * The amount of flow rate that is lost during distribution
     *
     * @type        instance
     */
    readonly Flow_Loss: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Flow_Loss">;
    /**
     * **[brick:Flow_Sensor](https://brickschema.org/schema/Brick#Flow_Sensor)**
     *
     * Measures the rate of flow of some substance
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Flow_Sensor">;
    /**
     * **[brick:Flow_Setpoint](https://brickschema.org/schema/Brick#Flow_Setpoint)**
     *
     * Sets flow
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Flow_Setpoint">;
    /**
     * **[brick:Fluid](https://brickschema.org/schema/Brick#Fluid)**
     *
     * substance, as a liquid or gas, that is capable of flowing and that changes shape when acted on by a force.
     *
     * @type        class
     * @parent      brick:Substance
     */
    readonly Fluid: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fluid">;
    /**
     * **[brick:Food_Service_Room](https://brickschema.org/schema/Brick#Food_Service_Room)**
     *
     * A space used in the production, storage, serving, or cleanup of food and beverages
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Food_Service_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Food_Service_Room">;
    /**
     * **[brick:FormaldehydeConcentration](https://brickschema.org/schema/Brick#Formaldehyde_Concentration)**
     *
     * The concentration of formaldehyde in a medium
     *
     * @type        instance
     */
    readonly Formaldehyde_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Formaldehyde_Concentration">;
    /**
     * **[brick:Formaldehyde_Level_Sensor](https://brickschema.org/schema/Brick#Formaldehyde_Level_Sensor)**
     *
     * Measures the concentration of formaldehyde in air
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    readonly Formaldehyde_Level_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Formaldehyde_Level_Sensor">;
    /**
     * **[brick:Freeze_Status](https://brickschema.org/schema/Brick#Freeze_Status)**
     *
     * Indicates if a substance contained within a vessel has frozen
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Freeze_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Freeze_Status">;
    /**
     * **[brick:Freezer](https://brickschema.org/schema/Brick#Freezer)**
     *
     * cold chamber usually kept at a temperature of 22°F to 31°F (–5°C to –1°C), with high-volume air circulation.
     *
     * @type        class
     * @parent      brick:Laboratory
     */
    readonly Freezer: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Freezer">;
    /**
     * **[brick:Frequency](https://brickschema.org/schema/Brick#Frequency)**
     *
     * Frequency is the number of occurrences of a repeating event per unit time. The repetition of the events may be periodic (that is. the length of time between event repetitions is fixed) or aperiodic (i.e. the length of time between event repetitions varies). Therefore, we distinguish between periodic and aperiodic frequencies. In the SI system, periodic frequency is measured in hertz (Hz) or multiples of hertz, while aperiodic frequency is measured in becquerel (Bq).  In spectroscopy, ( u) is mostly used. Light passing through different media keeps its frequency, but not its wavelength or wavenumber.
     *
     * @type        instance
     */
    readonly Frequency: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Frequency">;
    /**
     * **[brick:Frequency_Command](https://brickschema.org/schema/Brick#Frequency_Command)**
     *
     * Controls the frequency of a device's operation (e.g. rotational frequency)
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Frequency_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Frequency_Command">;
    /**
     * **[brick:Frequency_Sensor](https://brickschema.org/schema/Brick#Frequency_Sensor)**
     *
     * Measures the frequency of a phenomenon or aspect of a phenomenon, e.g. the frequency of a fan turning
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Frequency_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Frequency_Sensor">;
    /**
     * **[brick:Fresh_Air_Fan](https://brickschema.org/schema/Brick#Fresh_Air_Fan)**
     *
     * Fan moving fresh air -- air that is supplied into the building from the outdoors
     *
     * @type        class
     * @parent      brick:Fan
     */
    readonly Fresh_Air_Fan: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fresh_Air_Fan">;
    /**
     * **[brick:Fresh_Air_Setpoint_Limit](https://brickschema.org/schema/Brick#Fresh_Air_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Fresh_Air_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    readonly Fresh_Air_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fresh_Air_Setpoint_Limit">;
    /**
     * **[brick:Frost](https://brickschema.org/schema/Brick#Frost)**
     *
     * frost formed on the cold surface (tubes, plates) of a cooling coil.
     *
     * @type        class
     * @parent      brick:Solid
     */
    readonly Frost: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Frost">;
    /**
     * **[brick:Frost_Sensor](https://brickschema.org/schema/Brick#Frost_Sensor)**
     *
     * Senses the presence of frost or conditions that may cause frost
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Frost_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Frost_Sensor">;
    /**
     * **[brick:Fuel_Oil](https://brickschema.org/schema/Brick#Fuel_Oil)**
     *
     * Petroleum based oil burned for energy
     *
     * @type        class
     * @parent      brick:Oil
     */
    readonly Fuel_Oil: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fuel_Oil">;
    /**
     * **[brick:Fume_Hood](https://brickschema.org/schema/Brick#Fume_Hood)**
     *
     * A fume-collection device mounted over a work space, table, or shelf and serving to conduct unwanted gases away from the area enclosed.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Fume_Hood: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fume_Hood">;
    /**
     * **[brick:Fume_Hood_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Fume_Hood_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of air in a fume hood
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    readonly Fume_Hood_Air_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Fume_Hood_Air_Flow_Sensor">;
    /**
     * **[brick:Furniture](https://brickschema.org/schema/Brick#Furniture)**
     *
     * Movable objects intended to support various human activities such as seating, eating and sleeping
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Furniture: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Furniture">;
    /**
     * **[brick:Gain_Parameter](https://brickschema.org/schema/Brick#Gain_Parameter)**
     *
     * @type        class
     * @parent      brick:PID_Parameter
     */
    readonly Gain_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Gain_Parameter">;
    /**
     * **[brick:Gas](https://brickschema.org/schema/Brick#Gas)**
     *
     * state of matter in which substances exist in the form of nonaggregated molecules and which, within acceptable limits of accuracy, satisfy the ideal gas laws; usually a highly superheated vapor. See [[state]].
     *
     * @type        class
     * @parent      brick:Fluid
     */
    readonly Gas: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Gas">;
    /**
     * **[brick:Gas_Distribution](https://brickschema.org/schema/Brick#Gas_Distribution)**
     *
     * Utilize a gas distribution source to represent how gas is distributed across multiple destinations
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Gas_Distribution: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Gas_Distribution">;
    /**
     * **[brick:Gas_Meter](https://brickschema.org/schema/Brick#Gas_Meter)**
     *
     * A meter that measures the usage or consumption of gas
     *
     * @type        class
     * @parent      brick:Meter
     */
    readonly Gas_Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Gas_Meter">;
    /**
     * **[brick:Gas_Sensor](https://brickschema.org/schema/Brick#Gas_Sensor)**
     *
     * Measures gas concentration (other than CO2)
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Gas_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Gas_Sensor">;
    /**
     * **[brick:Gas_System](https://brickschema.org/schema/Brick#Gas_System)**
     *
     * @type        class
     * @parent      brick:System
     */
    readonly Gas_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Gas_System">;
    /**
     * **[brick:Gas_Valve](https://brickschema.org/schema/Brick#Gas_Valve)**
     *
     * @type        class
     * @parent      brick:Valve
     */
    readonly Gas_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Gas_Valve">;
    /**
     * **[brick:Gasoline](https://brickschema.org/schema/Brick#Gasoline)**
     *
     * Petroleum derived liquid used as a fuel source
     *
     * @type        class
     * @parent      brick:Liquid
     */
    readonly Gasoline: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Gasoline">;
    /**
     * **[brick:Gatehouse](https://brickschema.org/schema/Brick#Gatehouse)**
     *
     * The standalone building used to manage the entrance to a campus or building grounds
     *
     * @type        class
     * @parent      brick:Space
     */
    readonly Gatehouse: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Gatehouse">;
    /**
     * **[brick:Generator_Room](https://brickschema.org/schema/Brick#Generator_Room)**
     *
     * A room for electrical equipment, specifically electrical generators.
     *
     * @type        class
     * @parent      brick:Electrical_Room
     */
    readonly Generator_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Generator_Room">;
    /**
     * **[brick:Glycol](https://brickschema.org/schema/Brick#Glycol)**
     *
     * @type        class
     * @parent      brick:Liquid
     */
    readonly Glycol: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Glycol">;
    /**
     * **[brick:GrainsOfMoisture](https://brickschema.org/schema/Brick#GrainsOfMoisture)**
     *
     * Mass of moisture per pround of air, measured in grains of water
     *
     * @type        instance
     */
    readonly GrainsOfMoisture: import("../index.js").Iri<"https://brickschema.org/schema/Brick#GrainsOfMoisture">;
    /**
     * **[brick:HVAC_Equipment](https://brickschema.org/schema/Brick#HVAC_Equipment)**
     *
     * See Heating_Ventilation_Air_Conditioning_System
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly HVAC_Equipment: import("../index.js").Iri<"https://brickschema.org/schema/Brick#HVAC_Equipment">;
    /**
     * **[brick:HVAC_System](https://brickschema.org/schema/Brick#HVAC_System)**
     *
     * See Heating_Ventilation_Air_Conditioning_System
     *
     * @type        class
     * @parent      brick:System
     */
    readonly HVAC_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#HVAC_System">;
    /**
     * **[brick:HVAC_Zone](https://brickschema.org/schema/Brick#HVAC_Zone)**
     *
     * a space or group of spaces, within a building with heating, cooling, and ventilating requirements, that are sufficiently similar so that desired conditions (e.g., temperature) can be maintained throughout using a single sensor (e.g., thermostat or temperature sensor).
     *
     * @type        class
     * @parent      brick:Zone
     */
    readonly HVAC_Zone: import("../index.js").Iri<"https://brickschema.org/schema/Brick#HVAC_Zone">;
    /**
     * **[brick:HX](https://brickschema.org/schema/Brick#HX)**
     *
     * See Heat_Exchanger
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly HX: import("../index.js").Iri<"https://brickschema.org/schema/Brick#HX">;
    /**
     * **[brick:Hail](https://brickschema.org/schema/Brick#Hail)**
     *
     * pellets of frozen rain which fall in showers from cumulonimbus clouds.
     *
     * @type        class
     * @parent      brick:Solid
     */
    readonly Hail: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hail">;
    /**
     * **[brick:Hail_Sensor](https://brickschema.org/schema/Brick#Hail_Sensor)**
     *
     * Measures hail in terms of its size and damage potential
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Hail_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hail_Sensor">;
    /**
     * **[brick:Hallway](https://brickschema.org/schema/Brick#Hallway)**
     *
     * A common space, used to connect other parts of a building
     *
     * @type        class
     * @parent      brick:Common_Space
     */
    readonly Hallway: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hallway">;
    /**
     * **[brick:Hazardous_Materials_Storage](https://brickschema.org/schema/Brick#Hazardous_Materials_Storage)**
     *
     * A storage space set aside (usually with restricted access) for the storage of materials that can be hazardous to living beings or the environment
     *
     * @type        class
     * @parent      brick:Storage_Room
     */
    readonly Hazardous_Materials_Storage: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hazardous_Materials_Storage">;
    /**
     * **[brick:Heat_Exchanger](https://brickschema.org/schema/Brick#Heat_Exchanger)**
     *
     * A heat exchanger is a piece of equipment built for efficient heat transfer from one medium to another. The media may be separated by a solid wall to prevent mixing or they may be in direct contact (BEDES)
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Heat_Exchanger: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heat_Exchanger">;
    /**
     * **[brick:Heat_Exchanger_Supply_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Heat_Exchanger_Supply_Water_Temperature_Sensor)**
     *
     * Measures the temperature of water supplied by a heat exchanger
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    readonly Heat_Exchanger_Supply_Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heat_Exchanger_Supply_Water_Temperature_Sensor">;
    /**
     * **[brick:Heat_Exchanger_System_Enable_Status](https://brickschema.org/schema/Brick#Heat_Exchanger_System_Enable_Status)**
     *
     * Indicates if the heat exchanger system has been enabled
     *
     * @type        class
     * @parent      brick:Enable_Status
     */
    readonly Heat_Exchanger_System_Enable_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heat_Exchanger_System_Enable_Status">;
    /**
     * **[brick:Heat_Recovery_Hot_Water_System](https://brickschema.org/schema/Brick#Heat_Recovery_Hot_Water_System)**
     *
     * @type        class
     * @parent      brick:Hot_Water_System
     */
    readonly Heat_Recovery_Hot_Water_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heat_Recovery_Hot_Water_System">;
    /**
     * **[brick:Heat_Sensor](https://brickschema.org/schema/Brick#Heat_Sensor)**
     *
     * Measures heat
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Heat_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heat_Sensor">;
    /**
     * **[brick:Heat_Wheel](https://brickschema.org/schema/Brick#Heat_Wheel)**
     *
     * A rotary heat exchanger positioned within the supply and exhaust air streams of an air handling system in order to recover heat energy
     *
     * @type        class
     * @parent      brick:Heat_Exchanger
     */
    readonly Heat_Wheel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heat_Wheel">;
    /**
     * **[brick:Heat_Wheel_VFD](https://brickschema.org/schema/Brick#Heat_Wheel_VFD)**
     *
     * A VFD that drives a heat wheel
     *
     * @type        class
     * @parent      brick:VFD
     */
    readonly Heat_Wheel_VFD: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heat_Wheel_VFD">;
    /**
     * **[brick:Heating_Coil](https://brickschema.org/schema/Brick#Heating_Coil)**
     *
     * A heating element typically made of pipe, tube or wire that emits heat. Typically filled with hot water, or, in the case of wire, uses electricity.
     *
     * @type        class
     * @parent      brick:Coil
     */
    readonly Heating_Coil: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Coil">;
    /**
     * **[brick:Heating_Command](https://brickschema.org/schema/Brick#Heating_Command)**
     *
     * Controls the amount of heating to be delivered (typically as a proportion of total heating output)
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Heating_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Command">;
    /**
     * **[brick:Heating_Demand_Sensor](https://brickschema.org/schema/Brick#Heating_Demand_Sensor)**
     *
     * Measures the amount of power consumed by a heating process; typically found by multiplying the tonnage of a unit (e.g. RTU) by the efficiency rating in kW/ton
     *
     * @type        class
     * @parent      brick:Demand_Sensor
     */
    readonly Heating_Demand_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Demand_Sensor">;
    /**
     * **[brick:Heating_Demand_Setpoint](https://brickschema.org/schema/Brick#Heating_Demand_Setpoint)**
     *
     * Sets the rate required for heating
     *
     * @type        class
     * @parent      brick:Demand_Setpoint
     */
    readonly Heating_Demand_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Demand_Setpoint">;
    /**
     * **[brick:Heating_Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Heating_Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow for heating
     *
     * @type        class
     * @parent      brick:Discharge_Air_Flow_Setpoint
     */
    readonly Heating_Discharge_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Discharge_Air_Flow_Setpoint">;
    /**
     * **[brick:Heating_Discharge_Air_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Heating_Discharge_Air_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of heating discharge air
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Deadband_Setpoint
     */
    readonly Heating_Discharge_Air_Temperature_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Discharge_Air_Temperature_Deadband_Setpoint">;
    /**
     * **[brick:Heating_Discharge_Air_Temperature_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Heating_Discharge_Air_Temperature_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Integral_Time_Parameter
     */
    readonly Heating_Discharge_Air_Temperature_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Discharge_Air_Temperature_Integral_Time_Parameter">;
    /**
     * **[brick:Heating_Discharge_Air_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Heating_Discharge_Air_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Proportional_Band_Parameter
     */
    readonly Heating_Discharge_Air_Temperature_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Discharge_Air_Temperature_Proportional_Band_Parameter">;
    /**
     * **[brick:Heating_Start_Stop_Status](https://brickschema.org/schema/Brick#Heating_Start_Stop_Status)**
     *
     * @type        class
     * @parent      brick:Start_Stop_Status
     */
    readonly Heating_Start_Stop_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Start_Stop_Status">;
    /**
     * **[brick:Heating_Supply_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Heating_Supply_Air_Flow_Setpoint)**
     *
     * Sets supply air flow rate for heating
     *
     * @type        class
     * @parent      brick:Supply_Air_Flow_Setpoint
     */
    readonly Heating_Supply_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Supply_Air_Flow_Setpoint">;
    /**
     * **[brick:Heating_Supply_Air_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Heating_Supply_Air_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of supply air for heating
     *
     * @type        class
     * @parent      brick:Heating_Temperature_Setpoint
     */
    readonly Heating_Supply_Air_Temperature_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Supply_Air_Temperature_Deadband_Setpoint">;
    /**
     * **[brick:Heating_Supply_Air_Temperature_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Heating_Supply_Air_Temperature_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Integral_Time_Parameter
     */
    readonly Heating_Supply_Air_Temperature_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Supply_Air_Temperature_Integral_Time_Parameter">;
    /**
     * **[brick:Heating_Supply_Air_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Heating_Supply_Air_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Supply_Air_Temperature_Proportional_Band_Parameter
     */
    readonly Heating_Supply_Air_Temperature_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Supply_Air_Temperature_Proportional_Band_Parameter">;
    /**
     * **[brick:Heating_Temperature_Setpoint](https://brickschema.org/schema/Brick#Heating_Temperature_Setpoint)**
     *
     * Sets temperature for heating
     *
     * @type        class
     * @parent      brick:Temperature_Setpoint
     */
    readonly Heating_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Temperature_Setpoint">;
    /**
     * **[brick:Heating_Thermal_Power_Sensor](https://brickschema.org/schema/Brick#Heating_Thermal_Power_Sensor)**
     *
     * @type        class
     * @parent      brick:Thermal_Power_Sensor
     */
    readonly Heating_Thermal_Power_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Thermal_Power_Sensor">;
    /**
     * **[brick:Heating_Valve](https://brickschema.org/schema/Brick#Heating_Valve)**
     *
     * A valve that controls air temperature by modulating the amount of hot water flowing through a heating coil
     *
     * @type        class
     * @parent      brick:Valve
     */
    readonly Heating_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Valve">;
    /**
     * **[brick:Heating_Ventilation_Air_Conditioning_System](https://brickschema.org/schema/Brick#Heating_Ventilation_Air_Conditioning_System)**
     *
     * The equipment, distribution systems and terminals that provide, either collectively or individually, the processes of heating, ventilating or air conditioning to a building or portion of a building
     *
     * @type        class
     * @parent      brick:System
     */
    readonly Heating_Ventilation_Air_Conditioning_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Heating_Ventilation_Air_Conditioning_System">;
    /**
     * **[brick:High_CO2_Alarm](https://brickschema.org/schema/Brick#High_CO2_Alarm)**
     *
     * A device that indicates high concentration of carbon dioxide.
     *
     * @type        class
     * @parent      brick:CO2_Alarm
     */
    readonly High_CO2_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#High_CO2_Alarm">;
    /**
     * **[brick:High_Discharge_Air_Temperature_Alarm](https://brickschema.org/schema/Brick#High_Discharge_Air_Temperature_Alarm)**
     *
     * An alarm that indicates that discharge air temperature is too high
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Alarm
     */
    readonly High_Discharge_Air_Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#High_Discharge_Air_Temperature_Alarm">;
    /**
     * **[brick:High_Head_Pressure_Alarm](https://brickschema.org/schema/Brick#High_Head_Pressure_Alarm)**
     *
     * An alarm that indicates a high pressure generated on the output side of a gas compressor in a refrigeration or air conditioning system.
     *
     * @type        class
     * @parent      brick:Pressure_Alarm
     */
    readonly High_Head_Pressure_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#High_Head_Pressure_Alarm">;
    /**
     * **[brick:High_Humidity_Alarm](https://brickschema.org/schema/Brick#High_Humidity_Alarm)**
     *
     * An alarm that indicates high concentration of water vapor in the air.
     *
     * @type        class
     * @parent      brick:Humidity_Alarm
     */
    readonly High_Humidity_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#High_Humidity_Alarm">;
    /**
     * **[brick:High_Humidity_Alarm_Parameter](https://brickschema.org/schema/Brick#High_Humidity_Alarm_Parameter)**
     *
     * A parameter determining the humidity level at which to trigger a high humidity alarm
     *
     * @type        class
     * @parent      brick:Humidity_Parameter
     */
    readonly High_Humidity_Alarm_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#High_Humidity_Alarm_Parameter">;
    /**
     * **[brick:High_Outside_Air_Lockout_Temperature_Differential_Parameter](https://brickschema.org/schema/Brick#High_Outside_Air_Lockout_Temperature_Differential_Parameter)**
     *
     * The upper bound of the outside air temperature lockout range
     *
     * @type        class
     * @parent      brick:Outside_Air_Lockout_Temperature_Differential_Parameter
     */
    readonly High_Outside_Air_Lockout_Temperature_Differential_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#High_Outside_Air_Lockout_Temperature_Differential_Parameter">;
    /**
     * **[brick:High_Return_Air_Temperature_Alarm](https://brickschema.org/schema/Brick#High_Return_Air_Temperature_Alarm)**
     *
     * An alarm that indicates that return air temperature is too high
     *
     * @type        class
     * @parent      brick:High_Temperature_Alarm
     */
    readonly High_Return_Air_Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#High_Return_Air_Temperature_Alarm">;
    /**
     * **[brick:High_Static_Pressure_Cutout_Setpoint_Limit](https://brickschema.org/schema/Brick#High_Static_Pressure_Cutout_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a High_Static_Pressure_Cutout_Setpoint.
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint_Limit
     */
    readonly High_Static_Pressure_Cutout_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#High_Static_Pressure_Cutout_Setpoint_Limit">;
    /**
     * **[brick:High_Temperature_Alarm](https://brickschema.org/schema/Brick#High_Temperature_Alarm)**
     *
     * An alarm that indicates high temperature.
     *
     * @type        class
     * @parent      brick:Temperature_Alarm
     */
    readonly High_Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#High_Temperature_Alarm">;
    /**
     * **[brick:High_Temperature_Alarm_Parameter](https://brickschema.org/schema/Brick#High_Temperature_Alarm_Parameter)**
     *
     * A parameter determining the temperature level at which to trigger a high temperature alarm
     *
     * @type        class
     * @parent      brick:Temperature_Parameter
     */
    readonly High_Temperature_Alarm_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#High_Temperature_Alarm_Parameter">;
    /**
     * **[brick:High_Temperature_Hot_Water_Return_Temperature_Sensor](https://brickschema.org/schema/Brick#High_Temperature_Hot_Water_Return_Temperature_Sensor)**
     *
     * Measures the temperature of high-temperature hot water returned to a hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_Return_Temperature_Sensor
     */
    readonly High_Temperature_Hot_Water_Return_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#High_Temperature_Hot_Water_Return_Temperature_Sensor">;
    /**
     * **[brick:High_Temperature_Hot_Water_Supply_Temperature_Sensor](https://brickschema.org/schema/Brick#High_Temperature_Hot_Water_Supply_Temperature_Sensor)**
     *
     * Measures the temperature of high-temperature hot water supplied by a hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Sensor
     */
    readonly High_Temperature_Hot_Water_Supply_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#High_Temperature_Hot_Water_Supply_Temperature_Sensor">;
    /**
     * **[brick:Hold_Status](https://brickschema.org/schema/Brick#Hold_Status)**
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Hold_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hold_Status">;
    /**
     * **[brick:Hospitality_Box](https://brickschema.org/schema/Brick#Hospitality_Box)**
     *
     * A room at a stadium, usually overlooking the field of play, that is physical separate from the other seating at the venue
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Hospitality_Box: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hospitality_Box">;
    /**
     * **[brick:Hot_Box](https://brickschema.org/schema/Brick#Hot_Box)**
     *
     * hot air chamber forming part of an air handler.
     *
     * @type        class
     * @parent      brick:Laboratory
     */
    readonly Hot_Box: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Box">;
    /**
     * **[brick:Hot_Water](https://brickschema.org/schema/Brick#Hot_Water)**
     *
     * Hot water used for HVAC heating or supply to hot taps
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Hot_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water">;
    /**
     * **[brick:Hot_Water_Baseboard_Radiator](https://brickschema.org/schema/Brick#Hot_Water_Baseboard_Radiator)**
     *
     * Hydronic heating device located at or near the floor
     *
     * @type        class
     * @parent      brick:Baseboard_Radiator
     */
    readonly Hot_Water_Baseboard_Radiator: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Baseboard_Radiator">;
    /**
     * **[brick:Hot_Water_Coil](https://brickschema.org/schema/Brick#Hot_Water_Coil)**
     *
     * A heating element typically made of pipe, tube or wire that emits heat that is filled with hot water.
     *
     * @type        class
     * @parent      brick:Heating_Coil
     */
    readonly Hot_Water_Coil: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Coil">;
    /**
     * **[brick:Hot_Water_Differential_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of differential pressure of hot water
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Deadband_Setpoint
     */
    readonly Hot_Water_Differential_Pressure_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Deadband_Setpoint">;
    /**
     * **[brick:Hot_Water_Differential_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Integral_Time_Parameter
     */
    readonly Hot_Water_Differential_Pressure_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Integral_Time_Parameter">;
    /**
     * **[brick:Hot_Water_Differential_Pressure_Load_Shed_Reset_Status](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Load_Shed_Reset_Status)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Differential_Pressure_Load_Shed_Status
     */
    readonly Hot_Water_Differential_Pressure_Load_Shed_Reset_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Load_Shed_Reset_Status">;
    /**
     * **[brick:Hot_Water_Differential_Pressure_Load_Shed_Status](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Load_Shed_Status
     */
    readonly Hot_Water_Differential_Pressure_Load_Shed_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Load_Shed_Status">;
    /**
     * **[brick:Hot_Water_Differential_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Proportional_Band
     */
    readonly Hot_Water_Differential_Pressure_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Proportional_Band_Parameter">;
    /**
     * **[brick:Hot_Water_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Sensor)**
     *
     * Measures the difference in water pressure on either side of a hot water valve
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Sensor
     */
    readonly Hot_Water_Differential_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Sensor">;
    /**
     * **[brick:Hot_Water_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Setpoint)**
     *
     * Sets the target water differential pressure between an upstream and downstream point in a water pipe or conduit used to carry hot water
     *
     * @type        class
     * @parent      brick:Water_Differential_Pressure_Setpoint
     */
    readonly Hot_Water_Differential_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Differential_Pressure_Setpoint">;
    /**
     * **[brick:Hot_Water_Differential_Temperature_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Differential_Temperature_Sensor)**
     *
     * Measures the difference in temperature between the entering water to the boiler or other water heating device and leaving water from the same boiler or other water heating device
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Sensor
     */
    readonly Hot_Water_Differential_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Differential_Temperature_Sensor">;
    /**
     * **[brick:Hot_Water_Discharge_Flow_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Discharge_Flow_Sensor)**
     *
     * Measures the rate of flow of hot discharge water
     *
     * @type        class
     * @parent      brick:Discharge_Water_Flow_Sensor
     */
    readonly Hot_Water_Discharge_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Discharge_Flow_Sensor">;
    /**
     * **[brick:Hot_Water_Discharge_Flow_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Discharge_Flow_Setpoint)**
     *
     * Sets the target flow rate of hot discharge water
     *
     * @type        class
     * @parent      brick:Discharge_Water_Flow_Setpoint
     */
    readonly Hot_Water_Discharge_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Discharge_Flow_Setpoint">;
    /**
     * **[brick:Hot_Water_Discharge_Temperature_Load_Shed_Status](https://brickschema.org/schema/Brick#Hot_Water_Discharge_Temperature_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Status
     */
    readonly Hot_Water_Discharge_Temperature_Load_Shed_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Discharge_Temperature_Load_Shed_Status">;
    /**
     * **[brick:Hot_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Flow_Sensor)**
     *
     * Measures the rate of flow in a hot water circuit
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    readonly Hot_Water_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Flow_Sensor">;
    /**
     * **[brick:Hot_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of hot water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    readonly Hot_Water_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Flow_Setpoint">;
    /**
     * **[brick:Hot_Water_Loop](https://brickschema.org/schema/Brick#Hot_Water_Loop)**
     *
     * A collection of equipment that transport and regulate hot water among each other
     *
     * @type        class
     * @parent      brick:Water_Loop
     */
    readonly Hot_Water_Loop: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Loop">;
    /**
     * **[brick:Hot_Water_Meter](https://brickschema.org/schema/Brick#Hot_Water_Meter)**
     *
     * A meter that measures the usage or consumption of hot water
     *
     * @type        class
     * @parent      brick:Water_Meter
     */
    readonly Hot_Water_Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Meter">;
    /**
     * **[brick:Hot_Water_Pump](https://brickschema.org/schema/Brick#Hot_Water_Pump)**
     *
     * A pump that performs work on hot water; typically part of a hot water system
     *
     * @type        class
     * @parent      brick:Water_Pump
     */
    readonly Hot_Water_Pump: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Pump">;
    /**
     * **[brick:Hot_Water_Radiator](https://brickschema.org/schema/Brick#Hot_Water_Radiator)**
     *
     * Radiator that uses hot water
     *
     * @type        class
     * @parent      brick:Radiator
     */
    readonly Hot_Water_Radiator: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Radiator">;
    /**
     * **[brick:Hot_Water_Return_Temperature_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Return_Temperature_Sensor)**
     *
     * Measures the temperature of water returned to a hot water system
     *
     * @type        class
     * @parent      brick:Return_Water_Temperature_Sensor
     */
    readonly Hot_Water_Return_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Return_Temperature_Sensor">;
    /**
     * **[brick:Hot_Water_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Static_Pressure_Setpoint)**
     *
     * Sets static pressure of hot air
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    readonly Hot_Water_Static_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Static_Pressure_Setpoint">;
    /**
     * **[brick:Hot_Water_Supply_Flow_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Supply_Flow_Sensor)**
     *
     * Measures the rate of flow of hot supply water
     *
     * @type        class
     * @parent      brick:Hot_Water_Flow_Sensor
     */
    readonly Hot_Water_Supply_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Supply_Flow_Sensor">;
    /**
     * **[brick:Hot_Water_Supply_Flow_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Supply_Flow_Setpoint)**
     *
     * Sets the target flow rate of hot supply water
     *
     * @type        class
     * @parent      brick:Hot_Water_Flow_Setpoint
     */
    readonly Hot_Water_Supply_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Supply_Flow_Setpoint">;
    /**
     * **[brick:Hot_Water_Supply_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Supply_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_High_Reset_Setpoint
     */
    readonly Hot_Water_Supply_Temperature_High_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Supply_Temperature_High_Reset_Setpoint">;
    /**
     * **[brick:Hot_Water_Supply_Temperature_Load_Shed_Status](https://brickschema.org/schema/Brick#Hot_Water_Supply_Temperature_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Status
     */
    readonly Hot_Water_Supply_Temperature_Load_Shed_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Supply_Temperature_Load_Shed_Status">;
    /**
     * **[brick:Hot_Water_Supply_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Supply_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_Low_Reset_Setpoint
     */
    readonly Hot_Water_Supply_Temperature_Low_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Supply_Temperature_Low_Reset_Setpoint">;
    /**
     * **[brick:Hot_Water_Supply_Temperature_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Supply_Temperature_Sensor)**
     *
     * Measures the temperature of water supplied by a hot water system
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    readonly Hot_Water_Supply_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Supply_Temperature_Sensor">;
    /**
     * **[brick:Hot_Water_System](https://brickschema.org/schema/Brick#Hot_Water_System)**
     *
     * The equipment, devices and conduits that handle the production and distribution of hot water in a building
     *
     * @type        class
     * @parent      brick:Water_System
     */
    readonly Hot_Water_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_System">;
    /**
     * **[brick:Hot_Water_System_Enable_Command](https://brickschema.org/schema/Brick#Hot_Water_System_Enable_Command)**
     *
     * Enables operation of the hot water system
     *
     * @type        class
     * @parent      brick:System_Enable_Command
     */
    readonly Hot_Water_System_Enable_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_System_Enable_Command">;
    /**
     * **[brick:Hot_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Hot_Water_Temperature_Setpoint)**
     *
     * Sets the temperature of hot water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    readonly Hot_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Temperature_Setpoint">;
    /**
     * **[brick:Hot_Water_Usage_Sensor](https://brickschema.org/schema/Brick#Hot_Water_Usage_Sensor)**
     *
     * Measures the amount of hot water that is consumed, over some period of time
     *
     * @type        class
     * @parent      brick:Water_Usage_Sensor
     */
    readonly Hot_Water_Usage_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Usage_Sensor">;
    /**
     * **[brick:Hot_Water_Valve](https://brickschema.org/schema/Brick#Hot_Water_Valve)**
     *
     * A valve regulating the flow of hot water
     *
     * @type        class
     * @parent      brick:Heating_Valve
     */
    readonly Hot_Water_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Hot_Water_Valve">;
    /**
     * **[brick:Humidification_Start_Stop_Status](https://brickschema.org/schema/Brick#Humidification_Start_Stop_Status)**
     *
     * @type        class
     * @parent      brick:Start_Stop_Status
     */
    readonly Humidification_Start_Stop_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Humidification_Start_Stop_Status">;
    /**
     * **[brick:Humidifier](https://brickschema.org/schema/Brick#Humidifier)**
     *
     * A device that adds moisture to air or other gases
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Humidifier: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Humidifier">;
    /**
     * **[brick:Humidifier_Fault_Status](https://brickschema.org/schema/Brick#Humidifier_Fault_Status)**
     *
     * Indicates the presence of a fault in a humidifier
     *
     * @type        class
     * @parent      brick:Fault_Status
     */
    readonly Humidifier_Fault_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Humidifier_Fault_Status">;
    /**
     * **[brick:Humidify_Command](https://brickschema.org/schema/Brick#Humidify_Command)**
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Humidify_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Humidify_Command">;
    /**
     * **[brick:Humidity](https://brickschema.org/schema/Brick#Humidity)**
     *
     * @type        instance
     */
    readonly Humidity: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Humidity">;
    /**
     * **[brick:Humidity_Alarm](https://brickschema.org/schema/Brick#Humidity_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with the concentration of water vapor in the air.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Humidity_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Humidity_Alarm">;
    /**
     * **[brick:Humidity_Parameter](https://brickschema.org/schema/Brick#Humidity_Parameter)**
     *
     * Parameters relevant to humidity-related systems and points
     *
     * @type        class
     * @parent      brick:Parameter
     */
    readonly Humidity_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Humidity_Parameter">;
    /**
     * **[brick:Humidity_Sensor](https://brickschema.org/schema/Brick#Humidity_Sensor)**
     *
     * Measures the concentration of water vapor in air
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Humidity_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Humidity_Sensor">;
    /**
     * **[brick:Humidity_Setpoint](https://brickschema.org/schema/Brick#Humidity_Setpoint)**
     *
     * Sets humidity
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Humidity_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Humidity_Setpoint">;
    /**
     * **[brick:Humidity_Tolerance_Parameter](https://brickschema.org/schema/Brick#Humidity_Tolerance_Parameter)**
     *
     * A parameter determining the difference between upper and lower limits of humidity.
     *
     * @type        class
     * @parent      brick:Humidity_Parameter
     */
    readonly Humidity_Tolerance_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Humidity_Tolerance_Parameter">;
    /**
     * **[brick:IDF](https://brickschema.org/schema/Brick#IDF)**
     *
     * An room for an intermediate distribution frame, where cables carrying signals from the main distrubtion frame terminate and then feed out to endpoints
     *
     * @type        class
     * @parent      brick:Distribution_Frame
     */
    readonly IDF: import("../index.js").Iri<"https://brickschema.org/schema/Brick#IDF">;
    /**
     * **[brick:Ice](https://brickschema.org/schema/Brick#Ice)**
     *
     * Water in its solid form
     *
     * @type        class
     * @parent      brick:Solid
     */
    readonly Ice: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Ice">;
    /**
     * **[brick:Ice_Tank_Leaving_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Ice_Tank_Leaving_Water_Temperature_Sensor)**
     *
     * Measures the temperature of water leaving an ice tank
     *
     * @type        class
     * @parent      brick:Leaving_Water_Temperature_Sensor
     */
    readonly Ice_Tank_Leaving_Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Ice_Tank_Leaving_Water_Temperature_Sensor">;
    /**
     * **[brick:Illuminance](https://brickschema.org/schema/Brick#Illuminance)**
     *
     * @type        instance
     */
    readonly Illuminance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Illuminance">;
    /**
     * **[brick:Illuminance_Sensor](https://brickschema.org/schema/Brick#Illuminance_Sensor)**
     *
     * Measures the total luminous flux incident on a surface, per unit area
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Illuminance_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Illuminance_Sensor">;
    /**
     * **[brick:Imbalance_Sensor](https://brickschema.org/schema/Brick#Imbalance_Sensor)**
     *
     * A sensor which measures difference (imbalance) between phases of an electrical system
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Imbalance_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Imbalance_Sensor">;
    /**
     * **[brick:Information_Area](https://brickschema.org/schema/Brick#Information_Area)**
     *
     * An information booth or kiosk where visitors would look for information
     *
     * @type        class
     * @parent      brick:Outdoor_Area
     */
    readonly Information_Area: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Information_Area">;
    /**
     * **[brick:Inside_Face_Surface_Temperature_Sensor](https://brickschema.org/schema/Brick#Inside_Face_Surface_Temperature_Sensor)**
     *
     * Measures the inside surface (relative to the space) of the radiant panel of the radiant heating and cooling HVAC system.
     *
     * @type        class
     * @parent      brick:Radiant_Panel_Temperature_Sensor
     */
    readonly Inside_Face_Surface_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Inside_Face_Surface_Temperature_Sensor">;
    /**
     * **[brick:Inside_Face_Surface_Temperature_Setpoint](https://brickschema.org/schema/Brick#Inside_Face_Surface_Temperature_Setpoint)**
     *
     * Sets temperature for the inside face surface temperature of the radiant panel.
     *
     * @type        class
     * @parent      brick:Radiant_Panel_Temperature_Setpoint
     */
    readonly Inside_Face_Surface_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Inside_Face_Surface_Temperature_Setpoint">;
    /**
     * **[brick:Intake_Air_Filter](https://brickschema.org/schema/Brick#Intake_Air_Filter)**
     *
     * Filters air intake
     *
     * @type        class
     * @parent      brick:Filter
     */
    readonly Intake_Air_Filter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Intake_Air_Filter">;
    /**
     * **[brick:Intake_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Intake_Air_Temperature_Sensor)**
     *
     * Measures air at the interface between the building and the outside
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Sensor
     */
    readonly Intake_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Intake_Air_Temperature_Sensor">;
    /**
     * **[brick:Integral_Gain_Parameter](https://brickschema.org/schema/Brick#Integral_Gain_Parameter)**
     *
     * @type        class
     * @parent      brick:Gain_Parameter
     */
    readonly Integral_Gain_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Integral_Gain_Parameter">;
    /**
     * **[brick:Integral_Time_Parameter](https://brickschema.org/schema/Brick#Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Time_Parameter
     */
    readonly Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Integral_Time_Parameter">;
    /**
     * **[brick:Intercom_Equipment](https://brickschema.org/schema/Brick#Intercom_Equipment)**
     *
     * @type        class
     * @parent      brick:Security_Equipment
     */
    readonly Intercom_Equipment: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Intercom_Equipment">;
    /**
     * **[brick:Interface](https://brickschema.org/schema/Brick#Interface)**
     *
     * A device that provides an occupant control over a lighting system
     *
     * @type        class
     * @parent      brick:Lighting_Equipment
     */
    readonly Interface: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Interface">;
    /**
     * **[brick:Intrusion_Detection_Equipment](https://brickschema.org/schema/Brick#Intrusion_Detection_Equipment)**
     *
     * @type        class
     * @parent      brick:Security_Equipment
     */
    readonly Intrusion_Detection_Equipment: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Intrusion_Detection_Equipment">;
    /**
     * **[brick:Inverter](https://brickschema.org/schema/Brick#Inverter)**
     *
     * A device that changes direct current into alternating current
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    readonly Inverter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Inverter">;
    /**
     * **[brick:Irradiance](https://brickschema.org/schema/Brick#Irradiance)**
     *
     * The power per unit area of electromagnetic radiation incident on a surface
     *
     * @type        instance
     */
    readonly Irradiance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Irradiance">;
    /**
     * **[brick:Isolation_Valve](https://brickschema.org/schema/Brick#Isolation_Valve)**
     *
     * A valve that stops the flow of a fluid, usually for maintenance or safety purposes
     *
     * @type        class
     * @parent      brick:Valve
     */
    readonly Isolation_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Isolation_Valve">;
    /**
     * **[brick:Janitor_Room](https://brickschema.org/schema/Brick#Janitor_Room)**
     *
     * A room set aside for the storage of cleaning equipment and supplies
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Janitor_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Janitor_Room">;
    /**
     * **[brick:Jet_Nozzle_Air_Diffuser](https://brickschema.org/schema/Brick#Jet_Nozzle_Air_Diffuser)**
     *
     * An air diffuser that is designed to produce high velocity discharge air stream to throw the air over a large distance or target the air stream to a localize area
     *
     * @type        class
     * @parent      brick:Air_Diffuser
     */
    readonly Jet_Nozzle_Air_Diffuser: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Jet_Nozzle_Air_Diffuser">;
    /**
     * **[brick:Laboratory](https://brickschema.org/schema/Brick#Laboratory)**
     *
     * facility acceptable to the local, national, or international recognized authority having jurisdiction and which provides uniform testing and examination procedures and standards for meeting design, manufacturing, and factory testing requirements.
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Laboratory: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Laboratory">;
    /**
     * **[brick:Laminar_Flow_Air_Diffuser](https://brickschema.org/schema/Brick#Laminar_Flow_Air_Diffuser)**
     *
     * An air diffuser that is designed for low discharge air speeds to provide uniform and unidirectional air pattern which minimizes room air entrainment
     *
     * @type        class
     * @parent      brick:Air_Diffuser
     */
    readonly Laminar_Flow_Air_Diffuser: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Laminar_Flow_Air_Diffuser">;
    /**
     * **[brick:Last_Fault_Code_Status](https://brickschema.org/schema/Brick#Last_Fault_Code_Status)**
     *
     * Indicates the last fault code that occurred
     *
     * @type        class
     * @parent      brick:Fault_Status
     */
    readonly Last_Fault_Code_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Last_Fault_Code_Status">;
    /**
     * **[brick:Lead_Lag_Command](https://brickschema.org/schema/Brick#Lead_Lag_Command)**
     *
     * Enables lead/lag operation
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Lead_Lag_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Lead_Lag_Command">;
    /**
     * **[brick:Lead_Lag_Status](https://brickschema.org/schema/Brick#Lead_Lag_Status)**
     *
     * Indicates if lead/lag operation is enabled
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Lead_Lag_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Lead_Lag_Status">;
    /**
     * **[brick:Lead_On_Off_Command](https://brickschema.org/schema/Brick#Lead_On_Off_Command)**
     *
     * Controls the active/inactive status of the "lead" part of a lead/lag system
     *
     * @type        class
     * @parent      brick:On_Off_Command
     */
    readonly Lead_On_Off_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Lead_On_Off_Command">;
    /**
     * **[brick:Leak_Alarm](https://brickschema.org/schema/Brick#Leak_Alarm)**
     *
     * An alarm that indicates leaks occured in systems containing fluids
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Leak_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Leak_Alarm">;
    /**
     * **[brick:Leaving_Water](https://brickschema.org/schema/Brick#Leaving_Water)**
     *
     * Water that is leaving a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Leaving_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Leaving_Water">;
    /**
     * **[brick:Leaving_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Leaving_Water_Flow_Sensor)**
     *
     * Measures the rate of flow of water that is leaving a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    readonly Leaving_Water_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Leaving_Water_Flow_Sensor">;
    /**
     * **[brick:Leaving_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Leaving_Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of leaving water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    readonly Leaving_Water_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Leaving_Water_Flow_Setpoint">;
    /**
     * **[brick:Leaving_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Leaving_Water_Temperature_Sensor)**
     *
     * Measures the temperature of water leaving a piece of equipment or system
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    readonly Leaving_Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Leaving_Water_Temperature_Sensor">;
    /**
     * **[brick:Leaving_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Leaving_Water_Temperature_Setpoint)**
     *
     * Sets temperature of leaving water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    readonly Leaving_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Leaving_Water_Temperature_Setpoint">;
    /**
     * **[brick:Level](https://brickschema.org/schema/Brick#Level)**
     *
     * Amount of substance in a container; typically measured in height
     *
     * @type        instance
     */
    readonly Level: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Level">;
    /**
     * **[brick:Library](https://brickschema.org/schema/Brick#Library)**
     *
     * A place for the storage and/or consumption of physical media, e.g. books, periodicals, and DVDs/CDs
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Library: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Library">;
    /**
     * **[brick:Lighting](https://brickschema.org/schema/Brick#Lighting)**
     *
     * @type        class
     * @parent      brick:Lighting_Equipment
     */
    readonly Lighting: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Lighting">;
    /**
     * **[brick:Lighting_Equipment](https://brickschema.org/schema/Brick#Lighting_Equipment)**
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Lighting_Equipment: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Lighting_Equipment">;
    /**
     * **[brick:Lighting_System](https://brickschema.org/schema/Brick#Lighting_System)**
     *
     * The equipment, devices and interfaces that serve or are a part of the lighting subsystem in a building
     *
     * @type        class
     * @parent      brick:System
     */
    readonly Lighting_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Lighting_System">;
    /**
     * **[brick:Lighting_Zone](https://brickschema.org/schema/Brick#Lighting_Zone)**
     *
     * @type        class
     * @parent      brick:Zone
     */
    readonly Lighting_Zone: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Lighting_Zone">;
    /**
     * **[brick:Limit](https://brickschema.org/schema/Brick#Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Setpoint.
     *
     * @type        class
     * @parent      brick:Parameter
     */
    readonly Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Limit">;
    /**
     * **[brick:Liquid](https://brickschema.org/schema/Brick#Liquid)**
     *
     * state of matter intermediate between crystalline substances and gases in which the volume of a substance, but not the shape, remains relatively constant.
     *
     * @type        class
     * @parent      brick:Fluid
     */
    readonly Liquid: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Liquid">;
    /**
     * **[brick:Liquid_CO2](https://brickschema.org/schema/Brick#Liquid_CO2)**
     *
     * Carbon Dioxide in the liquid phase
     *
     * @type        class
     * @parent      brick:Liquid
     */
    readonly Liquid_CO2: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Liquid_CO2">;
    /**
     * **[brick:Liquid_Detection_Alarm](https://brickschema.org/schema/Brick#Liquid_Detection_Alarm)**
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Liquid_Detection_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Liquid_Detection_Alarm">;
    /**
     * **[brick:Load_Current_Sensor](https://brickschema.org/schema/Brick#Load_Current_Sensor)**
     *
     * Measures the current consumed by a load
     *
     * @type        class
     * @parent      brick:Current_Sensor
     */
    readonly Load_Current_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Load_Current_Sensor">;
    /**
     * **[brick:Load_Parameter](https://brickschema.org/schema/Brick#Load_Parameter)**
     *
     * @type        class
     * @parent      brick:Parameter
     */
    readonly Load_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Load_Parameter">;
    /**
     * **[brick:Load_Setpoint](https://brickschema.org/schema/Brick#Load_Setpoint)**
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Load_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Load_Setpoint">;
    /**
     * **[brick:Load_Shed_Command](https://brickschema.org/schema/Brick#Load_Shed_Command)**
     *
     * Controls load shedding behavior provided by a control system
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Load_Shed_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Load_Shed_Command">;
    /**
     * **[brick:Load_Shed_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Load_Shed_Differential_Pressure_Setpoint)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint
     */
    readonly Load_Shed_Differential_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Load_Shed_Differential_Pressure_Setpoint">;
    /**
     * **[brick:Load_Shed_Setpoint](https://brickschema.org/schema/Brick#Load_Shed_Setpoint)**
     *
     * @type        class
     * @parent      brick:Load_Setpoint
     */
    readonly Load_Shed_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Load_Shed_Setpoint">;
    /**
     * **[brick:Load_Shed_Status](https://brickschema.org/schema/Brick#Load_Shed_Status)**
     *
     * Indicates if a load shedding policy is in effect
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Load_Shed_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Load_Shed_Status">;
    /**
     * **[brick:Loading_Dock](https://brickschema.org/schema/Brick#Loading_Dock)**
     *
     * A part of a facility where delivery trucks can load and unload. Usually partially enclosed with specific traffic lanes leading to the dock
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Loading_Dock: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Loading_Dock">;
    /**
     * **[brick:Lobby](https://brickschema.org/schema/Brick#Lobby)**
     *
     * A space just after the entrance to a building or other space of a building, where visitors can wait
     *
     * @type        class
     * @parent      brick:Common_Space
     */
    readonly Lobby: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Lobby">;
    /**
     * **[brick:Locally_On_Off_Status](https://brickschema.org/schema/Brick#Locally_On_Off_Status)**
     *
     * @type        class
     * @parent      brick:On_Off_Status
     */
    readonly Locally_On_Off_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Locally_On_Off_Status">;
    /**
     * **[brick:Location](https://brickschema.org/schema/Brick#Location)**
     *
     * @type        class
     * @parent      brick:Class
     */
    readonly Location: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Location">;
    /**
     * **[brick:Lockout_Status](https://brickschema.org/schema/Brick#Lockout_Status)**
     *
     * Indicates if a piece of equipment, system, or functionality has been locked out from operation
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Lockout_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Lockout_Status">;
    /**
     * **[brick:Lockout_Temperature_Differential_Parameter](https://brickschema.org/schema/Brick#Lockout_Temperature_Differential_Parameter)**
     *
     * @type        class
     * @parent      brick:Temperature_Parameter
     */
    readonly Lockout_Temperature_Differential_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Lockout_Temperature_Differential_Parameter">;
    /**
     * **[brick:Loop](https://brickschema.org/schema/Brick#Loop)**
     *
     * A collection of connected equipment; part of a System
     *
     * @type        class
     * @parent      brick:Collection
     */
    readonly Loop: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Loop">;
    /**
     * **[brick:Lounge](https://brickschema.org/schema/Brick#Lounge)**
     *
     * A room for lesiure activities or relaxing
     *
     * @type        class
     * @parent      brick:Common_Space
     */
    readonly Lounge: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Lounge">;
    /**
     * **[brick:Louver](https://brickschema.org/schema/Brick#Louver)**
     *
     * Device consisting of an assembly of parallel sloping vanes, intended to permit the passage of air while providing a measure of protection against environmental influences
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Louver: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Louver">;
    /**
     * **[brick:Low_Freeze_Protect_Temperature_Parameter](https://brickschema.org/schema/Brick#Low_Freeze_Protect_Temperature_Parameter)**
     *
     * @type        class
     * @parent      brick:Temperature_Parameter
     */
    readonly Low_Freeze_Protect_Temperature_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Low_Freeze_Protect_Temperature_Parameter">;
    /**
     * **[brick:Low_Humidity_Alarm](https://brickschema.org/schema/Brick#Low_Humidity_Alarm)**
     *
     * An alarm that indicates low concentration of water vapor in the air.
     *
     * @type        class
     * @parent      brick:Humidity_Alarm
     */
    readonly Low_Humidity_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Low_Humidity_Alarm">;
    /**
     * **[brick:Low_Humidity_Alarm_Parameter](https://brickschema.org/schema/Brick#Low_Humidity_Alarm_Parameter)**
     *
     * A parameter determining the humidity level at which to trigger a low humidity alarm
     *
     * @type        class
     * @parent      brick:Humidity_Parameter
     */
    readonly Low_Humidity_Alarm_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Low_Humidity_Alarm_Parameter">;
    /**
     * **[brick:Low_Outside_Air_Lockout_Temperature_Differential_Parameter](https://brickschema.org/schema/Brick#Low_Outside_Air_Lockout_Temperature_Differential_Parameter)**
     *
     * The lower bound of the outside air temperature lockout range
     *
     * @type        class
     * @parent      brick:Outside_Air_Lockout_Temperature_Differential_Parameter
     */
    readonly Low_Outside_Air_Lockout_Temperature_Differential_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Low_Outside_Air_Lockout_Temperature_Differential_Parameter">;
    /**
     * **[brick:Low_Outside_Air_Temperature_Enable_Differential_Sensor](https://brickschema.org/schema/Brick#Low_Outside_Air_Temperature_Enable_Differential_Sensor)**
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Enable_Differential_Sensor
     */
    readonly Low_Outside_Air_Temperature_Enable_Differential_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Low_Outside_Air_Temperature_Enable_Differential_Sensor">;
    /**
     * **[brick:Low_Outside_Air_Temperature_Enable_Setpoint](https://brickschema.org/schema/Brick#Low_Outside_Air_Temperature_Enable_Setpoint)**
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Setpoint
     */
    readonly Low_Outside_Air_Temperature_Enable_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Low_Outside_Air_Temperature_Enable_Setpoint">;
    /**
     * **[brick:Low_Return_Air_Temperature_Alarm](https://brickschema.org/schema/Brick#Low_Return_Air_Temperature_Alarm)**
     *
     * An alarm that indicates that return air temperature is too low
     *
     * @type        class
     * @parent      brick:Low_Temperature_Alarm
     */
    readonly Low_Return_Air_Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Low_Return_Air_Temperature_Alarm">;
    /**
     * **[brick:Low_Suction_Pressure_Alarm](https://brickschema.org/schema/Brick#Low_Suction_Pressure_Alarm)**
     *
     * An alarm that indicates a low suction pressure in the compressor in a refrigeration or air conditioning system.
     *
     * @type        class
     * @parent      brick:Pressure_Alarm
     */
    readonly Low_Suction_Pressure_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Low_Suction_Pressure_Alarm">;
    /**
     * **[brick:Low_Temperature_Alarm](https://brickschema.org/schema/Brick#Low_Temperature_Alarm)**
     *
     * An alarm that indicates low temperature.
     *
     * @type        class
     * @parent      brick:Temperature_Alarm
     */
    readonly Low_Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Low_Temperature_Alarm">;
    /**
     * **[brick:Low_Temperature_Alarm_Parameter](https://brickschema.org/schema/Brick#Low_Temperature_Alarm_Parameter)**
     *
     * A parameter determining the temperature level at which to trigger a low temperature alarm
     *
     * @type        class
     * @parent      brick:Temperature_Parameter
     */
    readonly Low_Temperature_Alarm_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Low_Temperature_Alarm_Parameter">;
    /**
     * **[brick:Lowest_Exhaust_Air_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Lowest_Exhaust_Air_Static_Pressure_Sensor)**
     *
     * The lowest observed static pressure of air in exhaust regions of an HVAC system over some period of time
     *
     * @type        class
     * @parent      brick:Exhaust_Air_Static_Pressure_Sensor
     */
    readonly Lowest_Exhaust_Air_Static_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Lowest_Exhaust_Air_Static_Pressure_Sensor">;
    /**
     * **[brick:Luminaire](https://brickschema.org/schema/Brick#Luminaire)**
     *
     * A complete lighting unit consisting of a lamp or lamps and ballast(s) (when applicable) together with the parts designed to distribute the light, to position and protect the lamps, and to connect the lamps to the power supply.
     *
     * @type        class
     * @parent      brick:Lighting
     */
    readonly Luminaire: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Luminaire">;
    /**
     * **[brick:Luminaire_Driver](https://brickschema.org/schema/Brick#Luminaire_Driver)**
     *
     * A power source for a luminaire
     *
     * @type        class
     * @parent      brick:Lighting
     */
    readonly Luminaire_Driver: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Luminaire_Driver">;
    /**
     * **[brick:Luminance](https://brickschema.org/schema/Brick#Luminance)**
     *
     * @type        instance
     */
    readonly Luminance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Luminance">;
    /**
     * **[brick:Luminance_Alarm](https://brickschema.org/schema/Brick#Luminance_Alarm)**
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Luminance_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Luminance_Alarm">;
    /**
     * **[brick:Luminance_Command](https://brickschema.org/schema/Brick#Luminance_Command)**
     *
     * Controls the amount of luminance delivered by a lighting system
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Luminance_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Luminance_Command">;
    /**
     * **[brick:Luminance_Sensor](https://brickschema.org/schema/Brick#Luminance_Sensor)**
     *
     * Measures the luminous intensity per unit area of light travelling in a given direction
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Luminance_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Luminance_Sensor">;
    /**
     * **[brick:Luminance_Setpoint](https://brickschema.org/schema/Brick#Luminance_Setpoint)**
     *
     * Sets luminance
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Luminance_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Luminance_Setpoint">;
    /**
     * **[brick:Luminous_Flux](https://brickschema.org/schema/Brick#Luminous_Flux)**
     *
     * @type        instance
     */
    readonly Luminous_Flux: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Luminous_Flux">;
    /**
     * **[brick:Luminous_Intensity](https://brickschema.org/schema/Brick#Luminous_Intensity)**
     *
     * @type        instance
     */
    readonly Luminous_Intensity: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Luminous_Intensity">;
    /**
     * **[brick:MAU](https://brickschema.org/schema/Brick#MAU)**
     *
     * See Makeup_Air_Unit
     *
     * @type        class
     * @parent      brick:AHU
     */
    readonly MAU: import("../index.js").Iri<"https://brickschema.org/schema/Brick#MAU">;
    /**
     * **[brick:MDF](https://brickschema.org/schema/Brick#MDF)**
     *
     * A room for the Main Distribution Frame, the central place of a building where cables carrying signals meet and connect to the outside world
     *
     * @type        class
     * @parent      brick:Distribution_Frame
     */
    readonly MDF: import("../index.js").Iri<"https://brickschema.org/schema/Brick#MDF">;
    /**
     * **[brick:Mail_Room](https://brickschema.org/schema/Brick#Mail_Room)**
     *
     * A room where mail is recieved and sorted for distribution to the rest of the building
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Mail_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Mail_Room">;
    /**
     * **[brick:Maintenance_Mode_Command](https://brickschema.org/schema/Brick#Maintenance_Mode_Command)**
     *
     * Controls whether or not a device or controller is operating in "Maintenance" mode
     *
     * @type        class
     * @parent      brick:Mode_Command
     */
    readonly Maintenance_Mode_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Maintenance_Mode_Command">;
    /**
     * **[brick:Maintenance_Required_Alarm](https://brickschema.org/schema/Brick#Maintenance_Required_Alarm)**
     *
     * An alarm that indicates that repair/maintenance is required on an associated device or equipment
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Maintenance_Required_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Maintenance_Required_Alarm">;
    /**
     * **[brick:Majlis](https://brickschema.org/schema/Brick#Majlis)**
     *
     * In Arab countries, an Majlis is a private lounge where visitors are recieved and entertained
     *
     * @type        class
     * @parent      brick:Lounge
     */
    readonly Majlis: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Majlis">;
    /**
     * **[brick:Makeup_Air_Unit](https://brickschema.org/schema/Brick#Makeup_Air_Unit)**
     *
     * A device designed to condition ventilation air introduced into a space or to replace air exhausted from a process or general area exhaust. The device may be used to prevent negative pressure within buildings or to reduce airborne contaminants in a space.
     *
     * @type        class
     * @parent      brick:AHU
     */
    readonly Makeup_Air_Unit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Makeup_Air_Unit">;
    /**
     * **[brick:Makeup_Water](https://brickschema.org/schema/Brick#Makeup_Water)**
     *
     * Water used used to makeup water loss through leaks, evaporation, or blowdown
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Makeup_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Makeup_Water">;
    /**
     * **[brick:Makeup_Water_Valve](https://brickschema.org/schema/Brick#Makeup_Water_Valve)**
     *
     * A valve regulating the flow of makeup water into a water holding tank, e.g. a cooling tower, hot water tank
     *
     * @type        class
     * @parent      brick:Water_Valve
     */
    readonly Makeup_Water_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Makeup_Water_Valve">;
    /**
     * **[brick:Manual_Auto_Status](https://brickschema.org/schema/Brick#Manual_Auto_Status)**
     *
     * Indicates if a system is under manual or automatic operation
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Manual_Auto_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Manual_Auto_Status">;
    /**
     * **[brick:Mass](https://brickschema.org/schema/Brick#Mass)**
     *
     * @type        instance
     */
    readonly Mass: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Mass">;
    /**
     * **[brick:Massage_Room](https://brickschema.org/schema/Brick#Massage_Room)**
     *
     * Usually adjunct to an athletic facility, a private/semi-private space where massages are performed
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Massage_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Massage_Room">;
    /**
     * **[brick:Max_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint_Limit
     */
    readonly Max_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Max_Air_Temperature_Setpoint)**
     *
     * Setpoint for maximum air temperature
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Max_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Air_Temperature_Setpoint">;
    /**
     * **[brick:Max_Chilled_Water_Differential_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Chilled_Water_Differential_Pressure_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Chilled_Water_Differential_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint_Limit
     */
    readonly Max_Chilled_Water_Differential_Pressure_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Chilled_Water_Differential_Pressure_Setpoint_Limit">;
    /**
     * **[brick:Max_Cooling_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Cooling_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Cooling_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Air_Flow_Setpoint_Limit
     */
    readonly Max_Cooling_Discharge_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Cooling_Discharge_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Cooling_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Cooling_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Cooling_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Air_Flow_Setpoint_Limit
     */
    readonly Max_Cooling_Supply_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Cooling_Supply_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Discharge_Air_Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Discharge_Air_Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Discharge_Air_Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Limit
     */
    readonly Max_Discharge_Air_Static_Pressure_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Discharge_Air_Static_Pressure_Setpoint_Limit">;
    /**
     * **[brick:Max_Discharge_Air_Temperature_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Discharge_Air_Temperature_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Discharge_Air_Temperature_Setpoint.
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint_Limit
     */
    readonly Max_Discharge_Air_Temperature_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Discharge_Air_Temperature_Setpoint_Limit">;
    /**
     * **[brick:Max_Frequency_Command](https://brickschema.org/schema/Brick#Max_Frequency_Command)**
     *
     * Sets the maximum permitted frequency
     *
     * @type        class
     * @parent      brick:Frequency_Command
     */
    readonly Max_Frequency_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Frequency_Command">;
    /**
     * **[brick:Max_Heating_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Heating_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Heating_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Air_Flow_Setpoint_Limit
     */
    readonly Max_Heating_Discharge_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Heating_Discharge_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Heating_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Heating_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Heating_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Air_Flow_Setpoint_Limit
     */
    readonly Max_Heating_Supply_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Heating_Supply_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Hot_Water_Differential_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Hot_Water_Differential_Pressure_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Hot_Water_Differential_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint_Limit
     */
    readonly Max_Hot_Water_Differential_Pressure_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Hot_Water_Differential_Pressure_Setpoint_Limit">;
    /**
     * **[brick:Max_Limit](https://brickschema.org/schema/Brick#Max_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    readonly Max_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Limit">;
    /**
     * **[brick:Max_Load_Setpoint](https://brickschema.org/schema/Brick#Max_Load_Setpoint)**
     *
     * @type        class
     * @parent      brick:Load_Parameter
     */
    readonly Max_Load_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Load_Setpoint">;
    /**
     * **[brick:Max_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Occupied_Cooling_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Cooling_Discharge_Air_Flow_Setpoint_Limit
     */
    readonly Max_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Occupied_Cooling_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Cooling_Supply_Air_Flow_Setpoint_Limit
     */
    readonly Max_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Occupied_Heating_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Heating_Discharge_Air_Flow_Setpoint_Limit
     */
    readonly Max_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Occupied_Heating_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Heating_Supply_Air_Flow_Setpoint_Limit
     */
    readonly Max_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Position_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Position_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Position_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Limit
     */
    readonly Max_Position_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Position_Setpoint_Limit">;
    /**
     * **[brick:Max_Speed_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Speed_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Speed_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Limit
     */
    readonly Max_Speed_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Speed_Setpoint_Limit">;
    /**
     * **[brick:Max_Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Limit
     */
    readonly Max_Static_Pressure_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Static_Pressure_Setpoint_Limit">;
    /**
     * **[brick:Max_Supply_Air_Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Supply_Air_Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Supply_Air_Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Limit
     */
    readonly Max_Supply_Air_Static_Pressure_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Supply_Air_Static_Pressure_Setpoint_Limit">;
    /**
     * **[brick:Max_Temperature_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Temperature_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Temperature_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Limit
     */
    readonly Max_Temperature_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Temperature_Setpoint_Limit">;
    /**
     * **[brick:Max_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Unoccupied_Cooling_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Cooling_Discharge_Air_Flow_Setpoint_Limit
     */
    readonly Max_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Unoccupied_Cooling_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Cooling_Supply_Air_Flow_Setpoint_Limit
     */
    readonly Max_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Unoccupied_Heating_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Heating_Discharge_Air_Flow_Setpoint_Limit
     */
    readonly Max_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Max_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places an upper bound on the range of permitted values of a Unoccupied_Heating_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Max_Heating_Supply_Air_Flow_Setpoint_Limit
     */
    readonly Max_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Max_Water_Level_Alarm](https://brickschema.org/schema/Brick#Max_Water_Level_Alarm)**
     *
     * Alarm indicating that the maximum water level was reached
     *
     * @type        class
     * @parent      brick:Water_Level_Alarm
     */
    readonly Max_Water_Level_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Water_Level_Alarm">;
    /**
     * **[brick:Max_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Max_Water_Temperature_Setpoint)**
     *
     * Setpoint for max water temperature
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    readonly Max_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Max_Water_Temperature_Setpoint">;
    /**
     * **[brick:Measurable](https://brickschema.org/schema/Brick#Measurable)**
     *
     * @type        class
     * @parent      brick:Class
     */
    readonly Measurable: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Measurable">;
    /**
     * **[brick:Mechanical_Room](https://brickschema.org/schema/Brick#Mechanical_Room)**
     *
     * A class of service rooms where mechanical equipment (HVAC) operates
     *
     * @type        class
     * @parent      brick:Service_Room
     */
    readonly Mechanical_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Mechanical_Room">;
    /**
     * **[brick:Media_Hot_Desk](https://brickschema.org/schema/Brick#Media_Hot_Desk)**
     *
     * A non-enclosed space used by members of the media temporarily to cover an event while they are present at a venue
     *
     * @type        class
     * @parent      brick:Space
     */
    readonly Media_Hot_Desk: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Media_Hot_Desk">;
    /**
     * **[brick:Media_Production_Room](https://brickschema.org/schema/Brick#Media_Production_Room)**
     *
     * A enclosed space used by media professionals for the production of media
     *
     * @type        class
     * @parent      brick:Media_Room
     */
    readonly Media_Production_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Media_Production_Room">;
    /**
     * **[brick:Media_Room](https://brickschema.org/schema/Brick#Media_Room)**
     *
     * A class of spaces related to the creation of media
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Media_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Media_Room">;
    /**
     * **[brick:Medical_Room](https://brickschema.org/schema/Brick#Medical_Room)**
     *
     * A class of rooms used for medical purposes
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Medical_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medical_Room">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Reset_Status](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Reset_Status)**
     *
     * @type        class
     * @parent      brick:Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Status
     */
    readonly Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Reset_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Reset_Status">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Setpoint)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Setpoint
     */
    readonly Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Setpoint">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Status](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Load_Shed_Status
     */
    readonly Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Load_Shed_Status">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Sensor)**
     *
     * Measures the difference in water pressure between sections of a medium temperature hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_Differential_Pressure_Sensor
     */
    readonly Medium_Temperature_Hot_Water_Differential_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Sensor">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Setpoint)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Differential_Pressure_Setpoint
     */
    readonly Medium_Temperature_Hot_Water_Differential_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Differential_Pressure_Setpoint">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Discharge_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Discharge_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_High_Reset_Setpoint
     */
    readonly Medium_Temperature_Hot_Water_Discharge_Temperature_High_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Discharge_Temperature_High_Reset_Setpoint">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Discharge_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Discharge_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Low_Reset_Setpoint
     */
    readonly Medium_Temperature_Hot_Water_Discharge_Temperature_Low_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Discharge_Temperature_Low_Reset_Setpoint">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Return_Temperature_Sensor](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Return_Temperature_Sensor)**
     *
     * Measures the temperature of medium-temperature hot water returned to a hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_Return_Temperature_Sensor
     */
    readonly Medium_Temperature_Hot_Water_Return_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Return_Temperature_Sensor">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Supply_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_High_Reset_Setpoint
     */
    readonly Medium_Temperature_Hot_Water_Supply_Temperature_High_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_High_Reset_Setpoint">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Setpoint)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Setpoint
     */
    readonly Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Setpoint">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Status](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Status)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Load_Shed_Status
     */
    readonly Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_Load_Shed_Status">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Supply_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Low_Reset_Setpoint
     */
    readonly Medium_Temperature_Hot_Water_Supply_Temperature_Low_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_Low_Reset_Setpoint">;
    /**
     * **[brick:Medium_Temperature_Hot_Water_Supply_Temperature_Sensor](https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_Sensor)**
     *
     * Measures the temperature of medium-temperature hot water supplied by a hot water system
     *
     * @type        class
     * @parent      brick:Hot_Water_Supply_Temperature_Sensor
     */
    readonly Medium_Temperature_Hot_Water_Supply_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Medium_Temperature_Hot_Water_Supply_Temperature_Sensor">;
    /**
     * **[brick:Meter](https://brickschema.org/schema/Brick#Meter)**
     *
     * A device that measure usage or consumption of some media --- typically a form energy or power.
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Meter">;
    /**
     * **[brick:MethaneConcentration](https://brickschema.org/schema/Brick#Methane_Concentration)**
     *
     * The concentration of methane in a medium
     *
     * @type        instance
     */
    readonly Methane_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Methane_Concentration">;
    /**
     * **[brick:Methane_Level_Sensor](https://brickschema.org/schema/Brick#Methane_Level_Sensor)**
     *
     * Measures the concentration of methane in air
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    readonly Methane_Level_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Methane_Level_Sensor">;
    /**
     * **[brick:Min_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint_Limit
     */
    readonly Min_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Min_Air_Temperature_Setpoint)**
     *
     * Setpoint for minimum air temperature
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Min_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Air_Temperature_Setpoint">;
    /**
     * **[brick:Min_Chilled_Water_Differential_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Chilled_Water_Differential_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Chilled_Water_Differential_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint_Limit
     */
    readonly Min_Chilled_Water_Differential_Pressure_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Chilled_Water_Differential_Pressure_Setpoint_Limit">;
    /**
     * **[brick:Min_Cooling_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Cooling_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Cooling_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Air_Flow_Setpoint_Limit
     */
    readonly Min_Cooling_Discharge_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Cooling_Discharge_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Cooling_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Cooling_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Cooling_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Air_Flow_Setpoint_Limit
     */
    readonly Min_Cooling_Supply_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Cooling_Supply_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Discharge_Air_Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Discharge_Air_Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Discharge_Air_Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Limit
     */
    readonly Min_Discharge_Air_Static_Pressure_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Discharge_Air_Static_Pressure_Setpoint_Limit">;
    /**
     * **[brick:Min_Discharge_Air_Temperature_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Discharge_Air_Temperature_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Discharge_Air_Temperature_Setpoint.
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint_Limit
     */
    readonly Min_Discharge_Air_Temperature_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Discharge_Air_Temperature_Setpoint_Limit">;
    /**
     * **[brick:Min_Fresh_Air_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Fresh_Air_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Fresh_Air_Setpoint.
     *
     * @type        class
     * @parent      brick:Fresh_Air_Setpoint_Limit
     */
    readonly Min_Fresh_Air_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Fresh_Air_Setpoint_Limit">;
    /**
     * **[brick:Min_Heating_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Heating_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Heating_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Air_Flow_Setpoint_Limit
     */
    readonly Min_Heating_Discharge_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Heating_Discharge_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Heating_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Heating_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Heating_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Air_Flow_Setpoint_Limit
     */
    readonly Min_Heating_Supply_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Heating_Supply_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Hot_Water_Differential_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Hot_Water_Differential_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Hot_Water_Differential_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint_Limit
     */
    readonly Min_Hot_Water_Differential_Pressure_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Hot_Water_Differential_Pressure_Setpoint_Limit">;
    /**
     * **[brick:Min_Limit](https://brickschema.org/schema/Brick#Min_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    readonly Min_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Limit">;
    /**
     * **[brick:Min_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Occupied_Cooling_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Cooling_Discharge_Air_Flow_Setpoint_Limit
     */
    readonly Min_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Occupied_Cooling_Discharge_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Occupied_Cooling_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Cooling_Supply_Air_Flow_Setpoint_Limit
     */
    readonly Min_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Occupied_Cooling_Supply_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Occupied_Heating_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Heating_Discharge_Air_Flow_Setpoint_Limit
     */
    readonly Min_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Occupied_Heating_Discharge_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Occupied_Heating_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Heating_Supply_Air_Flow_Setpoint_Limit
     */
    readonly Min_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Occupied_Heating_Supply_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Outside_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Outside_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Outside_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Air_Flow_Setpoint_Limit
     */
    readonly Min_Outside_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Outside_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Position_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Position_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Position_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Limit
     */
    readonly Min_Position_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Position_Setpoint_Limit">;
    /**
     * **[brick:Min_Speed_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Speed_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Speed_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Limit
     */
    readonly Min_Speed_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Speed_Setpoint_Limit">;
    /**
     * **[brick:Min_Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Limit
     */
    readonly Min_Static_Pressure_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Static_Pressure_Setpoint_Limit">;
    /**
     * **[brick:Min_Supply_Air_Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Supply_Air_Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Supply_Air_Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Limit
     */
    readonly Min_Supply_Air_Static_Pressure_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Supply_Air_Static_Pressure_Setpoint_Limit">;
    /**
     * **[brick:Min_Temperature_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Temperature_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Temperature_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Limit
     */
    readonly Min_Temperature_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Temperature_Setpoint_Limit">;
    /**
     * **[brick:Min_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Unoccupied_Cooling_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Cooling_Discharge_Air_Flow_Setpoint_Limit
     */
    readonly Min_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Unoccupied_Cooling_Discharge_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Unoccupied_Cooling_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Cooling_Supply_Air_Flow_Setpoint_Limit
     */
    readonly Min_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Unoccupied_Cooling_Supply_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Unoccupied_Heating_Discharge_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Heating_Discharge_Air_Flow_Setpoint_Limit
     */
    readonly Min_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Unoccupied_Heating_Discharge_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit](https://brickschema.org/schema/Brick#Min_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit)**
     *
     * A parameter that places a lower bound on the range of permitted values of a Unoccupied_Heating_Supply_Air_Flow_Setpoint.
     *
     * @type        class
     * @parent      brick:Min_Heating_Supply_Air_Flow_Setpoint_Limit
     */
    readonly Min_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Unoccupied_Heating_Supply_Air_Flow_Setpoint_Limit">;
    /**
     * **[brick:Min_Water_Level_Alarm](https://brickschema.org/schema/Brick#Min_Water_Level_Alarm)**
     *
     * Alarm indicating that the minimum water level was reached
     *
     * @type        class
     * @parent      brick:Water_Level_Alarm
     */
    readonly Min_Water_Level_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Water_Level_Alarm">;
    /**
     * **[brick:Min_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Min_Water_Temperature_Setpoint)**
     *
     * Setpoint for min water temperature
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    readonly Min_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Min_Water_Temperature_Setpoint">;
    /**
     * **[brick:Mixed_Air](https://brickschema.org/schema/Brick#Mixed_Air)**
     *
     * (1) air that contains two or more streams of air. (2) combined outdoor air and recirculated air.
     *
     * @type        class
     * @parent      brick:Air
     */
    readonly Mixed_Air: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Mixed_Air">;
    /**
     * **[brick:Mixed_Air_Filter](https://brickschema.org/schema/Brick#Mixed_Air_Filter)**
     *
     * A filter that is applied to the mixture of recirculated and outside air
     *
     * @type        class
     * @parent      brick:Filter
     */
    readonly Mixed_Air_Filter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Mixed_Air_Filter">;
    /**
     * **[brick:Mixed_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Mixed_Air_Humidity_Sensor)**
     *
     * Measures the humidity of mixed air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    readonly Mixed_Air_Humidity_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Mixed_Air_Humidity_Sensor">;
    /**
     * **[brick:Mixed_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Mixed_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for mixed air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    readonly Mixed_Air_Humidity_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Mixed_Air_Humidity_Setpoint">;
    /**
     * **[brick:Mixed_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Mixed_Air_Temperature_Sensor)**
     *
     * Measures the temperature of mixed air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    readonly Mixed_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Mixed_Air_Temperature_Sensor">;
    /**
     * **[brick:Mixed_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Mixed_Air_Temperature_Setpoint)**
     *
     * Sets temperature of mixed air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Mixed_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Mixed_Air_Temperature_Setpoint">;
    /**
     * **[brick:Mixed_Damper](https://brickschema.org/schema/Brick#Mixed_Damper)**
     *
     * A damper that modulates the flow of the mixed outside and return air streams
     *
     * @type        class
     * @parent      brick:Damper
     */
    readonly Mixed_Damper: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Mixed_Damper">;
    /**
     * **[brick:Mode_Command](https://brickschema.org/schema/Brick#Mode_Command)**
     *
     * Controls the operating mode of a device or controller
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Mode_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Mode_Command">;
    /**
     * **[brick:Mode_Status](https://brickschema.org/schema/Brick#Mode_Status)**
     *
     * Indicates which mode a system, device or control loop is currently in
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Mode_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Mode_Status">;
    /**
     * **[brick:Motion_Sensor](https://brickschema.org/schema/Brick#Motion_Sensor)**
     *
     * Detects the presence of motion in some area
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Motion_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Motion_Sensor">;
    /**
     * **[brick:Motor](https://brickschema.org/schema/Brick#Motor)**
     *
     * A machine in which power is applied to do work by the conversion of various forms of energy into mechanical force and motion.
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Motor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Motor">;
    /**
     * **[brick:Motor_Control_Center](https://brickschema.org/schema/Brick#Motor_Control_Center)**
     *
     * The Motor Control Center is a specialized type of switchgear which provides electrical power to major mechanical systems in the building such as HVAC components.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    readonly Motor_Control_Center: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Motor_Control_Center">;
    /**
     * **[brick:Motor_Current_Sensor](https://brickschema.org/schema/Brick#Motor_Current_Sensor)**
     *
     * Measures the current consumed by a motor
     *
     * @type        class
     * @parent      brick:Current_Sensor
     */
    readonly Motor_Current_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Motor_Current_Sensor">;
    /**
     * **[brick:Motor_Direction_Status](https://brickschema.org/schema/Brick#Motor_Direction_Status)**
     *
     * Indicates which direction a motor is operating in, e.g. forward or reverse
     *
     * @type        class
     * @parent      brick:Direction_Status
     */
    readonly Motor_Direction_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Motor_Direction_Status">;
    /**
     * **[brick:Motor_On_Off_Status](https://brickschema.org/schema/Brick#Motor_On_Off_Status)**
     *
     * @type        class
     * @parent      brick:On_Off_Status
     */
    readonly Motor_On_Off_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Motor_On_Off_Status">;
    /**
     * **[brick:Motor_Speed_Sensor](https://brickschema.org/schema/Brick#Motor_Speed_Sensor)**
     *
     * @type        class
     * @parent      brick:Speed_Sensor
     */
    readonly Motor_Speed_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Motor_Speed_Sensor">;
    /**
     * **[brick:Motor_Torque_Sensor](https://brickschema.org/schema/Brick#Motor_Torque_Sensor)**
     *
     * Measures the torque, or rotating power, of a motor
     *
     * @type        class
     * @parent      brick:Torque_Sensor
     */
    readonly Motor_Torque_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Motor_Torque_Sensor">;
    /**
     * **[brick:PM10Concentration](https://brickschema.org/schema/Brick#NO2_Concentration)**
     *
     * The concentration of nitrogen dioxide in a medium
     *
     * @type        instance
     */
    readonly NO2_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#NO2_Concentration">;
    /**
     * **[brick:NO2_Level_Sensor](https://brickschema.org/schema/Brick#NO2_Level_Sensor)**
     *
     * Measures the concentration of NO2 in air
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    readonly NO2_Level_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#NO2_Level_Sensor">;
    /**
     * **[brick:NVR](https://brickschema.org/schema/Brick#NVR)**
     *
     * @type        class
     * @parent      brick:Video_Surveillance_Equipment
     */
    readonly NVR: import("../index.js").Iri<"https://brickschema.org/schema/Brick#NVR">;
    /**
     * **[brick:Natural_Gas](https://brickschema.org/schema/Brick#Natural_Gas)**
     *
     * Fossil fuel energy source consisting largely of methane and other hydrocarbons
     *
     * @type        class
     * @parent      brick:Gas
     */
    readonly Natural_Gas: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Natural_Gas">;
    /**
     * **[brick:Natural_Gas_Boiler](https://brickschema.org/schema/Brick#Natural_Gas_Boiler)**
     *
     * A closed, pressure vessel that uses natural gas for heating water or other fluids to supply steam or hot water for heating, humidification, or other applications.
     *
     * @type        class
     * @parent      brick:Boiler
     */
    readonly Natural_Gas_Boiler: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Natural_Gas_Boiler">;
    /**
     * **[brick:Network_Video_Recorder](https://brickschema.org/schema/Brick#Network_Video_Recorder)**
     *
     * @type        class
     * @parent      brick:Video_Surveillance_Equipment
     */
    readonly Network_Video_Recorder: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Network_Video_Recorder">;
    /**
     * **[brick:No_Water_Alarm](https://brickschema.org/schema/Brick#No_Water_Alarm)**
     *
     * Alarm indicating that there is no water in the equipment or system
     *
     * @type        class
     * @parent      brick:Water_Alarm
     */
    readonly No_Water_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#No_Water_Alarm">;
    /**
     * **[brick:Noncondensing_Natural_Gas_Boiler](https://brickschema.org/schema/Brick#Noncondensing_Natural_Gas_Boiler)**
     *
     * A closed, pressure vessel that uses natural gas with no system to capture latent heat for heating water or other fluids to supply steam or hot water for heating, humidification, or other applications.
     *
     * @type        class
     * @parent      brick:Natural_Gas_Boiler
     */
    readonly Noncondensing_Natural_Gas_Boiler: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Noncondensing_Natural_Gas_Boiler">;
    /**
     * **[brick:Occupancy](https://brickschema.org/schema/Brick#Occupancy)**
     *
     * @type        instance
     */
    readonly Occupancy: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupancy">;
    /**
     * **[brick:Occupancy_Command](https://brickschema.org/schema/Brick#Occupancy_Command)**
     *
     * Controls whether or not a device or controller is operating in "Occupied" mode
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Occupancy_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupancy_Command">;
    /**
     * **[brick:Occupancy_Count](https://brickschema.org/schema/Brick#Occupancy_Count)**
     *
     * Number of people in an area
     *
     * @type        instance
     */
    readonly Occupancy_Count: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupancy_Count">;
    /**
     * **[brick:Occupancy_Percentage](https://brickschema.org/schema/Brick#Occupancy_Percentage)**
     *
     * Percent of total occupancy of space that is occupied
     *
     * @type        instance
     */
    readonly Occupancy_Percentage: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupancy_Percentage">;
    /**
     * **[brick:Occupancy_Sensor](https://brickschema.org/schema/Brick#Occupancy_Sensor)**
     *
     * Detects occupancy of some space or area
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Occupancy_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupancy_Sensor">;
    /**
     * **[brick:Occupancy_Status](https://brickschema.org/schema/Brick#Occupancy_Status)**
     *
     * Indicates if a room or space is occupied
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Occupancy_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupancy_Status">;
    /**
     * **[brick:Occupied_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Occupied_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Occupied_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Air_Temperature_Setpoint">;
    /**
     * **[brick:Occupied_Cooling_Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Occupied_Cooling_Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow for cooling when occupied
     *
     * @type        class
     * @parent      brick:Cooling_Discharge_Air_Flow_Setpoint
     */
    readonly Occupied_Cooling_Discharge_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Cooling_Discharge_Air_Flow_Setpoint">;
    /**
     * **[brick:Occupied_Cooling_Supply_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Occupied_Cooling_Supply_Air_Flow_Setpoint)**
     *
     * Sets supply air flow rate for cooling when occupied
     *
     * @type        class
     * @parent      brick:Cooling_Supply_Air_Flow_Setpoint
     */
    readonly Occupied_Cooling_Supply_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Cooling_Supply_Air_Flow_Setpoint">;
    /**
     * **[brick:Occupied_Cooling_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Occupied_Cooling_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature for cooling when occupied
     *
     * @type        class
     * @parent      brick:Cooling_Temperature_Setpoint
     */
    readonly Occupied_Cooling_Temperature_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Cooling_Temperature_Deadband_Setpoint">;
    /**
     * **[brick:Occupied_Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Occupied_Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow when occupied
     *
     * @type        class
     * @parent      brick:Discharge_Air_Flow_Setpoint
     */
    readonly Occupied_Discharge_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Discharge_Air_Flow_Setpoint">;
    /**
     * **[brick:Occupied_Discharge_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Occupied_Discharge_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint
     */
    readonly Occupied_Discharge_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Discharge_Air_Temperature_Setpoint">;
    /**
     * **[brick:Occupied_Heating_Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Occupied_Heating_Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow for heating when occupied
     *
     * @type        class
     * @parent      brick:Heating_Discharge_Air_Flow_Setpoint
     */
    readonly Occupied_Heating_Discharge_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Heating_Discharge_Air_Flow_Setpoint">;
    /**
     * **[brick:Occupied_Heating_Supply_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Occupied_Heating_Supply_Air_Flow_Setpoint)**
     *
     * Sets supply air flow rate for heating when occupied
     *
     * @type        class
     * @parent      brick:Heating_Supply_Air_Flow_Setpoint
     */
    readonly Occupied_Heating_Supply_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Heating_Supply_Air_Flow_Setpoint">;
    /**
     * **[brick:Occupied_Heating_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Occupied_Heating_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature for heating when occupied
     *
     * @type        class
     * @parent      brick:Heating_Temperature_Setpoint
     */
    readonly Occupied_Heating_Temperature_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Heating_Temperature_Deadband_Setpoint">;
    /**
     * **[brick:Occupied_Mode_Status](https://brickschema.org/schema/Brick#Occupied_Mode_Status)**
     *
     * Indicates if a system, device or control loop is in "Occupied" mode
     *
     * @type        class
     * @parent      brick:Mode_Status
     */
    readonly Occupied_Mode_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Mode_Status">;
    /**
     * **[brick:Occupied_Return_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Occupied_Return_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Occupied_Air_Temperature_Setpoint
     */
    readonly Occupied_Return_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Return_Air_Temperature_Setpoint">;
    /**
     * **[brick:Occupied_Room_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Occupied_Room_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Occupied_Air_Temperature_Setpoint
     */
    readonly Occupied_Room_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Room_Air_Temperature_Setpoint">;
    /**
     * **[brick:Occupied_Supply_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Occupied_Supply_Air_Flow_Setpoint)**
     *
     * Sets supply air flow rate when occupied
     *
     * @type        class
     * @parent      brick:Supply_Air_Flow_Setpoint
     */
    readonly Occupied_Supply_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Supply_Air_Flow_Setpoint">;
    /**
     * **[brick:Occupied_Supply_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Occupied_Supply_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Occupied_Air_Temperature_Setpoint
     */
    readonly Occupied_Supply_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Supply_Air_Temperature_Setpoint">;
    /**
     * **[brick:Occupied_Zone_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Occupied_Zone_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Occupied_Air_Temperature_Setpoint
     */
    readonly Occupied_Zone_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Occupied_Zone_Air_Temperature_Setpoint">;
    /**
     * **[brick:Off_Command](https://brickschema.org/schema/Brick#Off_Command)**
     *
     * An Off Command controls or reports the binary 'off' status of a control loop, relay or equipment activity. It can only be used to stop/deactivate an associated equipment or process, or determine that the related entity is 'off'
     *
     * @type        class
     * @parent      brick:On_Off_Command
     */
    readonly Off_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Off_Command">;
    /**
     * **[brick:Off_Status](https://brickschema.org/schema/Brick#Off_Status)**
     *
     * Indicates if a control loop, relay or equipment is off
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Off_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Off_Status">;
    /**
     * **[brick:Office](https://brickschema.org/schema/Brick#Office)**
     *
     * A class of rooms dedicated for work or study
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Office: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Office">;
    /**
     * **[brick:Office_Kitchen](https://brickschema.org/schema/Brick#Office_Kitchen)**
     *
     * A common space, usually near or in a breakroom, where minor food preperation occurs
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Office_Kitchen: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Office_Kitchen">;
    /**
     * **[brick:Oil](https://brickschema.org/schema/Brick#Oil)**
     *
     * a viscous liquid derived from petroleum, especially for use as a fuel or lubricant.
     *
     * @type        class
     * @parent      brick:Liquid
     */
    readonly Oil: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Oil">;
    /**
     * **[brick:On_Command](https://brickschema.org/schema/Brick#On_Command)**
     *
     * An On Command controls or reports the binary 'on' status of a control loop, relay or equipment activity. It can only be used to start/activate an associated equipment or process, or determine that the related entity is 'on'
     *
     * @type        class
     * @parent      brick:On_Off_Command
     */
    readonly On_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#On_Command">;
    /**
     * **[brick:On_Off_Command](https://brickschema.org/schema/Brick#On_Off_Command)**
     *
     * An On/Off Command controls or reports the binary status of a control loop, relay or equipment activity
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly On_Off_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#On_Off_Command">;
    /**
     * **[brick:On_Off_Status](https://brickschema.org/schema/Brick#On_Off_Status)**
     *
     * Indicates the on/off status of a control loop, relay or equipment
     *
     * @type        class
     * @parent      brick:Off_Status
     */
    readonly On_Off_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#On_Off_Status">;
    /**
     * **[brick:On_Status](https://brickschema.org/schema/Brick#On_Status)**
     *
     * Indicates if a control loop, relay or equipment is on
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly On_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#On_Status">;
    /**
     * **[brick:On_Timer_Sensor](https://brickschema.org/schema/Brick#On_Timer_Sensor)**
     *
     * Measures the duration for which a device was in an active or "on" state
     *
     * @type        class
     * @parent      brick:Duration_Sensor
     */
    readonly On_Timer_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#On_Timer_Sensor">;
    /**
     * **[brick:Open_Close_Status](https://brickschema.org/schema/Brick#Open_Close_Status)**
     *
     * Indicates the open/close status of a device such as a damper or valve
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Open_Close_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Open_Close_Status">;
    /**
     * **[brick:Open_Heating_Valve_Outside_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Open_Heating_Valve_Outside_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Heating_Temperature_Setpoint
     */
    readonly Open_Heating_Valve_Outside_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Open_Heating_Valve_Outside_Air_Temperature_Setpoint">;
    /**
     * **[brick:Open_Office](https://brickschema.org/schema/Brick#Open_Office)**
     *
     * An open space used for work or study by mulitple people. Usuaully subdivided into cubicles or desks
     *
     * @type        class
     * @parent      brick:Office
     */
    readonly Open_Office: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Open_Office">;
    /**
     * **[brick:Operating_Mode_Status](https://brickschema.org/schema/Brick#Operating_Mode_Status)**
     *
     * Indicates the current operating mode of a system, device or control loop
     *
     * @type        class
     * @parent      brick:Mode_Status
     */
    readonly Operating_Mode_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Operating_Mode_Status">;
    /**
     * **[brick:Operative_Temperature](https://brickschema.org/schema/Brick#Operative_Temperature)**
     *
     * The uniform temperature of an imaginary black enclosure in which an occupant would exchange the same amount of heat by radiation plus convection as in the actual nonuniform environment (https://en.wikipedia.org/wiki/Operative_temperature)
     *
     * @type        instance
     */
    readonly Operative_Temperature: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Operative_Temperature">;
    /**
     * **[brick:Outdoor_Area](https://brickschema.org/schema/Brick#Outdoor_Area)**
     *
     * A class of spaces that exist outside of a building
     *
     * @type        class
     * @parent      brick:Location
     */
    readonly Outdoor_Area: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outdoor_Area">;
    /**
     * **[brick:Output_Frequency_Sensor](https://brickschema.org/schema/Brick#Output_Frequency_Sensor)**
     *
     * @type        class
     * @parent      brick:Frequency_Sensor
     */
    readonly Output_Frequency_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Output_Frequency_Sensor">;
    /**
     * **[brick:Output_Voltage_Sensor](https://brickschema.org/schema/Brick#Output_Voltage_Sensor)**
     *
     * Measures the voltage output by some process or device
     *
     * @type        class
     * @parent      brick:Voltage_Sensor
     */
    readonly Output_Voltage_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Output_Voltage_Sensor">;
    /**
     * **[brick:Outside](https://brickschema.org/schema/Brick#Outside)**
     *
     * @type        class
     * @parent      brick:Location
     */
    readonly Outside: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside">;
    /**
     * **[brick:Outside_Air](https://brickschema.org/schema/Brick#Outside_Air)**
     *
     * air external to a defined zone (e.g., corridors).
     *
     * @type        class
     * @parent      brick:Air
     */
    readonly Outside_Air: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air">;
    /**
     * **[brick:Outside_Air_CO2_Sensor](https://brickschema.org/schema/Brick#Outside_Air_CO2_Sensor)**
     *
     * Measures the concentration of CO2 in outside air
     *
     * @type        class
     * @parent      brick:CO2_Sensor
     */
    readonly Outside_Air_CO2_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_CO2_Sensor">;
    /**
     * **[brick:Outside_Air_CO_Sensor](https://brickschema.org/schema/Brick#Outside_Air_CO_Sensor)**
     *
     * Measures the concentration of CO in outside air
     *
     * @type        class
     * @parent      brick:CO_Sensor
     */
    readonly Outside_Air_CO_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_CO_Sensor">;
    /**
     * **[brick:Outside_Air_Dewpoint_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Dewpoint_Sensor)**
     *
     * Senses the dewpoint temperature of outside air
     *
     * @type        class
     * @parent      brick:Dewpoint_Sensor
     */
    readonly Outside_Air_Dewpoint_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Dewpoint_Sensor">;
    /**
     * **[brick:Outside_Air_Enthalpy_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Enthalpy_Sensor)**
     *
     * Measures the total heat content of outside air
     *
     * @type        class
     * @parent      brick:Air_Enthalpy_Sensor
     */
    readonly Outside_Air_Enthalpy_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Enthalpy_Sensor">;
    /**
     * **[brick:Outside_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of outside air into the system
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    readonly Outside_Air_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Flow_Sensor">;
    /**
     * **[brick:Outside_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Outside_Air_Flow_Setpoint)**
     *
     * Sets outside air flow rate
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint
     */
    readonly Outside_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Flow_Setpoint">;
    /**
     * **[brick:Outside_Air_Grains_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Grains_Sensor)**
     *
     * Measures the mass of water vapor in outside air
     *
     * @type        class
     * @parent      brick:Air_Grains_Sensor
     */
    readonly Outside_Air_Grains_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Grains_Sensor">;
    /**
     * **[brick:Outside_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Humidity_Sensor)**
     *
     * Measures the relative humidity of outside air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    readonly Outside_Air_Humidity_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Humidity_Sensor">;
    /**
     * **[brick:Outside_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Outside_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for outside air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    readonly Outside_Air_Humidity_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Humidity_Setpoint">;
    /**
     * **[brick:Outside_Air_Lockout_Temperature_Differential_Parameter](https://brickschema.org/schema/Brick#Outside_Air_Lockout_Temperature_Differential_Parameter)**
     *
     * @type        class
     * @parent      brick:Lockout_Temperature_Differential_Parameter
     */
    readonly Outside_Air_Lockout_Temperature_Differential_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Lockout_Temperature_Differential_Parameter">;
    /**
     * **[brick:Outside_Air_Lockout_Temperature_Setpoint](https://brickschema.org/schema/Brick#Outside_Air_Lockout_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Setpoint
     */
    readonly Outside_Air_Lockout_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Lockout_Temperature_Setpoint">;
    /**
     * **[brick:Outside_Air_Temperature_Enable_Differential_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Temperature_Enable_Differential_Sensor)**
     *
     * @type        class
     * @parent      brick:Outside_Air_Temperature_Sensor
     */
    readonly Outside_Air_Temperature_Enable_Differential_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Temperature_Enable_Differential_Sensor">;
    /**
     * **[brick:Outside_Air_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Outside_Air_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_High_Reset_Setpoint
     */
    readonly Outside_Air_Temperature_High_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Temperature_High_Reset_Setpoint">;
    /**
     * **[brick:Outside_Air_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Outside_Air_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_Low_Reset_Setpoint
     */
    readonly Outside_Air_Temperature_Low_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Temperature_Low_Reset_Setpoint">;
    /**
     * **[brick:Outside_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Temperature_Sensor)**
     *
     * Measures the temperature of outside air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    readonly Outside_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Temperature_Sensor">;
    /**
     * **[brick:Outside_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Outside_Air_Temperature_Setpoint)**
     *
     * Sets temperature of outside air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Outside_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Temperature_Setpoint">;
    /**
     * **[brick:Outside_Air_Wet_Bulb_Temperature_Sensor](https://brickschema.org/schema/Brick#Outside_Air_Wet_Bulb_Temperature_Sensor)**
     *
     * A sensor measuring the wet-bulb temperature of outside air
     *
     * @type        class
     * @parent      brick:Air_Wet_Bulb_Temperature_Sensor
     */
    readonly Outside_Air_Wet_Bulb_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Air_Wet_Bulb_Temperature_Sensor">;
    /**
     * **[brick:Outside_Damper](https://brickschema.org/schema/Brick#Outside_Damper)**
     *
     * A damper that modulates the flow of outside air
     *
     * @type        class
     * @parent      brick:Damper
     */
    readonly Outside_Damper: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Damper">;
    /**
     * **[brick:Outside_Face_Surface_Temperature_Sensor](https://brickschema.org/schema/Brick#Outside_Face_Surface_Temperature_Sensor)**
     *
     * Measures the outside surface (relative to the space) of the radiant panel of a radiant heating and cooling HVAC system.
     *
     * @type        class
     * @parent      brick:Radiant_Panel_Temperature_Sensor
     */
    readonly Outside_Face_Surface_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Face_Surface_Temperature_Sensor">;
    /**
     * **[brick:Outside_Face_Surface_Temperature_Setpoint](https://brickschema.org/schema/Brick#Outside_Face_Surface_Temperature_Setpoint)**
     *
     * Sets temperature for the outside face surface temperature of the radiant panel.
     *
     * @type        class
     * @parent      brick:Radiant_Panel_Temperature_Setpoint
     */
    readonly Outside_Face_Surface_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Face_Surface_Temperature_Setpoint">;
    /**
     * **[brick:Outside_Illuminance_Sensor](https://brickschema.org/schema/Brick#Outside_Illuminance_Sensor)**
     *
     * Measures the total luminous flux incident on an outside, per unit area
     *
     * @type        class
     * @parent      brick:Illuminance_Sensor
     */
    readonly Outside_Illuminance_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Outside_Illuminance_Sensor">;
    /**
     * **[brick:Overload_Alarm](https://brickschema.org/schema/Brick#Overload_Alarm)**
     *
     * An alarm that can indicate when a full-load current is exceeded.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Overload_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Overload_Alarm">;
    /**
     * **[brick:Overridden_Off_Status](https://brickschema.org/schema/Brick#Overridden_Off_Status)**
     *
     * Indicates if a control loop, relay or equipment has been turned off when it would otherwise be scheduled to be on
     *
     * @type        class
     * @parent      brick:Off_Status
     */
    readonly Overridden_Off_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Overridden_Off_Status">;
    /**
     * **[brick:Overridden_On_Status](https://brickschema.org/schema/Brick#Overridden_On_Status)**
     *
     * Indicates if a control loop, relay or equipment has been turned on when it would otherwise be scheduled to be off
     *
     * @type        class
     * @parent      brick:On_Status
     */
    readonly Overridden_On_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Overridden_On_Status">;
    /**
     * **[brick:Overridden_Status](https://brickschema.org/schema/Brick#Overridden_Status)**
     *
     * Indicates if the expected operating status of an equipment or control loop has been overridden
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Overridden_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Overridden_Status">;
    /**
     * **[brick:Override_Command](https://brickschema.org/schema/Brick#Override_Command)**
     *
     * Controls or reports whether or not a device or control loop is in 'override'
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Override_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Override_Command">;
    /**
     * **[brick:OzoneConcentration](https://brickschema.org/schema/Brick#Ozone_Concentration)**
     *
     * The concentration of ozone in a medium
     *
     * @type        instance
     */
    readonly Ozone_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Ozone_Concentration">;
    /**
     * **[brick:Ozone_Level_Sensor](https://brickschema.org/schema/Brick#Ozone_Level_Sensor)**
     *
     * Measures the concentration of ozone in air
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    readonly Ozone_Level_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Ozone_Level_Sensor">;
    /**
     * **[brick:PAU](https://brickschema.org/schema/Brick#PAU)**
     *
     * A type of AHU, use to pre-treat the outdoor air before feed to AHU
     *
     * @type        class
     * @parent      brick:AHU
     */
    readonly PAU: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PAU">;
    /**
     * **[brick:PID_Parameter](https://brickschema.org/schema/Brick#PID_Parameter)**
     *
     * @type        class
     * @parent      brick:Parameter
     */
    readonly PID_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PID_Parameter">;
    /**
     * **[brick:PIR_Sensor](https://brickschema.org/schema/Brick#PIR_Sensor)**
     *
     * Detects the presense of motion in some area using the differential change in infrared intensity between two or more receptors
     *
     * @type        class
     * @parent      brick:Motion_Sensor
     */
    readonly PIR_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PIR_Sensor">;
    /**
     * **[brick:PM10Concentration](https://brickschema.org/schema/Brick#PM10_Concentration)**
     *
     * The concentration of particulates with diameter of 10 microns or less in air
     *
     * @type        instance
     */
    readonly PM10_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PM10_Concentration">;
    /**
     * **[brick:PM10_Level_Sensor](https://brickschema.org/schema/Brick#PM10_Level_Sensor)**
     *
     * Detects level of particulates of size 10 microns
     *
     * @type        class
     * @parent      brick:PM10_Sensor
     */
    readonly PM10_Level_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PM10_Level_Sensor">;
    /**
     * **[brick:PM10_Sensor](https://brickschema.org/schema/Brick#PM10_Sensor)**
     *
     * Detects matter of size 10 microns
     *
     * @type        class
     * @parent      brick:Particulate_Matter_Sensor
     */
    readonly PM10_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PM10_Sensor">;
    /**
     * **[brick:PM1Concentration](https://brickschema.org/schema/Brick#PM1_Concentration)**
     *
     * The concentration of particulates with diameter of 1 microns or less in air
     *
     * @type        instance
     */
    readonly PM1_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PM1_Concentration">;
    /**
     * **[brick:PM1_Level_Sensor](https://brickschema.org/schema/Brick#PM1_Level_Sensor)**
     *
     * Detects level of particulates of size 1 micron
     *
     * @type        class
     * @parent      brick:PM1_Sensor
     */
    readonly PM1_Level_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PM1_Level_Sensor">;
    /**
     * **[brick:PM1_Sensor](https://brickschema.org/schema/Brick#PM1_Sensor)**
     *
     * Detects matter of size 1 micron
     *
     * @type        class
     * @parent      brick:Particulate_Matter_Sensor
     */
    readonly PM1_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PM1_Sensor">;
    /**
     * **[brick:PM2.5Concentration](https://brickschema.org/schema/Brick#'PM2.5_Concentration')**
     *
     * The concentration of particulates with diameter of 2.5 microns or less in air
     *
     * @type        instance
     */
    readonly 'PM2.5_Concentration': import("../index.js").Iri<"https://brickschema.org/schema/Brick#PM2.5_Concentration">;
    /**
     * **[brick:PM2.5_Level_Sensor](https://brickschema.org/schema/Brick#'PM2.5_Level_Sensor')**
     *
     * Detects level of particulates of size 2.5 microns
     *
     * @type        class
     * @parent      brick:PM2.5_Sensor
     */
    readonly 'PM2.5_Level_Sensor': import("../index.js").Iri<"https://brickschema.org/schema/Brick#PM2.5_Level_Sensor">;
    /**
     * **[brick:PM2.5_Sensor](https://brickschema.org/schema/Brick#'PM2.5_Sensor')**
     *
     * Detects matter of size 2.5 microns
     *
     * @type        class
     * @parent      brick:Particulate_Matter_Sensor
     */
    readonly 'PM2.5_Sensor': import("../index.js").Iri<"https://brickschema.org/schema/Brick#PM2.5_Sensor">;
    /**
     * **[brick:PVT_Panel](https://brickschema.org/schema/Brick#PVT_Panel)**
     *
     * A type of solar panels that convert solar radiation into usable thermal and electrical energy
     *
     * @type        class
     * @parent      brick:PV_Panel
     */
    readonly PVT_Panel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PVT_Panel">;
    /**
     * **[brick:PV_Array](https://brickschema.org/schema/Brick#PV_Array)**
     *
     * @type        class
     * @parent      brick:Collection
     */
    readonly PV_Array: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PV_Array">;
    /**
     * **[brick:PV_Current_Output_Sensor](https://brickschema.org/schema/Brick#PV_Current_Output_Sensor)**
     *
     * See Photovoltaic_Current_Output_Sensor
     *
     * @type        class
     * @parent      brick:Current_Output_Sensor
     */
    readonly PV_Current_Output_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PV_Current_Output_Sensor">;
    /**
     * **[brick:PV_Generation_System](https://brickschema.org/schema/Brick#PV_Generation_System)**
     *
     * A collection of photovoltaic devices that generates energy
     *
     * @type        class
     * @parent      brick:Energy_Generation_System
     */
    readonly PV_Generation_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PV_Generation_System">;
    /**
     * **[brick:PV_Panel](https://brickschema.org/schema/Brick#PV_Panel)**
     *
     * An integrated assembly of interconnected photovoltaic cells designed to deliver a selected level of working voltage and current at its output terminals packaged for protection against environment degradation and suited for incorporation in photovoltaic power systems.
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly PV_Panel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PV_Panel">;
    /**
     * **[brick:Parameter](https://brickschema.org/schema/Brick#Parameter)**
     *
     * Parameter points are configuration settings used to guide the operation of equipment and control systems; for example they may provide bounds on valid setpoint values
     *
     * @type        class
     * @parent      brick:Point
     */
    readonly Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Parameter">;
    /**
     * **[brick:Parking_Level](https://brickschema.org/schema/Brick#Parking_Level)**
     *
     * A floor of a parking structure
     *
     * @type        class
     * @parent      brick:Floor
     */
    readonly Parking_Level: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Parking_Level">;
    /**
     * **[brick:Parking_Space](https://brickschema.org/schema/Brick#Parking_Space)**
     *
     * An area large enough to park an individual vehicle
     *
     * @type        class
     * @parent      brick:Space
     */
    readonly Parking_Space: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Parking_Space">;
    /**
     * **[brick:Parking_Structure](https://brickschema.org/schema/Brick#Parking_Structure)**
     *
     * A building or part of a building devoted to vehicle parking
     *
     * @type        class
     * @parent      brick:Building
     */
    readonly Parking_Structure: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Parking_Structure">;
    /**
     * **[brick:Particulate_Matter_Sensor](https://brickschema.org/schema/Brick#Particulate_Matter_Sensor)**
     *
     * Detects pollutants in the ambient air
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    readonly Particulate_Matter_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Particulate_Matter_Sensor">;
    /**
     * **[brick:PeakPower](https://brickschema.org/schema/Brick#Peak_Power)**
     *
     * Tracks the highest (peak) observed power in some interval
     *
     * @type        instance
     */
    readonly Peak_Power: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Peak_Power">;
    /**
     * **[brick:Peak_Power_Demand_Sensor](https://brickschema.org/schema/Brick#Peak_Power_Demand_Sensor)**
     *
     * The peak power consumed by a process over some period of time
     *
     * @type        class
     * @parent      brick:Demand_Sensor
     */
    readonly Peak_Power_Demand_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Peak_Power_Demand_Sensor">;
    /**
     * **[brick:PhaseCountShape](https://brickschema.org/schema/Brick#PhaseCountShape)**
     *
     * @type        class
     */
    readonly PhaseCountShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PhaseCountShape">;
    /**
     * **[brick:PhasesShape](https://brickschema.org/schema/Brick#PhasesShape)**
     *
     * @type        class
     */
    readonly PhasesShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PhasesShape">;
    /**
     * **[brick:Phasor](https://brickschema.org/schema/Brick#Phasor)**
     *
     * @type        instance
     */
    readonly Phasor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Phasor">;
    /**
     * **[brick:PhasorAngle](https://brickschema.org/schema/Brick#Phasor_Angle)**
     *
     * Angle component of a phasor
     *
     * @type        instance
     */
    readonly Phasor_Angle: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Phasor_Angle">;
    /**
     * **[brick:PhasorMagnitude](https://brickschema.org/schema/Brick#Phasor_Magnitude)**
     *
     * Magnitude component of a phasor
     *
     * @type        instance
     */
    readonly Phasor_Magnitude: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Phasor_Magnitude">;
    /**
     * **[brick:Photovoltaic_Array](https://brickschema.org/schema/Brick#Photovoltaic_Array)**
     *
     * A collection of photovoltaic panels
     *
     * @type        class
     * @parent      brick:Collection
     */
    readonly Photovoltaic_Array: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Photovoltaic_Array">;
    /**
     * **[brick:Photovoltaic_Current_Output_Sensor](https://brickschema.org/schema/Brick#Photovoltaic_Current_Output_Sensor)**
     *
     * Senses the amperes of electrical current produced as output by a photovoltaic device
     *
     * @type        class
     * @parent      brick:Current_Output_Sensor
     */
    readonly Photovoltaic_Current_Output_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Photovoltaic_Current_Output_Sensor">;
    /**
     * **[brick:Piezoelectric_Sensor](https://brickschema.org/schema/Brick#Piezoelectric_Sensor)**
     *
     * Senses changes pressure, acceleration, temperature, force or strain via the piezoelectric effect
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Piezoelectric_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Piezoelectric_Sensor">;
    /**
     * **[brick:PlugStrip](https://brickschema.org/schema/Brick#PlugStrip)**
     *
     * A device containing a block of electrical sockets allowing multiple electrical devices to be powered from a single electrical socket.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    readonly PlugStrip: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PlugStrip">;
    /**
     * **[brick:Plumbing_Room](https://brickschema.org/schema/Brick#Plumbing_Room)**
     *
     * A service room devoted to the operation and routing of water in a building. Usually distinct from the HVAC subsystems.
     *
     * @type        class
     * @parent      brick:Service_Room
     */
    readonly Plumbing_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Plumbing_Room">;
    /**
     * **[brick:Point](https://brickschema.org/schema/Brick#Point)**
     *
     * @type        class
     * @parent      brick:Class
     */
    readonly Point: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Point">;
    /**
     * **[brick:Portfolio](https://brickschema.org/schema/Brick#Portfolio)**
     *
     * A collection of sites
     *
     * @type        class
     * @parent      brick:Collection
     */
    readonly Portfolio: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Portfolio">;
    /**
     * **[brick:Position](https://brickschema.org/schema/Brick#Position)**
     *
     * The fraction of the full range of motion
     *
     * @type        instance
     */
    readonly Position: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Position">;
    /**
     * **[brick:Position_Command](https://brickschema.org/schema/Brick#Position_Command)**
     *
     * Controls or reports the position of some object
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Position_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Position_Command">;
    /**
     * **[brick:Position_Limit](https://brickschema.org/schema/Brick#Position_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Position_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    readonly Position_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Position_Limit">;
    /**
     * **[brick:Position_Sensor](https://brickschema.org/schema/Brick#Position_Sensor)**
     *
     * Measures the current position of a component in terms of a fraction of its full range of motion
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Position_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Position_Sensor">;
    /**
     * **[brick:Potable_Water](https://brickschema.org/schema/Brick#Potable_Water)**
     *
     * Water that is safe to drink
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Potable_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Potable_Water">;
    /**
     * **[brick:Power](https://brickschema.org/schema/Brick#Power)**
     *
     * Power is the rate at which work is performed or energy is transmitted, or the amount of energy required or expended for a given unit of time. As a rate of change of work done or the energy of a subsystem, power is: (P = W/t), where (P) is power, (W) is work and {t} is time.
     *
     * @type        instance
     */
    readonly Power: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Power">;
    /**
     * **[brick:PowerComplexityShape](https://brickschema.org/schema/Brick#PowerComplexityShape)**
     *
     * @type        class
     */
    readonly PowerComplexityShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PowerComplexityShape">;
    /**
     * **[brick:PowerFlowShape](https://brickschema.org/schema/Brick#PowerFlowShape)**
     *
     * @type        class
     */
    readonly PowerFlowShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PowerFlowShape">;
    /**
     * **[brick:PowerOutputShape](https://brickschema.org/schema/Brick#PowerOutputShape)**
     *
     * @type        class
     */
    readonly PowerOutputShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#PowerOutputShape">;
    /**
     * **[brick:Power_Alarm](https://brickschema.org/schema/Brick#Power_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with electrical power.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Power_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Power_Alarm">;
    /**
     * **[brick:Power_Factor](https://brickschema.org/schema/Brick#Power_Factor)**
     *
     * Power Factor, under periodic conditions, is the ratio of the absolute value of the active power (P) to the apparent power (S).
     *
     * @type        instance
     */
    readonly Power_Factor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Power_Factor">;
    /**
     * **[brick:Power_Loss_Alarm](https://brickschema.org/schema/Brick#Power_Loss_Alarm)**
     *
     * An alarm that indicates a power failure.
     *
     * @type        class
     * @parent      brick:Power_Alarm
     */
    readonly Power_Loss_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Power_Loss_Alarm">;
    /**
     * **[brick:Power_Sensor](https://brickschema.org/schema/Brick#Power_Sensor)**
     *
     * Measures the amount of instantaneous power consumed
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Power_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Power_Sensor">;
    /**
     * **[brick:Prayer_Room](https://brickschema.org/schema/Brick#Prayer_Room)**
     *
     * A room set aside for prayer
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Prayer_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Prayer_Room">;
    /**
     * **[brick:Pre_Filter](https://brickschema.org/schema/Brick#Pre_Filter)**
     *
     * A filter installed in front of a more efficient filter to extend the life of the more expensive higher efficiency filter
     *
     * @type        class
     * @parent      brick:Filter
     */
    readonly Pre_Filter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Pre_Filter">;
    /**
     * **[brick:Pre_Filter_Status](https://brickschema.org/schema/Brick#Pre_Filter_Status)**
     *
     * Indicates if a prefilter needs to be replaced
     *
     * @type        class
     * @parent      brick:Filter_Status
     */
    readonly Pre_Filter_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Pre_Filter_Status">;
    /**
     * **[brick:Precipitation](https://brickschema.org/schema/Brick#Precipitation)**
     *
     * Amount of atmospheric water vapor fallen including rain, sleet, snow, and hail (https://project-haystack.dev/doc/lib-phScience/precipitation)
     *
     * @type        instance
     */
    readonly Precipitation: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Precipitation">;
    /**
     * **[brick:Preheat_Demand_Setpoint](https://brickschema.org/schema/Brick#Preheat_Demand_Setpoint)**
     *
     * Sets the rate required for preheat
     *
     * @type        class
     * @parent      brick:Demand_Setpoint
     */
    readonly Preheat_Demand_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Preheat_Demand_Setpoint">;
    /**
     * **[brick:Preheat_Discharge_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Preheat_Discharge_Air_Temperature_Sensor)**
     *
     * Measures the temperature of discharge air before heating is applied
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Sensor
     */
    readonly Preheat_Discharge_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Preheat_Discharge_Air_Temperature_Sensor">;
    /**
     * **[brick:Preheat_Hot_Water_System](https://brickschema.org/schema/Brick#Preheat_Hot_Water_System)**
     *
     * @type        class
     * @parent      brick:Hot_Water_System
     */
    readonly Preheat_Hot_Water_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Preheat_Hot_Water_System">;
    /**
     * **[brick:Preheat_Hot_Water_Valve](https://brickschema.org/schema/Brick#Preheat_Hot_Water_Valve)**
     *
     * @type        class
     * @parent      brick:Hot_Water_Valve
     */
    readonly Preheat_Hot_Water_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Preheat_Hot_Water_Valve">;
    /**
     * **[brick:Preheat_Supply_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Preheat_Supply_Air_Temperature_Sensor)**
     *
     * Measures the temperature of supply air before it is heated
     *
     * @type        class
     * @parent      brick:Supply_Air_Temperature_Sensor
     */
    readonly Preheat_Supply_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Preheat_Supply_Air_Temperature_Sensor">;
    /**
     * **[brick:Pressure](https://brickschema.org/schema/Brick#Pressure)**
     *
     * @type        instance
     */
    readonly Pressure: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Pressure">;
    /**
     * **[brick:Pressure_Alarm](https://brickschema.org/schema/Brick#Pressure_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with pressure.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Pressure_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Pressure_Alarm">;
    /**
     * **[brick:Pressure_Sensor](https://brickschema.org/schema/Brick#Pressure_Sensor)**
     *
     * Measure the amount of force acting on a unit area
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Pressure_Sensor">;
    /**
     * **[brick:Pressure_Setpoint](https://brickschema.org/schema/Brick#Pressure_Setpoint)**
     *
     * Sets pressure
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Pressure_Setpoint">;
    /**
     * **[brick:Pressure_Status](https://brickschema.org/schema/Brick#Pressure_Status)**
     *
     * Indicates if pressure is within expected bounds
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Pressure_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Pressure_Status">;
    /**
     * **[brick:Private_Office](https://brickschema.org/schema/Brick#Private_Office)**
     *
     * An office devoted to a single individual, with walls and door
     *
     * @type        class
     * @parent      brick:Enclosed_Office
     */
    readonly Private_Office: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Private_Office">;
    /**
     * **[brick:Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:PID_Parameter
     */
    readonly Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Proportional_Band_Parameter">;
    /**
     * **[brick:Proportional_Gain_Parameter](https://brickschema.org/schema/Brick#Proportional_Gain_Parameter)**
     *
     * @type        class
     * @parent      brick:Gain_Parameter
     */
    readonly Proportional_Gain_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Proportional_Gain_Parameter">;
    /**
     * **[brick:Pump](https://brickschema.org/schema/Brick#Pump)**
     *
     * Machine for imparting energy to a fluid, causing it to do work, drawing a fluid into itself through an entrance port, and forcing the fluid out through an exhaust port.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Pump: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Pump">;
    /**
     * **[brick:Pump_Command](https://brickschema.org/schema/Brick#Pump_Command)**
     *
     * Controls or reports the speed of a pump (typically as a proportion of its full pumping capacity)
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Pump_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Pump_Command">;
    /**
     * **[brick:Pump_On_Off_Status](https://brickschema.org/schema/Brick#Pump_On_Off_Status)**
     *
     * @type        class
     * @parent      brick:On_Off_Status
     */
    readonly Pump_On_Off_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Pump_On_Off_Status">;
    /**
     * **[brick:Pump_Room](https://brickschema.org/schema/Brick#Pump_Room)**
     *
     * A mechanical room that houses pumps
     *
     * @type        class
     * @parent      brick:Mechanical_Room
     */
    readonly Pump_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Pump_Room">;
    /**
     * **[brick:Pump_VFD](https://brickschema.org/schema/Brick#Pump_VFD)**
     *
     * Variable-frequency drive for pumps
     *
     * @type        class
     * @parent      brick:VFD
     */
    readonly Pump_VFD: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Pump_VFD">;
    /**
     * **[brick:Quantity](https://brickschema.org/schema/Brick#Quantity)**
     *
     * @type        class
     * @parent      brick:Measurable
     */
    readonly Quantity: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Quantity">;
    /**
     * **[brick:RC_Panel](https://brickschema.org/schema/Brick#RC_Panel)**
     *
     * See Radiant_Ceiling_Panel
     *
     * @type        class
     * @parent      brick:Radiant_Panel
     */
    readonly RC_Panel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#RC_Panel">;
    /**
     * **[brick:RTU](https://brickschema.org/schema/Brick#RTU)**
     *
     * see Rooftop_Unit
     *
     * @type        class
     * @parent      brick:AHU
     */
    readonly RTU: import("../index.js").Iri<"https://brickschema.org/schema/Brick#RTU">;
    /**
     * **[brick:RVAV](https://brickschema.org/schema/Brick#RVAV)**
     *
     * See Variable_Air_Volume_Box_With_Reheat
     *
     * @type        class
     * @parent      brick:Variable_Air_Volume_Box
     */
    readonly RVAV: import("../index.js").Iri<"https://brickschema.org/schema/Brick#RVAV">;
    /**
     * **[brick:Radiance](https://brickschema.org/schema/Brick#Radiance)**
     *
     * @type        instance
     */
    readonly Radiance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Radiance">;
    /**
     * **[brick:Radiant_Ceiling_Panel](https://brickschema.org/schema/Brick#Radiant_Ceiling_Panel)**
     *
     * Radiant panel heating and cooling system that are usually made from metal and suspended under the ceiling or insulated from the building structure.
     *
     * @type        class
     * @parent      brick:Radiant_Panel
     */
    readonly Radiant_Ceiling_Panel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Radiant_Ceiling_Panel">;
    /**
     * **[brick:Radiant_Panel](https://brickschema.org/schema/Brick#Radiant_Panel)**
     *
     * A temperature-controlled surface that provides fifty percent (50%) or more of the design heat transfer by thermal radiation.
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    readonly Radiant_Panel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Radiant_Panel">;
    /**
     * **[brick:Radiant_Panel_Temperature_Sensor](https://brickschema.org/schema/Brick#Radiant_Panel_Temperature_Sensor)**
     *
     * Measures the temperature of the radiant panel of the radiant heating and cooling HVAC system.
     *
     * @type        class
     * @parent      brick:Temperature_Sensor
     */
    readonly Radiant_Panel_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Radiant_Panel_Temperature_Sensor">;
    /**
     * **[brick:Radiant_Panel_Temperature_Setpoint](https://brickschema.org/schema/Brick#Radiant_Panel_Temperature_Setpoint)**
     *
     * Sets temperature of radiant panel.
     *
     * @type        class
     * @parent      brick:Temperature_Setpoint
     */
    readonly Radiant_Panel_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Radiant_Panel_Temperature_Setpoint">;
    /**
     * **[brick:Radiant_Temperature](https://brickschema.org/schema/Brick#Radiant_Temperature)**
     *
     * the uniform temperature of an imaginary enclosure in which the radiant heat transfer from the human body is equal to the radiant heat transfer in the actual non-uniform enclosure. (https://en.wikipedia.org/wiki/Mean_radiant_temperature)
     *
     * @type        instance
     */
    readonly Radiant_Temperature: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Radiant_Temperature">;
    /**
     * **[brick:Radiation_Hot_Water_System](https://brickschema.org/schema/Brick#Radiation_Hot_Water_System)**
     *
     * @type        class
     * @parent      brick:Hot_Water_System
     */
    readonly Radiation_Hot_Water_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Radiation_Hot_Water_System">;
    /**
     * **[brick:Radiator](https://brickschema.org/schema/Brick#Radiator)**
     *
     * Heat exchangers designed to transfer thermal energy from one medium to another
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    readonly Radiator: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Radiator">;
    /**
     * **[brick:Radioactivity_Concentration](https://brickschema.org/schema/Brick#Radioactivity_Concentration)**
     *
     * @type        instance
     */
    readonly Radioactivity_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Radioactivity_Concentration">;
    /**
     * **[brick:Radioactivity_Concentration_Sensor](https://brickschema.org/schema/Brick#Radioactivity_Concentration_Sensor)**
     *
     * Measures the concentration of radioactivity
     *
     * @type        class
     * @parent      brick:Air_Quality_Sensor
     */
    readonly Radioactivity_Concentration_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Radioactivity_Concentration_Sensor">;
    /**
     * **[brick:RadonConcentration](https://brickschema.org/schema/Brick#Radon_Concentration)**
     *
     * The concentration of radioactivity due to Radon in a medium
     *
     * @type        instance
     */
    readonly Radon_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Radon_Concentration">;
    /**
     * **[brick:Radon_Concentration_Sensor](https://brickschema.org/schema/Brick#Radon_Concentration_Sensor)**
     *
     * Measures the concentration of radioactivity due to radon
     *
     * @type        class
     * @parent      brick:Radioactivity_Concentration_Sensor
     */
    readonly Radon_Concentration_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Radon_Concentration_Sensor">;
    /**
     * **[brick:Rain_Duration_Sensor](https://brickschema.org/schema/Brick#Rain_Duration_Sensor)**
     *
     * Measures the duration of precipitation within some time frame
     *
     * @type        class
     * @parent      brick:Duration_Sensor
     */
    readonly Rain_Duration_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Rain_Duration_Sensor">;
    /**
     * **[brick:Rain_Sensor](https://brickschema.org/schema/Brick#Rain_Sensor)**
     *
     * Measures the amount of precipitation fallen
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Rain_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Rain_Sensor">;
    /**
     * **[brick:Rated_Speed_Setpoint](https://brickschema.org/schema/Brick#Rated_Speed_Setpoint)**
     *
     * Sets rated speed
     *
     * @type        class
     * @parent      brick:Speed_Setpoint
     */
    readonly Rated_Speed_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Rated_Speed_Setpoint">;
    /**
     * **[brick:Reactive_Power](https://brickschema.org/schema/Brick#Reactive_Power)**
     *
     * Reactive Power}, for a linear two-terminal element or two-terminal circuit, under sinusoidal conditions, is the quantity equal to the product of the apparent power (S) and the sine of the displacement angle (\psi). The absolute value of the reactive power is equal to the non-active power. The ISO (and SI) unit for reactive power is the voltampere. The special name var and symbol \textit{var are given in IEC 60027 1.
     *
     * @type        instance
     */
    readonly Reactive_Power: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Reactive_Power">;
    /**
     * **[brick:Reactive_Power_Sensor](https://brickschema.org/schema/Brick#Reactive_Power_Sensor)**
     *
     * Measures the portion of power that, averaged over a complete cycle of the AC waveform, is due to stored energy which returns to the source in each cycle
     *
     * @type        class
     * @parent      brick:Electrical_Power_Sensor
     */
    readonly Reactive_Power_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Reactive_Power_Sensor">;
    /**
     * **[brick:Real_Power](https://brickschema.org/schema/Brick#Real_Power)**
     *
     * (Active Power) is, under periodic conditions, the mean value, taken over one period (T), of the instantaneous power (p). In complex notation, (P = Re \; S), where (S) is (complex power)".
     *
     * @type        instance
     */
    readonly Real_Power: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Real_Power">;
    /**
     * **[brick:Reception](https://brickschema.org/schema/Brick#Reception)**
     *
     * A space, usually in a lobby, where visitors to a building or space can go to after arriving at a building and inform building staff that they have arrived
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Reception: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Reception">;
    /**
     * **[brick:Region](https://brickschema.org/schema/Brick#Region)**
     *
     * A unit of geographic space, usually contigious or somehow related to a geopolitical feature
     *
     * @type        class
     * @parent      brick:Location
     */
    readonly Region: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Region">;
    /**
     * **[brick:Reheat_Hot_Water_System](https://brickschema.org/schema/Brick#Reheat_Hot_Water_System)**
     *
     * @type        class
     * @parent      brick:Hot_Water_System
     */
    readonly Reheat_Hot_Water_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Reheat_Hot_Water_System">;
    /**
     * **[brick:Reheat_Valve](https://brickschema.org/schema/Brick#Reheat_Valve)**
     *
     * A valve that controls air temperature by modulating the amount of hot water flowing through a reheat coil
     *
     * @type        class
     * @parent      brick:Heating_Valve
     */
    readonly Reheat_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Reheat_Valve">;
    /**
     * **[brick:Relative_Humidity](https://brickschema.org/schema/Brick#Relative_Humidity)**
     *
     * Relative Humidity} is the ratio of the partial pressure of water vapor in an air-water mixture to the saturated vapor pressure of water at a prescribed temperature. The relative humidity of air depends not only on temperature but also on the pressure of the system of interest. Relative Humidity is also referred to as \text{Relative Partial Pressure. Relative partial pressure is often referred to as (RH) and expressed in percent.
     *
     * @type        instance
     */
    readonly Relative_Humidity: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Relative_Humidity">;
    /**
     * **[brick:Relative_Humidity_Sensor](https://brickschema.org/schema/Brick#Relative_Humidity_Sensor)**
     *
     * Measures the present state of absolute humidity relative to a maximum humidity given the same temperature
     *
     * @type        class
     * @parent      brick:Humidity_Sensor
     */
    readonly Relative_Humidity_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Relative_Humidity_Sensor">;
    /**
     * **[brick:Remotely_On_Off_Status](https://brickschema.org/schema/Brick#Remotely_On_Off_Status)**
     *
     * @type        class
     * @parent      brick:On_Off_Status
     */
    readonly Remotely_On_Off_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Remotely_On_Off_Status">;
    /**
     * **[brick:Reset_Command](https://brickschema.org/schema/Brick#Reset_Command)**
     *
     * Commands that reset a flag, property or value to its default
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Reset_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Reset_Command">;
    /**
     * **[brick:Reset_Setpoint](https://brickschema.org/schema/Brick#Reset_Setpoint)**
     *
     * Setpoints used in reset strategies
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Reset_Setpoint">;
    /**
     * **[brick:Rest_Room](https://brickschema.org/schema/Brick#Rest_Room)**
     *
     * A room that provides toilets and washbowls. Alternate spelling of Restroom
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Rest_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Rest_Room">;
    /**
     * **[brick:Restroom](https://brickschema.org/schema/Brick#Restroom)**
     *
     * A room that provides toilets and washbowls.
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Restroom: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Restroom">;
    /**
     * **[brick:Retail_Room](https://brickschema.org/schema/Brick#Retail_Room)**
     *
     * A space set aside for retail in a larger establishment, e.g. a gift shop in a hospital
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Retail_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Retail_Room">;
    /**
     * **[brick:Return_Air](https://brickschema.org/schema/Brick#Return_Air)**
     *
     * air removed from a space to be recirculated or exhausted. Air extracted from a space and totally or partially returned to an air conditioner, furnace, or other heating, cooling, or ventilating system.
     *
     * @type        class
     * @parent      brick:Air
     */
    readonly Return_Air: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air">;
    /**
     * **[brick:Return_Air_CO2_Sensor](https://brickschema.org/schema/Brick#Return_Air_CO2_Sensor)**
     *
     * Measures the concentration of CO2 in return air
     *
     * @type        class
     * @parent      brick:CO2_Sensor
     */
    readonly Return_Air_CO2_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_CO2_Sensor">;
    /**
     * **[brick:Return_Air_CO2_Setpoint](https://brickschema.org/schema/Brick#Return_Air_CO2_Setpoint)**
     *
     * Sets some property of CO2 in Return Air
     *
     * @type        class
     * @parent      brick:CO2_Setpoint
     */
    readonly Return_Air_CO2_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_CO2_Setpoint">;
    /**
     * **[brick:Return_Air_CO_Sensor](https://brickschema.org/schema/Brick#Return_Air_CO_Sensor)**
     *
     * Measures the concentration of CO in return air
     *
     * @type        class
     * @parent      brick:CO_Sensor
     */
    readonly Return_Air_CO_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_CO_Sensor">;
    /**
     * **[brick:Return_Air_Dewpoint_Sensor](https://brickschema.org/schema/Brick#Return_Air_Dewpoint_Sensor)**
     *
     * Senses the dewpoint temperature of return air
     *
     * @type        class
     * @parent      brick:Dewpoint_Sensor
     */
    readonly Return_Air_Dewpoint_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Dewpoint_Sensor">;
    /**
     * **[brick:Return_Air_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Return_Air_Differential_Pressure_Sensor)**
     *
     * Measures the difference in pressure between the return and supply side
     *
     * @type        class
     * @parent      brick:Air_Differential_Pressure_Sensor
     */
    readonly Return_Air_Differential_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Differential_Pressure_Sensor">;
    /**
     * **[brick:Return_Air_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Return_Air_Differential_Pressure_Setpoint)**
     *
     * Sets the target air differential pressure between an upstream and downstream point in a return air duct or conduit
     *
     * @type        class
     * @parent      brick:Air_Differential_Pressure_Setpoint
     */
    readonly Return_Air_Differential_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Differential_Pressure_Setpoint">;
    /**
     * **[brick:Return_Air_Enthalpy_Sensor](https://brickschema.org/schema/Brick#Return_Air_Enthalpy_Sensor)**
     *
     * Measures the total heat content of return air
     *
     * @type        class
     * @parent      brick:Air_Enthalpy_Sensor
     */
    readonly Return_Air_Enthalpy_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Enthalpy_Sensor">;
    /**
     * **[brick:Return_Air_Filter](https://brickschema.org/schema/Brick#Return_Air_Filter)**
     *
     * Filters return air
     *
     * @type        class
     * @parent      brick:Filter
     */
    readonly Return_Air_Filter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Filter">;
    /**
     * **[brick:Return_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Return_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of return air
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    readonly Return_Air_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Flow_Sensor">;
    /**
     * **[brick:Return_Air_Grains_Sensor](https://brickschema.org/schema/Brick#Return_Air_Grains_Sensor)**
     *
     * Measures the mass of water vapor in return air
     *
     * @type        class
     * @parent      brick:Air_Grains_Sensor
     */
    readonly Return_Air_Grains_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Grains_Sensor">;
    /**
     * **[brick:Return_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Return_Air_Humidity_Sensor)**
     *
     * Measures the relative humidity of return air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    readonly Return_Air_Humidity_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Humidity_Sensor">;
    /**
     * **[brick:Return_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Return_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for return air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    readonly Return_Air_Humidity_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Humidity_Setpoint">;
    /**
     * **[brick:Return_Air_Plenum](https://brickschema.org/schema/Brick#Return_Air_Plenum)**
     *
     * A component of the HVAC the receives air from the room to recirculate or exhaust to or from the building
     *
     * @type        class
     * @parent      brick:Air_Plenum
     */
    readonly Return_Air_Plenum: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Plenum">;
    /**
     * **[brick:Return_Air_Temperature_Alarm](https://brickschema.org/schema/Brick#Return_Air_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with the temperature of return air.
     *
     * @type        class
     * @parent      brick:Air_Temperature_Alarm
     */
    readonly Return_Air_Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Temperature_Alarm">;
    /**
     * **[brick:Return_Air_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Return_Air_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_High_Reset_Setpoint
     */
    readonly Return_Air_Temperature_High_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Temperature_High_Reset_Setpoint">;
    /**
     * **[brick:Return_Air_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Return_Air_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_Low_Reset_Setpoint
     */
    readonly Return_Air_Temperature_Low_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Temperature_Low_Reset_Setpoint">;
    /**
     * **[brick:Return_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Return_Air_Temperature_Sensor)**
     *
     * Measures the temperature of return air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    readonly Return_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Temperature_Sensor">;
    /**
     * **[brick:Return_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Return_Air_Temperature_Setpoint)**
     *
     * The target temperature for return air, often used as an approximation of zone air temperature
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Return_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Air_Temperature_Setpoint">;
    /**
     * **[brick:Return_Chilled_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Return_Chilled_Water_Temperature_Setpoint)**
     *
     * Sets the temperature of return (downstream of the chilled water load) chilled water
     *
     * @type        class
     * @parent      brick:Chilled_Water_Temperature_Setpoint
     */
    readonly Return_Chilled_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Chilled_Water_Temperature_Setpoint">;
    /**
     * **[brick:Return_Condenser_Water](https://brickschema.org/schema/Brick#Return_Condenser_Water)**
     *
     * In a condenser water loop, this is water being brought away from the condenser side of a heat-rejection device (e.g. chiller). It is the 'warm' side.
     *
     * @type        class
     * @parent      brick:Condenser_Water
     */
    readonly Return_Condenser_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Condenser_Water">;
    /**
     * **[brick:Return_Condenser_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Return_Condenser_Water_Flow_Sensor)**
     *
     * Measures the flow of the return condenser water
     *
     * @type        class
     * @parent      brick:Return_Water_Flow_Sensor
     */
    readonly Return_Condenser_Water_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Condenser_Water_Flow_Sensor">;
    /**
     * **[brick:Return_Condenser_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Return_Condenser_Water_Temperature_Sensor)**
     *
     * Measures the temperature of the return condenser water
     *
     * @type        class
     * @parent      brick:Condenser_Water_Temperature_Sensor
     */
    readonly Return_Condenser_Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Condenser_Water_Temperature_Sensor">;
    /**
     * **[brick:Return_Damper](https://brickschema.org/schema/Brick#Return_Damper)**
     *
     * A damper that modulates the flow of return air
     *
     * @type        class
     * @parent      brick:Damper
     */
    readonly Return_Damper: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Damper">;
    /**
     * **[brick:Return_Fan](https://brickschema.org/schema/Brick#Return_Fan)**
     *
     * Fan moving return air -- air that is circulated from the building back into the HVAC system
     *
     * @type        class
     * @parent      brick:Fan
     */
    readonly Return_Fan: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Fan">;
    /**
     * **[brick:Return_Heating_Valve](https://brickschema.org/schema/Brick#Return_Heating_Valve)**
     *
     * A valve installed on the return side of a heat exchanger
     *
     * @type        class
     * @parent      brick:Heating_Valve
     */
    readonly Return_Heating_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Heating_Valve">;
    /**
     * **[brick:Return_Hot_Water](https://brickschema.org/schema/Brick#Return_Hot_Water)**
     *
     * @type        class
     * @parent      brick:Hot_Water
     */
    readonly Return_Hot_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Hot_Water">;
    /**
     * **[brick:Return_Hot_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Return_Hot_Water_Temperature_Setpoint)**
     *
     * Sets the temperature of return (downstream of the hot water load) hot water
     *
     * @type        class
     * @parent      brick:Hot_Water_Temperature_Setpoint
     */
    readonly Return_Hot_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Hot_Water_Temperature_Setpoint">;
    /**
     * **[brick:Return_Water](https://brickschema.org/schema/Brick#Return_Water)**
     *
     * The water is a system after it is used in a heat transfer cycle
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Return_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Water">;
    /**
     * **[brick:Return_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Return_Water_Flow_Sensor)**
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    readonly Return_Water_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Water_Flow_Sensor">;
    /**
     * **[brick:Return_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Return_Water_Temperature_Sensor)**
     *
     * Measures the temperature of return water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    readonly Return_Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Water_Temperature_Sensor">;
    /**
     * **[brick:Return_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Return_Water_Temperature_Setpoint)**
     *
     * Sets the temperature of return water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    readonly Return_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Return_Water_Temperature_Setpoint">;
    /**
     * **[brick:Riser](https://brickschema.org/schema/Brick#Riser)**
     *
     * A vertical shaft indented for installing building infrastructure e.g., electrical wire, network communication wire, plumbing, etc
     *
     * @type        class
     * @parent      brick:Vertical_Space
     */
    readonly Riser: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Riser">;
    /**
     * **[brick:Rooftop](https://brickschema.org/schema/Brick#Rooftop)**
     *
     * @type        class
     * @parent      brick:Floor
     */
    readonly Rooftop: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Rooftop">;
    /**
     * **[brick:Rooftop_Unit](https://brickschema.org/schema/Brick#Rooftop_Unit)**
     *
     * Packaged air conditioner mounted on a roof, the conditioned air being discharged directly into the rooms below or through a duct system.
     *
     * @type        class
     * @parent      brick:AHU
     */
    readonly Rooftop_Unit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Rooftop_Unit">;
    /**
     * **[brick:Room](https://brickschema.org/schema/Brick#Room)**
     *
     * Base class for all more specific room types.
     *
     * @type        class
     * @parent      brick:Space
     */
    readonly Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Room">;
    /**
     * **[brick:Room_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Room_Air_Temperature_Setpoint)**
     *
     * Sets temperature of room air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Room_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Room_Air_Temperature_Setpoint">;
    /**
     * **[brick:Run_Enable_Command](https://brickschema.org/schema/Brick#Run_Enable_Command)**
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    readonly Run_Enable_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Run_Enable_Command">;
    /**
     * **[brick:Run_Request_Status](https://brickschema.org/schema/Brick#Run_Request_Status)**
     *
     * Indicates if a request has been filed to start a device or equipment
     *
     * @type        class
     * @parent      brick:Run_Status
     */
    readonly Run_Request_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Run_Request_Status">;
    /**
     * **[brick:Run_Status](https://brickschema.org/schema/Brick#Run_Status)**
     *
     * @type        class
     * @parent      brick:Start_Stop_Status
     */
    readonly Run_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Run_Status">;
    /**
     * **[brick:Run_Time_Sensor](https://brickschema.org/schema/Brick#Run_Time_Sensor)**
     *
     * Measures the duration for which a device was in an active or "on" state
     *
     * @type        class
     * @parent      brick:Duration_Sensor
     */
    readonly Run_Time_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Run_Time_Sensor">;
    /**
     * **[brick:Safety_Equipment](https://brickschema.org/schema/Brick#Safety_Equipment)**
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Safety_Equipment: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Safety_Equipment">;
    /**
     * **[brick:Safety_Shower](https://brickschema.org/schema/Brick#Safety_Shower)**
     *
     * @type        class
     * @parent      brick:Emergency_Wash_Station
     */
    readonly Safety_Shower: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Safety_Shower">;
    /**
     * **[brick:Safety_System](https://brickschema.org/schema/Brick#Safety_System)**
     *
     * @type        class
     * @parent      brick:System
     */
    readonly Safety_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Safety_System">;
    /**
     * **[brick:Sash_Position_Sensor](https://brickschema.org/schema/Brick#Sash_Position_Sensor)**
     *
     * Measures the current position of a sash in terms of the percent of fully open
     *
     * @type        class
     * @parent      brick:Position_Sensor
     */
    readonly Sash_Position_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Sash_Position_Sensor">;
    /**
     * **[brick:Schedule_Temperature_Setpoint](https://brickschema.org/schema/Brick#Schedule_Temperature_Setpoint)**
     *
     * The current setpoint as indicated by the schedule
     *
     * @type        class
     * @parent      brick:Temperature_Setpoint
     */
    readonly Schedule_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Schedule_Temperature_Setpoint">;
    /**
     * **[brick:Security_Equipment](https://brickschema.org/schema/Brick#Security_Equipment)**
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Security_Equipment: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Security_Equipment">;
    /**
     * **[brick:Security_Service_Room](https://brickschema.org/schema/Brick#Security_Service_Room)**
     *
     * A class of spaces used by the security staff of a facility
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Security_Service_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Security_Service_Room">;
    /**
     * **[brick:Sensor](https://brickschema.org/schema/Brick#Sensor)**
     *
     * A Sensor is an input point that represents the value of a device or instrument designed to detect and measure a variable (ASHRAE Dictionary).
     *
     * @type        class
     * @parent      brick:Point
     */
    readonly Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Sensor">;
    /**
     * **[brick:Server_Room](https://brickschema.org/schema/Brick#Server_Room)**
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Server_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Server_Room">;
    /**
     * **[brick:Service_Room](https://brickschema.org/schema/Brick#Service_Room)**
     *
     * A class of spaces related to the operations of building subsystems, e.g. HVAC, electrical, IT, plumbing, etc
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Service_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Service_Room">;
    /**
     * **[brick:Setpoint](https://brickschema.org/schema/Brick#Setpoint)**
     *
     * A Setpoint is an input value at which the desired property is set
     *
     * @type        class
     * @parent      brick:Point
     */
    readonly Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Setpoint">;
    /**
     * **[brick:Shading_System](https://brickschema.org/schema/Brick#Shading_System)**
     *
     * Devices that can control daylighting through various means
     *
     * @type        class
     * @parent      brick:System
     */
    readonly Shading_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Shading_System">;
    /**
     * **[brick:Shared_Office](https://brickschema.org/schema/Brick#Shared_Office)**
     *
     * An office used by multiple people
     *
     * @type        class
     * @parent      brick:Enclosed_Office
     */
    readonly Shared_Office: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Shared_Office">;
    /**
     * **[brick:Short_Cycle_Alarm](https://brickschema.org/schema/Brick#Short_Cycle_Alarm)**
     *
     * An alarm that indicates a short cycle occurred. A short cycle occurs when a cooling cycle is prevented from completing its full cycle
     *
     * @type        class
     * @parent      brick:Cycle_Alarm
     */
    readonly Short_Cycle_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Short_Cycle_Alarm">;
    /**
     * **[brick:Shower](https://brickschema.org/schema/Brick#Shower)**
     *
     * A space containing showers, usually adjacent to an athletic or execise area
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Shower: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Shower">;
    /**
     * **[brick:Site](https://brickschema.org/schema/Brick#Site)**
     *
     * A geographic region containing 0 or more buildings. Typically used as the encapsulating location for a collection of Brick entities through the hasSite/isSiteOf relationships
     *
     * @type        class
     * @parent      brick:Location
     */
    readonly Site: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Site">;
    /**
     * **[brick:Smoke_Alarm](https://brickschema.org/schema/Brick#Smoke_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with smoke.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Smoke_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Smoke_Alarm">;
    /**
     * **[brick:Smoke_Detection_Alarm](https://brickschema.org/schema/Brick#Smoke_Detection_Alarm)**
     *
     * @type        class
     * @parent      brick:Smoke_Alarm
     */
    readonly Smoke_Detection_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Smoke_Detection_Alarm">;
    /**
     * **[brick:Solar_Azimuth_Angle_Sensor](https://brickschema.org/schema/Brick#Solar_Azimuth_Angle_Sensor)**
     *
     * Measures the azimuth angle of the sun
     *
     * @type        class
     * @parent      brick:Angle_Sensor
     */
    readonly Solar_Azimuth_Angle_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Solar_Azimuth_Angle_Sensor">;
    /**
     * **[brick:SolarIrradiance](https://brickschema.org/schema/Brick#Solar_Irradiance)**
     *
     * The power per unit area of solar electromagnetic radiation incident on a surface
     *
     * @type        instance
     */
    readonly Solar_Irradiance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Solar_Irradiance">;
    /**
     * **[brick:Solar_Radiance](https://brickschema.org/schema/Brick#Solar_Radiance)**
     *
     * The amount of light that passes through or is emitted from the sun and falls within a given solid angle in a specified direction
     *
     * @type        instance
     */
    readonly Solar_Radiance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Solar_Radiance">;
    /**
     * **[brick:Solar_Radiance_Sensor](https://brickschema.org/schema/Brick#Solar_Radiance_Sensor)**
     *
     * The amount of light that passes through or is emitted from the sun and falls within a given solid angle in a specified direction
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Solar_Radiance_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Solar_Radiance_Sensor">;
    /**
     * **[brick:Solar_Thermal_Collector](https://brickschema.org/schema/Brick#Solar_Thermal_Collector)**
     *
     * A type of solar panels that converts solar radiation into thermal energy.
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Solar_Thermal_Collector: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Solar_Thermal_Collector">;
    /**
     * **[brick:Solar_Zenith_Angle_Sensor](https://brickschema.org/schema/Brick#Solar_Zenith_Angle_Sensor)**
     *
     * Measures the zenith angle of the sun
     *
     * @type        class
     * @parent      brick:Angle_Sensor
     */
    readonly Solar_Zenith_Angle_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Solar_Zenith_Angle_Sensor">;
    /**
     * **[brick:Solid](https://brickschema.org/schema/Brick#Solid)**
     *
     * one of the three states or phases of matter characterized by stability of dimensions, relative incompressibility, and molecular motion held to limited oscillation.
     *
     * @type        class
     * @parent      brick:Substance
     */
    readonly Solid: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Solid">;
    /**
     * **[brick:Space](https://brickschema.org/schema/Brick#Space)**
     *
     * A part of the physical world or a virtual world whose 3D spatial extent is bounded actually or theoretically, and provides for certain functions within the zone it is contained in.
     *
     * @type        class
     * @parent      brick:Location
     */
    readonly Space: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Space">;
    /**
     * **[brick:Space_Heater](https://brickschema.org/schema/Brick#Space_Heater)**
     *
     * A heater used to warm the air in an enclosed area, such as a room or office
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Space_Heater: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Space_Heater">;
    /**
     * **[brick:Speed](https://brickschema.org/schema/Brick#Speed)**
     *
     * @type        instance
     */
    readonly Speed: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Speed">;
    /**
     * **[brick:Speed_Reset_Command](https://brickschema.org/schema/Brick#Speed_Reset_Command)**
     *
     * @type        class
     * @parent      brick:Reset_Command
     */
    readonly Speed_Reset_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Speed_Reset_Command">;
    /**
     * **[brick:Speed_Sensor](https://brickschema.org/schema/Brick#Speed_Sensor)**
     *
     * Measures the magnitude of velocity of some form of movement
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Speed_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Speed_Sensor">;
    /**
     * **[brick:Speed_Setpoint](https://brickschema.org/schema/Brick#Speed_Setpoint)**
     *
     * Sets speed
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Speed_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Speed_Setpoint">;
    /**
     * **[brick:Speed_Setpoint_Limit](https://brickschema.org/schema/Brick#Speed_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Speed_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    readonly Speed_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Speed_Setpoint_Limit">;
    /**
     * **[brick:Speed_Status](https://brickschema.org/schema/Brick#Speed_Status)**
     *
     * Indicates the operating speed of a device or equipment, e.g. fan
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Speed_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Speed_Status">;
    /**
     * **[brick:Sports_Service_Room](https://brickschema.org/schema/Brick#Sports_Service_Room)**
     *
     * A class of spaces used in the support of sports
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Sports_Service_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Sports_Service_Room">;
    /**
     * **[brick:StageShape](https://brickschema.org/schema/Brick#StageShape)**
     *
     * @type        class
     */
    readonly StageShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#StageShape">;
    /**
     * **[brick:Stage_Enable_Command](https://brickschema.org/schema/Brick#Stage_Enable_Command)**
     *
     * A point representing a discrete stage which the equipment should be operating at. The desired stage number should be identified by an entity property
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    readonly Stage_Enable_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Stage_Enable_Command">;
    /**
     * **[brick:Stage_Riser](https://brickschema.org/schema/Brick#Stage_Riser)**
     *
     * A low platform in a space or on a stage
     *
     * @type        class
     * @parent      brick:Furniture
     */
    readonly Stage_Riser: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Stage_Riser">;
    /**
     * **[brick:Stages_Status](https://brickschema.org/schema/Brick#Stages_Status)**
     *
     * Indicates which stage a control loop or equipment is in
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly Stages_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Stages_Status">;
    /**
     * **[brick:Staircase](https://brickschema.org/schema/Brick#Staircase)**
     *
     * A vertical space containing stairs
     *
     * @type        class
     * @parent      brick:Vertical_Space
     */
    readonly Staircase: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Staircase">;
    /**
     * **[brick:Standby_CRAC](https://brickschema.org/schema/Brick#Standby_CRAC)**
     *
     * A CRAC that is activated as part of a lead/lag operation or when an alarm occurs in a primary unit
     *
     * @type        class
     * @parent      brick:CRAC
     */
    readonly Standby_CRAC: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Standby_CRAC">;
    /**
     * **[brick:Standby_Fan](https://brickschema.org/schema/Brick#Standby_Fan)**
     *
     * Fan that is activated as part of a lead/lag operation or when a primary fan raises an alarm
     *
     * @type        class
     * @parent      brick:Fan
     */
    readonly Standby_Fan: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Standby_Fan">;
    /**
     * **[brick:Standby_Glycool_Unit_On_Off_Status](https://brickschema.org/schema/Brick#Standby_Glycool_Unit_On_Off_Status)**
     *
     * Indicates the on/off status of a standby glycool unit
     *
     * @type        class
     * @parent      brick:Standby_Unit_On_Off_Status
     */
    readonly Standby_Glycool_Unit_On_Off_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Standby_Glycool_Unit_On_Off_Status">;
    /**
     * **[brick:Standby_Load_Shed_Command](https://brickschema.org/schema/Brick#Standby_Load_Shed_Command)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Command
     */
    readonly Standby_Load_Shed_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Standby_Load_Shed_Command">;
    /**
     * **[brick:Standby_Unit_On_Off_Status](https://brickschema.org/schema/Brick#Standby_Unit_On_Off_Status)**
     *
     * Indicates the on/off status of a standby unit
     *
     * @type        class
     * @parent      brick:On_Off_Status
     */
    readonly Standby_Unit_On_Off_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Standby_Unit_On_Off_Status">;
    /**
     * **[brick:Start_Stop_Command](https://brickschema.org/schema/Brick#Start_Stop_Command)**
     *
     * A Start/Stop Command controls or reports the active/inactive status of a control sequence
     *
     * @type        class
     * @parent      brick:On_Off_Command
     */
    readonly Start_Stop_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Start_Stop_Command">;
    /**
     * **[brick:Start_Stop_Status](https://brickschema.org/schema/Brick#Start_Stop_Status)**
     *
     * Indicates the active/inactive status of a control loop (but not equipment activities or relays -- use On/Off for this purpose)
     *
     * @type        class
     * @parent      brick:On_Off_Status
     */
    readonly Start_Stop_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Start_Stop_Status">;
    /**
     * **[brick:Static_Pressure](https://brickschema.org/schema/Brick#Static_Pressure)**
     *
     * @type        instance
     */
    readonly Static_Pressure: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Static_Pressure">;
    /**
     * **[brick:Static_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Static_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of static pressure
     *
     * @type        class
     * @parent      brick:Deadband_Setpoint
     */
    readonly Static_Pressure_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Static_Pressure_Deadband_Setpoint">;
    /**
     * **[brick:Static_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Static_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Integral_Time_Parameter
     */
    readonly Static_Pressure_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Static_Pressure_Integral_Time_Parameter">;
    /**
     * **[brick:Static_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Static_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    readonly Static_Pressure_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Static_Pressure_Proportional_Band_Parameter">;
    /**
     * **[brick:Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Static_Pressure_Sensor)**
     *
     * Measures resistance to airflow in a heating and cooling system's components and duct work
     *
     * @type        class
     * @parent      brick:Pressure_Sensor
     */
    readonly Static_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Static_Pressure_Sensor">;
    /**
     * **[brick:Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Static_Pressure_Setpoint)**
     *
     * Sets static pressure
     *
     * @type        class
     * @parent      brick:Pressure_Setpoint
     */
    readonly Static_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Static_Pressure_Setpoint">;
    /**
     * **[brick:Static_Pressure_Setpoint_Limit](https://brickschema.org/schema/Brick#Static_Pressure_Setpoint_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Static_Pressure_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    readonly Static_Pressure_Setpoint_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Static_Pressure_Setpoint_Limit">;
    /**
     * **[brick:Static_Pressure_Step_Parameter](https://brickschema.org/schema/Brick#Static_Pressure_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Step_Parameter
     */
    readonly Static_Pressure_Step_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Static_Pressure_Step_Parameter">;
    /**
     * **[brick:Status](https://brickschema.org/schema/Brick#Status)**
     *
     * A Status is input point that reports the current operating mode, state, position, or condition of an item. Statuses are observations and should be considered 'read-only'
     *
     * @type        class
     * @parent      brick:Point
     */
    readonly Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Status">;
    /**
     * **[brick:Steam](https://brickschema.org/schema/Brick#Steam)**
     *
     * water in the vapor phase.
     *
     * @type        class
     * @parent      brick:Gas
     */
    readonly Steam: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Steam">;
    /**
     * **[brick:Steam_Baseboard_Radiator](https://brickschema.org/schema/Brick#Steam_Baseboard_Radiator)**
     *
     * Steam heating device located at or near the floor
     *
     * @type        class
     * @parent      brick:Baseboard_Radiator
     */
    readonly Steam_Baseboard_Radiator: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Steam_Baseboard_Radiator">;
    /**
     * **[brick:Steam_Distribution](https://brickschema.org/schema/Brick#Steam_Distribution)**
     *
     * Utilize a steam distribution source to represent how steam is distributed across multiple destinations
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Steam_Distribution: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Steam_Distribution">;
    /**
     * **[brick:Steam_On_Off_Command](https://brickschema.org/schema/Brick#Steam_On_Off_Command)**
     *
     * @type        class
     * @parent      brick:On_Off_Command
     */
    readonly Steam_On_Off_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Steam_On_Off_Command">;
    /**
     * **[brick:Steam_Radiator](https://brickschema.org/schema/Brick#Steam_Radiator)**
     *
     * Radiator that uses steam
     *
     * @type        class
     * @parent      brick:Radiator
     */
    readonly Steam_Radiator: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Steam_Radiator">;
    /**
     * **[brick:Steam_System](https://brickschema.org/schema/Brick#Steam_System)**
     *
     * The equipment, devices and conduits that handle the production and distribution of steam in a building
     *
     * @type        class
     * @parent      brick:Heating_Ventilation_Air_Conditioning_System
     */
    readonly Steam_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Steam_System">;
    /**
     * **[brick:Steam_Usage_Sensor](https://brickschema.org/schema/Brick#Steam_Usage_Sensor)**
     *
     * Measures the amount of steam that is consumed or used, over some period of time
     *
     * @type        class
     * @parent      brick:Usage_Sensor
     */
    readonly Steam_Usage_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Steam_Usage_Sensor">;
    /**
     * **[brick:Steam_Valve](https://brickschema.org/schema/Brick#Steam_Valve)**
     *
     * @type        class
     * @parent      brick:Valve
     */
    readonly Steam_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Steam_Valve">;
    /**
     * **[brick:Step_Parameter](https://brickschema.org/schema/Brick#Step_Parameter)**
     *
     * @type        class
     * @parent      brick:PID_Parameter
     */
    readonly Step_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Step_Parameter">;
    /**
     * **[brick:Storage_Room](https://brickschema.org/schema/Brick#Storage_Room)**
     *
     * A class of spaces used for storage
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Storage_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Storage_Room">;
    /**
     * **[brick:Storey](https://brickschema.org/schema/Brick#Storey)**
     *
     * @type        class
     * @parent      brick:Location
     */
    readonly Storey: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Storey">;
    /**
     * **[brick:Studio](https://brickschema.org/schema/Brick#Studio)**
     *
     * A room used for the production or media, usually with either a specialized set or a specialized sound booth for recording
     *
     * @type        class
     * @parent      brick:Media_Room
     */
    readonly Studio: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Studio">;
    /**
     * **[brick:Substance](https://brickschema.org/schema/Brick#Substance)**
     *
     * @type        class
     * @parent      brick:Measurable
     */
    readonly Substance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Substance">;
    /**
     * **[brick:Supply_Air](https://brickschema.org/schema/Brick#Supply_Air)**
     *
     * (1) air delivered by mechanical or natural ventilation to a space, composed of any combination of outdoor air, recirculated air, or transfer air. (2) air entering a space from an air-conditioning, heating, or ventilating apparatus for the purpose of comfort conditioning. Supply air is generally filtered, fan forced, and either heated, cooled, humidified, or dehumidified as necessary to maintain specified conditions. Only the quantity of outdoor air within the supply airflow may be used as replacement air.
     *
     * @type        class
     * @parent      brick:Air
     */
    readonly Supply_Air: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air">;
    /**
     * **[brick:Supply_Air_Differential_Pressure_Sensor](https://brickschema.org/schema/Brick#Supply_Air_Differential_Pressure_Sensor)**
     *
     * Measures the difference in pressure between an upstream and downstream of an air duct or other air conduit used to supply air into the building
     *
     * @type        class
     * @parent      brick:Air_Differential_Pressure_Sensor
     */
    readonly Supply_Air_Differential_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Differential_Pressure_Sensor">;
    /**
     * **[brick:Supply_Air_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Differential_Pressure_Setpoint)**
     *
     * Sets the target air differential pressure between an upstream and downstream point in a supply air duct or conduit
     *
     * @type        class
     * @parent      brick:Air_Differential_Pressure_Setpoint
     */
    readonly Supply_Air_Differential_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Differential_Pressure_Setpoint">;
    /**
     * **[brick:Supply_Air_Duct_Pressure_Status](https://brickschema.org/schema/Brick#Supply_Air_Duct_Pressure_Status)**
     *
     * Indicates if air pressure in supply duct is within expected bounds
     *
     * @type        class
     * @parent      brick:Pressure_Status
     */
    readonly Supply_Air_Duct_Pressure_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Duct_Pressure_Status">;
    /**
     * **[brick:Supply_Air_Flow_Demand_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Flow_Demand_Setpoint)**
     *
     * Sets the rate of supply air flow required for a process
     *
     * @type        class
     * @parent      brick:Air_Flow_Demand_Setpoint
     */
    readonly Supply_Air_Flow_Demand_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Flow_Demand_Setpoint">;
    /**
     * **[brick:Supply_Air_Flow_Sensor](https://brickschema.org/schema/Brick#Supply_Air_Flow_Sensor)**
     *
     * Measures the rate of flow of supply air
     *
     * @type        class
     * @parent      brick:Air_Flow_Sensor
     */
    readonly Supply_Air_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Flow_Sensor">;
    /**
     * **[brick:Supply_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Flow_Setpoint)**
     *
     * Sets supply air flow rate
     *
     * @type        class
     * @parent      brick:Air_Flow_Setpoint
     */
    readonly Supply_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Flow_Setpoint">;
    /**
     * **[brick:Supply_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Supply_Air_Humidity_Sensor)**
     *
     * Measures the relative humidity of supply air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    readonly Supply_Air_Humidity_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Humidity_Sensor">;
    /**
     * **[brick:Supply_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for supply air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    readonly Supply_Air_Humidity_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Humidity_Setpoint">;
    /**
     * **[brick:Supply_Air_Integral_Gain_Parameter](https://brickschema.org/schema/Brick#Supply_Air_Integral_Gain_Parameter)**
     *
     * @type        class
     * @parent      brick:Integral_Gain_Parameter
     */
    readonly Supply_Air_Integral_Gain_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Integral_Gain_Parameter">;
    /**
     * **[brick:Supply_Air_Plenum](https://brickschema.org/schema/Brick#Supply_Air_Plenum)**
     *
     * A component of the HVAC the receives air from the air handling unit to distribute to the building
     *
     * @type        class
     * @parent      brick:Air_Plenum
     */
    readonly Supply_Air_Plenum: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Plenum">;
    /**
     * **[brick:Supply_Air_Proportional_Gain_Parameter](https://brickschema.org/schema/Brick#Supply_Air_Proportional_Gain_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Gain_Parameter
     */
    readonly Supply_Air_Proportional_Gain_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Proportional_Gain_Parameter">;
    /**
     * **[brick:Supply_Air_Static_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of static pressure of supply air
     *
     * @type        class
     * @parent      brick:Static_Pressure_Deadband_Setpoint
     */
    readonly Supply_Air_Static_Pressure_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Deadband_Setpoint">;
    /**
     * **[brick:Supply_Air_Static_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Static_Pressure_Integral_Time_Parameter
     */
    readonly Supply_Air_Static_Pressure_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Integral_Time_Parameter">;
    /**
     * **[brick:Supply_Air_Static_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Static_Pressure_Proportional_Band_Parameter
     */
    readonly Supply_Air_Static_Pressure_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Proportional_Band_Parameter">;
    /**
     * **[brick:Supply_Air_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Sensor)**
     *
     * The static pressure of air within supply regions of an HVAC system
     *
     * @type        class
     * @parent      brick:Static_Pressure_Sensor
     */
    readonly Supply_Air_Static_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Sensor">;
    /**
     * **[brick:Supply_Air_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Setpoint)**
     *
     * Sets static pressure of supply air
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    readonly Supply_Air_Static_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Static_Pressure_Setpoint">;
    /**
     * **[brick:Supply_Air_Temperature_Alarm](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with the temperature of supply air.
     *
     * @type        class
     * @parent      brick:Air_Temperature_Alarm
     */
    readonly Supply_Air_Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Temperature_Alarm">;
    /**
     * **[brick:Supply_Air_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of supply air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Supply_Air_Temperature_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Temperature_Deadband_Setpoint">;
    /**
     * **[brick:Supply_Air_Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_High_Reset_Setpoint
     */
    readonly Supply_Air_Temperature_High_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Temperature_High_Reset_Setpoint">;
    /**
     * **[brick:Supply_Air_Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_Low_Reset_Setpoint
     */
    readonly Supply_Air_Temperature_Low_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Temperature_Low_Reset_Setpoint">;
    /**
     * **[brick:Supply_Air_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    readonly Supply_Air_Temperature_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Temperature_Proportional_Band_Parameter">;
    /**
     * **[brick:Supply_Air_Temperature_Reset_Differential_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Reset_Differential_Setpoint)**
     *
     * @type        class
     * @parent      brick:Temperature_Differential_Reset_Setpoint
     */
    readonly Supply_Air_Temperature_Reset_Differential_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Temperature_Reset_Differential_Setpoint">;
    /**
     * **[brick:Supply_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Sensor)**
     *
     * Measures the temperature of supply air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    readonly Supply_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Temperature_Sensor">;
    /**
     * **[brick:Supply_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Setpoint)**
     *
     * Temperature setpoint for supply air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Supply_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Temperature_Setpoint">;
    /**
     * **[brick:Supply_Air_Temperature_Step_Parameter](https://brickschema.org/schema/Brick#Supply_Air_Temperature_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Air_Temperature_Step_Parameter
     */
    readonly Supply_Air_Temperature_Step_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Temperature_Step_Parameter">;
    /**
     * **[brick:Supply_Air_Velocity_Pressure_Sensor](https://brickschema.org/schema/Brick#Supply_Air_Velocity_Pressure_Sensor)**
     *
     * @type        class
     * @parent      brick:Velocity_Pressure_Sensor
     */
    readonly Supply_Air_Velocity_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Air_Velocity_Pressure_Sensor">;
    /**
     * **[brick:Supply_Chilled_Water](https://brickschema.org/schema/Brick#Supply_Chilled_Water)**
     *
     * @type        class
     * @parent      brick:Chilled_Water
     */
    readonly Supply_Chilled_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Chilled_Water">;
    /**
     * **[brick:Supply_Chilled_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Supply_Chilled_Water_Temperature_Setpoint)**
     *
     * Temperature setpoint for supply chilled water
     *
     * @type        class
     * @parent      brick:Chilled_Water_Temperature_Setpoint
     */
    readonly Supply_Chilled_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Chilled_Water_Temperature_Setpoint">;
    /**
     * **[brick:Supply_Condenser_Water](https://brickschema.org/schema/Brick#Supply_Condenser_Water)**
     *
     * In a condenser water loop, this is water being brought to the condenser side of a heat-rejection device (e.g. chiller). It is the 'cold' side.
     *
     * @type        class
     * @parent      brick:Condenser_Water
     */
    readonly Supply_Condenser_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Condenser_Water">;
    /**
     * **[brick:Supply_Condenser_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Supply_Condenser_Water_Flow_Sensor)**
     *
     * Measures the flow of the supply condenser water
     *
     * @type        class
     * @parent      brick:Supply_Water_Flow_Sensor
     */
    readonly Supply_Condenser_Water_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Condenser_Water_Flow_Sensor">;
    /**
     * **[brick:Supply_Condenser_Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Supply_Condenser_Water_Temperature_Sensor)**
     *
     * Measures the temperature of the supply condenser water
     *
     * @type        class
     * @parent      brick:Condenser_Water_Temperature_Sensor
     */
    readonly Supply_Condenser_Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Condenser_Water_Temperature_Sensor">;
    /**
     * **[brick:Supply_Condenser_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Supply_Condenser_Water_Temperature_Setpoint)**
     *
     * The temperature setpoint for the supply condenser water
     *
     * @type        class
     * @parent      brick:Supply_Water_Temperature_Setpoint
     */
    readonly Supply_Condenser_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Condenser_Water_Temperature_Setpoint">;
    /**
     * **[brick:Supply_Fan](https://brickschema.org/schema/Brick#Supply_Fan)**
     *
     * Fan moving supply air -- air that is supplied from the HVAC system into the building
     *
     * @type        class
     * @parent      brick:Fan
     */
    readonly Supply_Fan: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Fan">;
    /**
     * **[brick:Supply_Hot_Water](https://brickschema.org/schema/Brick#Supply_Hot_Water)**
     *
     * @type        class
     * @parent      brick:Hot_Water
     */
    readonly Supply_Hot_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Hot_Water">;
    /**
     * **[brick:Supply_Hot_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Supply_Hot_Water_Temperature_Setpoint)**
     *
     * Temperature setpoint for supply hot water
     *
     * @type        class
     * @parent      brick:Hot_Water_Temperature_Setpoint
     */
    readonly Supply_Hot_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Hot_Water_Temperature_Setpoint">;
    /**
     * **[brick:Supply_Water](https://brickschema.org/schema/Brick#Supply_Water)**
     *
     * @type        class
     * @parent      brick:Water
     */
    readonly Supply_Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Water">;
    /**
     * **[brick:Supply_Water_Differential_Pressure_Deadband_Setpoint](https://brickschema.org/schema/Brick#Supply_Water_Differential_Pressure_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of differential pressure of supply water
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Deadband_Setpoint
     */
    readonly Supply_Water_Differential_Pressure_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Water_Differential_Pressure_Deadband_Setpoint">;
    /**
     * **[brick:Supply_Water_Differential_Pressure_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Supply_Water_Differential_Pressure_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Integral_Time_Parameter
     */
    readonly Supply_Water_Differential_Pressure_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Water_Differential_Pressure_Integral_Time_Parameter">;
    /**
     * **[brick:Supply_Water_Differential_Pressure_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Supply_Water_Differential_Pressure_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Proportional_Band
     */
    readonly Supply_Water_Differential_Pressure_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Water_Differential_Pressure_Proportional_Band_Parameter">;
    /**
     * **[brick:Supply_Water_Flow_Sensor](https://brickschema.org/schema/Brick#Supply_Water_Flow_Sensor)**
     *
     * Measures the rate of flow of hot supply water
     *
     * @type        class
     * @parent      brick:Water_Flow_Sensor
     */
    readonly Supply_Water_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Water_Flow_Sensor">;
    /**
     * **[brick:Supply_Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Supply_Water_Flow_Setpoint)**
     *
     * Sets the flow rate of hot supply water
     *
     * @type        class
     * @parent      brick:Water_Flow_Setpoint
     */
    readonly Supply_Water_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Water_Flow_Setpoint">;
    /**
     * **[brick:Supply_Water_Temperature_Alarm](https://brickschema.org/schema/Brick#Supply_Water_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with temperature of the supply water.
     *
     * @type        class
     * @parent      brick:Water_Temperature_Alarm
     */
    readonly Supply_Water_Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Water_Temperature_Alarm">;
    /**
     * **[brick:Supply_Water_Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Supply_Water_Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature of supply water
     *
     * @type        class
     * @parent      brick:Supply_Water_Temperature_Setpoint
     */
    readonly Supply_Water_Temperature_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Water_Temperature_Deadband_Setpoint">;
    /**
     * **[brick:Supply_Water_Temperature_Integral_Time_Parameter](https://brickschema.org/schema/Brick#Supply_Water_Temperature_Integral_Time_Parameter)**
     *
     * @type        class
     * @parent      brick:Integral_Time_Parameter
     */
    readonly Supply_Water_Temperature_Integral_Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Water_Temperature_Integral_Time_Parameter">;
    /**
     * **[brick:Supply_Water_Temperature_Proportional_Band_Parameter](https://brickschema.org/schema/Brick#Supply_Water_Temperature_Proportional_Band_Parameter)**
     *
     * @type        class
     * @parent      brick:Proportional_Band_Parameter
     */
    readonly Supply_Water_Temperature_Proportional_Band_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Water_Temperature_Proportional_Band_Parameter">;
    /**
     * **[brick:Supply_Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Supply_Water_Temperature_Setpoint)**
     *
     * Sets temperature of supply water
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    readonly Supply_Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Supply_Water_Temperature_Setpoint">;
    /**
     * **[brick:Surveillance_Camera](https://brickschema.org/schema/Brick#Surveillance_Camera)**
     *
     * @type        class
     * @parent      brick:Camera
     */
    readonly Surveillance_Camera: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Surveillance_Camera">;
    /**
     * **[brick:Switch](https://brickschema.org/schema/Brick#Switch)**
     *
     * A switch used to operate all or part of a lighting installation
     *
     * @type        class
     * @parent      brick:Interface
     */
    readonly Switch: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Switch">;
    /**
     * **[brick:Switch_Room](https://brickschema.org/schema/Brick#Switch_Room)**
     *
     * A telecommuncations room housing network switches
     *
     * @type        class
     * @parent      brick:Telecom_Room
     */
    readonly Switch_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Switch_Room">;
    /**
     * **[brick:Switchgear](https://brickschema.org/schema/Brick#Switchgear)**
     *
     * A main disconnect or service disconnect feeds power to a switchgear, which then distributes power to the rest of the building through smaller amperage-rated disconnects.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    readonly Switchgear: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Switchgear">;
    /**
     * **[brick:System](https://brickschema.org/schema/Brick#System)**
     *
     * A System is a combination of equipment and auxiliary devices (e.g., controls, accessories, interconnecting means, and termi­nal elements) by which energy is transformed so it performs a specific function such as HVAC, service water heating, or lighting. (ASHRAE Dictionary).
     *
     * @type        class
     * @parent      brick:Collection
     */
    readonly System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#System">;
    /**
     * **[brick:System_Enable_Command](https://brickschema.org/schema/Brick#System_Enable_Command)**
     *
     * Enables operation of a system
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    readonly System_Enable_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#System_Enable_Command">;
    /**
     * **[brick:System_Shutdown_Status](https://brickschema.org/schema/Brick#System_Shutdown_Status)**
     *
     * Indicates if a system has been shutdown
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly System_Shutdown_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#System_Shutdown_Status">;
    /**
     * **[brick:System_Status](https://brickschema.org/schema/Brick#System_Status)**
     *
     * Indicates properties of the activity of a system
     *
     * @type        class
     * @parent      brick:Status
     */
    readonly System_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#System_Status">;
    /**
     * **[brick:TABS_Panel](https://brickschema.org/schema/Brick#TABS_Panel)**
     *
     * See Thermally_Activated_Building_System_Panel
     *
     * @type        class
     * @parent      brick:Radiant_Panel
     */
    readonly TABS_Panel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#TABS_Panel">;
    /**
     * **[brick:TETRA_Room](https://brickschema.org/schema/Brick#TETRA_Room)**
     *
     * A room used for local two-way radio networks, e.g. the portable radios carried by facilities staff
     *
     * @type        class
     * @parent      brick:Telecom_Room
     */
    readonly TETRA_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#TETRA_Room">;
    /**
     * **[brick:TVOCConcentration](https://brickschema.org/schema/Brick#TVOC_Concentration)**
     *
     * The concentration of total volatile organic compounds in air
     *
     * @type        instance
     */
    readonly TVOC_Concentration: import("../index.js").Iri<"https://brickschema.org/schema/Brick#TVOC_Concentration">;
    /**
     * **[brick:TVOC_Level_Sensor](https://brickschema.org/schema/Brick#TVOC_Level_Sensor)**
     *
     * A sensor measuring the level of all VOCs in air
     *
     * @type        class
     * @parent      brick:TVOC_Sensor
     */
    readonly TVOC_Level_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#TVOC_Level_Sensor">;
    /**
     * **[brick:TVOC_Sensor](https://brickschema.org/schema/Brick#TVOC_Sensor)**
     *
     * @type        class
     * @parent      brick:Particulate_Matter_Sensor
     */
    readonly TVOC_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#TVOC_Sensor">;
    /**
     * **[brick:Tag](https://brickschema.org/schema/Brick#Tag)**
     *
     * @type        class
     */
    readonly Tag: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Tag">;
    /**
     * **[brick:Team_Room](https://brickschema.org/schema/Brick#Team_Room)**
     *
     * An office used by multiple team members for specific work tasks. Distinct from Conference Room
     *
     * @type        class
     * @parent      brick:Enclosed_Office
     */
    readonly Team_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Team_Room">;
    /**
     * **[brick:Telecom_Room](https://brickschema.org/schema/Brick#Telecom_Room)**
     *
     * A class of spaces used to support telecommuncations and IT equipment
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Telecom_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Telecom_Room">;
    /**
     * **[brick:Temperature](https://brickschema.org/schema/Brick#Temperature)**
     *
     * @type        instance
     */
    readonly Temperature: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Temperature">;
    /**
     * **[brick:TemperatureCoefficientPerDegreeCelsiusShape](https://brickschema.org/schema/Brick#TemperatureCoefficientPerDegreeCelsiusShape)**
     *
     * @type        class
     */
    readonly TemperatureCoefficientPerDegreeCelsiusShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#TemperatureCoefficientPerDegreeCelsiusShape">;
    /**
     * **[brick:TemperatureShape](https://brickschema.org/schema/Brick#TemperatureShape)**
     *
     * @type        class
     */
    readonly TemperatureShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#TemperatureShape">;
    /**
     * **[brick:Temperature_Alarm](https://brickschema.org/schema/Brick#Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with temperature.
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Temperature_Alarm">;
    /**
     * **[brick:Temperature_Deadband_Setpoint](https://brickschema.org/schema/Brick#Temperature_Deadband_Setpoint)**
     *
     * Sets the size of a deadband of temperature
     *
     * @type        class
     * @parent      brick:Deadband_Setpoint
     */
    readonly Temperature_Deadband_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Temperature_Deadband_Setpoint">;
    /**
     * **[brick:Temperature_Differential_Reset_Setpoint](https://brickschema.org/schema/Brick#Temperature_Differential_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Reset_Setpoint
     */
    readonly Temperature_Differential_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Temperature_Differential_Reset_Setpoint">;
    /**
     * **[brick:Temperature_High_Reset_Setpoint](https://brickschema.org/schema/Brick#Temperature_High_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Reset_Setpoint
     */
    readonly Temperature_High_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Temperature_High_Reset_Setpoint">;
    /**
     * **[brick:Temperature_Low_Reset_Setpoint](https://brickschema.org/schema/Brick#Temperature_Low_Reset_Setpoint)**
     *
     * @type        class
     * @parent      brick:Reset_Setpoint
     */
    readonly Temperature_Low_Reset_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Temperature_Low_Reset_Setpoint">;
    /**
     * **[brick:Temperature_Parameter](https://brickschema.org/schema/Brick#Temperature_Parameter)**
     *
     * Parameters relevant to temperature-related systems and points
     *
     * @type        class
     * @parent      brick:Parameter
     */
    readonly Temperature_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Temperature_Parameter">;
    /**
     * **[brick:Temperature_Sensor](https://brickschema.org/schema/Brick#Temperature_Sensor)**
     *
     * Measures temperature: the physical property of matter that quantitatively expresses the common notions of hot and cold
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Temperature_Sensor">;
    /**
     * **[brick:Temperature_Setpoint](https://brickschema.org/schema/Brick#Temperature_Setpoint)**
     *
     * Sets temperature
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Temperature_Setpoint">;
    /**
     * **[brick:Temperature_Step_Parameter](https://brickschema.org/schema/Brick#Temperature_Step_Parameter)**
     *
     * @type        class
     * @parent      brick:Step_Parameter
     */
    readonly Temperature_Step_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Temperature_Step_Parameter">;
    /**
     * **[brick:Temperature_Tolerance_Parameter](https://brickschema.org/schema/Brick#Temperature_Tolerance_Parameter)**
     *
     * A parameter determining the difference between upper and lower limits of temperature.
     *
     * @type        class
     * @parent      brick:Temperature_Parameter
     */
    readonly Temperature_Tolerance_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Temperature_Tolerance_Parameter">;
    /**
     * **[brick:Temporary_Occupancy_Status](https://brickschema.org/schema/Brick#Temporary_Occupancy_Status)**
     *
     * For systems that differentiate between scheduled occupied/unoccupied mode, this indicates if a space is temporarily occupied when it would otherwise be unoccupied
     *
     * @type        class
     * @parent      brick:Occupancy_Status
     */
    readonly Temporary_Occupancy_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Temporary_Occupancy_Status">;
    /**
     * **[brick:Terminal_Unit](https://brickschema.org/schema/Brick#Terminal_Unit)**
     *
     * A device that regulates the volumetric flow rate and/or the temperature of the controlled medium.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Terminal_Unit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Terminal_Unit">;
    /**
     * **[brick:ThermalTransmittanceShape](https://brickschema.org/schema/Brick#ThermalTransmittanceShape)**
     *
     * @type        class
     */
    readonly ThermalTransmittanceShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#ThermalTransmittanceShape">;
    /**
     * **[brick:Thermal_Energy](https://brickschema.org/schema/Brick#Thermal_Energy)**
     *
     * Thermal Energy} is the portion of the thermodynamic or internal energy of a system that is responsible for the temperature of the system. From a macroscopic thermodynamic description, the thermal energy of a system is given by its constant volume specific heat capacity C(T), a temperature coefficient also called thermal capacity, at any given absolute temperature (T): (U_{thermal = C(T) \cdot T).
     *
     * @type        instance
     */
    readonly Thermal_Energy: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Thermal_Energy">;
    /**
     * **[brick:ThermalPower](https://brickschema.org/schema/Brick#Thermal_Power)**
     *
     * `
     *
     * @type        instance
     */
    readonly Thermal_Power: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Thermal_Power">;
    /**
     * **[brick:Thermal_Power_Meter](https://brickschema.org/schema/Brick#Thermal_Power_Meter)**
     *
     * A standalone thermal power meter
     *
     * @type        class
     * @parent      brick:Meter
     */
    readonly Thermal_Power_Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Thermal_Power_Meter">;
    /**
     * **[brick:Thermal_Power_Sensor](https://brickschema.org/schema/Brick#Thermal_Power_Sensor)**
     *
     * @type        class
     * @parent      brick:Power_Sensor
     */
    readonly Thermal_Power_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Thermal_Power_Sensor">;
    /**
     * **[brick:Thermally_Activated_Building_System_Panel](https://brickschema.org/schema/Brick#Thermally_Activated_Building_System_Panel)**
     *
     * Radiant panel heating and cooling system where the energy heat source or sink is embedded in the building structure such as in slabs and walls.
     *
     * @type        class
     * @parent      brick:Radiant_Panel
     */
    readonly Thermally_Activated_Building_System_Panel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Thermally_Activated_Building_System_Panel">;
    /**
     * **[brick:Thermostat](https://brickschema.org/schema/Brick#Thermostat)**
     *
     * An automatic control device used to maintain temperature at a fixed or adjustable setpoint.
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Thermostat: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Thermostat">;
    /**
     * **[brick:Ticketing_Booth](https://brickschema.org/schema/Brick#Ticketing_Booth)**
     *
     * A room or space used to sell or distribute tickets to events at a venue
     *
     * @type        class
     * @parent      brick:Space
     */
    readonly Ticketing_Booth: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Ticketing_Booth">;
    /**
     * **[brick:TiltShape](https://brickschema.org/schema/Brick#TiltShape)**
     *
     * @type        class
     */
    readonly TiltShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#TiltShape">;
    /**
     * **[brick:Time](https://brickschema.org/schema/Brick#Time)**
     *
     * @type        instance
     */
    readonly Time: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Time">;
    /**
     * **[brick:Time_Parameter](https://brickschema.org/schema/Brick#Time_Parameter)**
     *
     * @type        class
     * @parent      brick:PID_Parameter
     */
    readonly Time_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Time_Parameter">;
    /**
     * **[brick:Time_Setpoint](https://brickschema.org/schema/Brick#Time_Setpoint)**
     *
     * @type        class
     * @parent      brick:Setpoint
     */
    readonly Time_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Time_Setpoint">;
    /**
     * **[brick:TimeseriesReference](https://brickschema.org/schema/Brick#TimeseriesReference)**
     *
     * Metadata describing where and how the data for a Brick Point is stored
     *
     * @type        class
     */
    readonly TimeseriesReference: import("../index.js").Iri<"https://brickschema.org/schema/Brick#TimeseriesReference">;
    /**
     * **[brick:Tolerance_Parameter](https://brickschema.org/schema/Brick#Tolerance_Parameter)**
     *
     * difference between upper and lower limits of size for a given nominal dimension or value.
     *
     * @type        class
     * @parent      brick:Parameter
     */
    readonly Tolerance_Parameter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Tolerance_Parameter">;
    /**
     * **[brick:Torque](https://brickschema.org/schema/Brick#Torque)**
     *
     * In physics, a torque (τ) is a vector that measures the tendency of a force to rotate an object about some axis. The magnitude of a torque is defined as force times its lever arm. Just as a force is a push or a pull, a torque can be thought of as a twist. The SI unit for torque is newton meters ((N m)). In U.S. customary units, it is measured in foot pounds (ft lbf) (also known as "pounds feet"). Mathematically, the torque on a particle (which has the position r in some reference frame) can be defined as the cross product: (τ = r x F) where, r is the particle's position vector relative to the fulcrum  F is the force acting on the particles,  or, more generally, torque can be defined as the rate of change of angular momentum: (τ = dL/dt) where, L is the angular momentum vector  t stands for time.
     *
     * @type        instance
     */
    readonly Torque: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Torque">;
    /**
     * **[brick:Torque_Sensor](https://brickschema.org/schema/Brick#Torque_Sensor)**
     *
     * Measures torque, the tendency of a force to rotate an object about some axis
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Torque_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Torque_Sensor">;
    /**
     * **[brick:Touchpanel](https://brickschema.org/schema/Brick#Touchpanel)**
     *
     * A switch used to operate all or part of a lighting installation that uses a touch-based mechanism (typically resistive or capacitive) rather than a mechanical actuator
     *
     * @type        class
     * @parent      brick:Interface
     */
    readonly Touchpanel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Touchpanel">;
    /**
     * **[brick:Trace_Heat_Sensor](https://brickschema.org/schema/Brick#Trace_Heat_Sensor)**
     *
     * Measures the surface temperature of pipelines carrying temperature-sensitive products; typically used to avoid frosting/freezing
     *
     * @type        class
     * @parent      brick:Heat_Sensor
     */
    readonly Trace_Heat_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Trace_Heat_Sensor">;
    /**
     * **[brick:Transformer](https://brickschema.org/schema/Brick#Transformer)**
     *
     * A Transformer is usually fed by a high-voltage source and then steps down the voltage to a lower-voltage feed for low-voltage application (such as lights). Transformers also can step up voltage, but this generally does not apply to in building distribution.
     *
     * @type        class
     * @parent      brick:Electrical_Equipment
     */
    readonly Transformer: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Transformer">;
    /**
     * **[brick:Transformer_Room](https://brickschema.org/schema/Brick#Transformer_Room)**
     *
     * An electrical room where electricity enters and is transformed to different voltages and currents by the equipment contained in the room
     *
     * @type        class
     * @parent      brick:Electrical_Room
     */
    readonly Transformer_Room: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Transformer_Room">;
    /**
     * **[brick:Tunnel](https://brickschema.org/schema/Brick#Tunnel)**
     *
     * An enclosed space that connects buildings. Often underground
     *
     * @type        class
     * @parent      brick:Space
     */
    readonly Tunnel: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Tunnel">;
    /**
     * **[brick:Underfloor_Air_Plenum](https://brickschema.org/schema/Brick#Underfloor_Air_Plenum)**
     *
     * An open space between a structural concrete slab and the underside of a raised access floor system that connects to an air handling unit to receive conditioned and/or ventilating air before delivery to the room(s)
     *
     * @type        class
     * @parent      brick:Supply_Air_Plenum
     */
    readonly Underfloor_Air_Plenum: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Underfloor_Air_Plenum">;
    /**
     * **[brick:Underfloor_Air_Plenum_Static_Pressure_Sensor](https://brickschema.org/schema/Brick#Underfloor_Air_Plenum_Static_Pressure_Sensor)**
     *
     * Measures the outward push of air against the plenum surfaces and used to measure the resistance when air moves through the plenum
     *
     * @type        class
     * @parent      brick:Static_Pressure_Sensor
     */
    readonly Underfloor_Air_Plenum_Static_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Underfloor_Air_Plenum_Static_Pressure_Sensor">;
    /**
     * **[brick:Underfloor_Air_Plenum_Static_Pressure_Setpoint](https://brickschema.org/schema/Brick#Underfloor_Air_Plenum_Static_Pressure_Setpoint)**
     *
     * Sets the underfloor air plenum static pressure
     *
     * @type        class
     * @parent      brick:Static_Pressure_Setpoint
     */
    readonly Underfloor_Air_Plenum_Static_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Underfloor_Air_Plenum_Static_Pressure_Setpoint">;
    /**
     * **[brick:Underfloor_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Underfloor_Air_Temperature_Sensor)**
     *
     * Measures the temperature of underfloor air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    readonly Underfloor_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Underfloor_Air_Temperature_Sensor">;
    /**
     * **[brick:Unit_Failure_Alarm](https://brickschema.org/schema/Brick#Unit_Failure_Alarm)**
     *
     * An alarm that indicates the failure of an equipment or device
     *
     * @type        class
     * @parent      brick:Failure_Alarm
     */
    readonly Unit_Failure_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Unit_Failure_Alarm">;
    /**
     * **[brick:Unoccupied_Air_Temperature_Cooling_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Air_Temperature_Cooling_Setpoint)**
     *
     * Sets temperature of air when unoccupied for cooling
     *
     * @type        class
     * @parent      brick:Cooling_Temperature_Setpoint
     */
    readonly Unoccupied_Air_Temperature_Cooling_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Unoccupied_Air_Temperature_Cooling_Setpoint">;
    /**
     * **[brick:Unoccupied_Air_Temperature_Heating_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Air_Temperature_Heating_Setpoint)**
     *
     * Sets temperature of air when unoccupied for heating
     *
     * @type        class
     * @parent      brick:Heating_Temperature_Setpoint
     */
    readonly Unoccupied_Air_Temperature_Heating_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Unoccupied_Air_Temperature_Heating_Setpoint">;
    /**
     * **[brick:Unoccupied_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Air_Temperature_Setpoint)**
     *
     * Sets temperature of air when unoccupied
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Unoccupied_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Unoccupied_Air_Temperature_Setpoint">;
    /**
     * **[brick:Unoccupied_Cooling_Discharge_Air_Flow_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Cooling_Discharge_Air_Flow_Setpoint)**
     *
     * Sets discharge air flow for cooling when unoccupied
     *
     * @type        class
     * @parent      brick:Cooling_Discharge_Air_Flow_Setpoint
     */
    readonly Unoccupied_Cooling_Discharge_Air_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Unoccupied_Cooling_Discharge_Air_Flow_Setpoint">;
    /**
     * **[brick:Unoccupied_Discharge_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Discharge_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Discharge_Air_Temperature_Setpoint
     */
    readonly Unoccupied_Discharge_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Unoccupied_Discharge_Air_Temperature_Setpoint">;
    /**
     * **[brick:Unoccupied_Load_Shed_Command](https://brickschema.org/schema/Brick#Unoccupied_Load_Shed_Command)**
     *
     * @type        class
     * @parent      brick:Load_Shed_Command
     */
    readonly Unoccupied_Load_Shed_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Unoccupied_Load_Shed_Command">;
    /**
     * **[brick:Unoccupied_Return_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Return_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Return_Air_Temperature_Setpoint
     */
    readonly Unoccupied_Return_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Unoccupied_Return_Air_Temperature_Setpoint">;
    /**
     * **[brick:Unoccupied_Room_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Room_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Room_Air_Temperature_Setpoint
     */
    readonly Unoccupied_Room_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Unoccupied_Room_Air_Temperature_Setpoint">;
    /**
     * **[brick:Unoccupied_Supply_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Supply_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Supply_Air_Temperature_Setpoint
     */
    readonly Unoccupied_Supply_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Unoccupied_Supply_Air_Temperature_Setpoint">;
    /**
     * **[brick:Unoccupied_Zone_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Unoccupied_Zone_Air_Temperature_Setpoint)**
     *
     * @type        class
     * @parent      brick:Unoccupied_Air_Temperature_Setpoint
     */
    readonly Unoccupied_Zone_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Unoccupied_Zone_Air_Temperature_Setpoint">;
    /**
     * **[brick:Usage_Sensor](https://brickschema.org/schema/Brick#Usage_Sensor)**
     *
     * Measures the amount of some substance that is consumed or used, over some period of time
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Usage_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Usage_Sensor">;
    /**
     * **[brick:VAV](https://brickschema.org/schema/Brick#VAV)**
     *
     * See Variable_Air_Volume_Box
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    readonly VAV: import("../index.js").Iri<"https://brickschema.org/schema/Brick#VAV">;
    /**
     * **[brick:VFD](https://brickschema.org/schema/Brick#VFD)**
     *
     * Electronic device that varies its output frequency to vary the rotating speed of a motor, given a fixed input frequency. Used with fans or pumps to vary the flow in the system as a function of a maintained pressure.
     *
     * @type        class
     * @parent      brick:Motor
     */
    readonly VFD: import("../index.js").Iri<"https://brickschema.org/schema/Brick#VFD">;
    /**
     * **[brick:VFD_Enable_Command](https://brickschema.org/schema/Brick#VFD_Enable_Command)**
     *
     * Enables operation of a variable frequency drive
     *
     * @type        class
     * @parent      brick:Enable_Command
     */
    readonly VFD_Enable_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#VFD_Enable_Command">;
    /**
     * **[brick:Valve](https://brickschema.org/schema/Brick#Valve)**
     *
     * A device that regulates, directs or controls the flow of a fluid by opening, closing or partially obstructing various passageways
     *
     * @type        class
     * @parent      brick:HVAC_Equipment
     */
    readonly Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Valve">;
    /**
     * **[brick:Valve_Command](https://brickschema.org/schema/Brick#Valve_Command)**
     *
     * Controls or reports the openness of a valve (typically as a proportion of its full range of motion)
     *
     * @type        class
     * @parent      brick:Command
     */
    readonly Valve_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Valve_Command">;
    /**
     * **[brick:Valve_Position_Sensor](https://brickschema.org/schema/Brick#Valve_Position_Sensor)**
     *
     * Measures the current position of a valve in terms of the percent of fully open
     *
     * @type        class
     * @parent      brick:Position_Sensor
     */
    readonly Valve_Position_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Valve_Position_Sensor">;
    /**
     * **[brick:Variable_Air_Volume_Box](https://brickschema.org/schema/Brick#Variable_Air_Volume_Box)**
     *
     * A device that regulates the volume and temperature of air delivered to a zone by opening or closing a damper
     *
     * @type        class
     * @parent      brick:Terminal_Unit
     */
    readonly Variable_Air_Volume_Box: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Variable_Air_Volume_Box">;
    /**
     * **[brick:Variable_Air_Volume_Box_With_Reheat](https://brickschema.org/schema/Brick#Variable_Air_Volume_Box_With_Reheat)**
     *
     * A VAV box with a reheat coil mounted on the discharge end of the unit that can heat the air delivered to a zone
     *
     * @type        class
     * @parent      brick:Variable_Air_Volume_Box
     */
    readonly Variable_Air_Volume_Box_With_Reheat: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Variable_Air_Volume_Box_With_Reheat">;
    /**
     * **[brick:Variable_Frequency_Drive](https://brickschema.org/schema/Brick#Variable_Frequency_Drive)**
     *
     * Electronic device that varies its output frequency to vary the rotating speed of a motor, given a fixed input frequency. Used with fans or pumps to vary the flow in the system as a function of a maintained pressure.
     *
     * @type        class
     * @parent      brick:Motor
     */
    readonly Variable_Frequency_Drive: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Variable_Frequency_Drive">;
    /**
     * **[brick:Velocity_Pressure](https://brickschema.org/schema/Brick#Velocity_Pressure)**
     *
     * Dynamic Pressure (indicated with q, or Q, and sometimes called velocity pressure) is the quantity defined by: (q = 1/2 * ρ v^{2}), where (using SI units),  (q) is dynamic pressure in (pascals), (ρ) is fluid density in (kg/m^{3}) (for example, density of air) and (v ) is fluid velocity in (m/s).
     *
     * @type        instance
     */
    readonly Velocity_Pressure: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Velocity_Pressure">;
    /**
     * **[brick:Velocity_Pressure_Sensor](https://brickschema.org/schema/Brick#Velocity_Pressure_Sensor)**
     *
     * Measures the difference between total pressure and static pressure
     *
     * @type        class
     * @parent      brick:Pressure_Sensor
     */
    readonly Velocity_Pressure_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Velocity_Pressure_Sensor">;
    /**
     * **[brick:Velocity_Pressure_Setpoint](https://brickschema.org/schema/Brick#Velocity_Pressure_Setpoint)**
     *
     * Sets static veloicty pressure
     *
     * @type        class
     * @parent      brick:Pressure_Setpoint
     */
    readonly Velocity_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Velocity_Pressure_Setpoint">;
    /**
     * **[brick:Vent_Operating_Mode_Status](https://brickschema.org/schema/Brick#Vent_Operating_Mode_Status)**
     *
     * Indicates the current operating mode of a vent
     *
     * @type        class
     * @parent      brick:Operating_Mode_Status
     */
    readonly Vent_Operating_Mode_Status: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Vent_Operating_Mode_Status">;
    /**
     * **[brick:Ventilation_Air_Flow_Ratio_Limit](https://brickschema.org/schema/Brick#Ventilation_Air_Flow_Ratio_Limit)**
     *
     * A parameter that places a lower or upper bound on the range of permitted values of a Ventilation_Air_Flow_Ratio_Setpoint.
     *
     * @type        class
     * @parent      brick:Limit
     */
    readonly Ventilation_Air_Flow_Ratio_Limit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Ventilation_Air_Flow_Ratio_Limit">;
    /**
     * **[brick:Ventilation_Air_System](https://brickschema.org/schema/Brick#Ventilation_Air_System)**
     *
     * The equipment, devices, and conduits that handle the introduction and distribution of ventilation air in the building
     *
     * @type        class
     * @parent      brick:Air_System
     */
    readonly Ventilation_Air_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Ventilation_Air_System">;
    /**
     * **[brick:Vertical_Space](https://brickschema.org/schema/Brick#Vertical_Space)**
     *
     * A class of spaces used to connect multiple floors or levels..
     *
     * @type        class
     * @parent      brick:Space
     */
    readonly Vertical_Space: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Vertical_Space">;
    /**
     * **[brick:Video_Intercom](https://brickschema.org/schema/Brick#Video_Intercom)**
     *
     * @type        class
     * @parent      brick:Intercom_Equipment
     */
    readonly Video_Intercom: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Video_Intercom">;
    /**
     * **[brick:Video_Surveillance_Equipment](https://brickschema.org/schema/Brick#Video_Surveillance_Equipment)**
     *
     * @type        class
     * @parent      brick:Security_Equipment
     */
    readonly Video_Surveillance_Equipment: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Video_Surveillance_Equipment">;
    /**
     * **[brick:Visitor_Lobby](https://brickschema.org/schema/Brick#Visitor_Lobby)**
     *
     * A lobby for visitors to the building. Sometimes used to distinguish from an employee entrance looby
     *
     * @type        class
     * @parent      brick:Lobby
     */
    readonly Visitor_Lobby: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Visitor_Lobby">;
    /**
     * **[brick:Voltage](https://brickschema.org/schema/Brick#Voltage)**
     *
     * Voltage, also referred to as Electric Tension, is the difference between electrical potentials of two points. For an electric field within a medium, (U_{ab} = - \int_{r_a}^{r_b} E . {dr}), where (E) is electric field strength. For an irrotational electric field, the voltage is independent of the path between the two points (a) and (b).
     *
     * @type        instance
     */
    readonly Voltage: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Voltage">;
    /**
     * **[brick:VoltageAngle](https://brickschema.org/schema/Brick#Voltage_Angle)**
     *
     * Angle of voltage phasor
     *
     * @type        instance
     */
    readonly Voltage_Angle: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Voltage_Angle">;
    /**
     * **[brick:VoltageImbalance](https://brickschema.org/schema/Brick#Voltage_Imbalance)**
     *
     * The percent deviation from average voltage
     *
     * @type        instance
     */
    readonly Voltage_Imbalance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Voltage_Imbalance">;
    /**
     * **[brick:Voltage_Imbalance_Sensor](https://brickschema.org/schema/Brick#Voltage_Imbalance_Sensor)**
     *
     * A sensor which measures the voltage difference (imbalance) between phases of an electrical system
     *
     * @type        class
     * @parent      brick:Imbalance_Sensor
     */
    readonly Voltage_Imbalance_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Voltage_Imbalance_Sensor">;
    /**
     * **[brick:Voltage_Sensor](https://brickschema.org/schema/Brick#Voltage_Sensor)**
     *
     * Measures the voltage of an electrical device or object
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Voltage_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Voltage_Sensor">;
    /**
     * **[brick:VolumeShape](https://brickschema.org/schema/Brick#VolumeShape)**
     *
     * @type        class
     */
    readonly VolumeShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#VolumeShape">;
    /**
     * **[brick:Wardrobe](https://brickschema.org/schema/Brick#Wardrobe)**
     *
     * Storage for clothing, costumes, or uniforms
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Wardrobe: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Wardrobe">;
    /**
     * **[brick:Warm_Cool_Adjust_Sensor](https://brickschema.org/schema/Brick#Warm_Cool_Adjust_Sensor)**
     *
     * User provided adjustment of zone temperature, typically in the range of +/- 5 degrees
     *
     * @type        class
     * @parent      brick:Adjust_Sensor
     */
    readonly Warm_Cool_Adjust_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Warm_Cool_Adjust_Sensor">;
    /**
     * **[brick:Warmest_Zone_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Warmest_Zone_Air_Temperature_Sensor)**
     *
     * The zone temperature that is warmest; drives the supply temperature of cold air. A computed value rather than a physical sensor. Also referred to as a 'Highest Zone Air Temperature Sensor'
     *
     * @type        class
     * @parent      brick:Zone_Air_Temperature_Sensor
     */
    readonly Warmest_Zone_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Warmest_Zone_Air_Temperature_Sensor">;
    /**
     * **[brick:Waste_Storage](https://brickschema.org/schema/Brick#Waste_Storage)**
     *
     * A room used for storing waste such as trash or recycling
     *
     * @type        class
     * @parent      brick:Storage_Room
     */
    readonly Waste_Storage: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Waste_Storage">;
    /**
     * **[brick:Water](https://brickschema.org/schema/Brick#Water)**
     *
     * transparent, odorless, tasteless liquid; a compound of hydrogen and oxygen (H2O), containing 11.188% hydrogen and 88.812% oxygen by mass; freezing at 32°F (0°C); boiling near 212°F (100°C).
     *
     * @type        class
     * @parent      brick:Liquid
     */
    readonly Water: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water">;
    /**
     * **[brick:Water_Alarm](https://brickschema.org/schema/Brick#Water_Alarm)**
     *
     * Alarm that indicates an undesirable event with a pipe, container, or equipment carrying water e.g. water leak
     *
     * @type        class
     * @parent      brick:Alarm
     */
    readonly Water_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Alarm">;
    /**
     * **[brick:Water_Differential_Pressure_Setpoint](https://brickschema.org/schema/Brick#Water_Differential_Pressure_Setpoint)**
     *
     * Sets the target water differential pressure between an upstream and downstream point in a water pipe or conduit
     *
     * @type        class
     * @parent      brick:Differential_Pressure_Setpoint
     */
    readonly Water_Differential_Pressure_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Differential_Pressure_Setpoint">;
    /**
     * **[brick:Water_Differential_Temperature_Sensor](https://brickschema.org/schema/Brick#Water_Differential_Temperature_Sensor)**
     *
     * Measures the difference in water temperature between an upstream and downstream point in a pipe or conduit
     *
     * @type        class
     * @parent      brick:Water_Temperature_Sensor
     */
    readonly Water_Differential_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Differential_Temperature_Sensor">;
    /**
     * **[brick:Water_Differential_Temperature_Setpoint](https://brickschema.org/schema/Brick#Water_Differential_Temperature_Setpoint)**
     *
     * Sets the target differential temperature between the start and end of a heat transfer cycle in a water circuit
     *
     * @type        class
     * @parent      brick:Water_Temperature_Setpoint
     */
    readonly Water_Differential_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Differential_Temperature_Setpoint">;
    /**
     * **[brick:Water_Distribution](https://brickschema.org/schema/Brick#Water_Distribution)**
     *
     * Utilize a water distribution source to represent how water is distributed across multiple destinations (pipes)
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Water_Distribution: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Distribution">;
    /**
     * **[brick:Water_Flow_Sensor](https://brickschema.org/schema/Brick#Water_Flow_Sensor)**
     *
     * Measures the rate of flow of water
     *
     * @type        class
     * @parent      brick:Flow_Sensor
     */
    readonly Water_Flow_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Flow_Sensor">;
    /**
     * **[brick:Water_Flow_Setpoint](https://brickschema.org/schema/Brick#Water_Flow_Setpoint)**
     *
     * Sets the target flow rate of water
     *
     * @type        class
     * @parent      brick:Flow_Setpoint
     */
    readonly Water_Flow_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Flow_Setpoint">;
    /**
     * **[brick:Water_Heater](https://brickschema.org/schema/Brick#Water_Heater)**
     *
     * An apparatus for heating and usually storing hot water
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Water_Heater: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Heater">;
    /**
     * **[brick:Water_Level_Alarm](https://brickschema.org/schema/Brick#Water_Level_Alarm)**
     *
     * An alarm that indicates a high or low water level e.g. in a basin
     *
     * @type        class
     * @parent      brick:Water_Alarm
     */
    readonly Water_Level_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Level_Alarm">;
    /**
     * **[brick:Water_Level_Sensor](https://brickschema.org/schema/Brick#Water_Level_Sensor)**
     *
     * Measures the height/level of water in some container
     *
     * @type        class
     * @parent      brick:Sensor
     */
    readonly Water_Level_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Level_Sensor">;
    /**
     * **[brick:Water_Loop](https://brickschema.org/schema/Brick#Water_Loop)**
     *
     * A collection of equipment that transport and regulate water among each other
     *
     * @type        class
     * @parent      brick:Loop
     */
    readonly Water_Loop: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Loop">;
    /**
     * **[brick:Water_Loss_Alarm](https://brickschema.org/schema/Brick#Water_Loss_Alarm)**
     *
     * An alarm that indicates a loss of water e.g. during transport
     *
     * @type        class
     * @parent      brick:Water_Alarm
     */
    readonly Water_Loss_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Loss_Alarm">;
    /**
     * **[brick:Water_Meter](https://brickschema.org/schema/Brick#Water_Meter)**
     *
     * A meter that measures the usage or consumption of water
     *
     * @type        class
     * @parent      brick:Meter
     */
    readonly Water_Meter: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Meter">;
    /**
     * **[brick:Water_Pump](https://brickschema.org/schema/Brick#Water_Pump)**
     *
     * A pump that performs work on water
     *
     * @type        class
     * @parent      brick:Pump
     */
    readonly Water_Pump: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Pump">;
    /**
     * **[brick:Water_System](https://brickschema.org/schema/Brick#Water_System)**
     *
     * The equipment, devices and conduits that handle the production and distribution of water in a building
     *
     * @type        class
     * @parent      brick:Heating_Ventilation_Air_Conditioning_System
     */
    readonly Water_System: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_System">;
    /**
     * **[brick:Water_Tank](https://brickschema.org/schema/Brick#Water_Tank)**
     *
     * A space used to hold water
     *
     * @type        class
     * @parent      brick:Space
     */
    readonly Water_Tank: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Tank">;
    /**
     * **[brick:Water_Temperature_Alarm](https://brickschema.org/schema/Brick#Water_Temperature_Alarm)**
     *
     * An alarm that indicates the off-normal conditions associated with temperature of water.
     *
     * @type        class
     * @parent      brick:Temperature_Alarm
     */
    readonly Water_Temperature_Alarm: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Temperature_Alarm">;
    /**
     * **[brick:Water_Temperature_Sensor](https://brickschema.org/schema/Brick#Water_Temperature_Sensor)**
     *
     * Measures the temperature of water
     *
     * @type        class
     * @parent      brick:Temperature_Sensor
     */
    readonly Water_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Temperature_Sensor">;
    /**
     * **[brick:Water_Temperature_Setpoint](https://brickschema.org/schema/Brick#Water_Temperature_Setpoint)**
     *
     * Sets temperature of water
     *
     * @type        class
     * @parent      brick:Temperature_Setpoint
     */
    readonly Water_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Temperature_Setpoint">;
    /**
     * **[brick:Water_Usage_Sensor](https://brickschema.org/schema/Brick#Water_Usage_Sensor)**
     *
     * Measures the amount of water that is consumed, over some period of time
     *
     * @type        class
     * @parent      brick:Usage_Sensor
     */
    readonly Water_Usage_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Usage_Sensor">;
    /**
     * **[brick:Water_Valve](https://brickschema.org/schema/Brick#Water_Valve)**
     *
     * A valve that modulates the flow of water
     *
     * @type        class
     * @parent      brick:Valve
     */
    readonly Water_Valve: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Water_Valve">;
    /**
     * **[brick:Weather_Condition](https://brickschema.org/schema/Brick#Weather_Condition)**
     *
     * @type        instance
     */
    readonly Weather_Condition: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Weather_Condition">;
    /**
     * **[brick:Weather_Station](https://brickschema.org/schema/Brick#Weather_Station)**
     *
     * A dedicated weather measurement station
     *
     * @type        class
     * @parent      brick:Equipment
     */
    readonly Weather_Station: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Weather_Station">;
    /**
     * **[brick:Wet_Bulb_Temperature](https://brickschema.org/schema/Brick#Wet_Bulb_Temperature)**
     *
     * The temperature read by a thermometer covered in water-soaked cloth (wet-bulb thermometer) over which air is passed. A wet-bulb thermometer indicates a temperature close to the true (thermodynamic) wet-bulb temperature. The wet-bulb temperature is the lowest temperature that can be reached under current ambient conditions by the evaporation of water only.  DBT is the temperature that is usually thought of as air temperature, and it is the true thermodynamic temperature. It indicates the amount of heat in the air and is directly proportional to the mean kinetic energy of the air molecule. (https://en.wikipedia.org/wiki/Wet-bulb_temperature)
     *
     * @type        instance
     */
    readonly Wet_Bulb_Temperature: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Wet_Bulb_Temperature">;
    /**
     * **[brick:Wind_Direction](https://brickschema.org/schema/Brick#Wind_Direction)**
     *
     * Direction of wind relative to North
     *
     * @type        instance
     */
    readonly Wind_Direction: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Wind_Direction">;
    /**
     * **[brick:Wind_Direction_Sensor](https://brickschema.org/schema/Brick#Wind_Direction_Sensor)**
     *
     * Measures the direction of wind in degrees relative to North
     *
     * @type        class
     * @parent      brick:Direction_Sensor
     */
    readonly Wind_Direction_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Wind_Direction_Sensor">;
    /**
     * **[brick:Wind_Speed](https://brickschema.org/schema/Brick#Wind_Speed)**
     *
     * Measured speed of wind, caused by air moving from high to low pressure
     *
     * @type        instance
     */
    readonly Wind_Speed: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Wind_Speed">;
    /**
     * **[brick:Wind_Speed_Sensor](https://brickschema.org/schema/Brick#Wind_Speed_Sensor)**
     *
     * Measured speed of wind, caused by air moving from high to low pressure
     *
     * @type        class
     * @parent      brick:Speed_Sensor
     */
    readonly Wind_Speed_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Wind_Speed_Sensor">;
    /**
     * **[brick:Wing](https://brickschema.org/schema/Brick#Wing)**
     *
     * A wing is part of a building – or any feature of a building – that is subordinate to the main, central structure.
     *
     * @type        class
     * @parent      brick:Location
     */
    readonly Wing: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Wing">;
    /**
     * **[brick:Workshop](https://brickschema.org/schema/Brick#Workshop)**
     *
     * A space used to house equipment that can be used to repair or fabricate things
     *
     * @type        class
     * @parent      brick:Room
     */
    readonly Workshop: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Workshop">;
    /**
     * **[brick:YearBuiltShape](https://brickschema.org/schema/Brick#YearBuiltShape)**
     *
     * @type        class
     */
    readonly YearBuiltShape: import("../index.js").Iri<"https://brickschema.org/schema/Brick#YearBuiltShape">;
    /**
     * **[brick:Zone](https://brickschema.org/schema/Brick#Zone)**
     *
     * (1) a separately controlled heated or cooled space. (2) one occupied space or several occupied spaces with similar occupancy category, occupant density, zone air distribution effectiveness, and zone primary airflow per unit area. (3) space or group of spaces within a building for which the heating, cooling, or lighting requirements are sufficiently similar that desired conditions can be maintained throughout by a single controlling device.
     *
     * @type        class
     * @parent      brick:Location
     */
    readonly Zone: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Zone">;
    /**
     * **[brick:Zone_Air](https://brickschema.org/schema/Brick#Zone_Air)**
     *
     * air inside a defined zone (e.g., corridors).
     *
     * @type        class
     * @parent      brick:Air
     */
    readonly Zone_Air: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Zone_Air">;
    /**
     * **[brick:Zone_Air_Cooling_Temperature_Setpoint](https://brickschema.org/schema/Brick#Zone_Air_Cooling_Temperature_Setpoint)**
     *
     * The upper (cooling) setpoint for zone air temperature
     *
     * @type        class
     * @parent      brick:Cooling_Temperature_Setpoint
     */
    readonly Zone_Air_Cooling_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Zone_Air_Cooling_Temperature_Setpoint">;
    /**
     * **[brick:Zone_Air_Dewpoint_Sensor](https://brickschema.org/schema/Brick#Zone_Air_Dewpoint_Sensor)**
     *
     * Measures dewpoint of zone air
     *
     * @type        class
     * @parent      brick:Dewpoint_Sensor
     */
    readonly Zone_Air_Dewpoint_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Zone_Air_Dewpoint_Sensor">;
    /**
     * **[brick:Zone_Air_Heating_Temperature_Setpoint](https://brickschema.org/schema/Brick#Zone_Air_Heating_Temperature_Setpoint)**
     *
     * The lower (heating) setpoint for zone air temperature
     *
     * @type        class
     * @parent      brick:Heating_Temperature_Setpoint
     */
    readonly Zone_Air_Heating_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Zone_Air_Heating_Temperature_Setpoint">;
    /**
     * **[brick:Zone_Air_Humidity_Sensor](https://brickschema.org/schema/Brick#Zone_Air_Humidity_Sensor)**
     *
     * Measures the relative humidity of zone air
     *
     * @type        class
     * @parent      brick:Relative_Humidity_Sensor
     */
    readonly Zone_Air_Humidity_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Zone_Air_Humidity_Sensor">;
    /**
     * **[brick:Zone_Air_Humidity_Setpoint](https://brickschema.org/schema/Brick#Zone_Air_Humidity_Setpoint)**
     *
     * Humidity setpoint for zone air
     *
     * @type        class
     * @parent      brick:Air_Humidity_Setpoint
     */
    readonly Zone_Air_Humidity_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Zone_Air_Humidity_Setpoint">;
    /**
     * **[brick:Zone_Air_Temperature_Sensor](https://brickschema.org/schema/Brick#Zone_Air_Temperature_Sensor)**
     *
     * Measures the temperature of air in a zone
     *
     * @type        class
     * @parent      brick:Air_Temperature_Sensor
     */
    readonly Zone_Air_Temperature_Sensor: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Zone_Air_Temperature_Sensor">;
    /**
     * **[brick:Zone_Air_Temperature_Setpoint](https://brickschema.org/schema/Brick#Zone_Air_Temperature_Setpoint)**
     *
     * Sets temperature of zone air
     *
     * @type        class
     * @parent      brick:Air_Temperature_Setpoint
     */
    readonly Zone_Air_Temperature_Setpoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Zone_Air_Temperature_Setpoint">;
    /**
     * **[brick:Zone_Standby_Load_Shed_Command](https://brickschema.org/schema/Brick#Zone_Standby_Load_Shed_Command)**
     *
     * @type        class
     * @parent      brick:Standby_Load_Shed_Command
     */
    readonly Zone_Standby_Load_Shed_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Zone_Standby_Load_Shed_Command">;
    /**
     * **[brick:Zone_Unoccupied_Load_Shed_Command](https://brickschema.org/schema/Brick#Zone_Unoccupied_Load_Shed_Command)**
     *
     * @type        class
     * @parent      brick:Unoccupied_Load_Shed_Command
     */
    readonly Zone_Unoccupied_Load_Shed_Command: import("../index.js").Iri<"https://brickschema.org/schema/Brick#Zone_Unoccupied_Load_Shed_Command">;
    /**
     * **[brick:aggregate](https://brickschema.org/schema/Brick#aggregate)**
     *
     * Description of how the dta for this point is aggregated
     *
     * @type        property
     * @domain      brick:Point
     * @range       brick:AggregationShape
     */
    readonly aggregate: import("../index.js").Iri<"https://brickschema.org/schema/Brick#aggregate">;
    /**
     * **[brick:area](https://brickschema.org/schema/Brick#area)**
     *
     * Entity has 2-dimensional area
     *
     * @type        property
     * @range       brick:AreaShape
     */
    readonly area: import("../index.js").Iri<"https://brickschema.org/schema/Brick#area">;
    /**
     * **[brick:azimuth](https://brickschema.org/schema/Brick#azimuth)**
     *
     * (Horizontal) angle between a projected vector and a reference vector (typically a compass bearing). The projected vector usually indicates the direction of a face or plane.
     *
     * @type        property
     * @range       brick:AzimuthShape
     */
    readonly azimuth: import("../index.js").Iri<"https://brickschema.org/schema/Brick#azimuth">;
    /**
     * **[brick:buildingPrimaryFunction](https://brickschema.org/schema/Brick#buildingPrimaryFunction)**
     *
     * Enumerated string applied to a site record to indicate the building's primary function. The list of primary functions is derived from the US Energy Star program (adopted from Project Haystack)
     *
     * @type        property
     * @domain      brick:Building
     * @range       brick:BuildingPrimaryFunctionShape
     */
    readonly buildingPrimaryFunction: import("../index.js").Iri<"https://brickschema.org/schema/Brick#buildingPrimaryFunction">;
    /**
     * **[brick:buildingThermalTransmittance](https://brickschema.org/schema/Brick#buildingThermalTransmittance)**
     *
     * The area-weighted average heat transfer coefficient (commonly referred to as a U-value) for a building envelope
     *
     * @type        property
     * @parent      brick:thermalTransmittance
     * @domain      brick:Building
     * @range       brick:ThermalTransmittanceShape
     */
    readonly buildingThermalTransmittance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#buildingThermalTransmittance">;
    /**
     * **[brick:conversionEfficiency](https://brickschema.org/schema/Brick#conversionEfficiency)**
     *
     * The percent efficiency of the conversion process (usually to power or energy) carried out by the entity
     *
     * @type        property
     * @range       brick:EfficiencyShape
     */
    readonly conversionEfficiency: import("../index.js").Iri<"https://brickschema.org/schema/Brick#conversionEfficiency">;
    /**
     * **[brick:coolingCapacity](https://brickschema.org/schema/Brick#coolingCapacity)**
     *
     * Measurement of a chiller ability to remove heat (adopted from Project Haystack)
     *
     * @type        property
     * @domain      brick:Chiller
     * @range       brick:CoolingCapacityShape
     */
    readonly coolingCapacity: import("../index.js").Iri<"https://brickschema.org/schema/Brick#coolingCapacity">;
    /**
     * **[brick:coordinates](https://brickschema.org/schema/Brick#coordinates)**
     *
     * The location of an entity in latitude/longitude
     *
     * @type        property
     * @range       brick:CoordinateShape
     */
    readonly coordinates: import("../index.js").Iri<"https://brickschema.org/schema/Brick#coordinates">;
    /**
     * **[brick:currentFlowType](https://brickschema.org/schema/Brick#currentFlowType)**
     *
     * The current flow type of the entity
     *
     * @type        property
     * @range       brick:CurrentFlowTypeShape
     */
    readonly currentFlowType: import("../index.js").Iri<"https://brickschema.org/schema/Brick#currentFlowType">;
    /**
     * **[brick:electricalPhaseCount](https://brickschema.org/schema/Brick#electricalPhaseCount)**
     *
     * Entity has these phases
     *
     * @type        property
     * @range       brick:PhaseCountShape
     */
    readonly electricalPhaseCount: import("../index.js").Iri<"https://brickschema.org/schema/Brick#electricalPhaseCount">;
    /**
     * **[brick:electricalPhases](https://brickschema.org/schema/Brick#electricalPhases)**
     *
     * Entity has these electrical AC phases
     *
     * @type        property
     * @range       brick:PhasesShape
     */
    readonly electricalPhases: import("../index.js").Iri<"https://brickschema.org/schema/Brick#electricalPhases">;
    /**
     * **[brick:feeds](https://brickschema.org/schema/Brick#feeds)**
     *
     * The subject is upstream of the object in the context of some sequential process; some media is passed between them
     *
     * @type        property
     */
    readonly feeds: import("../index.js").Iri<"https://brickschema.org/schema/Brick#feeds">;
    /**
     * **[brick:feedsAir](https://brickschema.org/schema/Brick#feedsAir)**
     *
     * Passes air
     *
     * @type        property
     * @parent      brick:feeds
     */
    readonly feedsAir: import("../index.js").Iri<"https://brickschema.org/schema/Brick#feedsAir">;
    /**
     * **[brick:grossArea](https://brickschema.org/schema/Brick#grossArea)**
     *
     * Entity has gross 2-dimensional area
     *
     * @type        property
     * @parent      brick:area
     * @range       brick:AreaShape
     */
    readonly grossArea: import("../index.js").Iri<"https://brickschema.org/schema/Brick#grossArea">;
    /**
     * **[brick:hasAddress](https://brickschema.org/schema/Brick#hasAddress)**
     *
     * To specify the address of a building.
     *
     * @type        property
     * @parent      http://www.w3.org/2006/vcard/ns#hasAddress
     * @domain      brick:Building
     * @range       http://www.w3.org/2006/vcard/ns#Address
     */
    readonly hasAddress: import("../index.js").Iri<"https://brickschema.org/schema/Brick#hasAddress">;
    /**
     * **[brick:hasAssociatedTag](https://brickschema.org/schema/Brick#hasAssociatedTag)**
     *
     * The class is associated with the given tag
     *
     * @type        property
     * @domain      http://www.w3.org/2002/07/owl#Class
     * @range       brick:Tag
     */
    readonly hasAssociatedTag: import("../index.js").Iri<"https://brickschema.org/schema/Brick#hasAssociatedTag">;
    /**
     * **[brick:hasInputSubstance](https://brickschema.org/schema/Brick#hasInputSubstance)**
     *
     * The subject receives the given substance as an input to its internal process
     *
     * @type        property
     * @range       brick:Substance
     */
    readonly hasInputSubstance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#hasInputSubstance">;
    /**
     * **[brick:hasLocation](https://brickschema.org/schema/Brick#hasLocation)**
     *
     * Subject is physically located in the location given by the object
     *
     * @type        property
     * @range       brick:Location
     */
    readonly hasLocation: import("../index.js").Iri<"https://brickschema.org/schema/Brick#hasLocation">;
    /**
     * **[brick:hasOutputSubstance](https://brickschema.org/schema/Brick#hasOutputSubstance)**
     *
     * The subject produces or exports the given substance from its internal process
     *
     * @type        property
     * @range       brick:Substance
     */
    readonly hasOutputSubstance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#hasOutputSubstance">;
    /**
     * **[brick:hasPart](https://brickschema.org/schema/Brick#hasPart)**
     *
     * The subject is composed in part of the entity given by the object
     *
     * @type        property
     */
    readonly hasPart: import("../index.js").Iri<"https://brickschema.org/schema/Brick#hasPart">;
    /**
     * **[brick:hasPoint](https://brickschema.org/schema/Brick#hasPoint)**
     *
     * The subject has a source of telemetry identified by the object. In some systems the source of telemetry may be represented as a digital/analog input/output point
     *
     * @type        property
     * @range       brick:Point
     */
    readonly hasPoint: import("../index.js").Iri<"https://brickschema.org/schema/Brick#hasPoint">;
    /**
     * **[brick:hasQUDTReference](https://brickschema.org/schema/Brick#hasQUDTReference)**
     *
     * Points to the relevant QUDT definition
     *
     * @type        property
     */
    readonly hasQUDTReference: import("../index.js").Iri<"https://brickschema.org/schema/Brick#hasQUDTReference">;
    /**
     * **[brick:hasTag](https://brickschema.org/schema/Brick#hasTag)**
     *
     * The subject has the given tag
     *
     * @type        property
     * @range       brick:Tag
     */
    readonly hasTag: import("../index.js").Iri<"https://brickschema.org/schema/Brick#hasTag">;
    /**
     * **[brick:hasTimeseriesId](https://brickschema.org/schema/Brick#hasTimeseriesId)**
     *
     * The unique identifier (primary key) for this TimeseriesReference in some database
     *
     * @type        property
     * @domain      brick:TimeseriesReference
     * @range       http://www.w3.org/2001/XMLSchema#string
     */
    readonly hasTimeseriesId: import("../index.js").Iri<"https://brickschema.org/schema/Brick#hasTimeseriesId">;
    /**
     * **[brick:hasUnit](https://brickschema.org/schema/Brick#hasUnit)**
     *
     * The QUDT unit associated with this Brick entity (usually a Brick Point instance or Entity Property)
     *
     * @type        property
     * @range       http://qudt.org/vocab/unit/Unit
     */
    readonly hasUnit: import("../index.js").Iri<"https://brickschema.org/schema/Brick#hasUnit">;
    /**
     * **[brick:isAssociatedWith](https://brickschema.org/schema/Brick#isAssociatedWith)**
     *
     * The tag is associated with the given class
     *
     * @type        property
     * @domain      brick:Tag
     * @range       http://www.w3.org/2002/07/owl#Class
     */
    readonly isAssociatedWith: import("../index.js").Iri<"https://brickschema.org/schema/Brick#isAssociatedWith">;
    /**
     * **[brick:isFedBy](https://brickschema.org/schema/Brick#isFedBy)**
     *
     * @type        property
     */
    readonly isFedBy: import("../index.js").Iri<"https://brickschema.org/schema/Brick#isFedBy">;
    /**
     * **[brick:isLocationOf](https://brickschema.org/schema/Brick#isLocationOf)**
     *
     * Subject is the physical location encapsulating the object
     *
     * @type        property
     * @domain      brick:Location
     */
    readonly isLocationOf: import("../index.js").Iri<"https://brickschema.org/schema/Brick#isLocationOf">;
    /**
     * **[brick:isMeasuredBy](https://brickschema.org/schema/Brick#isMeasuredBy)**
     *
     * @type        property
     * @domain      brick:Measurable
     * @range       brick:Point
     */
    readonly isMeasuredBy: import("../index.js").Iri<"https://brickschema.org/schema/Brick#isMeasuredBy">;
    /**
     * **[brick:isPartOf](https://brickschema.org/schema/Brick#isPartOf)**
     *
     * @type        property
     */
    readonly isPartOf: import("../index.js").Iri<"https://brickschema.org/schema/Brick#isPartOf">;
    /**
     * **[brick:isPointOf](https://brickschema.org/schema/Brick#isPointOf)**
     *
     * The subject is a source of telemetry related to the object. In some systems the source of telemetry may be represented as a digital/analog input/output point
     *
     * @type        property
     * @domain      brick:Point
     */
    readonly isPointOf: import("../index.js").Iri<"https://brickschema.org/schema/Brick#isPointOf">;
    /**
     * **[brick:isRegulatedBy](https://brickschema.org/schema/Brick#isRegulatedBy)**
     *
     * @type        property
     * @domain      brick:Substance
     * @range       brick:Equipment
     */
    readonly isRegulatedBy: import("../index.js").Iri<"https://brickschema.org/schema/Brick#isRegulatedBy">;
    /**
     * **[brick:isTagOf](https://brickschema.org/schema/Brick#isTagOf)**
     *
     * @type        property
     * @domain      brick:Tag
     */
    readonly isTagOf: import("../index.js").Iri<"https://brickschema.org/schema/Brick#isTagOf">;
    /**
     * **[brick:latitutde](https://brickschema.org/schema/Brick#latitutde)**
     *
     * @type        property
     * @parent      http://schema.org/latitude
     */
    readonly latitutde: import("../index.js").Iri<"https://brickschema.org/schema/Brick#latitutde">;
    /**
     * **[brick:longitude](https://brickschema.org/schema/Brick#longitude)**
     *
     * @type        property
     * @parent      http://schema.org/longitude
     */
    readonly longitude: import("../index.js").Iri<"https://brickschema.org/schema/Brick#longitude">;
    /**
     * **[brick:measuredModuleConversionEfficiency](https://brickschema.org/schema/Brick#measuredModuleConversionEfficiency)**
     *
     * The measured percentage of sunlight that is converted into usable power
     *
     * @type        property
     * @parent      brick:conversionEfficiency
     * @domain      brick:PV_Panel
     * @range       brick:EfficiencyShape
     */
    readonly measuredModuleConversionEfficiency: import("../index.js").Iri<"https://brickschema.org/schema/Brick#measuredModuleConversionEfficiency">;
    /**
     * **[brick:measuredPowerOutput](https://brickschema.org/schema/Brick#measuredPowerOutput)**
     *
     * The nominal measured power output of the entity
     *
     * @type        property
     * @range       brick:PowerOutputShape
     */
    readonly measuredPowerOutput: import("../index.js").Iri<"https://brickschema.org/schema/Brick#measuredPowerOutput">;
    /**
     * **[brick:measures](https://brickschema.org/schema/Brick#measures)**
     *
     * The subject measures a quantity or substance given by the object
     *
     * @type        property
     * @domain      brick:Point
     * @range       brick:Measurable
     */
    readonly measures: import("../index.js").Iri<"https://brickschema.org/schema/Brick#measures">;
    /**
     * **[brick:netArea](https://brickschema.org/schema/Brick#netArea)**
     *
     * Entity has net 2-dimensional area
     *
     * @type        property
     * @parent      brick:area
     * @range       brick:AreaShape
     */
    readonly netArea: import("../index.js").Iri<"https://brickschema.org/schema/Brick#netArea">;
    /**
     * **[brick:operationalStage](https://brickschema.org/schema/Brick#operationalStage)**
     *
     * The associated operational stage
     *
     * @type        property
     * @range       brick:StageShape
     */
    readonly operationalStage: import("../index.js").Iri<"https://brickschema.org/schema/Brick#operationalStage">;
    /**
     * **[brick:operationalStageCount](https://brickschema.org/schema/Brick#operationalStageCount)**
     *
     * The number of operational stages supported by this eqiupment
     *
     * @type        property
     * @domain      brick:Equipment
     * @range       brick:StageShape
     */
    readonly operationalStageCount: import("../index.js").Iri<"https://brickschema.org/schema/Brick#operationalStageCount">;
    /**
     * **[brick:panelArea](https://brickschema.org/schema/Brick#panelArea)**
     *
     * Surface area of a panel, such as a PV panel
     *
     * @type        property
     * @parent      brick:area
     * @range       brick:AreaShape
     */
    readonly panelArea: import("../index.js").Iri<"https://brickschema.org/schema/Brick#panelArea">;
    /**
     * **[brick:powerComplexity](https://brickschema.org/schema/Brick#powerComplexity)**
     *
     * Entity has this power complexity
     *
     * @type        property
     * @range       brick:PowerComplexityShape
     */
    readonly powerComplexity: import("../index.js").Iri<"https://brickschema.org/schema/Brick#powerComplexity">;
    /**
     * **[brick:powerFlow](https://brickschema.org/schema/Brick#powerFlow)**
     *
     * Entity has this power flow relative to the building'
     *
     * @type        property
     * @range       brick:PowerFlowShape
     */
    readonly powerFlow: import("../index.js").Iri<"https://brickschema.org/schema/Brick#powerFlow">;
    /**
     * **[brick:ratedModuleConversionEfficiency](https://brickschema.org/schema/Brick#ratedModuleConversionEfficiency)**
     *
     * The *rated* percentage of sunlight that is converted into usable power, as measured using Standard Test Conditions (STC): 1000 W/sqm irradiance, 25 degC panel temperature, no wind
     *
     * @type        property
     * @parent      brick:conversionEfficiency
     * @domain      brick:PV_Panel
     * @range       brick:EfficiencyShape
     */
    readonly ratedModuleConversionEfficiency: import("../index.js").Iri<"https://brickschema.org/schema/Brick#ratedModuleConversionEfficiency">;
    /**
     * **[brick:ratedPowerOutput](https://brickschema.org/schema/Brick#ratedPowerOutput)**
     *
     * The nominal rated power output of the entity
     *
     * @type        property
     * @range       brick:PowerOutputShape
     */
    readonly ratedPowerOutput: import("../index.js").Iri<"https://brickschema.org/schema/Brick#ratedPowerOutput">;
    /**
     * **[brick:regulates](https://brickschema.org/schema/Brick#regulates)**
     *
     * The subject contributes to or performs the regulation of the substance given by the object
     *
     * @type        property
     * @domain      brick:Equipment
     * @range       brick:Substance
     */
    readonly regulates: import("../index.js").Iri<"https://brickschema.org/schema/Brick#regulates">;
    /**
     * **[brick:storedAt](https://brickschema.org/schema/Brick#storedAt)**
     *
     * A reference to where the data for this TimeseriesReference is stored
     *
     * @type        property
     * @domain      brick:TimeseriesReference
     */
    readonly storedAt: import("../index.js").Iri<"https://brickschema.org/schema/Brick#storedAt">;
    /**
     * **[brick:temperatureCoefficientofPmax](https://brickschema.org/schema/Brick#temperatureCoefficientofPmax)**
     *
     * The % change in power output for every degree celsius that the entity is hotter than 25 degrees celsius
     *
     * @type        property
     * @range       brick:TemperatureCoefficientPerDegreeCelsiusShape
     */
    readonly temperatureCoefficientofPmax: import("../index.js").Iri<"https://brickschema.org/schema/Brick#temperatureCoefficientofPmax">;
    /**
     * **[brick:thermalTransmittance](https://brickschema.org/schema/Brick#thermalTransmittance)**
     *
     * The area-weighted average heat transfer coefficient (commonly referred to as a U-value)
     *
     * @type        property
     * @range       brick:ThermalTransmittanceShape
     */
    readonly thermalTransmittance: import("../index.js").Iri<"https://brickschema.org/schema/Brick#thermalTransmittance">;
    /**
     * **[brick:tilt](https://brickschema.org/schema/Brick#tilt)**
     *
     * The direction an entity is facing in degrees above the horizon
     *
     * @type        property
     * @range       brick:TiltShape
     */
    readonly tilt: import("../index.js").Iri<"https://brickschema.org/schema/Brick#tilt">;
    /**
     * **[brick:timeseries](https://brickschema.org/schema/Brick#timeseries)**
     *
     * Relates a Brick point to the TimeseriesReference that indicates where and how the data for this point is stored
     *
     * @type        property
     * @domain      brick:Point
     * @range       brick:TimeseriesReference
     */
    readonly timeseries: import("../index.js").Iri<"https://brickschema.org/schema/Brick#timeseries">;
    /**
     * **[brick:value](https://brickschema.org/schema/Brick#value)**
     *
     * The basic value of an entity property
     *
     * @type        property
     * @parent      http://qudt.org/schema/qudt/value
     */
    readonly value: import("../index.js").Iri<"https://brickschema.org/schema/Brick#value">;
    /**
     * **[brick:volume](https://brickschema.org/schema/Brick#volume)**
     *
     * Entity has 3-dimensional volume
     *
     * @type        property
     * @range       brick:VolumeShape
     */
    readonly volume: import("../index.js").Iri<"https://brickschema.org/schema/Brick#volume">;
    /**
     * **[brick:yearBuilt](https://brickschema.org/schema/Brick#yearBuilt)**
     *
     * Four digit year that a building was first built. (adopted from Project Haystack)
     *
     * @type        property
     * @domain      brick:Building
     * @range       brick:YearBuiltShape
     */
    readonly yearBuilt: import("../index.js").Iri<"https://brickschema.org/schema/Brick#yearBuilt">;
}
/**
 * prefix **brick:** <<https://brickschema.org/schema/Brick#>>
 *
 * Brick: A uniform metadata schema for buildings
 *
 * Brick is an open-source effort to standardize semantic descriptions of the physical, logical and virtual assets in buildings and the relationships between them.  Brick consists of an extensible dictionary of terms and concepts in and around buildings, a set of relationships for linking and composing concepts together, and a flexible data model permitting seamless integration of Brick with existing tools and databases.  Through the use of powerful Semantic Web technology, Brick can describe the broad set of idiosyncratic and custom features, assets and subsystems found across the building stock in a consistent matter.
 *
 * Adopting Brick as the canonical description of a building enables the following:
 *
 * - Brick lowers the cost of deploying analytics, energy efficiency measures and intelligent controls across buildings
 * - Brick presents an integrated, cross-vendor representation of the multitude of subsystems in modern buildings: HVAC, lighting, fire, security and so on
 * - Brick simplifies the development of smart analytics and control applications
 * - Brick reduces the reliance upon the non-standard, unstructured labels endemic to building management systems
 *
 * Brick is free and open-sourced under the BSD 3-Clause license.  The source code for Brick, this website, and related tools developed by the Brick team are available on [GitHub](https://github.com/BrickSchema).
 */
declare const brick: Vocabulary;
export default brick;
//# sourceMappingURL=brick.d.ts.map