/**
 * Argument Model Ontology (AMO)
 * amo.ts (2023-08-08T17:30:07.724Z)
 */
import VocabularyBase from '../../Classes/Vocabulary.js';
class Vocabulary extends VocabularyBase {
    /**
     * **[amo:argument](http://purl.org/spar/amo/Argument)**
     *
     * An argument, or practical argument according to the 'Toulmin model of argument', focuses on the justificatory function of argumentation: practical arguments first find a claim of interest, and then provide justification for it.Each argument must be analyzed according to six interrelated components: claim, evidence, warrant, backing, rebuttal and qualifier. The first three elements, 'claim', 'data' and 'warrant', are considered as the essential components of practical arguments, while the second triad, 'qualifier', 'backing', and 'rebuttal', may not be needed in some arguments.
     *
     * @type        class
     * @parent      https://triplydb.com/.well-known/genid/5cd47c65ce3e9c524f5974af897af655
     */
    Argument = this.toIri().concat('Argument');
    /**
     * **[amo:argumentation entity](http://purl.org/spar/amo/ArgumentationEntity)**
     *
     * An entity that takes part in an argument according to the 'Toulmin model of argument'.
     *
     * @type        class
     */
    ArgumentationEntity = this.toIri().concat('ArgumentationEntity');
    /**
     * **[amo:backing](http://purl.org/spar/amo/Backing)**
     *
     * Sort of credentials that certifies the warrant - e.g., the OWL 2 document specifications.
     *
     * @type        class
     */
    Backing = this.toIri().concat('Backing');
    /**
     * **[amo:claim](http://purl.org/spar/amo/Claim)**
     *
     * A fact that must be established - e.g., 'This is a consistent OWL ontology'.
     *
     * @type        class
     */
    Claim = this.toIri().concat('Claim');
    /**
     * **[amo:evidence](http://purl.org/spar/amo/Evidence)**
     *
     * A fact that represents a foundation for the claim - e.g., 'This ontology was developed in OWL'.
     *
     * @type        class
     */
    Evidence = this.toIri().concat('Evidence');
    /**
     * **[amo:qualifier](http://purl.org/spar/amo/Qualifier)**
     *
     * Words or phrases that express the degree of certainty of the claim such as “certainly”, “possible”, “probably”, “presumably”, etc.
     *
     * @type        class
     */
    Qualifier = this.toIri().concat('Qualifier');
    /**
     * **[amo:rebuttal](http://purl.org/spar/amo/Rebuttal)**
     *
     * Restrictions that may be applied to the claim - 'Unless a reasoner for OWL 2 proves that it is not consistent'.
     *
     * @type        class
     */
    Rebuttal = this.toIri().concat('Rebuttal');
    /**
     * **[amo:warrant](http://purl.org/spar/amo/Warrant)**
     *
     * A statement bridging from the evidence to the claim - e.g., 'An ontology developed in OWL is a consistent OWL ontology'.
     *
     * @type        class
     */
    Warrant = this.toIri().concat('Warrant');
    /**
     * **[amo:backs](http://purl.org/spar/amo/backs)**
     *
     * A backing that attests the warrant of an argument.
     *
     * @type        property
     * @parent      amo:relatesTo
     * @domain      amo:Backing
     * @range       amo:Warrant
     */
    backs = this.toIri().concat('backs');
    /**
     * **[amo:forces](http://purl.org/spar/amo/forces)**
     *
     * A qualifier that expresses as degree of force concerning a claim of an argument.
     *
     * @type        property
     * @parent      amo:relatesTo
     * @domain      amo:Qualifier
     * @range       amo:Claim
     */
    forces = this.toIri().concat('forces');
    /**
     * **[amo:has backing](http://purl.org/spar/amo/hasBacking)**
     *
     * An argument includes a backing as one of its (optional) components.
     *
     * @type        property
     * @parent      amo:involves
     * @domain      amo:Argument
     * @range       amo:Backing
     */
    hasBacking = this.toIri().concat('hasBacking');
    /**
     * **[amo:has claim](http://purl.org/spar/amo/hasClaim)**
     *
     * An argument includes a claim as one of its (mandatory) components.
     *
     * @type        property
     * @parent      amo:involves
     * @domain      amo:Argument
     * @range       amo:Claim
     */
    hasClaim = this.toIri().concat('hasClaim');
    /**
     * **[amo:has evidence](http://purl.org/spar/amo/hasEvidence)**
     *
     * An argument includes an evidence as one of its (mandatory) components.
     *
     * @type        property
     * @parent      amo:involves
     * @domain      amo:Argument
     * @range       amo:Evidence
     */
    hasEvidence = this.toIri().concat('hasEvidence');
    /**
     * **[amo:has qualifier](http://purl.org/spar/amo/hasQualifier)**
     *
     * An argument includes a qualifier as one of its (optional) components.
     *
     * @type        property
     * @parent      amo:involves
     * @domain      amo:Argument
     * @range       amo:Qualifier
     */
    hasQualifier = this.toIri().concat('hasQualifier');
    /**
     * **[amo:has rebuttal](http://purl.org/spar/amo/hasRebuttal)**
     *
     * An argument includes a rebuttal as one of its (optional) components.
     *
     * @type        property
     * @parent      amo:involves
     * @domain      amo:Argument
     * @range       amo:Rebuttal
     */
    hasRebuttal = this.toIri().concat('hasRebuttal');
    /**
     * **[amo:has warrant](http://purl.org/spar/amo/hasWarrant)**
     *
     * An argument includes a warrant as one of its (mandatory) components.
     *
     * @type        property
     * @parent      amo:involves
     * @domain      amo:Argument
     * @range       amo:Warrant
     */
    hasWarrant = this.toIri().concat('hasWarrant');
    /**
     * **[amo:involves](http://purl.org/spar/amo/involves)**
     *
     * An argument involves an argumentation entity (claim, evidence, warrant, backing, rebuttal) or a qualifier.
     *
     * @type        property
     * @domain      amo:Argument
     * @range       amo:ArgumentationEntity or amo:Qualifier
     */
    involves = this.toIri().concat('involves');
    /**
     * **[amo:is backing in](http://purl.org/spar/amo/isBackingIn)**
     *
     * An argumentative entity linked to an argument in which it is considered a backing.
     *
     * @type        property
     * @parent      amo:isInvolvedIn
     */
    isBackingIn = this.toIri().concat('isBackingIn');
    /**
     * **[amo:is claim in](http://purl.org/spar/amo/isClaimIn)**
     *
     * An argumentative entity linked to an argument in which it is considered a claim.
     *
     * @type        property
     * @parent      amo:isInvolvedIn
     */
    isClaimIn = this.toIri().concat('isClaimIn');
    /**
     * **[amo:is evidence in](http://purl.org/spar/amo/isEvidenceIn)**
     *
     * An argumentative entity linked to an argument in which it is considered an evidence.
     *
     * @type        property
     * @parent      amo:isInvolvedIn
     */
    isEvidenceIn = this.toIri().concat('isEvidenceIn');
    /**
     * **[amo:is involved in](http://purl.org/spar/amo/isInvolvedIn)**
     *
     * An argumentation entity involved in the presentation of an argument.
     *
     * @type        property
     */
    isInvolvedIn = this.toIri().concat('isInvolvedIn');
    /**
     * **[amo:is qualifier in](http://purl.org/spar/amo/isQualifierIn)**
     *
     * An sentence or word linked to an argument with the scope of qualifying the argument claim.
     *
     * @type        property
     * @parent      amo:isInvolvedIn
     */
    isQualifierIn = this.toIri().concat('isQualifierIn');
    /**
     * **[amo:is rebuttal in](http://purl.org/spar/amo/isRebuttalIn)**
     *
     * An argumentative entity linked to an argument in which it is considered a rebuttal.
     *
     * @type        property
     * @parent      amo:isInvolvedIn
     */
    isRebuttalIn = this.toIri().concat('isRebuttalIn');
    /**
     * **[amo:is valid unless](http://purl.org/spar/amo/isValidUnless)**
     *
     * A claim that is restricted by a rebuttal of an argument.
     *
     * @type        property
     * @parent      amo:relatesTo
     * @domain      amo:Claim
     * @range       amo:Rebuttal
     */
    isValidUnless = this.toIri().concat('isValidUnless');
    /**
     * **[amo:is warrant in](http://purl.org/spar/amo/isWarrantIn)**
     *
     * An argumentative entity linked to an argument in which it is considered a warrant.
     *
     * @type        property
     * @parent      amo:isInvolvedIn
     */
    isWarrantIn = this.toIri().concat('isWarrantIn');
    /**
     * **[amo:leads to](http://purl.org/spar/amo/leadsTo)**
     *
     * @type        property
     * @parent      amo:relatesTo
     * @domain      amo:Warrant
     * @range       amo:Claim
     */
    leadsTo = this.toIri().concat('leadsTo');
    /**
     * **[amo:proves](http://purl.org/spar/amo/proves)**
     *
     * An evidence that founds a claim of an argument.
     *
     * @type        property
     * @parent      amo:relatesTo
     * @domain      amo:Evidence
     * @range       amo:Claim
     */
    proves = this.toIri().concat('proves');
    /**
     * **[amo:relates to](http://purl.org/spar/amo/relatesTo)**
     *
     * An argumentation entity relates to another one in some way - for example, it is the evidence that is used to prove a claim of an argument.
     *
     * @type        property
     * @domain      amo:ArgumentationEntity or amo:Qualifier
     * @range       amo:ArgumentationEntity
     */
    relatesTo = this.toIri().concat('relatesTo');
    /**
     * **[amo:supports](http://purl.org/spar/amo/supports)**
     *
     * An evidence that supports a warrant of an argument.
     *
     * @type        property
     * @parent      amo:relatesTo
     * @domain      amo:Evidence
     * @range       amo:Warrant
     */
    supports = this.toIri().concat('supports');
}
/**
 * prefix **amo:** <<http://purl.org/spar/amo/>>
 *
 * Argument Model Ontology (AMO)
 *
 * The Argument Model Ontology (AMO) is an ontology that allows to describe argumentation according to the 'Toulmin Model of Argument'.
 *
 * Version: 1.0.0
 */
const amo = new Vocabulary('http://purl.org/spar/amo/');
export default amo;
//# sourceMappingURL=amo.js.map