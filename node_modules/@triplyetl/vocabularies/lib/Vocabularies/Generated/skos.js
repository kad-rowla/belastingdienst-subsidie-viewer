/**
 * Simple Knowledge Organization System (SKOS)
 * skos.ts (2023-08-08T17:30:10.333Z)
 */
import VocabularyBase from '../../Classes/Vocabulary.js';
class Vocabulary extends VocabularyBase {
    /**
     * **[skos:Collection](http://www.w3.org/2004/02/skos/core#Collection)**
     *
     * A meaningful collection of concepts.
     *
     * @type        class
     */
    Collection = this.toIri().concat('Collection');
    /**
     * **[skos:Concept](http://www.w3.org/2004/02/skos/core#Concept)**
     *
     * An idea or notion; a unit of thought.
     *
     * @type        class
     */
    Concept = this.toIri().concat('Concept');
    /**
     * **[skos:Concept Scheme](http://www.w3.org/2004/02/skos/core#ConceptScheme)**
     *
     * A set of concepts, optionally including statements about semantic relationships between those concepts.
     *
     * @type        class
     */
    ConceptScheme = this.toIri().concat('ConceptScheme');
    /**
     * **[skos:Ordered Collection](http://www.w3.org/2004/02/skos/core#OrderedCollection)**
     *
     * An ordered collection of concepts, where both the grouping and the ordering are meaningful.
     *
     * @type        class
     * @parent      skos:Collection
     */
    OrderedCollection = this.toIri().concat('OrderedCollection');
    /**
     * **[skos:alternative label](http://www.w3.org/2004/02/skos/core#altLabel)**
     *
     * An alternative lexical label for a resource.
     *
     * @type        property
     * @parent      http://www.w3.org/2000/01/rdf-schema#label
     */
    altLabel = this.toIri().concat('altLabel');
    /**
     * **[skos:has broader match](http://www.w3.org/2004/02/skos/core#broadMatch)**
     *
     * skos:broadMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
     *
     * @type        property
     * @parent      skos:broader
     */
    broadMatch = this.toIri().concat('broadMatch');
    /**
     * **[skos:has broader](http://www.w3.org/2004/02/skos/core#broader)**
     *
     * Broader concepts are typically rendered as parents in a concept hierarchy (tree).
     *
     * @type        property
     * @parent      skos:broaderTransitive
     */
    broader = this.toIri().concat('broader');
    /**
     * **[skos:has broader transitive](http://www.w3.org/2004/02/skos/core#broaderTransitive)**
     *
     * skos:broaderTransitive is a transitive superproperty of skos:broader.
     *
     * @type        property
     * @parent      skos:semanticRelation
     */
    broaderTransitive = this.toIri().concat('broaderTransitive');
    /**
     * **[skos:change note](http://www.w3.org/2004/02/skos/core#changeNote)**
     *
     * A note about a modification to a concept.
     *
     * @type        property
     * @parent      skos:note
     */
    changeNote = this.toIri().concat('changeNote');
    /**
     * **[skos:has close match](http://www.w3.org/2004/02/skos/core#closeMatch)**
     *
     * skos:closeMatch is used to link two concepts that are sufficiently similar that they can be used interchangeably in some information retrieval applications. In order to avoid the possibility of "compound errors" when combining mappings across more than two concept schemes, skos:closeMatch is not declared to be a transitive property.
     *
     * @type        property
     * @parent      skos:mappingRelation
     */
    closeMatch = this.toIri().concat('closeMatch');
    /**
     * **[skos:definition](http://www.w3.org/2004/02/skos/core#definition)**
     *
     * A statement or formal explanation of the meaning of a concept.
     *
     * @type        property
     * @parent      skos:note
     */
    definition = this.toIri().concat('definition');
    /**
     * **[skos:editorial note](http://www.w3.org/2004/02/skos/core#editorialNote)**
     *
     * A note for an editor, translator or maintainer of the vocabulary.
     *
     * @type        property
     * @parent      skos:note
     */
    editorialNote = this.toIri().concat('editorialNote');
    /**
     * **[skos:has exact match](http://www.w3.org/2004/02/skos/core#exactMatch)**
     *
     * skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.
     *
     * @type        property
     * @parent      skos:closeMatch
     */
    exactMatch = this.toIri().concat('exactMatch');
    /**
     * **[skos:example](http://www.w3.org/2004/02/skos/core#example)**
     *
     * An example of the use of a concept.
     *
     * @type        property
     * @parent      skos:note
     */
    example = this.toIri().concat('example');
    /**
     * **[skos:has top concept](http://www.w3.org/2004/02/skos/core#hasTopConcept)**
     *
     * Relates, by convention, a concept scheme to a concept which is topmost in the broader/narrower concept hierarchies for that scheme, providing an entry point to these hierarchies.
     *
     * @type        property
     * @domain      skos:ConceptScheme
     * @range       skos:Concept
     */
    hasTopConcept = this.toIri().concat('hasTopConcept');
    /**
     * **[skos:hidden label](http://www.w3.org/2004/02/skos/core#hiddenLabel)**
     *
     * A lexical label for a resource that should be hidden when generating visual displays of the resource, but should still be accessible to free text search operations.
     *
     * @type        property
     * @parent      http://www.w3.org/2000/01/rdf-schema#label
     */
    hiddenLabel = this.toIri().concat('hiddenLabel');
    /**
     * **[skos:history note](http://www.w3.org/2004/02/skos/core#historyNote)**
     *
     * A note about the past state/use/meaning of a concept.
     *
     * @type        property
     * @parent      skos:note
     */
    historyNote = this.toIri().concat('historyNote');
    /**
     * **[skos:is in scheme](http://www.w3.org/2004/02/skos/core#inScheme)**
     *
     * Relates a resource (for example a concept) to a concept scheme in which it is included.
     *
     * @type        property
     * @range       skos:ConceptScheme
     */
    inScheme = this.toIri().concat('inScheme');
    /**
     * **[skos:is in mapping relation with](http://www.w3.org/2004/02/skos/core#mappingRelation)**
     *
     * Relates two concepts coming, by convention, from different schemes, and that have comparable meanings
     *
     * @type        property
     * @parent      skos:semanticRelation
     */
    mappingRelation = this.toIri().concat('mappingRelation');
    /**
     * **[skos:has member](http://www.w3.org/2004/02/skos/core#member)**
     *
     * Relates a collection to one of its members.
     *
     * @type        property
     * @domain      skos:Collection
     * @range       skos:Concept or skos:Collection
     */
    member = this.toIri().concat('member');
    /**
     * **[skos:has member list](http://www.w3.org/2004/02/skos/core#memberList)**
     *
     * For any resource, every item in the list given as the value of the      skos:memberList property is also a value of the skos:member property.
     *
     * @type        property
     * @domain      skos:OrderedCollection
     * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#List
     */
    memberList = this.toIri().concat('memberList');
    /**
     * **[skos:has narrower match](http://www.w3.org/2004/02/skos/core#narrowMatch)**
     *
     * skos:narrowMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
     *
     * @type        property
     * @parent      skos:mappingRelation
     */
    narrowMatch = this.toIri().concat('narrowMatch');
    /**
     * **[skos:has narrower](http://www.w3.org/2004/02/skos/core#narrower)**
     *
     * Narrower concepts are typically rendered as children in a concept hierarchy (tree).
     *
     * @type        property
     * @parent      skos:narrowerTransitive
     */
    narrower = this.toIri().concat('narrower');
    /**
     * **[skos:has narrower transitive](http://www.w3.org/2004/02/skos/core#narrowerTransitive)**
     *
     * skos:narrowerTransitive is a transitive superproperty of skos:narrower.
     *
     * @type        property
     * @parent      skos:semanticRelation
     */
    narrowerTransitive = this.toIri().concat('narrowerTransitive');
    /**
     * **[skos:notation](http://www.w3.org/2004/02/skos/core#notation)**
     *
     * A notation, also known as classification code, is a string of characters such as "T58.5" or "303.4833" used to uniquely identify a concept within the scope of a given concept scheme.
     *
     * @type        property
     */
    notation = this.toIri().concat('notation');
    /**
     * **[skos:note](http://www.w3.org/2004/02/skos/core#note)**
     *
     * A general note, for any purpose.
     *
     * @type        property
     */
    note = this.toIri().concat('note');
    /**
     * **[skos:preferred label](http://www.w3.org/2004/02/skos/core#prefLabel)**
     *
     * A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.
     *
     * @type        property
     * @parent      http://www.w3.org/2000/01/rdf-schema#label
     */
    prefLabel = this.toIri().concat('prefLabel');
    /**
     * **[skos:has related](http://www.w3.org/2004/02/skos/core#related)**
     *
     * Relates a concept to a concept with which there is an associative semantic relationship.
     *
     * @type        property
     * @parent      skos:semanticRelation
     */
    related = this.toIri().concat('related');
    /**
     * **[skos:has related match](http://www.w3.org/2004/02/skos/core#relatedMatch)**
     *
     * skos:relatedMatch is used to state an associative mapping link between two conceptual resources in different concept schemes.
     *
     * @type        property
     * @parent      skos:mappingRelation
     */
    relatedMatch = this.toIri().concat('relatedMatch');
    /**
     * **[skos:scope note](http://www.w3.org/2004/02/skos/core#scopeNote)**
     *
     * A note that helps to clarify the meaning and/or the use of a concept.
     *
     * @type        property
     * @parent      skos:note
     */
    scopeNote = this.toIri().concat('scopeNote');
    /**
     * **[skos:is in semantic relation with](http://www.w3.org/2004/02/skos/core#semanticRelation)**
     *
     * Links a concept to a concept related by meaning.
     *
     * @type        property
     * @domain      skos:Concept
     * @range       skos:Concept
     */
    semanticRelation = this.toIri().concat('semanticRelation');
    /**
     * **[skos:is top concept in scheme](http://www.w3.org/2004/02/skos/core#topConceptOf)**
     *
     * Relates a concept to the concept scheme that it is a top level concept of.
     *
     * @type        property
     * @parent      skos:inScheme
     * @domain      skos:Concept
     * @range       skos:ConceptScheme
     */
    topConceptOf = this.toIri().concat('topConceptOf');
}
/**
 * prefix **skos:** <<http://www.w3.org/2004/02/skos/core#>>
 *
 * Simple Knowledge Organization System (SKOS)
 *
 * The Simple Knowledge Organization System (SKOS) is a common data model for sharing and linking knowledge organization systems via the Semantic Web.This document provides a brief description of the SKOS Vocabulary.
 *
 * For detailed information about the SKOS Recommendation, please consult the [SKOS Reference](http://www.w3.org/TR/skos-reference) or the [SKOS Primer](http://www.w3.org/TR/skos-primer).
 *
 * Version: 1.2.0
 */
const skos = new Vocabulary('http://www.w3.org/2004/02/skos/core#');
export default skos;
//# sourceMappingURL=skos.js.map