import getJobs from '../Utils/getJobs.js';
import chalk from 'chalk';
import writeJobs from '../Utils/writeJobs.js';
const $jobs = getJobs();
export const add = {
    command: 'add',
    describe: 'adds new vocabulary job',
    builder: {
        prefix: {
            alias: 'p',
            type: 'string',
            describe: 'The prefix for the vocabulary.',
            demandOption: true
        },
        iri: {
            alias: 'i',
            type: 'string',
            describe: 'The Iri namespace for the vocabulary.',
            demandOption: true
        },
        account: {
            alias: 'a',
            type: 'string',
            describe: 'The name of the account in TriplyDB.com.',
            demandOption: true
        },
        dataset: {
            alias: 'd',
            type: 'string',
            describe: 'The name of the dataset in TriplyDB.com, if this is different from the job alias.'
        },
        objectName: {
            alias: 'o',
            type: 'string',
            describe: 'If the vocabulary alias cannot act as an object name in TypeScript, specify a different object name.'
        },
        update: {
            type: 'boolean',
            describe: 'Adds new job (if they it not already exist) or updates it (if it does).'
        }
    },
    handler: async (argv) => {
        let jobs = $jobs.filter((job) => job.iri === argv.iri);
        if (jobs.length !== 0) {
            process.stderr.write(chalk.red(`A job with the iri <${chalk.bold(`${argv.iri}`)}> (prefix '${jobs[0].prefix}') already exists.\n`));
            process.exit(1);
        }
        jobs = $jobs.filter((job) => job.prefix === argv.prefix);
        if (jobs.length !== 0) {
            if (argv.update === undefined || argv.update === false) {
                process.stderr.write(chalk.red(`A job with the prefix '${chalk.bold(`${argv.prefix}`)}' (iri <${jobs[0].iri}>) already exists.\n`));
                process.stderr.write(chalk.cyan('Tip: use --update to change the current entry.\n'));
                process.exit(1);
            }
            // remove the previous job from the entries:
            jobs = $jobs.filter((job) => job.prefix !== argv.prefix);
        }
        else {
            jobs = $jobs;
        }
        jobs.push({
            prefix: argv.prefix,
            iri: argv.iri,
            account: argv.account,
            dataset: argv.dataset === undefined ? undefined : argv.dataset,
            objectName: argv.objectName === undefined ? undefined : argv.objectName
        });
        writeJobs(jobs);
        process.stdout.write(chalk.blue(`You have succesfully added a job with prefix '${chalk.bold(`${argv.prefix}`)}' and iri <${chalk.bold(`${argv.iri}`)}>.\n`));
        process.stdout.write(chalk.cyan(`Tip: run \`npx vocabularies generate ${argv.prefix}\` to generate the corresponding vocabulary file.\n`));
    }
};
//# sourceMappingURL=add.js.map