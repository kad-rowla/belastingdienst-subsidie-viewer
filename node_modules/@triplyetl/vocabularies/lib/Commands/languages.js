import fs from 'fs';
import tags from 'language-tags';
export const languages = {
    command: 'languages',
    describe: 'generate language library',
    handler: async (argv) => {
        const languages = JSON.parse(fs.readFileSync('node_modules/language-subtag-registry/data/json/registry.json', 'utf-8')).filter((region) => region.Type === 'language' && region.Subtag.match(/^[a-z]+$/));
        const lines = ["import LanguageTag from '../Classes/LanguageTag.js'\n", 'const language = {'];
        let i = 0;
        for (const language of languages) {
            i++;
            const tag = tags(language.Subtag);
            if (!tag.valid()) {
                // process.stderr.write(chalk.yellow(`warning: skipping invalid language '${language.Subtag}'\n`))
                continue;
            }
            lines.push('\n  /**');
            lines.push(`   * ${language.Description.join(', ')}`);
            lines.push('   */');
            lines.push(`  ${language.Subtag}: new LanguageTag('${language.Subtag}')${i !== languages.length ? ',' : ''}`);
        }
        lines.push('}\n');
        lines.push('export default language\n');
        fs.writeFileSync('./src/Languages/language.ts', lines.join('\n'), 'utf-8');
        const regions = JSON.parse(fs.readFileSync('node_modules/language-subtag-registry/data/json/registry.json', 'utf-8')).filter((region) => region.Type === 'region' && region.Subtag.match(/^[A-Z]+$/));
        lines.length = 0;
        i = 0;
        lines.push("import Region from '../Classes/Region.js'\n");
        lines.push('const region = {');
        for (const region of regions) {
            i++;
            lines.push('\n  /**');
            lines.push(`   * ${region.Description.join(', ')}`);
            lines.push('   */');
            lines.push(`  ${region.Subtag}: new Region('${region.Subtag}')${i !== regions.length ? ',' : ''}`);
        }
        lines.push('}\n');
        lines.push('export default region\n');
        fs.writeFileSync('./src/Languages/region.ts', lines.join('\n'), 'utf-8');
    }
};
//# sourceMappingURL=languages.js.map