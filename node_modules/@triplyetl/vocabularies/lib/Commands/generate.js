import TriplyDB from '@triply/triplydb/App.js';
import dotenv from 'dotenv';
import chalk from 'chalk';
import getJobs from '../Utils/getJobs.js';
import generateStaticIndexFile from './helpers/generateStaticIndexFile.js';
import generatePrefixIndexFile from './helpers/generatePrefixIndexFile.js';
import loadFromTriplyDB from './helpers/loadFromTriplyDB.js';
import generateVocabularyFile from './helpers/generateVocabularyFile.js';
import path from 'path';
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
dotenv.config();
const $jobs = getJobs();
export const generate = {
    command: 'generate [prefixes...]',
    describe: 'generate 1 or more vocabularies',
    builder: {
        token: {
            alias: 't',
            type: 'string',
            describe: 'TriplyDB Token'
        },
        all: {
            alias: 'a',
            type: 'boolean'
        },
        cache: {
            alias: 'c',
            type: 'boolean',
            describe: 'read the vocabulary from previously created JSON files',
            default: false
        },
        index: {
            alias: 'i',
            describe: 'Does not create the vocabulary files, only the index files.',
            type: 'boolean'
        },
        prefixes: {
            type: 'string',
            hidden: true,
            choices: $jobs.map((job) => job.prefix),
            describe: 'Create/Update only this vocabulary'
        }
    },
    handler: async (argv) => {
        const useCache = (argv.cache ?? false) === true;
        let jobs = $jobs;
        if (argv.index !== undefined && argv.index === true) {
            if (argv.prefixes !== undefined || argv.all !== undefined) {
                process.stderr.write(chalk.red('The --index|-i flag can not be used in conjunction with other arguments\n'));
                process.exit(1);
            }
        }
        if (argv.index === undefined || argv.index === false) {
            if (argv.prefixes === undefined && argv.all === undefined) {
                process.stderr.write(`${chalk.red('Please provide one ore more vocabularies, or use the --all|-a switch.')}\n`);
                process.exit(1);
            }
            else if (argv.prefixes !== undefined && argv.all !== undefined) {
                process.stderr.write(`${chalk.red('The --all|-a flag can not be combined with one ore more vocabularies.')}\n`);
                process.exit(1);
            }
            else if (argv.prefixes !== undefined) {
                jobs = $jobs.filter((job) => argv.prefixes.includes(job.prefix));
            }
            else if (argv.all === false) {
                jobs = [];
            }
        }
        else {
            jobs = [];
        }
        const token = (argv.token !== undefined ? argv.token : undefined) ?? process.env.TOKEN;
        if (token === undefined) {
            process.stderr.write(`${chalk.red('Unable to find a token to connect to TriplyDB instance at https://triplydb.com')} 
${chalk.blue('Here is what you can do:')}
  - set a token by using \`export TOKEN=<your-token>\`
  - set a token by creating a file \`.env\` with content "TOKEN=<your-token>"
  - set a token by using the CLI option --token | -t, e.g. \`generate -t <your-token>\`
`);
        }
        let app;
        try {
            app = TriplyDB.get({ token });
        }
        catch (e) {
            console.error(chalk.red(e.message));
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        app = app;
        if (jobs.length > 0) {
            process.stdout.write(chalk.blue('> Creating new vocabularies: \n'));
        }
        let i = 0;
        for (const job of jobs) {
            i++;
            const counter = i.toString().padStart(2, '0') + '/' + jobs.length.toString().padStart(2, '0');
            process.stdout.write(chalk.blue(`  > [${counter}] ${job.prefix} (${job.iri}): `));
            if (!useCache)
                await loadFromTriplyDB(app, job);
            const sourceFile = path.join(process.cwd(), 'static', 'Vocabularies', 'Generated', `${job.prefix}.json`);
            const vocab = require(sourceFile);
            process.stdout.write(chalk.bold('done\n'));
            await generateVocabularyFile(job, vocab);
        }
        await generateStaticIndexFile($jobs);
        await generatePrefixIndexFile($jobs);
    }
};
//# sourceMappingURL=generate.js.map