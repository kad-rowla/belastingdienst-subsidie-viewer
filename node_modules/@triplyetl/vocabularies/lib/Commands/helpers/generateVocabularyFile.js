import path from 'path';
import { writeFileSync, existsSync } from 'fs';
import { pretty } from '../../Utils/pretty.js';
export default async function generateJsonFile(job, vocab) {
    const targetFile = path.join(process.cwd(), 'src', 'Vocabularies', 'Generated', `${job.prefix}.ts`);
    const sourceFile = path.join(process.cwd(), 'static', 'Vocabularies', 'Generated', `${job.prefix}.json`);
    if (!existsSync(sourceFile))
        return await Promise.reject(new Error(`Could not find vocabulary definition file 'static/Vocabularies/Generated/${job.prefix}.ts'`));
    let items = '';
    if (vocab.items !== undefined) {
        for (const [key, item] of Object.entries(vocab.items)) {
            const itemContent = [];
            const recordKey = key.match(/^[a-z][a-z0-9_]+$/i) !== null ? key : `'${key}'`;
            const label = `[${job.prefix}:${item.label ?? key}](${vocab.iri}${recordKey})`;
            itemContent.push('  /**', `   * **${label}**`, '   *');
            if (item.description !== undefined)
                itemContent.push(`   * ${item.description.trim()}`, '   *');
            itemContent.push(`   * @type        ${item.category}`);
            if (item.parent !== undefined)
                itemContent.push(`   * @parent      ${item.parent}`);
            if (item.domain !== undefined)
                itemContent.push(`   * @domain      ${item.domain}`);
            if (item.range !== undefined)
                itemContent.push(`   * @range       ${item.range}`);
            itemContent.push('   */');
            items += `\n${itemContent.join('\n')}\n  public readonly ${recordKey} = this.toIri().concat('${key}')\n`;
        }
    }
    const fileContent = `/**
* ${vocab.displayName.trim()}
* ${vocab.prefix}.ts (${new Date().toISOString()})
*/
import VocabularyBase from '../../Classes/Vocabulary.js'

class Vocabulary extends VocabularyBase<'${vocab.iri}'> {
${items}
}

/**
 * prefix **${job.prefix}:** <<${vocab.iri}>>
 * 
 * ${vocab.displayName}
 *
 * ${vocab.description.replace(/(?:\n|\\n)/g, '\n * ')}
 */
const ${job.objectName ?? job.prefix} = new Vocabulary('${vocab.iri}')
export default ${job.objectName ?? job.prefix}
`;
    writeFileSync(targetFile, await pretty(fileContent), 'utf-8');
    return fileContent;
}
//# sourceMappingURL=generateVocabularyFile.js.map