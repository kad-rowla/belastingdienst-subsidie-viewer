import Iri, { isIri } from './Iri.js';
const $SIGNATURE = '@triplyetl/vocabularies/Vocabulary';
export default class Vocabulary {
    $namespace;
    $signature = $SIGNATURE;
    $iris = [];
    constructor($namespace) {
        this.$namespace = $namespace;
    }
    toString() {
        return this.$namespace;
    }
    toIri() {
        return new Iri(this.$namespace);
    }
    concat(path) {
        return new Iri(`${this.$namespace}${path}`);
    }
    toRecord() {
        const record = {};
        Object.keys(this).forEach((key) => {
            // @ts-expect-error we know now that 'key' is a class member of this
            if (isIri(this[key])) {
                // @ts-expect-error we know now that 'key' is a class member of this
                record[key] = this[key];
            }
        });
        return record;
    }
    static isVocabulary(vocab) {
        return typeof vocab === 'object' && Boolean(Object.hasOwn(vocab, '$signature')) && vocab.$signature === $SIGNATURE;
    }
}
//# sourceMappingURL=Vocabulary.js.map