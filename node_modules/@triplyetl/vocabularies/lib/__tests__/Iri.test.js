import { assert } from 'chai';
import { getFactory } from '@triplydb/data-factory';
import Iri from '../Classes/Iri.js';
import { aat, sdo, xsd } from '../Vocabularies/index.js';
const url = 'http://ex.com';
const ex = new Iri(url);
describe('Vocabularies', () => {
    it("generated vocabularies should be Iri's (sdo)", () => {
        assert.isTrue(sdo.Person.equals(getFactory().namedNode('https://schema.org/Person')));
        assert.isTrue(sdo.Person.equals(getFactory().namedNode(sdo.Person.toString())));
        assert.equal(sdo.toString(), 'https://schema.org/');
        assert.isTrue(sdo.toIri().equals(getFactory().namedNode('https://schema.org/')));
    });
    it("static vocabularies should be Iri's (xsd)", () => {
        assert.isTrue(xsd.boolean.equals(getFactory().namedNode('http://www.w3.org/2001/XMLSchema#boolean')));
        assert.isTrue(xsd.boolean.equals(getFactory().namedNode(xsd.boolean.toString())));
        assert.equal(xsd.toString(), 'http://www.w3.org/2001/XMLSchema#');
        assert.isTrue(xsd.toIri().equals(getFactory().namedNode('http://www.w3.org/2001/XMLSchema#')));
    });
    it("misc. vocabs should be iri's (aat)", () => {
        assert.isTrue(aat.equals(getFactory().namedNode('http://vocab.getty.edu/aat/')));
        assert.isTrue(aat.concat('1234').equals(getFactory().namedNode('http://vocab.getty.edu/aat/1234')));
    });
});
describe('Test Iri', () => {
    it('should be an Iri', () => {
        assert.isTrue(ex.equals(getFactory().namedNode(url)));
    });
    it("should fail on invalid Iri's", () => {
        assert.throw(() => new Iri(''), /Unable to parse relative IRI without a base IRI/);
        assert.throw(() => new Iri(' '), /The IRI includes the invalid character ' '/);
    });
    it('should add a Path', () => {
        const foo = ex.concat('/foo');
        assert.equal(foo.toString(), url + '/foo');
        assert.isTrue(foo.equals(getFactory().namedNode(url + '/foo')));
    });
    it('should be able to return a string', () => {
        assert.equal(ex.toString(), url);
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        assert.equal(`${ex}`, url);
        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
        assert.equal(ex + '', url);
    });
});
//# sourceMappingURL=Iri.test.js.map