import type TriplyDB from '@triply/triplydb/App.js'
import type Job from '../../Interfaces/Job.js'
import { xsd } from '../../Vocabularies/index.js'
import generateJsonFile from './generateJsonFile.js'
import chalk from 'chalk'
import fs from 'fs'
import path from 'path'
import { type AddQueryService } from '@triply/triplydb/commonAccountFunctions.js'

const queryStringJson = fs.readFileSync(path.join(process.cwd(), 'src', 'Vocabularies', 'Misc', 'query.vsc.rq'), 'utf-8')

export default async (app: TriplyDB, job: Job): Promise<void> => {
  const datasetName = job.dataset ?? job.prefix
  const account = await app.getAccount()
  let description = ''
  let displayName = ''
  await app
    .getAccount(job.account)
    .then(async (a) => await a.getDataset(datasetName))
    .then(async (dataset) => {
      return {
        info: await dataset.getInfo(),
        dataset
      }
    })
    .then(async (ret) => {
      description = ret.info.description ?? ret.info.displayName
      displayName = ret.info.displayName
      return {
        newDataset: await account.ensureDataset(`vocabularies-${job.prefix}`),
        importFrom: ret.dataset
      }
    })
    .then(async (ret) => {
      await ret.newDataset.importFromDataset(ret.importFrom)
      return ret.newDataset
    })
    .then(async (dataset) => await dataset.ensureService('sparql', { type: 'jena' }))
    .then(async (service) => {
      if (!(await service.isUpToDate())) {
        await service.update()
        await service.waitUntilRunning()
      }
      await account
        .getQuery(`vocabularies-${job.prefix}`)
        .then(async (query) => {
          await query.delete()
        })
        .catch((_) => {})
      return service
    })
    .then(async (service) => {
      const queryDef = (q: string): AddQueryService => {
        return {
          queryString: q,
          service,
          variables: [
            {
              datatype: xsd.string.value,
              defaultValue: job.prefix,
              name: 'prefixIn',
              termType: 'Literal'
            },
            {
              defaultValue: job.iri,
              name: 'iriIn',
              termType: 'NamedNode'
            }
          ]
        }
      }

      // delete old query might it exist
      await account
        .getQuery(`vocabularies-${job.prefix}`)
        .then(async (q) => {
          await q.delete()
        })
        .catch((_) => {})

      return await account.addQuery(`vocabularies-${job.prefix}`, queryDef(queryStringJson))
    })
    .then(async (query) => {
      await generateJsonFile(query, displayName, description, job.prefix, job.iri)
      await query.delete()

      await account.getDataset(`vocabularies-${job.prefix}`).then(async (dataset) => {
        await dataset.delete()
      })
    })
    .catch((e) => {
      process.stderr.write('\n' + chalk.red((e as Error).message) + '\n')
      process.exit(1)
    })
}
