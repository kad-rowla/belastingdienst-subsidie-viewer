/**
 * Shapes Constraint Language (SHACL)
 * sh.ts (2023-08-08T17:30:10.305Z)
 */
import VocabularyBase from '../../Classes/Vocabulary.js'

class Vocabulary extends VocabularyBase<'http://www.w3.org/ns/shacl#'> {
  /**
   * **[sh:Abstract result](http://www.w3.org/ns/shacl#AbstractResult)**
   *
   * The base class of validation results, typically not instantiated directly.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly AbstractResult = this.toIri().concat('AbstractResult')

  /**
   * **[sh:And constraint component](http://www.w3.org/ns/shacl#AndConstraintComponent)**
   *
   * A constraint component that can be used to test whether a value node conforms to all members of a provided list of shapes.
   *
   * @type        instance
   */
  public readonly AndConstraintComponent = this.toIri().concat('AndConstraintComponent')

  /**
   * **[sh:AndConstraintComponent-and](http://www.w3.org/ns/shacl#'AndConstraintComponent-and')**
   *
   * @type        instance
   */
  public readonly 'AndConstraintComponent-and' = this.toIri().concat('AndConstraintComponent-and')

  /**
   * **[sh:Blank node](http://www.w3.org/ns/shacl#BlankNode)**
   *
   * The node kind of all blank nodes.
   *
   * @type        instance
   */
  public readonly BlankNode = this.toIri().concat('BlankNode')

  /**
   * **[sh:Blank node or IRI](http://www.w3.org/ns/shacl#BlankNodeOrIRI)**
   *
   * The node kind of all blank nodes or IRIs.
   *
   * @type        instance
   */
  public readonly BlankNodeOrIRI = this.toIri().concat('BlankNodeOrIRI')

  /**
   * **[sh:Blank node or literal](http://www.w3.org/ns/shacl#BlankNodeOrLiteral)**
   *
   * The node kind of all blank nodes or literals.
   *
   * @type        instance
   */
  public readonly BlankNodeOrLiteral = this.toIri().concat('BlankNodeOrLiteral')

  /**
   * **[sh:Class constraint component](http://www.w3.org/ns/shacl#ClassConstraintComponent)**
   *
   * A constraint component that can be used to verify that each value node is an instance of a given type.
   *
   * @type        instance
   */
  public readonly ClassConstraintComponent = this.toIri().concat('ClassConstraintComponent')

  /**
   * **[sh:ClassConstraintComponent-class](http://www.w3.org/ns/shacl#'ClassConstraintComponent-class')**
   *
   * @type        instance
   */
  public readonly 'ClassConstraintComponent-class' = this.toIri().concat('ClassConstraintComponent-class')

  /**
   * **[sh:Closed constraint component](http://www.w3.org/ns/shacl#ClosedConstraintComponent)**
   *
   * A constraint component that can be used to indicate that focus nodes must only have values for those properties that have been explicitly enumerated via sh:property/sh:path.
   *
   * @type        instance
   */
  public readonly ClosedConstraintComponent = this.toIri().concat('ClosedConstraintComponent')

  /**
   * **[sh:ClosedConstraintComponent-closed](http://www.w3.org/ns/shacl#'ClosedConstraintComponent-closed')**
   *
   * @type        instance
   */
  public readonly 'ClosedConstraintComponent-closed' = this.toIri().concat('ClosedConstraintComponent-closed')

  /**
   * **[sh:ClosedConstraintComponent-ignoredProperties](http://www.w3.org/ns/shacl#'ClosedConstraintComponent-ignoredProperties')**
   *
   * @type        instance
   */
  public readonly 'ClosedConstraintComponent-ignoredProperties' = this.toIri().concat('ClosedConstraintComponent-ignoredProperties')

  /**
   * **[sh:Constraint component](http://www.w3.org/ns/shacl#ConstraintComponent)**
   *
   * The class of constraint components.
   *
   * @type        class
   * @parent      sh:Parameterizable
   */
  public readonly ConstraintComponent = this.toIri().concat('ConstraintComponent')

  /**
   * **[sh:Datatype constraint component](http://www.w3.org/ns/shacl#DatatypeConstraintComponent)**
   *
   * A constraint component that can be used to restrict the datatype of all value nodes.
   *
   * @type        instance
   */
  public readonly DatatypeConstraintComponent = this.toIri().concat('DatatypeConstraintComponent')

  /**
   * **[sh:DatatypeConstraintComponent-datatype](http://www.w3.org/ns/shacl#'DatatypeConstraintComponent-datatype')**
   *
   * @type        instance
   */
  public readonly 'DatatypeConstraintComponent-datatype' = this.toIri().concat('DatatypeConstraintComponent-datatype')

  /**
   * **[sh:Disjoint constraint component](http://www.w3.org/ns/shacl#DisjointConstraintComponent)**
   *
   * A constraint component that can be used to verify that the set of value nodes is disjoint with the the set of nodes that have the focus node as subject and the value of a given property as predicate.
   *
   * @type        instance
   */
  public readonly DisjointConstraintComponent = this.toIri().concat('DisjointConstraintComponent')

  /**
   * **[sh:DisjointConstraintComponent-disjoint](http://www.w3.org/ns/shacl#'DisjointConstraintComponent-disjoint')**
   *
   * @type        instance
   */
  public readonly 'DisjointConstraintComponent-disjoint' = this.toIri().concat('DisjointConstraintComponent-disjoint')

  /**
   * **[sh:Equals constraint component](http://www.w3.org/ns/shacl#EqualsConstraintComponent)**
   *
   * A constraint component that can be used to verify that the set of value nodes is equal to the set of nodes that have the focus node as subject and the value of a given property as predicate.
   *
   * @type        instance
   */
  public readonly EqualsConstraintComponent = this.toIri().concat('EqualsConstraintComponent')

  /**
   * **[sh:EqualsConstraintComponent-equals](http://www.w3.org/ns/shacl#'EqualsConstraintComponent-equals')**
   *
   * @type        instance
   */
  public readonly 'EqualsConstraintComponent-equals' = this.toIri().concat('EqualsConstraintComponent-equals')

  /**
   * **[sh:Expression constraint component](http://www.w3.org/ns/shacl#ExpressionConstraintComponent)**
   *
   * A constraint component that can be used to verify that a given node expression produces true for all value nodes.
   *
   * @type        instance
   */
  public readonly ExpressionConstraintComponent = this.toIri().concat('ExpressionConstraintComponent')

  /**
   * **[sh:ExpressionConstraintComponent-expression](http://www.w3.org/ns/shacl#'ExpressionConstraintComponent-expression')**
   *
   * @type        instance
   */
  public readonly 'ExpressionConstraintComponent-expression' = this.toIri().concat('ExpressionConstraintComponent-expression')

  /**
   * **[sh:Function](http://www.w3.org/ns/shacl#Function)**
   *
   * The class of SHACL functions.
   *
   * @type        class
   * @parent      sh:Parameterizable
   */
  public readonly Function = this.toIri().concat('Function')

  /**
   * **[sh:Has-value constraint component](http://www.w3.org/ns/shacl#HasValueConstraintComponent)**
   *
   * A constraint component that can be used to verify that one of the value nodes is a given RDF node.
   *
   * @type        instance
   */
  public readonly HasValueConstraintComponent = this.toIri().concat('HasValueConstraintComponent')

  /**
   * **[sh:HasValueConstraintComponent-hasValue](http://www.w3.org/ns/shacl#'HasValueConstraintComponent-hasValue')**
   *
   * @type        instance
   */
  public readonly 'HasValueConstraintComponent-hasValue' = this.toIri().concat('HasValueConstraintComponent-hasValue')

  /**
   * **[sh:IRI](http://www.w3.org/ns/shacl#IRI)**
   *
   * The node kind of all IRIs.
   *
   * @type        instance
   */
  public readonly IRI = this.toIri().concat('IRI')

  /**
   * **[sh:IRI or literal](http://www.w3.org/ns/shacl#IRIOrLiteral)**
   *
   * The node kind of all IRIs or literals.
   *
   * @type        instance
   */
  public readonly IRIOrLiteral = this.toIri().concat('IRIOrLiteral')

  /**
   * **[sh:In constraint component](http://www.w3.org/ns/shacl#InConstraintComponent)**
   *
   * A constraint component that can be used to exclusively enumerate the permitted value nodes.
   *
   * @type        instance
   */
  public readonly InConstraintComponent = this.toIri().concat('InConstraintComponent')

  /**
   * **[sh:InConstraintComponent-in](http://www.w3.org/ns/shacl#'InConstraintComponent-in')**
   *
   * @type        instance
   */
  public readonly 'InConstraintComponent-in' = this.toIri().concat('InConstraintComponent-in')

  /**
   * **[sh:Info](http://www.w3.org/ns/shacl#Info)**
   *
   * The severity for an informational validation result.
   *
   * @type        instance
   */
  public readonly Info = this.toIri().concat('Info')

  /**
   * **[sh:JavaScript-based constraint](http://www.w3.org/ns/shacl#JSConstraint)**
   *
   * The class of constraints backed by a JavaScript function.
   *
   * @type        class
   * @parent      sh:JSExecutable
   */
  public readonly JSConstraint = this.toIri().concat('JSConstraint')

  /**
   * **[sh:JSConstraint-js](http://www.w3.org/ns/shacl#'JSConstraint-js')**
   *
   * @type        instance
   */
  public readonly 'JSConstraint-js' = this.toIri().concat('JSConstraint-js')

  /**
   * **[sh:JavaScript constraint component](http://www.w3.org/ns/shacl#JSConstraintComponent)**
   *
   * A constraint component with the parameter sh:js linking to a sh:JSConstraint containing a sh:script.
   *
   * @type        instance
   */
  public readonly JSConstraintComponent = this.toIri().concat('JSConstraintComponent')

  /**
   * **[sh:JavaScript executable](http://www.w3.org/ns/shacl#JSExecutable)**
   *
   * Abstract base class of resources that declare an executable JavaScript.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly JSExecutable = this.toIri().concat('JSExecutable')

  /**
   * **[sh:JavaScript function](http://www.w3.org/ns/shacl#JSFunction)**
   *
   * The class of SHACL functions that execute a JavaScript function when called.
   *
   * @type        class
   * @parent      sh:Function
   */
  public readonly JSFunction = this.toIri().concat('JSFunction')

  /**
   * **[sh:JavaScript library](http://www.w3.org/ns/shacl#JSLibrary)**
   *
   * Represents a JavaScript library, typically identified by one or more URLs of files to include.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly JSLibrary = this.toIri().concat('JSLibrary')

  /**
   * **[sh:JavaScript rule](http://www.w3.org/ns/shacl#JSRule)**
   *
   * The class of SHACL rules expressed using JavaScript.
   *
   * @type        class
   * @parent      sh:JSExecutable
   */
  public readonly JSRule = this.toIri().concat('JSRule')

  /**
   * **[sh:JavaScript target](http://www.w3.org/ns/shacl#JSTarget)**
   *
   * The class of targets that are based on JavaScript functions.
   *
   * @type        class
   * @parent      sh:JSExecutable
   */
  public readonly JSTarget = this.toIri().concat('JSTarget')

  /**
   * **[sh:JavaScript target type](http://www.w3.org/ns/shacl#JSTargetType)**
   *
   * The (meta) class for parameterizable targets that are based on JavaScript functions.
   *
   * @type        class
   * @parent      sh:JSExecutable
   */
  public readonly JSTargetType = this.toIri().concat('JSTargetType')

  /**
   * **[sh:JavaScript validator](http://www.w3.org/ns/shacl#JSValidator)**
   *
   * A SHACL validator based on JavaScript. This can be used to declare SHACL constraint components that perform JavaScript-based validation when used.
   *
   * @type        class
   * @parent      sh:JSExecutable
   */
  public readonly JSValidator = this.toIri().concat('JSValidator')

  /**
   * **[sh:Language-in constraint component](http://www.w3.org/ns/shacl#LanguageInConstraintComponent)**
   *
   * A constraint component that can be used to enumerate language tags that all value nodes must have.
   *
   * @type        instance
   */
  public readonly LanguageInConstraintComponent = this.toIri().concat('LanguageInConstraintComponent')

  /**
   * **[sh:LanguageInConstraintComponent-languageIn](http://www.w3.org/ns/shacl#'LanguageInConstraintComponent-languageIn')**
   *
   * @type        instance
   */
  public readonly 'LanguageInConstraintComponent-languageIn' = this.toIri().concat('LanguageInConstraintComponent-languageIn')

  /**
   * **[sh:Less-than constraint component](http://www.w3.org/ns/shacl#LessThanConstraintComponent)**
   *
   * A constraint component that can be used to verify that each value node is smaller than all the nodes that have the focus node as subject and the value of a given property as predicate.
   *
   * @type        instance
   */
  public readonly LessThanConstraintComponent = this.toIri().concat('LessThanConstraintComponent')

  /**
   * **[sh:LessThanConstraintComponent-lessThan](http://www.w3.org/ns/shacl#'LessThanConstraintComponent-lessThan')**
   *
   * @type        instance
   */
  public readonly 'LessThanConstraintComponent-lessThan' = this.toIri().concat('LessThanConstraintComponent-lessThan')

  /**
   * **[sh:less-than-or-equals constraint component](http://www.w3.org/ns/shacl#LessThanOrEqualsConstraintComponent)**
   *
   * A constraint component that can be used to verify that every value node is smaller than all the nodes that have the focus node as subject and the value of a given property as predicate.
   *
   * @type        instance
   */
  public readonly LessThanOrEqualsConstraintComponent = this.toIri().concat('LessThanOrEqualsConstraintComponent')

  /**
   * **[sh:LessThanOrEqualsConstraintComponent-lessThanOrEquals](http://www.w3.org/ns/shacl#'LessThanOrEqualsConstraintComponent-lessThanOrEquals')**
   *
   * @type        instance
   */
  public readonly 'LessThanOrEqualsConstraintComponent-lessThanOrEquals' = this.toIri().concat('LessThanOrEqualsConstraintComponent-lessThanOrEquals')

  /**
   * **[sh:Literal](http://www.w3.org/ns/shacl#Literal)**
   *
   * The node kind of all literals.
   *
   * @type        instance
   */
  public readonly Literal = this.toIri().concat('Literal')

  /**
   * **[sh:Max-count constraint component](http://www.w3.org/ns/shacl#MaxCountConstraintComponent)**
   *
   * A constraint component that can be used to restrict the maximum number of value nodes.
   *
   * @type        instance
   */
  public readonly MaxCountConstraintComponent = this.toIri().concat('MaxCountConstraintComponent')

  /**
   * **[sh:MaxCountConstraintComponent-maxCount](http://www.w3.org/ns/shacl#'MaxCountConstraintComponent-maxCount')**
   *
   * @type        instance
   */
  public readonly 'MaxCountConstraintComponent-maxCount' = this.toIri().concat('MaxCountConstraintComponent-maxCount')

  /**
   * **[sh:Max-exclusive constraint component](http://www.w3.org/ns/shacl#MaxExclusiveConstraintComponent)**
   *
   * A constraint component that can be used to restrict the range of value nodes with a maximum exclusive value.
   *
   * @type        instance
   */
  public readonly MaxExclusiveConstraintComponent = this.toIri().concat('MaxExclusiveConstraintComponent')

  /**
   * **[sh:MaxExclusiveConstraintComponent-maxExclusive](http://www.w3.org/ns/shacl#'MaxExclusiveConstraintComponent-maxExclusive')**
   *
   * @type        instance
   */
  public readonly 'MaxExclusiveConstraintComponent-maxExclusive' = this.toIri().concat('MaxExclusiveConstraintComponent-maxExclusive')

  /**
   * **[sh:Max-inclusive constraint component](http://www.w3.org/ns/shacl#MaxInclusiveConstraintComponent)**
   *
   * A constraint component that can be used to restrict the range of value nodes with a maximum inclusive value.
   *
   * @type        instance
   */
  public readonly MaxInclusiveConstraintComponent = this.toIri().concat('MaxInclusiveConstraintComponent')

  /**
   * **[sh:MaxInclusiveConstraintComponent-maxInclusive](http://www.w3.org/ns/shacl#'MaxInclusiveConstraintComponent-maxInclusive')**
   *
   * @type        instance
   */
  public readonly 'MaxInclusiveConstraintComponent-maxInclusive' = this.toIri().concat('MaxInclusiveConstraintComponent-maxInclusive')

  /**
   * **[sh:Max-length constraint component](http://www.w3.org/ns/shacl#MaxLengthConstraintComponent)**
   *
   * A constraint component that can be used to restrict the maximum string length of value nodes.
   *
   * @type        instance
   */
  public readonly MaxLengthConstraintComponent = this.toIri().concat('MaxLengthConstraintComponent')

  /**
   * **[sh:MaxLengthConstraintComponent-maxLength](http://www.w3.org/ns/shacl#'MaxLengthConstraintComponent-maxLength')**
   *
   * @type        instance
   */
  public readonly 'MaxLengthConstraintComponent-maxLength' = this.toIri().concat('MaxLengthConstraintComponent-maxLength')

  /**
   * **[sh:Min-count constraint component](http://www.w3.org/ns/shacl#MinCountConstraintComponent)**
   *
   * A constraint component that can be used to restrict the minimum number of value nodes.
   *
   * @type        instance
   */
  public readonly MinCountConstraintComponent = this.toIri().concat('MinCountConstraintComponent')

  /**
   * **[sh:MinCountConstraintComponent-minCount](http://www.w3.org/ns/shacl#'MinCountConstraintComponent-minCount')**
   *
   * @type        instance
   */
  public readonly 'MinCountConstraintComponent-minCount' = this.toIri().concat('MinCountConstraintComponent-minCount')

  /**
   * **[sh:Min-exclusive constraint component](http://www.w3.org/ns/shacl#MinExclusiveConstraintComponent)**
   *
   * A constraint component that can be used to restrict the range of value nodes with a minimum exclusive value.
   *
   * @type        instance
   */
  public readonly MinExclusiveConstraintComponent = this.toIri().concat('MinExclusiveConstraintComponent')

  /**
   * **[sh:MinExclusiveConstraintComponent-minExclusive](http://www.w3.org/ns/shacl#'MinExclusiveConstraintComponent-minExclusive')**
   *
   * @type        instance
   */
  public readonly 'MinExclusiveConstraintComponent-minExclusive' = this.toIri().concat('MinExclusiveConstraintComponent-minExclusive')

  /**
   * **[sh:Min-inclusive constraint component](http://www.w3.org/ns/shacl#MinInclusiveConstraintComponent)**
   *
   * A constraint component that can be used to restrict the range of value nodes with a minimum inclusive value.
   *
   * @type        instance
   */
  public readonly MinInclusiveConstraintComponent = this.toIri().concat('MinInclusiveConstraintComponent')

  /**
   * **[sh:MinInclusiveConstraintComponent-minInclusive](http://www.w3.org/ns/shacl#'MinInclusiveConstraintComponent-minInclusive')**
   *
   * @type        instance
   */
  public readonly 'MinInclusiveConstraintComponent-minInclusive' = this.toIri().concat('MinInclusiveConstraintComponent-minInclusive')

  /**
   * **[sh:Min-length constraint component](http://www.w3.org/ns/shacl#MinLengthConstraintComponent)**
   *
   * A constraint component that can be used to restrict the minimum string length of value nodes.
   *
   * @type        instance
   */
  public readonly MinLengthConstraintComponent = this.toIri().concat('MinLengthConstraintComponent')

  /**
   * **[sh:MinLengthConstraintComponent-minLength](http://www.w3.org/ns/shacl#'MinLengthConstraintComponent-minLength')**
   *
   * @type        instance
   */
  public readonly 'MinLengthConstraintComponent-minLength' = this.toIri().concat('MinLengthConstraintComponent-minLength')

  /**
   * **[sh:Node constraint component](http://www.w3.org/ns/shacl#NodeConstraintComponent)**
   *
   * A constraint component that can be used to verify that all value nodes conform to the given node shape.
   *
   * @type        instance
   */
  public readonly NodeConstraintComponent = this.toIri().concat('NodeConstraintComponent')

  /**
   * **[sh:NodeConstraintComponent-node](http://www.w3.org/ns/shacl#'NodeConstraintComponent-node')**
   *
   * @type        instance
   */
  public readonly 'NodeConstraintComponent-node' = this.toIri().concat('NodeConstraintComponent-node')

  /**
   * **[sh:Node kind](http://www.w3.org/ns/shacl#NodeKind)**
   *
   * The class of all node kinds, including sh:BlankNode, sh:IRI, sh:Literal or the combinations of these: sh:BlankNodeOrIRI, sh:BlankNodeOrLiteral, sh:IRIOrLiteral.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly NodeKind = this.toIri().concat('NodeKind')

  /**
   * **[sh:Node-kind constraint component](http://www.w3.org/ns/shacl#NodeKindConstraintComponent)**
   *
   * A constraint component that can be used to restrict the RDF node kind of each value node.
   *
   * @type        instance
   */
  public readonly NodeKindConstraintComponent = this.toIri().concat('NodeKindConstraintComponent')

  /**
   * **[sh:NodeKindConstraintComponent-nodeKind](http://www.w3.org/ns/shacl#'NodeKindConstraintComponent-nodeKind')**
   *
   * @type        instance
   */
  public readonly 'NodeKindConstraintComponent-nodeKind' = this.toIri().concat('NodeKindConstraintComponent-nodeKind')

  /**
   * **[sh:Node shape](http://www.w3.org/ns/shacl#NodeShape)**
   *
   * A node shape is a shape that specifies constraint that need to be met with respect to focus nodes.
   *
   * @type        class
   * @parent      sh:Shape
   */
  public readonly NodeShape = this.toIri().concat('NodeShape')

  /**
   * **[sh:Not constraint component](http://www.w3.org/ns/shacl#NotConstraintComponent)**
   *
   * A constraint component that can be used to verify that value nodes do not conform to a given shape.
   *
   * @type        instance
   */
  public readonly NotConstraintComponent = this.toIri().concat('NotConstraintComponent')

  /**
   * **[sh:NotConstraintComponent-not](http://www.w3.org/ns/shacl#'NotConstraintComponent-not')**
   *
   * @type        instance
   */
  public readonly 'NotConstraintComponent-not' = this.toIri().concat('NotConstraintComponent-not')

  /**
   * **[sh:Or constraint component](http://www.w3.org/ns/shacl#OrConstraintComponent)**
   *
   * A constraint component that can be used to restrict the value nodes so that they conform to at least one out of several provided shapes.
   *
   * @type        instance
   */
  public readonly OrConstraintComponent = this.toIri().concat('OrConstraintComponent')

  /**
   * **[sh:OrConstraintComponent-or](http://www.w3.org/ns/shacl#'OrConstraintComponent-or')**
   *
   * @type        instance
   */
  public readonly 'OrConstraintComponent-or' = this.toIri().concat('OrConstraintComponent-or')

  /**
   * **[sh:Parameter](http://www.w3.org/ns/shacl#Parameter)**
   *
   * The class of parameter declarations, consisting of a path predicate and (possibly) information about allowed value type, cardinality and other characteristics.
   *
   * @type        class
   * @parent      sh:PropertyShape
   */
  public readonly Parameter = this.toIri().concat('Parameter')

  /**
   * **[sh:Parameterizable](http://www.w3.org/ns/shacl#Parameterizable)**
   *
   * Superclass of components that can take parameters, especially functions and constraint components.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly Parameterizable = this.toIri().concat('Parameterizable')

  /**
   * **[sh:Pattern constraint component](http://www.w3.org/ns/shacl#PatternConstraintComponent)**
   *
   * A constraint component that can be used to verify that every value node matches a given regular expression.
   *
   * @type        instance
   */
  public readonly PatternConstraintComponent = this.toIri().concat('PatternConstraintComponent')

  /**
   * **[sh:PatternConstraintComponent-flags](http://www.w3.org/ns/shacl#'PatternConstraintComponent-flags')**
   *
   * @type        instance
   */
  public readonly 'PatternConstraintComponent-flags' = this.toIri().concat('PatternConstraintComponent-flags')

  /**
   * **[sh:PatternConstraintComponent-pattern](http://www.w3.org/ns/shacl#'PatternConstraintComponent-pattern')**
   *
   * @type        instance
   */
  public readonly 'PatternConstraintComponent-pattern' = this.toIri().concat('PatternConstraintComponent-pattern')

  /**
   * **[sh:Prefix declaration](http://www.w3.org/ns/shacl#PrefixDeclaration)**
   *
   * The class of prefix declarations, consisting of pairs of a prefix with a namespace.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly PrefixDeclaration = this.toIri().concat('PrefixDeclaration')

  /**
   * **[sh:Property constraint component](http://www.w3.org/ns/shacl#PropertyConstraintComponent)**
   *
   * A constraint component that can be used to verify that all value nodes conform to the given property shape.
   *
   * @type        instance
   */
  public readonly PropertyConstraintComponent = this.toIri().concat('PropertyConstraintComponent')

  /**
   * **[sh:PropertyConstraintComponent-property](http://www.w3.org/ns/shacl#'PropertyConstraintComponent-property')**
   *
   * @type        instance
   */
  public readonly 'PropertyConstraintComponent-property' = this.toIri().concat('PropertyConstraintComponent-property')

  /**
   * **[sh:Property group](http://www.w3.org/ns/shacl#PropertyGroup)**
   *
   * Instances of this class represent groups of property shapes that belong together.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly PropertyGroup = this.toIri().concat('PropertyGroup')

  /**
   * **[sh:Property shape](http://www.w3.org/ns/shacl#PropertyShape)**
   *
   * A property shape is a shape that specifies constraints on the values of a focus node for a given property or path.
   *
   * @type        class
   * @parent      sh:Shape
   */
  public readonly PropertyShape = this.toIri().concat('PropertyShape')

  /**
   * **[sh:Qualified-max-count constraint component](http://www.w3.org/ns/shacl#QualifiedMaxCountConstraintComponent)**
   *
   * A constraint component that can be used to verify that a specified maximum number of value nodes conforms to a given shape.
   *
   * @type        instance
   */
  public readonly QualifiedMaxCountConstraintComponent = this.toIri().concat('QualifiedMaxCountConstraintComponent')

  /**
   * **[sh:QualifiedMaxCountConstraintComponent-qualifiedMaxCount](http://www.w3.org/ns/shacl#'QualifiedMaxCountConstraintComponent-qualifiedMaxCount')**
   *
   * @type        instance
   */
  public readonly 'QualifiedMaxCountConstraintComponent-qualifiedMaxCount' = this.toIri().concat('QualifiedMaxCountConstraintComponent-qualifiedMaxCount')

  /**
   * **[sh:QualifiedMaxCountConstraintComponent-qualifiedValueShape](http://www.w3.org/ns/shacl#'QualifiedMaxCountConstraintComponent-qualifiedValueShape')**
   *
   * @type        instance
   */
  public readonly 'QualifiedMaxCountConstraintComponent-qualifiedValueShape' = this.toIri().concat('QualifiedMaxCountConstraintComponent-qualifiedValueShape')

  /**
   * **[sh:QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint](http://www.w3.org/ns/shacl#'QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint')**
   *
   * @type        instance
   */
  public readonly 'QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint' = this.toIri().concat('QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint')

  /**
   * **[sh:Qualified-min-count constraint component](http://www.w3.org/ns/shacl#QualifiedMinCountConstraintComponent)**
   *
   * A constraint component that can be used to verify that a specified minimum number of value nodes conforms to a given shape.
   *
   * @type        instance
   */
  public readonly QualifiedMinCountConstraintComponent = this.toIri().concat('QualifiedMinCountConstraintComponent')

  /**
   * **[sh:QualifiedMinCountConstraintComponent-qualifiedMinCount](http://www.w3.org/ns/shacl#'QualifiedMinCountConstraintComponent-qualifiedMinCount')**
   *
   * @type        instance
   */
  public readonly 'QualifiedMinCountConstraintComponent-qualifiedMinCount' = this.toIri().concat('QualifiedMinCountConstraintComponent-qualifiedMinCount')

  /**
   * **[sh:QualifiedMinCountConstraintComponent-qualifiedValueShape](http://www.w3.org/ns/shacl#'QualifiedMinCountConstraintComponent-qualifiedValueShape')**
   *
   * @type        instance
   */
  public readonly 'QualifiedMinCountConstraintComponent-qualifiedValueShape' = this.toIri().concat('QualifiedMinCountConstraintComponent-qualifiedValueShape')

  /**
   * **[sh:QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint](http://www.w3.org/ns/shacl#'QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint')**
   *
   * @type        instance
   */
  public readonly 'QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint' = this.toIri().concat('QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint')

  /**
   * **[sh:Result annotation](http://www.w3.org/ns/shacl#ResultAnnotation)**
   *
   * A class of result annotations, which define the rules to derive the values of a given annotation property as extra values for a validation result.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly ResultAnnotation = this.toIri().concat('ResultAnnotation')

  /**
   * **[sh:Rule](http://www.w3.org/ns/shacl#Rule)**
   *
   * The class of SHACL rules. Never instantiated directly.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly Rule = this.toIri().concat('Rule')

  /**
   * **[sh:SPARQL ASK executable](http://www.w3.org/ns/shacl#SPARQLAskExecutable)**
   *
   * The class of SPARQL executables that are based on an ASK query.
   *
   * @type        class
   * @parent      sh:SPARQLExecutable
   */
  public readonly SPARQLAskExecutable = this.toIri().concat('SPARQLAskExecutable')

  /**
   * **[sh:SPARQL ASK validator](http://www.w3.org/ns/shacl#SPARQLAskValidator)**
   *
   * The class of validators based on SPARQL ASK queries. The queries are evaluated for each value node and are supposed to return true if the given node conforms.
   *
   * @type        class
   * @parent      sh:SPARQLAskExecutable
   */
  public readonly SPARQLAskValidator = this.toIri().concat('SPARQLAskValidator')

  /**
   * **[sh:SPARQL constraint](http://www.w3.org/ns/shacl#SPARQLConstraint)**
   *
   * The class of constraints based on SPARQL SELECT queries.
   *
   * @type        class
   * @parent      sh:SPARQLSelectExecutable
   */
  public readonly SPARQLConstraint = this.toIri().concat('SPARQLConstraint')

  /**
   * **[sh:SPARQL constraint component](http://www.w3.org/ns/shacl#SPARQLConstraintComponent)**
   *
   * A constraint component that can be used to define constraints based on SPARQL queries.
   *
   * @type        instance
   */
  public readonly SPARQLConstraintComponent = this.toIri().concat('SPARQLConstraintComponent')

  /**
   * **[sh:SPARQLConstraintComponent-sparql](http://www.w3.org/ns/shacl#'SPARQLConstraintComponent-sparql')**
   *
   * @type        instance
   */
  public readonly 'SPARQLConstraintComponent-sparql' = this.toIri().concat('SPARQLConstraintComponent-sparql')

  /**
   * **[sh:SPARQL CONSTRUCT executable](http://www.w3.org/ns/shacl#SPARQLConstructExecutable)**
   *
   * The class of SPARQL executables that are based on a CONSTRUCT query.
   *
   * @type        class
   * @parent      sh:SPARQLExecutable
   */
  public readonly SPARQLConstructExecutable = this.toIri().concat('SPARQLConstructExecutable')

  /**
   * **[sh:SPARQL executable](http://www.w3.org/ns/shacl#SPARQLExecutable)**
   *
   * The class of resources that encapsulate a SPARQL query.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly SPARQLExecutable = this.toIri().concat('SPARQLExecutable')

  /**
   * **[sh:SPARQL function](http://www.w3.org/ns/shacl#SPARQLFunction)**
   *
   * A function backed by a SPARQL query - either ASK or SELECT.
   *
   * @type        class
   * @parent      sh:Function
   */
  public readonly SPARQLFunction = this.toIri().concat('SPARQLFunction')

  /**
   * **[sh:SPARQL CONSTRUCT rule](http://www.w3.org/ns/shacl#SPARQLRule)**
   *
   * The class of SHACL rules based on SPARQL CONSTRUCT queries.
   *
   * @type        class
   * @parent      sh:Rule
   */
  public readonly SPARQLRule = this.toIri().concat('SPARQLRule')

  /**
   * **[sh:SPARQL SELECT executable](http://www.w3.org/ns/shacl#SPARQLSelectExecutable)**
   *
   * The class of SPARQL executables based on a SELECT query.
   *
   * @type        class
   * @parent      sh:SPARQLExecutable
   */
  public readonly SPARQLSelectExecutable = this.toIri().concat('SPARQLSelectExecutable')

  /**
   * **[sh:SPARQL SELECT validator](http://www.w3.org/ns/shacl#SPARQLSelectValidator)**
   *
   * The class of validators based on SPARQL SELECT queries. The queries are evaluated for each focus node and are supposed to produce bindings for all focus nodes that do not conform.
   *
   * @type        class
   * @parent      sh:SPARQLSelectExecutable
   */
  public readonly SPARQLSelectValidator = this.toIri().concat('SPARQLSelectValidator')

  /**
   * **[sh:SPARQL target](http://www.w3.org/ns/shacl#SPARQLTarget)**
   *
   * The class of targets that are based on SPARQL queries.
   *
   * @type        class
   * @parent      sh:SPARQLAskExecutable
   */
  public readonly SPARQLTarget = this.toIri().concat('SPARQLTarget')

  /**
   * **[sh:SPARQL target type](http://www.w3.org/ns/shacl#SPARQLTargetType)**
   *
   * The (meta) class for parameterizable targets that are based on SPARQL queries.
   *
   * @type        class
   * @parent      sh:SPARQLAskExecutable
   */
  public readonly SPARQLTargetType = this.toIri().concat('SPARQLTargetType')

  /**
   * **[sh:SPARQL UPDATE executable](http://www.w3.org/ns/shacl#SPARQLUpdateExecutable)**
   *
   * The class of SPARQL executables based on a SPARQL UPDATE.
   *
   * @type        class
   * @parent      sh:SPARQLExecutable
   */
  public readonly SPARQLUpdateExecutable = this.toIri().concat('SPARQLUpdateExecutable')

  /**
   * **[sh:Severity](http://www.w3.org/ns/shacl#Severity)**
   *
   * The class of validation result severity levels, including violation and warning levels.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly Severity = this.toIri().concat('Severity')

  /**
   * **[sh:Shape](http://www.w3.org/ns/shacl#Shape)**
   *
   * A shape is a collection of constraints that may be targeted for certain nodes.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly Shape = this.toIri().concat('Shape')

  /**
   * **[sh:Target](http://www.w3.org/ns/shacl#Target)**
   *
   * The base class of targets such as those based on SPARQL queries.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly Target = this.toIri().concat('Target')

  /**
   * **[sh:Target type](http://www.w3.org/ns/shacl#TargetType)**
   *
   * The (meta) class for parameterizable targets. Instances of this are instantiated as values of the sh:target property.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Class
   */
  public readonly TargetType = this.toIri().concat('TargetType')

  /**
   * **[sh:A rule based on triple (subject, predicate, object) pattern.](http://www.w3.org/ns/shacl#TripleRule)**
   *
   * @type        class
   * @parent      sh:Rule
   */
  public readonly TripleRule = this.toIri().concat('TripleRule')

  /**
   * **[sh:Unique-languages constraint component](http://www.w3.org/ns/shacl#UniqueLangConstraintComponent)**
   *
   * A constraint component that can be used to specify that no pair of value nodes may use the same language tag.
   *
   * @type        instance
   */
  public readonly UniqueLangConstraintComponent = this.toIri().concat('UniqueLangConstraintComponent')

  /**
   * **[sh:UniqueLangConstraintComponent-uniqueLang](http://www.w3.org/ns/shacl#'UniqueLangConstraintComponent-uniqueLang')**
   *
   * @type        instance
   */
  public readonly 'UniqueLangConstraintComponent-uniqueLang' = this.toIri().concat('UniqueLangConstraintComponent-uniqueLang')

  /**
   * **[sh:Validation report](http://www.w3.org/ns/shacl#ValidationReport)**
   *
   * The class of SHACL validation reports.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly ValidationReport = this.toIri().concat('ValidationReport')

  /**
   * **[sh:Validation result](http://www.w3.org/ns/shacl#ValidationResult)**
   *
   * The class of validation results.
   *
   * @type        class
   * @parent      sh:AbstractResult
   */
  public readonly ValidationResult = this.toIri().concat('ValidationResult')

  /**
   * **[sh:Validator](http://www.w3.org/ns/shacl#Validator)**
   *
   * The class of validators, which provide instructions on how to process a constraint definition. This class serves as base class for the SPARQL-based validators and other possible implementations.
   *
   * @type        class
   * @parent      http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly Validator = this.toIri().concat('Validator')

  /**
   * **[sh:Violation](http://www.w3.org/ns/shacl#Violation)**
   *
   * The severity for a violation validation result.
   *
   * @type        instance
   */
  public readonly Violation = this.toIri().concat('Violation')

  /**
   * **[sh:Warning](http://www.w3.org/ns/shacl#Warning)**
   *
   * The severity for a warning validation result.
   *
   * @type        instance
   */
  public readonly Warning = this.toIri().concat('Warning')

  /**
   * **[sh:Exactly one constraint component](http://www.w3.org/ns/shacl#XoneConstraintComponent)**
   *
   * A constraint component that can be used to restrict the value nodes so that they conform to exactly one out of several provided shapes.
   *
   * @type        instance
   */
  public readonly XoneConstraintComponent = this.toIri().concat('XoneConstraintComponent')

  /**
   * **[sh:XoneConstraintComponent-xone](http://www.w3.org/ns/shacl#'XoneConstraintComponent-xone')**
   *
   * @type        instance
   */
  public readonly 'XoneConstraintComponent-xone' = this.toIri().concat('XoneConstraintComponent-xone')

  /**
   * **[sh:alternative path](http://www.w3.org/ns/shacl#alternativePath)**
   *
   * The (single) value of this property must be a list of path elements, representing the elements of alternative paths.
   *
   * @type        property
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#List
   */
  public readonly alternativePath = this.toIri().concat('alternativePath')

  /**
   * **[sh:and](http://www.w3.org/ns/shacl#and)**
   *
   * RDF list of shapes to validate the value nodes against.
   *
   * @type        property
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#List
   */
  public readonly and = this.toIri().concat('and')

  /**
   * **[sh:annotation property](http://www.w3.org/ns/shacl#annotationProperty)**
   *
   * The annotation property that shall be set.
   *
   * @type        property
   * @domain      sh:ResultAnnotation
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
   */
  public readonly annotationProperty = this.toIri().concat('annotationProperty')

  /**
   * **[sh:annotation value](http://www.w3.org/ns/shacl#annotationValue)**
   *
   * The (default) values of the annotation property.
   *
   * @type        property
   * @domain      sh:ResultAnnotation
   */
  public readonly annotationValue = this.toIri().concat('annotationValue')

  /**
   * **[sh:annotation variable name](http://www.w3.org/ns/shacl#annotationVarName)**
   *
   * The name of the SPARQL variable from the SELECT clause that shall be used for the values.
   *
   * @type        property
   * @domain      sh:ResultAnnotation
   * @range       http://www.w3.org/2001/XMLSchema#string
   */
  public readonly annotationVarName = this.toIri().concat('annotationVarName')

  /**
   * **[sh:ask](http://www.w3.org/ns/shacl#ask)**
   *
   * The SPARQL ASK query to execute.
   *
   * @type        property
   * @domain      sh:SPARQLAskExecutable
   * @range       http://www.w3.org/2001/XMLSchema#string
   */
  public readonly ask = this.toIri().concat('ask')

  /**
   * **[sh:class](http://www.w3.org/ns/shacl#class)**
   *
   * The type that all value nodes must have.
   *
   * @type        property
   * @range       http://www.w3.org/2000/01/rdf-schema#Class
   */
  public readonly class = this.toIri().concat('class')

  /**
   * **[sh:closed](http://www.w3.org/ns/shacl#closed)**
   *
   * If set to true then the shape is closed.
   *
   * @type        property
   * @range       http://www.w3.org/2001/XMLSchema#boolean
   */
  public readonly closed = this.toIri().concat('closed')

  /**
   * **[sh:condition](http://www.w3.org/ns/shacl#condition)**
   *
   * The shapes that the focus nodes need to conform to before a rule is executed on them.
   *
   * @type        property
   * @domain      sh:Rule
   * @range       sh:Shape
   */
  public readonly condition = this.toIri().concat('condition')

  /**
   * **[sh:conforms](http://www.w3.org/ns/shacl#conforms)**
   *
   * True if the validation did not produce any validation results, and false otherwise.
   *
   * @type        property
   * @domain      sh:ValidationReport
   * @range       http://www.w3.org/2001/XMLSchema#boolean
   */
  public readonly conforms = this.toIri().concat('conforms')

  /**
   * **[sh:construct](http://www.w3.org/ns/shacl#construct)**
   *
   * The SPARQL CONSTRUCT query to execute.
   *
   * @type        property
   * @domain      sh:SPARQLConstructExecutable
   * @range       http://www.w3.org/2001/XMLSchema#string
   */
  public readonly construct = this.toIri().concat('construct')

  /**
   * **[sh:datatype](http://www.w3.org/ns/shacl#datatype)**
   *
   * Specifies an RDF datatype that all value nodes must have.
   *
   * @type        property
   * @range       http://www.w3.org/2000/01/rdf-schema#Datatype
   */
  public readonly datatype = this.toIri().concat('datatype')

  /**
   * **[sh:deactivated](http://www.w3.org/ns/shacl#deactivated)**
   *
   * If set to true then all nodes conform to this.
   *
   * @type        property
   * @range       http://www.w3.org/2001/XMLSchema#boolean
   */
  public readonly deactivated = this.toIri().concat('deactivated')

  /**
   * **[sh:declare](http://www.w3.org/ns/shacl#declare)**
   *
   * Links a resource with its namespace prefix declarations.
   *
   * @type        property
   * @domain      http://www.w3.org/2002/07/owl#Ontology
   * @range       sh:PrefixDeclaration
   */
  public readonly declare = this.toIri().concat('declare')

  /**
   * **[sh:default value](http://www.w3.org/ns/shacl#defaultValue)**
   *
   * A default value for a property, for example for user interface tools to pre-populate input fields.
   *
   * @type        property
   * @domain      sh:PropertyShape
   */
  public readonly defaultValue = this.toIri().concat('defaultValue')

  /**
   * **[sh:description](http://www.w3.org/ns/shacl#description)**
   *
   * Human-readable descriptions for the property in the context of the surrounding shape.
   *
   * @type        property
   * @domain      sh:PropertyShape
   */
  public readonly description = this.toIri().concat('description')

  /**
   * **[sh:detail](http://www.w3.org/ns/shacl#detail)**
   *
   * Links a result with other results that provide more details, for example to describe violations against nested shapes.
   *
   * @type        property
   * @domain      sh:AbstractResult
   * @range       sh:AbstractResult
   */
  public readonly detail = this.toIri().concat('detail')

  /**
   * **[sh:disjoint](http://www.w3.org/ns/shacl#disjoint)**
   *
   * Specifies a property where the set of values must be disjoint with the value nodes.
   *
   * @type        property
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
   */
  public readonly disjoint = this.toIri().concat('disjoint')

  /**
   * **[sh:entailment](http://www.w3.org/ns/shacl#entailment)**
   *
   * An entailment regime that indicates what kind of inferencing is required by a shapes graph.
   *
   * @type        property
   * @domain      http://www.w3.org/2002/07/owl#Ontology
   * @range       http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly entailment = this.toIri().concat('entailment')

  /**
   * **[sh:equals](http://www.w3.org/ns/shacl#equals)**
   *
   * Specifies a property that must have the same values as the value nodes.
   *
   * @type        property
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
   */
  public readonly equals = this.toIri().concat('equals')

  /**
   * **[sh:expression](http://www.w3.org/ns/shacl#expression)**
   *
   * The node expression that must return true for the value nodes.
   *
   * @type        property
   */
  public readonly expression = this.toIri().concat('expression')

  /**
   * **[sh:filter shape](http://www.w3.org/ns/shacl#filterShape)**
   *
   * The shape that all input nodes of the expression need to conform to.
   *
   * @type        property
   * @range       sh:Shape
   */
  public readonly filterShape = this.toIri().concat('filterShape')

  /**
   * **[sh:flags](http://www.w3.org/ns/shacl#flags)**
   *
   * An optional flag to be used with regular expression pattern matching.
   *
   * @type        property
   * @range       http://www.w3.org/2001/XMLSchema#string
   */
  public readonly flags = this.toIri().concat('flags')

  /**
   * **[sh:focus node](http://www.w3.org/ns/shacl#focusNode)**
   *
   * The focus node that was validated when the result was produced.
   *
   * @type        property
   * @domain      sh:AbstractResult
   */
  public readonly focusNode = this.toIri().concat('focusNode')

  /**
   * **[sh:group](http://www.w3.org/ns/shacl#group)**
   *
   * Can be used to link to a property group to indicate that a property shape belongs to a group of related property shapes.
   *
   * @type        property
   * @domain      sh:PropertyShape
   * @range       sh:PropertyGroup
   */
  public readonly group = this.toIri().concat('group')

  /**
   * **[sh:has value](http://www.w3.org/ns/shacl#hasValue)**
   *
   * Specifies a value that must be among the value nodes.
   *
   * @type        property
   */
  public readonly hasValue = this.toIri().concat('hasValue')

  /**
   * **[sh:ignored properties](http://www.w3.org/ns/shacl#ignoredProperties)**
   *
   * An optional RDF list of properties that are also permitted in addition to those explicitly enumerated via sh:property/sh:path.
   *
   * @type        property
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#List
   */
  public readonly ignoredProperties = this.toIri().concat('ignoredProperties')

  /**
   * **[sh:in](http://www.w3.org/ns/shacl#in)**
   *
   * Specifies a list of allowed values so that each value node must be among the members of the given list.
   *
   * @type        property
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#List
   */
  public readonly in = this.toIri().concat('in')

  /**
   * **[sh:intersection](http://www.w3.org/ns/shacl#intersection)**
   *
   * A list of node expressions that shall be intersected.
   *
   * @type        property
   */
  public readonly intersection = this.toIri().concat('intersection')

  /**
   * **[sh:inverse path](http://www.w3.org/ns/shacl#inversePath)**
   *
   * The (single) value of this property represents an inverse path (object to subject).
   *
   * @type        property
   * @range       http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly inversePath = this.toIri().concat('inversePath')

  /**
   * **[sh:JavaScript constraint](http://www.w3.org/ns/shacl#js)**
   *
   * Constraints expressed in JavaScript.
   *
   * @type        property
   * @range       sh:JSConstraint
   */
  public readonly js = this.toIri().concat('js')

  /**
   * **[sh:JavaScript function name](http://www.w3.org/ns/shacl#jsFunctionName)**
   *
   * The name of the JavaScript function to execute.
   *
   * @type        property
   * @domain      sh:JSExecutable
   * @range       http://www.w3.org/2001/XMLSchema#string
   */
  public readonly jsFunctionName = this.toIri().concat('jsFunctionName')

  /**
   * **[sh:JavaScript library](http://www.w3.org/ns/shacl#jsLibrary)**
   *
   * Declares which JavaScript libraries are needed to execute this.
   *
   * @type        property
   * @range       sh:JSLibrary
   */
  public readonly jsLibrary = this.toIri().concat('jsLibrary')

  /**
   * **[sh:JavaScript library URL](http://www.w3.org/ns/shacl#jsLibraryURL)**
   *
   * Declares the URLs of a JavaScript library. This should be the absolute URL of a JavaScript file. Implementations may redirect those to local files.
   *
   * @type        property
   * @domain      sh:JSLibrary
   * @range       http://www.w3.org/2001/XMLSchema#anyURI
   */
  public readonly jsLibraryURL = this.toIri().concat('jsLibraryURL')

  /**
   * **[sh:label template](http://www.w3.org/ns/shacl#labelTemplate)**
   *
   * Outlines how human-readable labels of instances of the associated Parameterizable shall be produced. The values can contain {?paramName} as placeholders for the actual values of the given parameter.
   *
   * @type        property
   * @domain      sh:Parameterizable
   */
  public readonly labelTemplate = this.toIri().concat('labelTemplate')

  /**
   * **[sh:language in](http://www.w3.org/ns/shacl#languageIn)**
   *
   * Specifies a list of language tags that all value nodes must have.
   *
   * @type        property
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#List
   */
  public readonly languageIn = this.toIri().concat('languageIn')

  /**
   * **[sh:less than](http://www.w3.org/ns/shacl#lessThan)**
   *
   * Specifies a property that must have smaller values than the value nodes.
   *
   * @type        property
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
   */
  public readonly lessThan = this.toIri().concat('lessThan')

  /**
   * **[sh:less than or equals](http://www.w3.org/ns/shacl#lessThanOrEquals)**
   *
   * Specifies a property that must have smaller or equal values than the value nodes.
   *
   * @type        property
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
   */
  public readonly lessThanOrEquals = this.toIri().concat('lessThanOrEquals')

  /**
   * **[sh:max count](http://www.w3.org/ns/shacl#maxCount)**
   *
   * Specifies the maximum number of values in the set of value nodes.
   *
   * @type        property
   * @range       http://www.w3.org/2001/XMLSchema#integer
   */
  public readonly maxCount = this.toIri().concat('maxCount')

  /**
   * **[sh:max exclusive](http://www.w3.org/ns/shacl#maxExclusive)**
   *
   * Specifies the maximum exclusive value of each value node.
   *
   * @type        property
   */
  public readonly maxExclusive = this.toIri().concat('maxExclusive')

  /**
   * **[sh:max inclusive](http://www.w3.org/ns/shacl#maxInclusive)**
   *
   * Specifies the maximum inclusive value of each value node.
   *
   * @type        property
   */
  public readonly maxInclusive = this.toIri().concat('maxInclusive')

  /**
   * **[sh:max length](http://www.w3.org/ns/shacl#maxLength)**
   *
   * Specifies the maximum string length of each value node.
   *
   * @type        property
   * @range       http://www.w3.org/2001/XMLSchema#integer
   */
  public readonly maxLength = this.toIri().concat('maxLength')

  /**
   * **[sh:message](http://www.w3.org/ns/shacl#message)**
   *
   * A human-readable message (possibly with placeholders for variables) explaining the cause of the result.
   *
   * @type        property
   */
  public readonly message = this.toIri().concat('message')

  /**
   * **[sh:min count](http://www.w3.org/ns/shacl#minCount)**
   *
   * Specifies the minimum number of values in the set of value nodes.
   *
   * @type        property
   * @range       http://www.w3.org/2001/XMLSchema#integer
   */
  public readonly minCount = this.toIri().concat('minCount')

  /**
   * **[sh:min exclusive](http://www.w3.org/ns/shacl#minExclusive)**
   *
   * Specifies the minimum exclusive value of each value node.
   *
   * @type        property
   */
  public readonly minExclusive = this.toIri().concat('minExclusive')

  /**
   * **[sh:min inclusive](http://www.w3.org/ns/shacl#minInclusive)**
   *
   * Specifies the minimum inclusive value of each value node.
   *
   * @type        property
   */
  public readonly minInclusive = this.toIri().concat('minInclusive')

  /**
   * **[sh:min length](http://www.w3.org/ns/shacl#minLength)**
   *
   * Specifies the minimum string length of each value node.
   *
   * @type        property
   * @range       http://www.w3.org/2001/XMLSchema#integer
   */
  public readonly minLength = this.toIri().concat('minLength')

  /**
   * **[sh:name](http://www.w3.org/ns/shacl#name)**
   *
   * Human-readable labels for the property in the context of the surrounding shape.
   *
   * @type        property
   * @domain      sh:PropertyShape
   */
  public readonly name = this.toIri().concat('name')

  /**
   * **[sh:namespace](http://www.w3.org/ns/shacl#namespace)**
   *
   * The namespace associated with a prefix in a prefix declaration.
   *
   * @type        property
   * @domain      sh:PrefixDeclaration
   * @range       http://www.w3.org/2001/XMLSchema#anyURI
   */
  public readonly namespace = this.toIri().concat('namespace')

  /**
   * **[sh:node](http://www.w3.org/ns/shacl#node)**
   *
   * Specifies the node shape that all value nodes must conform to.
   *
   * @type        property
   * @range       sh:NodeShape
   */
  public readonly node = this.toIri().concat('node')

  /**
   * **[sh:node kind](http://www.w3.org/ns/shacl#nodeKind)**
   *
   * Specifies the node kind (e.g. IRI or literal) each value node.
   *
   * @type        property
   * @range       sh:NodeKind
   */
  public readonly nodeKind = this.toIri().concat('nodeKind')

  /**
   * **[sh:shape validator](http://www.w3.org/ns/shacl#nodeValidator)**
   *
   * The validator(s) used to evaluate a constraint in the context of a node shape.
   *
   * @type        property
   * @domain      sh:ConstraintComponent
   * @range       sh:Validator
   */
  public readonly nodeValidator = this.toIri().concat('nodeValidator')

  /**
   * **[sh:nodes](http://www.w3.org/ns/shacl#nodes)**
   *
   * The node expression producing the input nodes of a filter shape expression.
   *
   * @type        property
   */
  public readonly nodes = this.toIri().concat('nodes')

  /**
   * **[sh:not](http://www.w3.org/ns/shacl#not)**
   *
   * Specifies a shape that the value nodes must not conform to.
   *
   * @type        property
   * @range       sh:Shape
   */
  public readonly not = this.toIri().concat('not')

  /**
   * **[sh:object](http://www.w3.org/ns/shacl#object)**
   *
   * An expression producing the nodes that shall be inferred as objects.
   *
   * @type        property
   * @domain      sh:TripleRule
   */
  public readonly object = this.toIri().concat('object')

  /**
   * **[sh:one or more path](http://www.w3.org/ns/shacl#oneOrMorePath)**
   *
   * The (single) value of this property represents a path that is matched one or more times.
   *
   * @type        property
   * @range       http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly oneOrMorePath = this.toIri().concat('oneOrMorePath')

  /**
   * **[sh:optional](http://www.w3.org/ns/shacl#optional)**
   *
   * Indicates whether a parameter is optional.
   *
   * @type        property
   * @domain      sh:Parameter
   * @range       http://www.w3.org/2001/XMLSchema#boolean
   */
  public readonly optional = this.toIri().concat('optional')

  /**
   * **[sh:or](http://www.w3.org/ns/shacl#or)**
   *
   * Specifies a list of shapes so that the value nodes must conform to at least one of the shapes.
   *
   * @type        property
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#List
   */
  public readonly or = this.toIri().concat('or')

  /**
   * **[sh:order](http://www.w3.org/ns/shacl#order)**
   *
   * Specifies the relative order of this compared to its siblings. For example use 0 for the first, 1 for the second.
   *
   * @type        property
   */
  public readonly order = this.toIri().concat('order')

  /**
   * **[sh:parameter](http://www.w3.org/ns/shacl#parameter)**
   *
   * The parameters of a function or constraint component.
   *
   * @type        property
   * @domain      sh:Parameterizable
   * @range       sh:Parameter
   */
  public readonly parameter = this.toIri().concat('parameter')

  /**
   * **[sh:path](http://www.w3.org/ns/shacl#path)**
   *
   * Specifies the property path of a property shape.
   *
   * @type        property
   * @domain      sh:PropertyShape
   * @range       http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly path = this.toIri().concat('path')

  /**
   * **[sh:pattern](http://www.w3.org/ns/shacl#pattern)**
   *
   * Specifies a regular expression pattern that the string representations of the value nodes must match.
   *
   * @type        property
   * @range       http://www.w3.org/2001/XMLSchema#string
   */
  public readonly pattern = this.toIri().concat('pattern')

  /**
   * **[sh:predicate](http://www.w3.org/ns/shacl#predicate)**
   *
   * An expression producing the properties that shall be inferred as predicates.
   *
   * @type        property
   * @domain      sh:TripleRule
   */
  public readonly predicate = this.toIri().concat('predicate')

  /**
   * **[sh:prefix](http://www.w3.org/ns/shacl#prefix)**
   *
   * The prefix of a prefix declaration.
   *
   * @type        property
   * @domain      sh:PrefixDeclaration
   * @range       http://www.w3.org/2001/XMLSchema#string
   */
  public readonly prefix = this.toIri().concat('prefix')

  /**
   * **[sh:prefixes](http://www.w3.org/ns/shacl#prefixes)**
   *
   * The prefixes that shall be applied before parsing the associated SPARQL query.
   *
   * @type        property
   * @domain      sh:SPARQLExecutable
   * @range       http://www.w3.org/2002/07/owl#Ontology
   */
  public readonly prefixes = this.toIri().concat('prefixes')

  /**
   * **[sh:property](http://www.w3.org/ns/shacl#property)**
   *
   * Links a shape to its property shapes.
   *
   * @type        property
   * @domain      sh:Shape
   * @range       sh:PropertyShape
   */
  public readonly property = this.toIri().concat('property')

  /**
   * **[sh:property validator](http://www.w3.org/ns/shacl#propertyValidator)**
   *
   * The validator(s) used to evaluate a constraint in the context of a property shape.
   *
   * @type        property
   * @domain      sh:ConstraintComponent
   * @range       sh:Validator
   */
  public readonly propertyValidator = this.toIri().concat('propertyValidator')

  /**
   * **[sh:qualified max count](http://www.w3.org/ns/shacl#qualifiedMaxCount)**
   *
   * The maximum number of value nodes that can conform to the shape.
   *
   * @type        property
   * @range       http://www.w3.org/2001/XMLSchema#integer
   */
  public readonly qualifiedMaxCount = this.toIri().concat('qualifiedMaxCount')

  /**
   * **[sh:qualified min count](http://www.w3.org/ns/shacl#qualifiedMinCount)**
   *
   * The minimum number of value nodes that must conform to the shape.
   *
   * @type        property
   * @range       http://www.w3.org/2001/XMLSchema#integer
   */
  public readonly qualifiedMinCount = this.toIri().concat('qualifiedMinCount')

  /**
   * **[sh:qualified value shape](http://www.w3.org/ns/shacl#qualifiedValueShape)**
   *
   * The shape that a specified number of values must conform to.
   *
   * @type        property
   * @range       sh:Shape
   */
  public readonly qualifiedValueShape = this.toIri().concat('qualifiedValueShape')

  /**
   * **[sh:qualified value shapes disjoint](http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint)**
   *
   * Can be used to mark the qualified value shape to be disjoint with its sibling shapes.
   *
   * @type        property
   * @range       http://www.w3.org/2001/XMLSchema#boolean
   */
  public readonly qualifiedValueShapesDisjoint = this.toIri().concat('qualifiedValueShapesDisjoint')

  /**
   * **[sh:result](http://www.w3.org/ns/shacl#result)**
   *
   * The validation results contained in a validation report.
   *
   * @type        property
   * @domain      sh:ValidationReport
   * @range       sh:ValidationResult
   */
  public readonly result = this.toIri().concat('result')

  /**
   * **[sh:result annotation](http://www.w3.org/ns/shacl#resultAnnotation)**
   *
   * Links a SPARQL validator with zero or more sh:ResultAnnotation instances, defining how to derive additional result properties based on the variables of the SELECT query.
   *
   * @type        property
   * @domain      sh:SPARQLSelectValidator
   * @range       sh:ResultAnnotation
   */
  public readonly resultAnnotation = this.toIri().concat('resultAnnotation')

  /**
   * **[sh:result message](http://www.w3.org/ns/shacl#resultMessage)**
   *
   * Human-readable messages explaining the cause of the result.
   *
   * @type        property
   * @domain      sh:AbstractResult
   */
  public readonly resultMessage = this.toIri().concat('resultMessage')

  /**
   * **[sh:result path](http://www.w3.org/ns/shacl#resultPath)**
   *
   * The path of a validation result, based on the path of the validated property shape.
   *
   * @type        property
   * @domain      sh:AbstractResult
   * @range       http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly resultPath = this.toIri().concat('resultPath')

  /**
   * **[sh:result severity](http://www.w3.org/ns/shacl#resultSeverity)**
   *
   * The severity of the result, e.g. warning.
   *
   * @type        property
   * @domain      sh:AbstractResult
   * @range       sh:Severity
   */
  public readonly resultSeverity = this.toIri().concat('resultSeverity')

  /**
   * **[sh:return type](http://www.w3.org/ns/shacl#returnType)**
   *
   * The expected type of values returned by the associated function.
   *
   * @type        property
   * @domain      sh:Function
   * @range       http://www.w3.org/2000/01/rdf-schema#Class
   */
  public readonly returnType = this.toIri().concat('returnType')

  /**
   * **[sh:rule](http://www.w3.org/ns/shacl#rule)**
   *
   * The rules linked to a shape.
   *
   * @type        property
   * @domain      sh:Shape
   * @range       sh:Rule
   */
  public readonly rule = this.toIri().concat('rule')

  /**
   * **[sh:select](http://www.w3.org/ns/shacl#select)**
   *
   * The SPARQL SELECT query to execute.
   *
   * @type        property
   * @domain      sh:SPARQLSelectExecutable
   * @range       http://www.w3.org/2001/XMLSchema#string
   */
  public readonly select = this.toIri().concat('select')

  /**
   * **[sh:severity](http://www.w3.org/ns/shacl#severity)**
   *
   * Defines the severity that validation results produced by a shape must have. Defaults to sh:Violation.
   *
   * @type        property
   * @domain      sh:Shape
   * @range       sh:Severity
   */
  public readonly severity = this.toIri().concat('severity')

  /**
   * **[sh:shapes graph](http://www.w3.org/ns/shacl#shapesGraph)**
   *
   * Shapes graphs that should be used when validating this data graph.
   *
   * @type        property
   * @domain      http://www.w3.org/2002/07/owl#Ontology
   * @range       http://www.w3.org/2002/07/owl#Ontology
   */
  public readonly shapesGraph = this.toIri().concat('shapesGraph')

  /**
   * **[sh:shapes graph well-formed](http://www.w3.org/ns/shacl#shapesGraphWellFormed)**
   *
   * If true then the validation engine was certain that the shapes graph has passed all SHACL syntax requirements during the validation process.
   *
   * @type        property
   * @domain      sh:ValidationReport
   * @range       http://www.w3.org/2001/XMLSchema#boolean
   */
  public readonly shapesGraphWellFormed = this.toIri().concat('shapesGraphWellFormed')

  /**
   * **[sh:source constraint](http://www.w3.org/ns/shacl#sourceConstraint)**
   *
   * The constraint that was validated when the result was produced.
   *
   * @type        property
   * @domain      sh:AbstractResult
   */
  public readonly sourceConstraint = this.toIri().concat('sourceConstraint')

  /**
   * **[sh:source constraint component](http://www.w3.org/ns/shacl#sourceConstraintComponent)**
   *
   * The constraint component that is the source of the result.
   *
   * @type        property
   * @domain      sh:AbstractResult
   * @range       sh:ConstraintComponent
   */
  public readonly sourceConstraintComponent = this.toIri().concat('sourceConstraintComponent')

  /**
   * **[sh:source shape](http://www.w3.org/ns/shacl#sourceShape)**
   *
   * The shape that is was validated when the result was produced.
   *
   * @type        property
   * @domain      sh:AbstractResult
   * @range       sh:Shape
   */
  public readonly sourceShape = this.toIri().concat('sourceShape')

  /**
   * **[sh:constraint (in SPARQL)](http://www.w3.org/ns/shacl#sparql)**
   *
   * Links a shape with SPARQL constraints.
   *
   * @type        property
   * @domain      sh:Shape
   * @range       sh:SPARQLConstraint
   */
  public readonly sparql = this.toIri().concat('sparql')

  /**
   * **[sh:subject](http://www.w3.org/ns/shacl#subject)**
   *
   * An expression producing the resources that shall be inferred as subjects.
   *
   * @type        property
   * @domain      sh:TripleRule
   */
  public readonly subject = this.toIri().concat('subject')

  /**
   * **[sh:suggested shapes graph](http://www.w3.org/ns/shacl#suggestedShapesGraph)**
   *
   * Suggested shapes graphs for this ontology. The values of this property may be used in the absence of specific sh:shapesGraph statements.
   *
   * @type        property
   * @domain      http://www.w3.org/2002/07/owl#Ontology
   * @range       http://www.w3.org/2002/07/owl#Ontology
   */
  public readonly suggestedShapesGraph = this.toIri().concat('suggestedShapesGraph')

  /**
   * **[sh:target](http://www.w3.org/ns/shacl#target)**
   *
   * Links a shape to a target specified by an extension language, for example instances of sh:SPARQLTarget.
   *
   * @type        property
   * @domain      sh:Shape
   * @range       sh:Target
   */
  public readonly target = this.toIri().concat('target')

  /**
   * **[sh:target class](http://www.w3.org/ns/shacl#targetClass)**
   *
   * Links a shape to a class, indicating that all instances of the class must conform to the shape.
   *
   * @type        property
   * @domain      sh:Shape
   * @range       http://www.w3.org/2000/01/rdf-schema#Class
   */
  public readonly targetClass = this.toIri().concat('targetClass')

  /**
   * **[sh:target node](http://www.w3.org/ns/shacl#targetNode)**
   *
   * Links a shape to individual nodes, indicating that these nodes must conform to the shape.
   *
   * @type        property
   * @domain      sh:Shape
   */
  public readonly targetNode = this.toIri().concat('targetNode')

  /**
   * **[sh:target objects of](http://www.w3.org/ns/shacl#targetObjectsOf)**
   *
   * Links a shape to a property, indicating that all all objects of triples that have the given property as their predicate must conform to the shape.
   *
   * @type        property
   * @domain      sh:Shape
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
   */
  public readonly targetObjectsOf = this.toIri().concat('targetObjectsOf')

  /**
   * **[sh:target subjects of](http://www.w3.org/ns/shacl#targetSubjectsOf)**
   *
   * Links a shape to a property, indicating that all subjects of triples that have the given property as their predicate must conform to the shape.
   *
   * @type        property
   * @domain      sh:Shape
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
   */
  public readonly targetSubjectsOf = this.toIri().concat('targetSubjectsOf')

  /**
   * **[sh:this](http://www.w3.org/ns/shacl#this)**
   *
   * A node expression that represents the current focus node.
   *
   * @type        instance
   */
  public readonly this = this.toIri().concat('this')

  /**
   * **[sh:union](http://www.w3.org/ns/shacl#union)**
   *
   * A list of node expressions that shall be used together.
   *
   * @type        property
   */
  public readonly union = this.toIri().concat('union')

  /**
   * **[sh:unique languages](http://www.w3.org/ns/shacl#uniqueLang)**
   *
   * Specifies whether all node values must have a unique (or no) language tag.
   *
   * @type        property
   * @range       http://www.w3.org/2001/XMLSchema#boolean
   */
  public readonly uniqueLang = this.toIri().concat('uniqueLang')

  /**
   * **[sh:update](http://www.w3.org/ns/shacl#update)**
   *
   * The SPARQL UPDATE to execute.
   *
   * @type        property
   * @domain      sh:SPARQLUpdateExecutable
   * @range       http://www.w3.org/2001/XMLSchema#string
   */
  public readonly update = this.toIri().concat('update')

  /**
   * **[sh:validator](http://www.w3.org/ns/shacl#validator)**
   *
   * The validator(s) used to evaluate constraints of either node or property shapes.
   *
   * @type        property
   * @domain      sh:ConstraintComponent
   * @range       sh:Validator
   */
  public readonly validator = this.toIri().concat('validator')

  /**
   * **[sh:value](http://www.w3.org/ns/shacl#value)**
   *
   * An RDF node that has caused the result.
   *
   * @type        property
   * @domain      sh:AbstractResult
   */
  public readonly value = this.toIri().concat('value')

  /**
   * **[sh:exactly one](http://www.w3.org/ns/shacl#xone)**
   *
   * Specifies a list of shapes so that the value nodes must conform to exactly one of the shapes.
   *
   * @type        property
   * @range       http://www.w3.org/1999/02/22-rdf-syntax-ns#List
   */
  public readonly xone = this.toIri().concat('xone')

  /**
   * **[sh:zero or more path](http://www.w3.org/ns/shacl#zeroOrMorePath)**
   *
   * The (single) value of this property represents a path that is matched zero or more times.
   *
   * @type        property
   * @range       http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly zeroOrMorePath = this.toIri().concat('zeroOrMorePath')

  /**
   * **[sh:zero or one path](http://www.w3.org/ns/shacl#zeroOrOnePath)**
   *
   * The (single) value of this property represents a path that is matched zero or one times.
   *
   * @type        property
   * @range       http://www.w3.org/2000/01/rdf-schema#Resource
   */
  public readonly zeroOrOnePath = this.toIri().concat('zeroOrOnePath')
}

/**
 * prefix **sh:** <<http://www.w3.org/ns/shacl#>>
 *
 * Shapes Constraint Language (SHACL)
 *
 * SHACL Shapes Constraint Language is a language for validating RDF graphs against a set of conditions.  These conditions are provided as shapes and other constructs expressed in the form of an RDF graph.  RDF graphs that are used in this manner are called “shapes graphs” in SHACL and the RDF graphs that are validated against a shapes graph are called “data graphs”.  As SHACL shape graphs are used to validate that data graphs satisfy a set of conditions they can also be viewed as a description of the data graphs that do satisfy these conditions.  Such descriptions may be used for a variety of purposes beside validation, including user interface building, code generation and data integration.
 *
 * Version: 1.0.0
 */
const sh = new Vocabulary('http://www.w3.org/ns/shacl#')
export default sh
