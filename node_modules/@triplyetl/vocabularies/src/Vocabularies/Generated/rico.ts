/**
 * Records in Contexts Ontology (ICA RiC-O)
 * rico.ts (2023-08-08T17:30:09.947Z)
 */
import VocabularyBase from '../../Classes/Vocabulary.js'

class Vocabulary extends VocabularyBase<'https://www.ica.org/standards/RiC/ontology#'> {
  /**
   * **[rico:Accumulation Relation](https://www.ica.org/standards/RiC/ontology#AccumulationRelation)**
   *
   * Connects at least one Record Resource or Instantiation to at            least one Agent, when the Agent accumulates it, be it intentionally (collecting it) or            not (receiving it in the course of its activities).
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/2c9d4281d8d03724f5ceacbe7390ce6c
   */
  public readonly AccumulationRelation = this.toIri().concat('AccumulationRelation')

  /**
   * **[rico:Activity](https://www.ica.org/standards/RiC/ontology#Activity)**
   *
   * The doing of something for some human purpose.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/bd9a46cd998b03799007d5f0594aa5be
   */
  public readonly Activity = this.toIri().concat('Activity')

  /**
   * **[rico:Activity Documentation Relation](https://www.ica.org/standards/RiC/ontology#ActivityDocumentationRelation)**
   *
   * Connects at least one Record Resource or Instantiation to at            least one Activity, when the Record Resource or Instantiation results from the            activity.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/8d6b42cfb8bf5b0b312d1a8080357ceb
   */
  public readonly ActivityDocumentationRelation = this.toIri().concat('ActivityDocumentationRelation')

  /**
   * **[rico:Activity Type](https://www.ica.org/standards/RiC/ontology#ActivityType)**
   *
   * Categorization of an Activity.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/fdf2d4cad3027cc72e3733f3601233eb
   */
  public readonly ActivityType = this.toIri().concat('ActivityType')

  /**
   * **[rico:Agent](https://www.ica.org/standards/RiC/ontology#Agent)**
   *
   * A Person, or Group, or an entity created by a Person or Group            (Mechanism), or a Position, that acts in the world.
   *
   * @type        class
   * @parent      rico:Thing
   */
  public readonly Agent = this.toIri().concat('Agent')

  /**
   * **[rico:Agent Control Relation](https://www.ica.org/standards/RiC/ontology#AgentControlRelation)**
   *
   * Connects at least one Agent, to at least another Agent, when the            first one(s) control(s) in a way the activities of the second one(s).
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/5393761a068c627bde8f2366892cad0d
   */
  public readonly AgentControlRelation = this.toIri().concat('AgentControlRelation')

  /**
   * **[rico:Agent Hierarchical Relation](https://www.ica.org/standards/RiC/ontology#AgentHierarchicalRelation)**
   *
   * Connects at least one Agent to at least another Agent, when the            first one is hierarchically superior to the second one.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/ddb15fe9d3834662d98c09ba249ff156
   */
  public readonly AgentHierarchicalRelation = this.toIri().concat('AgentHierarchicalRelation')

  /**
   * **[rico:Agent Name](https://www.ica.org/standards/RiC/ontology#AgentName)**
   *
   * A label, title or term designating an Agent in order to make it            distinguishable from other similar entities.
   *
   * @type        class
   * @parent      rico:Name
   */
  public readonly AgentName = this.toIri().concat('AgentName')

  /**
   * **[rico:Agent Origination Relation](https://www.ica.org/standards/RiC/ontology#AgentOriginationRelation)**
   *
   * Connects at least one Record Resource or an Instantiation to at            least one Agent that creates or accumulates the Record Resource, receives it, or sends            it.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/0db32bd1bc4d35590c693a4672f83c7c
   */
  public readonly AgentOriginationRelation = this.toIri().concat('AgentOriginationRelation')

  /**
   * **[rico:Agent Temporal Relation](https://www.ica.org/standards/RiC/ontology#AgentTemporalRelation)**
   *
   * Connects at least one Agent, to at least another Agent, that            succeeds it chronologically for, for instance, fullfilling some functions or performing            some activities.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/0e88ffccdd3a47bdd75c77196435f796
   */
  public readonly AgentTemporalRelation = this.toIri().concat('AgentTemporalRelation')

  /**
   * **[rico:Agent Relation](https://www.ica.org/standards/RiC/ontology#AgentToAgentRelation)**
   *
   * Connects at least two Agents.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/b391c5d7aac0895cc73887a05a4a4cba
   */
  public readonly AgentToAgentRelation = this.toIri().concat('AgentToAgentRelation')

  /**
   * **[rico:Appellation](https://www.ica.org/standards/RiC/ontology#Appellation)**
   *
   * A concept of any kind that is used for designating an Entity and            referring to it.
   *
   * @type        class
   * @parent      rico:Concept
   */
  public readonly Appellation = this.toIri().concat('Appellation')

  /**
   * **[rico:Appellation Relation](https://www.ica.org/standards/RiC/ontology#AppellationRelation)**
   *
   * The relation between an Appellation and at least one Thing that            the Appellation designates.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/b9edb6fe9f9b8eeecdbe8d1b6d774265
   */
  public readonly AppellationRelation = this.toIri().concat('AppellationRelation')

  /**
   * **[rico:Authority Relation](https://www.ica.org/standards/RiC/ontology#AuthorityRelation)**
   *
   * Connects at least one Agent, and at least one Thing over which            the Agent has some authority.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/27a8a2878b6ce83a2881331ab3a99a03
   */
  public readonly AuthorityRelation = this.toIri().concat('AuthorityRelation')

  /**
   * **[rico:Authorship Relation](https://www.ica.org/standards/RiC/ontology#AuthorshipRelation)**
   *
   * Connects at least one Record to at least one Person, Group or            Position that is responsible for conceiving and formulating the information contained in            the Record.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/561b80221efd365824309964c521c11f
   */
  public readonly AuthorshipRelation = this.toIri().concat('AuthorshipRelation')

  /**
   * **[rico:Carrier Extent](https://www.ica.org/standards/RiC/ontology#CarrierExtent)**
   *
   * The extent of a Record Resource carrier
   *
   * @type        class
   * @parent      rico:Extent
   */
  public readonly CarrierExtent = this.toIri().concat('CarrierExtent')

  /**
   * **[rico:Carrier Type](https://www.ica.org/standards/RiC/ontology#CarrierType)**
   *
   * Categorization of physical material in or on which information            is represented.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/071beef3aaa7d2a1fed75412b9807a3c
   */
  public readonly CarrierType = this.toIri().concat('CarrierType')

  /**
   * **[rico:Child Relation](https://www.ica.org/standards/RiC/ontology#ChildRelation)**
   *
   * Connects at lest one Person, to at least another Person, when            the first has child the second one.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/0a2e3ccdf46f10c985fc3c88a52dc22f
   */
  public readonly ChildRelation = this.toIri().concat('ChildRelation')

  /**
   * **[rico:Concept](https://www.ica.org/standards/RiC/ontology#Concept)**
   *
   * An idea, unit of thought, abstract cultural object or            category
   *
   * @type        class
   * @parent      rico:Thing
   */
  public readonly Concept = this.toIri().concat('Concept')

  /**
   * **[rico:Content Type](https://www.ica.org/standards/RiC/ontology#ContentType)**
   *
   * The fundamental form of communication in which a Record is            expressed and the human sense through which it is intended to be            perceived.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/215458f590901d3e2b1af3bef5942504
   */
  public readonly ContentType = this.toIri().concat('ContentType')

  /**
   * **[rico:Coordinates](https://www.ica.org/standards/RiC/ontology#Coordinates)**
   *
   * Longitudinal and latitudinal information of a            Place.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/e353a4c12532d80d8bde699bb9f0de58
   */
  public readonly Coordinates = this.toIri().concat('Coordinates')

  /**
   * **[rico:Corporate Body](https://www.ica.org/standards/RiC/ontology#CorporateBody)**
   *
   * An organized group of persons that act together as an Agent, and            that has a recognized legal or social status.
   *
   * @type        class
   * @parent      rico:Group
   */
  public readonly CorporateBody = this.toIri().concat('CorporateBody')

  /**
   * **[rico:Corporate Body Type](https://www.ica.org/standards/RiC/ontology#CorporateBodyType)**
   *
   * Categorization of a Corporate Body.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/fa2cfc436d480a77e892748c9c0ec151
   */
  public readonly CorporateBodyType = this.toIri().concat('CorporateBodyType')

  /**
   * **[rico:Correspondence Relation](https://www.ica.org/standards/RiC/ontology#CorrespondenceRelation)**
   *
   * Connects at least two Persons, when they correspond to each            other.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/ac7ae3ee34c27ab2be515dd53d569a62
   */
  public readonly CorrespondenceRelation = this.toIri().concat('CorrespondenceRelation')

  /**
   * **[rico:Creation Relation](https://www.ica.org/standards/RiC/ontology#CreationRelation)**
   *
   * Connects at least one Record Resource or Instantiation to at            least one Agent, when the Agent is either responsible for all or some of the content of            the Record Resource, or is a contributor to the genesis or production of the            Instantiation.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/46611891c082254fb85e25929f4ab9a4
   */
  public readonly CreationRelation = this.toIri().concat('CreationRelation')

  /**
   * **[rico:Date](https://www.ica.org/standards/RiC/ontology#Date)**
   *
   * Chronological information associated with an entity that            contributes to its identification and contextualization.
   *
   * @type        class
   * @parent      rico:Thing
   */
  public readonly Date = this.toIri().concat('Date')

  /**
   * **[rico:Date Range](https://www.ica.org/standards/RiC/ontology#DateRange)**
   *
   * Chronological information associated with an entity that            contributes to its identification and contextualization, that implies or explicitly            states a start date and end date.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/bf33171faa60b2df498ddb0a790e1efb
   */
  public readonly DateRange = this.toIri().concat('DateRange')

  /**
   * **[rico:Date Set](https://www.ica.org/standards/RiC/ontology#DateSet)**
   *
   * Non-contiguous single dates or date ranges.
   *
   * @type        class
   * @parent      rico:Date
   */
  public readonly DateSet = this.toIri().concat('DateSet')

  /**
   * **[rico:Demographic Group](https://www.ica.org/standards/RiC/ontology#DemographicGroup)**
   *
   * Categorization of a person according to characteristics such as            age, gender, education, place of origin, ethnic/cultural identification, religion,            etc.
   *
   * @type        class
   * @parent      rico:Type
   */
  public readonly DemographicGroup = this.toIri().concat('DemographicGroup')

  /**
   * **[rico:Derivation Relation](https://www.ica.org/standards/RiC/ontology#DerivationRelation)**
   *
   * Connects an Instantiation to at least one Instantiation that is            derived from it.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/6536b9fa4be0610227648e0faf4e54c2
   */
  public readonly DerivationRelation = this.toIri().concat('DerivationRelation')

  /**
   * **[rico:Descendance Relation](https://www.ica.org/standards/RiC/ontology#DescendanceRelation)**
   *
   * Connects at least one Person to at least another Person, when            the first has/have descendant the second one(s).
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/505e27f20c4f491fa8a6a8e914544e33
   */
  public readonly DescendanceRelation = this.toIri().concat('DescendanceRelation')

  /**
   * **[rico:Documentary Form Type](https://www.ica.org/standards/RiC/ontology#DocumentaryFormType)**
   *
   * Categorization of the document with respect to its extrinsic and            intrinsic elements that together communicate its content, administrative and documentary            context, and authority
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/b0793291b33f6f8b9bfa746d4b7b3166
   */
  public readonly DocumentaryFormType = this.toIri().concat('DocumentaryFormType')

  /**
   * **[rico:Event](https://www.ica.org/standards/RiC/ontology#Event)**
   *
   * Something that happens in time and space.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/1e6c96d1a62732dc34c718a63022c103
   */
  public readonly Event = this.toIri().concat('Event')

  /**
   * **[rico:Event Relation](https://www.ica.org/standards/RiC/ontology#EventRelation)**
   *
   * Connects at least one Event to at least one Thing, when the            first is associated with the existence and lifecycle of the second one.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/8699879be1323f89d1794de49f4c756b
   */
  public readonly EventRelation = this.toIri().concat('EventRelation')

  /**
   * **[rico:Event Type](https://www.ica.org/standards/RiC/ontology#EventType)**
   *
   * Categorization of an Event.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/0be8b4db1068557b862dcb52b14d20eb
   */
  public readonly EventType = this.toIri().concat('EventType')

  /**
   * **[rico:Extent](https://www.ica.org/standards/RiC/ontology#Extent)**
   *
   * Countable characteristics of the content of an entity expressed            as a quantity.
   *
   * @type        class
   * @parent      rico:Thing
   */
  public readonly Extent = this.toIri().concat('Extent')

  /**
   * **[rico:Extent Type](https://www.ica.org/standards/RiC/ontology#ExtentType)**
   *
   * Categorization of the extent that is being measured
   *
   * @type        class
   * @parent      rico:Type
   */
  public readonly ExtentType = this.toIri().concat('ExtentType')

  /**
   * **[rico:Family](https://www.ica.org/standards/RiC/ontology#Family)**
   *
   * Two or more persons related by birth, or through marriage,            adoption, civil union, or other social conventions that bind them together as a socially            recognized familial group.
   *
   * @type        class
   * @parent      rico:Group
   */
  public readonly Family = this.toIri().concat('Family')

  /**
   * **[rico:Family Relation](https://www.ica.org/standards/RiC/ontology#FamilyRelation)**
   *
   * Connects at least two Persons, when they have some family link,            i.e. belong to the same family.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/52a3c543fe3f8a01c5c38bc776d13343
   */
  public readonly FamilyRelation = this.toIri().concat('FamilyRelation')

  /**
   * **[rico:Family Type](https://www.ica.org/standards/RiC/ontology#FamilyType)**
   *
   * Categorization of a Family.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/3232f90fea8dec43f94b7e13a24cd6b3
   */
  public readonly FamilyType = this.toIri().concat('FamilyType')

  /**
   * **[rico:Functional Equivalence Relation](https://www.ica.org/standards/RiC/ontology#FunctionalEquivalenceRelation)**
   *
   * Connects at least two Instantiations which may be considered as            equivalent.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/24fc55e7405a42deb73ffa0633957651
   */
  public readonly FunctionalEquivalenceRelation = this.toIri().concat('FunctionalEquivalenceRelation')

  /**
   * **[rico:Group](https://www.ica.org/standards/RiC/ontology#Group)**
   *
   * Two or more Agents that act together as an Agent.
   *
   * @type        class
   * @parent      rico:Agent
   */
  public readonly Group = this.toIri().concat('Group')

  /**
   * **[rico:Group Subdivision Relation](https://www.ica.org/standards/RiC/ontology#GroupSubdivisionRelation)**
   *
   * Connects a Group and at least another Group, when the first one            as the second one(s) among its subdivisions.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/9fb3ab74b7dd6bd3ca476666b988ee6c
   */
  public readonly GroupSubdivisionRelation = this.toIri().concat('GroupSubdivisionRelation')

  /**
   * **[rico:Identifier](https://www.ica.org/standards/RiC/ontology#Identifier)**
   *
   * A word, number, letter, symbol, or any combination of these used            to uniquely identify or reference an individual instance of an entity within a specific            information domain.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/6f894dde1fe2f6a89e4ba8d5aabf5f89
   */
  public readonly Identifier = this.toIri().concat('Identifier')

  /**
   * **[rico:Identifier Type](https://www.ica.org/standards/RiC/ontology#IdentifierType)**
   *
   * Categorization of an Identifier.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/25e22f6ec371f39d075197544fbd3210
   */
  public readonly IdentifierType = this.toIri().concat('IdentifierType')

  /**
   * **[rico:Instantiation](https://www.ica.org/standards/RiC/ontology#Instantiation)**
   *
   * The inscription of information made by an Agent on a physical            carrier in any persistent, recoverable form as a means of communicating information            through time and space.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/21452f8354766b4c742a0869dc5f989c
   */
  public readonly Instantiation = this.toIri().concat('Instantiation')

  /**
   * **[rico:Instantiation Extent](https://www.ica.org/standards/RiC/ontology#InstantiationExtent)**
   *
   * The extent of an Instantiation.
   *
   * @type        class
   * @parent      rico:Extent
   */
  public readonly InstantiationExtent = this.toIri().concat('InstantiationExtent')

  /**
   * **[rico:Instantiation to Instantiation Relation](https://www.ica.org/standards/RiC/ontology#InstantiationToInstantiationRelation)**
   *
   * Connects at least two instantiations
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/8b4a0d74ec73fc3990b7cb091410d8df
   */
  public readonly InstantiationToInstantiationRelation = this.toIri().concat('InstantiationToInstantiationRelation')

  /**
   * **[rico:Intellectual Property Rights Relation](https://www.ica.org/standards/RiC/ontology#IntellectualPropertyRightsRelation)**
   *
   * Connects at least one Agent and one Record Resource or            Instantiation on which the Agent has some intellectual property rights.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/0ef07493c0cb2d13e3d28115693ddf9d
   */
  public readonly IntellectualPropertyRightsRelation = this.toIri().concat('IntellectualPropertyRightsRelation')

  /**
   * **[rico:Knowing Of Relation](https://www.ica.org/standards/RiC/ontology#KnowingOfRelation)**
   *
   * Connects at least one Person to at least another one, when the            first one has some knowledge of the second one through time or space.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/103f1c2eaf215165eea992c2af4b374c
   */
  public readonly KnowingOfRelation = this.toIri().concat('KnowingOfRelation')

  /**
   * **[rico:Knowing Relation](https://www.ica.org/standards/RiC/ontology#KnowingRelation)**
   *
   * Connects at least two Persons that directly know each other            during their existence. This relation is symmetric.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/91a1bfdcfc575e370da0fecc1838d446
   */
  public readonly KnowingRelation = this.toIri().concat('KnowingRelation')

  /**
   * **[rico:Language](https://www.ica.org/standards/RiC/ontology#Language)**
   *
   * A spoken or written human language represented in the Record or            Record Part, or used by the Agent.
   *
   * @type        class
   * @parent      rico:Concept
   */
  public readonly Language = this.toIri().concat('Language')

  /**
   * **[rico:Leadership Relation](https://www.ica.org/standards/RiC/ontology#LeadershipRelation)**
   *
   * Connects at least one Person and at least one Group, when the            first one leads the second one.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/33a15bc6aba3d2694153b2721eaf2605
   */
  public readonly LeadershipRelation = this.toIri().concat('LeadershipRelation')

  /**
   * **[rico:Legal Status](https://www.ica.org/standards/RiC/ontology#LegalStatus)**
   *
   * A status defined by law.
   *
   * @type        class
   * @parent      rico:Type
   */
  public readonly LegalStatus = this.toIri().concat('LegalStatus')

  /**
   * **[rico:Management Relation](https://www.ica.org/standards/RiC/ontology#ManagementRelation)**
   *
   * Connects at least one Agent, and at least one Record Resource or            Instantiation that the Agent manages.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/c39688bc1014e4a1586d71a485835366
   */
  public readonly ManagementRelation = this.toIri().concat('ManagementRelation')

  /**
   * **[rico:Mandate](https://www.ica.org/standards/RiC/ontology#Mandate)**
   *
   * Delegation of authority by an Agent to another Agent to perform            an Activity.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/c1af22549d8804717beb2b0a7536a29f
   */
  public readonly Mandate = this.toIri().concat('Mandate')

  /**
   * **[rico:Mandate Relation](https://www.ica.org/standards/RiC/ontology#MandateRelation)**
   *
   * Connects at least one Mandate, and at least one Agent, when the            first gives the second one the authority or competencies to act. May also involve one to            many Activities that the Mandate(s) assign(s) to the Agent(s).
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/0dc4266945fa6257b40aeb0d92c29b4e
   */
  public readonly MandateRelation = this.toIri().concat('MandateRelation')

  /**
   * **[rico:Mechanism](https://www.ica.org/standards/RiC/ontology#Mechanism)**
   *
   * A process or system created by a Person or Group that performs            an Activity.
   *
   * @type        class
   * @parent      rico:Agent
   */
  public readonly Mechanism = this.toIri().concat('Mechanism')

  /**
   * **[rico:Membership Relation](https://www.ica.org/standards/RiC/ontology#MembershipRelation)**
   *
   * Connects a Group and at least one Person, when the first one has            the second one(s) among its members.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/689b71c7b208e21f9cfcd903e9b5dc2e
   */
  public readonly MembershipRelation = this.toIri().concat('MembershipRelation')

  /**
   * **[rico:Migration Relation](https://www.ica.org/standards/RiC/ontology#MigrationRelation)**
   *
   * Connects an Instantiation and at least another Instantiation,            when the first is migrated into the second one(s).
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/23ce97130b3d5e2a101bfb4f084c9fee
   */
  public readonly MigrationRelation = this.toIri().concat('MigrationRelation')

  /**
   * **[rico:Name](https://www.ica.org/standards/RiC/ontology#Name)**
   *
   * A label, title or term designating the entity in order to make            it distinguishable from other similar entities.
   *
   * @type        class
   * @parent      rico:Appellation
   */
  public readonly Name = this.toIri().concat('Name')

  /**
   * **[rico:Occupation Type](https://www.ica.org/standards/RiC/ontology#OccupationType)**
   *
   * Categorization of a profession, trade, or craft pursued by a            person in fulfilment of an Activity.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/1a8b8e951641ec6d4d8ad052e8e73f8b
   */
  public readonly OccupationType = this.toIri().concat('OccupationType')

  /**
   * **[rico:Ownership Relation](https://www.ica.org/standards/RiC/ontology#OwnershipRelation)**
   *
   * Connects at least one Group, Person or Position, and at least a            Thing that these Agent(s) own(s).
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/02f3e6abb0f58227e74f93305b96eb1e
   */
  public readonly OwnershipRelation = this.toIri().concat('OwnershipRelation')

  /**
   * **[rico:Performance Relation](https://www.ica.org/standards/RiC/ontology#PerformanceRelation)**
   *
   * Connects at least one Activity to at least one Agent, when the            first is performed by the second one(s).
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/94c492c636527c3e1aa6ba28aa3f9695
   */
  public readonly PerformanceRelation = this.toIri().concat('PerformanceRelation')

  /**
   * **[rico:Person](https://www.ica.org/standards/RiC/ontology#Person)**
   *
   * A human being with a social identity or persona.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/764db554c6aa4180d174351d836cdd30
   */
  public readonly Person = this.toIri().concat('Person')

  /**
   * **[rico:Physical Location](https://www.ica.org/standards/RiC/ontology#PhysicalLocation)**
   *
   * A delimitation of the physical territory of a            Place.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/e077037c40d14f742bf50d3233172e51
   */
  public readonly PhysicalLocation = this.toIri().concat('PhysicalLocation')

  /**
   * **[rico:Place](https://www.ica.org/standards/RiC/ontology#Place)**
   *
   * Bounded, named geographic area or region.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/3d3cbaa7943e261cc6cc18820999a575
   */
  public readonly Place = this.toIri().concat('Place')

  /**
   * **[rico:Place Name](https://www.ica.org/standards/RiC/ontology#PlaceName)**
   *
   * A label, title or term designating a Place in order to make it            distinguishable from other similar entities.
   *
   * @type        class
   * @parent      rico:Name
   */
  public readonly PlaceName = this.toIri().concat('PlaceName')

  /**
   * **[rico:Place Relation](https://www.ica.org/standards/RiC/ontology#PlaceRelation)**
   *
   * Connects a Place and at least one Thing, when the first is            associated with the existence and lifecycle of the second one.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/1fdf32279696e57e6802d1796e9d53a9
   */
  public readonly PlaceRelation = this.toIri().concat('PlaceRelation')

  /**
   * **[rico:Place Type](https://www.ica.org/standards/RiC/ontology#PlaceType)**
   *
   * Categorization of a Place.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/f77ef27cb1af5653b62e1a266aaf1b0d
   */
  public readonly PlaceType = this.toIri().concat('PlaceType')

  /**
   * **[rico:Position](https://www.ica.org/standards/RiC/ontology#Position)**
   *
   * The functional role of a Person within a Group.
   *
   * @type        class
   * @parent      rico:Agent
   */
  public readonly Position = this.toIri().concat('Position')

  /**
   * **[rico:Position Holding Relation](https://www.ica.org/standards/RiC/ontology#PositionHoldingRelation)**
   *
   * Connects at least one Person, and at least one Position that the            Person occupies.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/91b1c80803d45668b0a546863a57c5e8
   */
  public readonly PositionHoldingRelation = this.toIri().concat('PositionHoldingRelation')

  /**
   * **[rico:Position to Group Relation](https://www.ica.org/standards/RiC/ontology#PositionToGroupRelation)**
   *
   * Connects at least one Position, and a Group, when the first            one(s) exist(s) in/is defined within the second one.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/a31f082d86f033c208dbfafdeac3a0c7
   */
  public readonly PositionToGroupRelation = this.toIri().concat('PositionToGroupRelation')

  /**
   * **[rico:Production Technique Type](https://www.ica.org/standards/RiC/ontology#ProductionTechniqueType)**
   *
   * Categorization of the method used in the representation of            information on the Instantiation.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/e3df763ff23c11cdf0b9375fafb3d655
   */
  public readonly ProductionTechniqueType = this.toIri().concat('ProductionTechniqueType')

  /**
   * **[rico:Provenance Relation](https://www.ica.org/standards/RiC/ontology#ProvenanceRelation)**
   *
   * Specifies the provenance or origin of at least one Record            Resource or Instantiation, for example the relation between a Record Resource and the            Agent which created it or the Activity from which it resulted.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/85ad87405692516ddf884d7619bf514e
   */
  public readonly ProvenanceRelation = this.toIri().concat('ProvenanceRelation')

  /**
   * **[rico:Proxy](https://www.ica.org/standards/RiC/ontology#Proxy)**
   *
   * A Proxy represents (stands for) a Record Resource as it exists            in a specific Record Set.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/23fc633d708b38740f3cc893f7407cdb
   */
  public readonly Proxy = this.toIri().concat('Proxy')

  /**
   * **[rico:Record](https://www.ica.org/standards/RiC/ontology#Record)**
   *
   * Information inscribed at least once by any method on any            physical carrier in any persistent, recoverable form by an Agent in the course of life            or work Activity.
   *
   * @type        class
   * @parent      rico:RecordResource
   */
  public readonly Record = this.toIri().concat('Record')

  /**
   * **[rico:Record Part](https://www.ica.org/standards/RiC/ontology#RecordPart)**
   *
   * Part of a Record with discrete information content that            contributes to the Record's physical or intellectual completeness.
   *
   * @type        class
   * @parent      rico:RecordResource
   */
  public readonly RecordPart = this.toIri().concat('RecordPart')

  /**
   * **[rico:Record Resource](https://www.ica.org/standards/RiC/ontology#RecordResource)**
   *
   * A Record, Record Set, or Record Part produced or acquired and            retained by an Agent in the course of Activity.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/e678c009c796977ba0474a29a4046907
   */
  public readonly RecordResource = this.toIri().concat('RecordResource')

  /**
   * **[rico:Record Resource Extent](https://www.ica.org/standards/RiC/ontology#RecordResourceExtent)**
   *
   * The extent of the content of a Record Resource.
   *
   * @type        class
   * @parent      rico:Extent
   */
  public readonly RecordResourceExtent = this.toIri().concat('RecordResourceExtent')

  /**
   * **[rico:Record Resource Genetic Relation](https://www.ica.org/standards/RiC/ontology#RecordResourceGeneticRelation)**
   *
   * Connects two to more Record Resources when there is a genetic            relation between them. Genetic in this sense is as defined by diplomatics, i.e. the            process by which a Record Resource is developed.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/d661f0dba3aa885a8ca519b3e0d33a87
   */
  public readonly RecordResourceGeneticRelation = this.toIri().concat('RecordResourceGeneticRelation')

  /**
   * **[rico:Record Resource Holding Relation](https://www.ica.org/standards/RiC/ontology#RecordResourceHoldingRelation)**
   *
   * Connects at least one Agent, and one or more Record Resource or            Instantiation that the Agent holds.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/c3b167e8b2cd815e2aa714aeac0a7f4c
   */
  public readonly RecordResourceHoldingRelation = this.toIri().concat('RecordResourceHoldingRelation')

  /**
   * **[rico:Record Resource to Instantiation Relation](https://www.ica.org/standards/RiC/ontology#RecordResourceToInstantiationRelation)**
   *
   * Connects a Record Resource to one or more Instantiations that            instantiate it.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/695cfed411ee09e5d9cb1a0237c3e9df
   */
  public readonly RecordResourceToInstantiationRelation = this.toIri().concat('RecordResourceToInstantiationRelation')

  /**
   * **[rico:Record Resource to Record Resource Relation](https://www.ica.org/standards/RiC/ontology#RecordResourceToRecordResourceRelation)**
   *
   * Connects at least two Record Resources.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/5bfa4a3c0217e5bafce77ae565b964c0
   */
  public readonly RecordResourceToRecordResourceRelation = this.toIri().concat('RecordResourceToRecordResourceRelation')

  /**
   * **[rico:Record Set](https://www.ica.org/standards/RiC/ontology#RecordSet)**
   *
   * One or more records that are associated by categorization and/or            physical aggregation by the creator or other Agent.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/60038e6b3d78a7bc47d59987856f4cbb
   */
  public readonly RecordSet = this.toIri().concat('RecordSet')

  /**
   * **[rico:Record Set Type](https://www.ica.org/standards/RiC/ontology#RecordSetType)**
   *
   * A broad categorization of the type of Record Set.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/245778bb47ad499118611bea79ba9734
   */
  public readonly RecordSetType = this.toIri().concat('RecordSetType')

  /**
   * **[rico:Record State](https://www.ica.org/standards/RiC/ontology#RecordState)**
   *
   * Categorization of the production or reproduction status of a            Record or Record Part.
   *
   * @type        class
   * @parent      rico:Type
   */
  public readonly RecordState = this.toIri().concat('RecordState')

  /**
   * **[rico:Relation](https://www.ica.org/standards/RiC/ontology#Relation)**
   *
   * The top level relation class. It connects at least two Things.            An instance of a Relation may have some datatype and object properties : a descriptive            note (datatype property) like any Thing ; certainty (for 'certain', 'quite probable',            'uncertain','unknown'); a date (use either the date datatype property or the Date class            and isAssociatedWithDate object property ; a state (relationState) ; a location (use            Place class and isAssociatedWithPlace object property) ; a source of information that            can be used as an evidence for it (use either source datatype property or hasSource            object property).
   *
   * @type        class
   * @parent      rico:Thing
   */
  public readonly Relation = this.toIri().concat('Relation')

  /**
   * **[rico:Representation Type](https://www.ica.org/standards/RiC/ontology#RepresentationType)**
   *
   * Categorization of the method of recording the content type of a            Record Resource.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/ff7316a85004cb58a2d4d808e1913cd4
   */
  public readonly RepresentationType = this.toIri().concat('RepresentationType')

  /**
   * **[rico:RiC-CM corresponding component](https://www.ica.org/standards/RiC/ontology#RiCCMCorrespondingComponent)**
   *
   * When it exists, specifies the identifier and name of RiC-CM            component that corresponds to the annotated class or property.
   *
   * @type        property
   * @parent      http://www.w3.org/2000/01/rdf-schema#comment
   */
  public readonly RiCCMCorrespondingComponent = this.toIri().concat('RiCCMCorrespondingComponent')

  /**
   * **[rico:Role Type](https://www.ica.org/standards/RiC/ontology#RoleType)**
   *
   * The role an agent plays in some context (usually in some            creation relation). Not to be confused with a position (position of an agent in some            group). For example, a person who is the head of some corporate body may play the role            of annotator (of a record) in a creation relation.
   *
   * @type        class
   * @parent      rico:Type
   */
  public readonly RoleType = this.toIri().concat('RoleType')

  /**
   * **[rico:Rule](https://www.ica.org/standards/RiC/ontology#Rule)**
   *
   * Conditions that govern the existence or authority of an Agent or the performance of an Activity, or that contribute to the distinct characteristics of things created or managed by an Agent.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/690e4a3c4c564ab7e2a6af98e508516b
   */
  public readonly Rule = this.toIri().concat('Rule')

  /**
   * **[rico:Rule Relation](https://www.ica.org/standards/RiC/ontology#RuleRelation)**
   *
   * Connects at least one Rule to at least one Thing, when it is            associated with existence and lifecycle of the Thing.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/63ffe83f7a91803bfeb3a0a3855f5fdc
   */
  public readonly RuleRelation = this.toIri().concat('RuleRelation')

  /**
   * **[rico:Rule Type](https://www.ica.org/standards/RiC/ontology#RuleType)**
   *
   * Categorization of a Rule.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/0af7f135ab3f7b440b191682b7ee6ed6
   */
  public readonly RuleType = this.toIri().concat('RuleType')

  /**
   * **[rico:Sequential Relation](https://www.ica.org/standards/RiC/ontology#SequentialRelation)**
   *
   * Connects at least one Thing to at least one Thing that follows            it in some sequence.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/51ec8f11f29341a65349b681d56028d6
   */
  public readonly SequentialRelation = this.toIri().concat('SequentialRelation')

  /**
   * **[rico:Sibling Relation](https://www.ica.org/standards/RiC/ontology#SiblingRelation)**
   *
   * Connects at least two Persons, when they are            siblings.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/8d7a2c60099815d710cd002d3b6b8e0a
   */
  public readonly SiblingRelation = this.toIri().concat('SiblingRelation')

  /**
   * **[rico:Single Date](https://www.ica.org/standards/RiC/ontology#SingleDate)**
   *
   * Chronological information associated with an entity that            contributes to its identification and contextualization, related to a single point in            time.
   *
   * @type        class
   * @parent      rico:Date
   */
  public readonly SingleDate = this.toIri().concat('SingleDate')

  /**
   * **[rico:Spouse Relation](https://www.ica.org/standards/RiC/ontology#SpouseRelation)**
   *
   * Connects at least two Persons, when they are            spouses.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/a5f0c0cd61c1cead58a858a4f21307ec
   */
  public readonly SpouseRelation = this.toIri().concat('SpouseRelation')

  /**
   * **[rico:Teaching Relation](https://www.ica.org/standards/RiC/ontology#TeachingRelation)**
   *
   * Connects at least one Person to at least another Person, who is            their student.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/97f575135524af8a58555e0a652a0261
   */
  public readonly TeachingRelation = this.toIri().concat('TeachingRelation')

  /**
   * **[rico:Temporal Relation](https://www.ica.org/standards/RiC/ontology#TemporalRelation)**
   *
   * Connects at least one Thing to at least one Thing that follows            it in chronological order.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/38b5b3051fd0971ba646780db6a73bec
   */
  public readonly TemporalRelation = this.toIri().concat('TemporalRelation')

  /**
   * **[rico:Thing](https://www.ica.org/standards/RiC/ontology#Thing)**
   *
   * Any idea, material thing, or event within the realm of human            experience.
   *
   * @type        class
   */
  public readonly Thing = this.toIri().concat('Thing')

  /**
   * **[rico:Title](https://www.ica.org/standards/RiC/ontology#Title)**
   *
   * A name that is used for a Record Resource or a            Rule
   *
   * @type        class
   * @parent      rico:Name
   */
  public readonly Title = this.toIri().concat('Title')

  /**
   * **[rico:Type](https://www.ica.org/standards/RiC/ontology#Type)**
   *
   * A superclass for any category of some thing. A type            characterizes an entity.
   *
   * @type        class
   * @parent      rico:Concept
   */
  public readonly Type = this.toIri().concat('Type')

  /**
   * **[rico:Type Relation](https://www.ica.org/standards/RiC/ontology#TypeRelation)**
   *
   * Connects a category (a Type) and at least one Thing that belongs            to this category.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/b5909396da0accf5aaafbae17f21c7ed
   */
  public readonly TypeRelation = this.toIri().concat('TypeRelation')

  /**
   * **[rico:Unit Of Measurement](https://www.ica.org/standards/RiC/ontology#UnitOfMeasurement)**
   *
   * A definite magnitude of a quantity, defined and adopted by convention or by            law, that is used as a standard for measurement of the same kind of quantity. Can be            spacial units (cm, m), weigt (g, kg), time (s, h), storage (MB, TB) or more informal            units used in the archival context like number of boxes, pages or words.
   *
   * @type        class
   * @parent      rico:Concept
   */
  public readonly UnitOfMeasurement = this.toIri().concat('UnitOfMeasurement')

  /**
   * **[rico:Whole Part Relation](https://www.ica.org/standards/RiC/ontology#WholePartRelation)**
   *
   * Connects a Thing to at least one constitutive or component part            of that Thing.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/d1c8feef61ad82fbc7c669715e6db3ec
   */
  public readonly WholePartRelation = this.toIri().concat('WholePartRelation')

  /**
   * **[rico:Work Relation](https://www.ica.org/standards/RiC/ontology#WorkRelation)**
   *
   * Connects at least two Agents that have some type of work            relation in the course of their activities.
   *
   * @type        class
   * @parent      https://triplydb.com/.well-known/genid/6f38e4edb61f506fd3ebf14aed647b00
   */
  public readonly WorkRelation = this.toIri().concat('WorkRelation')

  /**
   * **[rico:accrual](https://www.ica.org/standards/RiC/ontology#accrual)**
   *
   * Information on the anticipated accession(s) to the Record            Set.
   *
   * @type        property
   * @domain      rico:RecordSet
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly accrual = this.toIri().concat('accrual')

  /**
   * **[rico:accrual status](https://www.ica.org/standards/RiC/ontology#accrualStatus)**
   *
   * Information on the status of an Accrual
   *
   * @type        property
   * @domain      rico:RecordSet
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly accrualStatus = this.toIri().concat('accrualStatus')

  /**
   * **[rico:accumulation relation has source ](https://www.ica.org/standards/RiC/ontology#accumulationRelationHasSource)**
   *
   * Connects an Accumulation Relation to one of the accumulated            Record Resources or Instantiations
   *
   * @type        property
   * @parent      rico:agentOriginationRelationHasSource
   * @domain      rico:AccumulationRelation
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly accumulationRelationHasSource = this.toIri().concat('accumulationRelationHasSource')

  /**
   * **[rico:accumulation relation has target ](https://www.ica.org/standards/RiC/ontology#accumulationRelationHasTarget)**
   *
   * Connects an Accumulation Relation to one of the accumulating            Agents
   *
   * @type        property
   * @parent      rico:agentOriginationRelationHasTarget
   * @domain      rico:AccumulationRelation
   * @range       rico:Agent
   */
  public readonly accumulationRelationHasTarget = this.toIri().concat('accumulationRelationHasTarget')

  /**
   * **[rico:activity documentation relation has source ](https://www.ica.org/standards/RiC/ontology#activityDocumentationRelationHasSource)**
   *
   * Connects an Activity Documentation Relation to one of the            resulting Record Resources or Instantiations
   *
   * @type        property
   * @parent      rico:provenanceRelationHasSource
   * @domain      rico:ActivityDocumentationRelation
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly activityDocumentationRelationHasSource = this.toIri().concat('activityDocumentationRelationHasSource')

  /**
   * **[rico:activity documentation relation has target ](https://www.ica.org/standards/RiC/ontology#activityDocumentationRelationHasTarget)**
   *
   * Connects an Activity Documentation Relation to one of the            documented Activities
   *
   * @type        property
   * @parent      rico:provenanceRelationHasTarget
   * @domain      rico:ActivityDocumentationRelation
   * @range       rico:Activity
   */
  public readonly activityDocumentationRelationHasTarget = this.toIri().concat('activityDocumentationRelationHasTarget')

  /**
   * **[rico:activity is context of relation ](https://www.ica.org/standards/RiC/ontology#activityIsContextOfRelation)**
   *
   * Connects an Activity to an Agent Temporal Relation (when the            Activity is transferred from an Agent to another one) or a Mandate Relation (the Mandate            assigns the Activity to the Agent or defines it).
   *
   * @type        property
   * @parent      rico:thingIsContextOfRelation
   * @domain      rico:Activity
   * @range       rico:AgentTemporalRelation or rico:MandateRelation
   */
  public readonly activityIsContextOfRelation = this.toIri().concat('activityIsContextOfRelation')

  /**
   * **[rico:activity is source of performance relation ](https://www.ica.org/standards/RiC/ontology#activityIsSourceOfPerformanceRelation)**
   *
   * Connects an Activity that is performed to a Performance            Relation
   *
   * @type        property
   * @parent      rico:thingIsSourceOfRelation
   * @domain      rico:Activity
   * @range       rico:PerformanceRelation
   */
  public readonly activityIsSourceOfPerformanceRelation = this.toIri().concat('activityIsSourceOfPerformanceRelation')

  /**
   * **[rico:activity is target of activity documentation relation
        ](https://www.ica.org/standards/RiC/ontology#activityIsTargetOfActivityDocumentationRelation)**
   *
   * Connects an Activity to an Activity Documentation            Relation
   *
   * @type        property
   * @parent      rico:agentOrActivityIsTargetOfProvenanceRelation
   * @domain      rico:Activity
   * @range       rico:ActivityDocumentationRelation
   */
  public readonly activityIsTargetOfActivityDocumentationRelation = this.toIri().concat('activityIsTargetOfActivityDocumentationRelation')

  /**
   * **[rico:affects or affected](https://www.ica.org/standards/RiC/ontology#affectsOrAffected)**
   *
   * Connects an Event to a Thing on which the Event has or had some            significant impact.
   *
   * @type        property
   * @parent      rico:hasOrHadParticipant
   * @domain      rico:Event
   * @range       rico:Thing
   */
  public readonly affectsOrAffected = this.toIri().concat('affectsOrAffected')

  /**
   * **[rico:agent control relation has source ](https://www.ica.org/standards/RiC/ontology#agentControlRelationHasSource)**
   *
   * Connects an Agent Control Relation to one of the controlling            Agents
   *
   * @type        property
   * @parent      rico:agentHierarchicalRelationHasSource
   * @domain      rico:AgentControlRelation
   * @range       rico:Agent
   */
  public readonly agentControlRelationHasSource = this.toIri().concat('agentControlRelationHasSource')

  /**
   * **[rico:agent control relation has target ](https://www.ica.org/standards/RiC/ontology#agentControlRelationHasTarget)**
   *
   * Connects an Agent Control Relation to one of the controlled            Agents
   *
   * @type        property
   * @parent      rico:agentHierarchicalRelationHasTarget
   * @domain      rico:AgentControlRelation
   * @range       rico:Agent
   */
  public readonly agentControlRelationHasTarget = this.toIri().concat('agentControlRelationHasTarget')

  /**
   * **[rico:agent has work relation ](https://www.ica.org/standards/RiC/ontology#agentHasWorkRelation)**
   *
   * Connects an Agent to a Work Relation
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Agent
   * @range       rico:WorkRelation
   */
  public readonly agentHasWorkRelation = this.toIri().concat('agentHasWorkRelation')

  /**
   * **[rico:agent hierarchical relation has source ](https://www.ica.org/standards/RiC/ontology#agentHierarchicalRelationHasSource)**
   *
   * Connects an Agent Hierarchical Relation to one of the            hierarchically superior Agents
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:AgentHierarchicalRelation
   * @range       rico:Agent
   */
  public readonly agentHierarchicalRelationHasSource = this.toIri().concat('agentHierarchicalRelationHasSource')

  /**
   * **[rico:agent hierarchical relation has target ](https://www.ica.org/standards/RiC/ontology#agentHierarchicalRelationHasTarget)**
   *
   * Connects an Agent Hierarchical Relation to one of the            hierarchically inferior Agents
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:AgentHierarchicalRelation
   * @range       rico:Agent
   */
  public readonly agentHierarchicalRelationHasTarget = this.toIri().concat('agentHierarchicalRelationHasTarget')

  /**
   * **[rico:agent is connected to agent relation ](https://www.ica.org/standards/RiC/ontology#agentIsConnectedToAgentRelation)**
   *
   * Connects an Agent to an Agent Relation
   *
   * @type        property
   * @parent      rico:thingIsConnectedToRelation
   * @domain      rico:Agent
   * @range       rico:AgentToAgentRelation
   */
  public readonly agentIsConnectedToAgentRelation = this.toIri().concat('agentIsConnectedToAgentRelation')

  /**
   * **[rico:agent is source of agent control relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfAgentControlRelation)**
   *
   * Connects a controlling Agent to an Agent Control            Relation
   *
   * @type        property
   * @parent      rico:agentIsSourceOfAgentHierarchicalRelation
   * @domain      rico:Agent
   * @range       rico:AgentControlRelation
   */
  public readonly agentIsSourceOfAgentControlRelation = this.toIri().concat('agentIsSourceOfAgentControlRelation')

  /**
   * **[rico:agent is source of agent hierarchical relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfAgentHierarchicalRelation)**
   *
   * Connects a hierarchically superior Agent to an Agent            Hierarchical Relation
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Agent
   * @range       rico:AgentHierarchicalRelation
   */
  public readonly agentIsSourceOfAgentHierarchicalRelation = this.toIri().concat('agentIsSourceOfAgentHierarchicalRelation')

  /**
   * **[rico:agent is source of agent temporal relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfAgentTemporalRelation)**
   *
   * Connects a predecessor Agent to an Agent Temporal            Relation
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Agent
   * @range       rico:AgentTemporalRelation
   */
  public readonly agentIsSourceOfAgentTemporalRelation = this.toIri().concat('agentIsSourceOfAgentTemporalRelation')

  /**
   * **[rico:agent is source of authority relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfAuthorityRelation)**
   *
   * Connects an Agent thas has the authority, to an Authority            Relation
   *
   * @type        property
   * @parent      rico:thingIsSourceOfRelation
   * @domain      rico:Agent
   * @range       rico:AuthorityRelation
   */
  public readonly agentIsSourceOfAuthorityRelation = this.toIri().concat('agentIsSourceOfAuthorityRelation')

  /**
   * **[rico:agent is source of intellectual property rights relation
        ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfIntellectualPropertyRightsRelation)**
   *
   * Connects an Agent having the intellectual property rights, to an            Intellectual Property Rights Relation
   *
   * @type        property
   * @parent      rico:agentIsSourceOfAuthorityRelation
   * @domain      rico:Group or rico:Person or rico:Position
   * @range       rico:IntellectualPropertyRightsRelation
   */
  public readonly agentIsSourceOfIntellectualPropertyRightsRelation = this.toIri().concat('agentIsSourceOfIntellectualPropertyRightsRelation')

  /**
   * **[rico:agent is source of management relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfManagementRelation)**
   *
   * Connects a manager Agent to a Management Relation
   *
   * @type        property
   * @parent      rico:agentIsSourceOfAuthorityRelation
   * @domain      rico:Agent
   * @range       rico:ManagementRelation
   */
  public readonly agentIsSourceOfManagementRelation = this.toIri().concat('agentIsSourceOfManagementRelation')

  /**
   * **[rico:agent is source of ownership relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfOwnershipRelation)**
   *
   * Connects an owner Agent to an Ownership Relation
   *
   * @type        property
   * @parent      rico:agentIsSourceOfAuthorityRelation
   * @domain      rico:Group or rico:Person or rico:Position
   * @range       rico:OwnershipRelation
   */
  public readonly agentIsSourceOfOwnershipRelation = this.toIri().concat('agentIsSourceOfOwnershipRelation')

  /**
   * **[rico:agent is source of record resource holding relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfRecordResourceHoldingRelation)**
   *
   * Connects an Agent that holds a Record Resource or Instantiation,            to a Record Resource Holding Relation
   *
   * @type        property
   * @parent      rico:agentIsSourceOfManagementRelation
   * @domain      rico:Agent
   * @range       rico:RecordResourceHoldingRelation
   */
  public readonly agentIsSourceOfRecordResourceHoldingRelation = this.toIri().concat('agentIsSourceOfRecordResourceHoldingRelation')

  /**
   * **[rico:agent is target of accumulation relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfAccumulationRelation)**
   *
   * Connects one of the accumulating Agents to an Accumulation            Relation
   *
   * @type        property
   * @parent      rico:agentIsTargetOfAgentOriginationRelation
   * @domain      rico:Agent
   * @range       rico:AccumulationRelation
   */
  public readonly agentIsTargetOfAccumulationRelation = this.toIri().concat('agentIsTargetOfAccumulationRelation')

  /**
   * **[rico:agent is target of agent control relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfAgentControlRelation)**
   *
   * Connects one of the controlled Agents to an Agent Control            Relation
   *
   * @type        property
   * @parent      rico:agentIsTargetOfAgentHierarchicalRelation
   * @domain      rico:Agent
   * @range       rico:AgentControlRelation
   */
  public readonly agentIsTargetOfAgentControlRelation = this.toIri().concat('agentIsTargetOfAgentControlRelation')

  /**
   * **[rico:agent is target of agent hierarchical relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfAgentHierarchicalRelation)**
   *
   * Connects one of the hierarchically inferior Agents to an Agent            Hierarchical Relation
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Agent
   * @range       rico:AgentHierarchicalRelation
   */
  public readonly agentIsTargetOfAgentHierarchicalRelation = this.toIri().concat('agentIsTargetOfAgentHierarchicalRelation')

  /**
   * **[rico:agent is target of agent origination relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfAgentOriginationRelation)**
   *
   * Connects one of the Agents that created or accumulated the            Record resource or Instantiation, to an Agent Origination Relation
   *
   * @type        property
   * @parent      rico:agentOrActivityIsTargetOfProvenanceRelation
   * @domain      rico:Agent
   * @range       rico:AgentOriginationRelation
   */
  public readonly agentIsTargetOfAgentOriginationRelation = this.toIri().concat('agentIsTargetOfAgentOriginationRelation')

  /**
   * **[rico:agent is target of agent temporal relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfAgentTemporalRelation)**
   *
   * Connects a successor Agent to an Agent Temporal            Relation
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Agent
   * @range       rico:AgentTemporalRelation
   */
  public readonly agentIsTargetOfAgentTemporalRelation = this.toIri().concat('agentIsTargetOfAgentTemporalRelation')

  /**
   * **[rico:agent is target of authorship relation](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfAuthorshipRelation)**
   *
   * Connects a Person, Group or Position to an Authorship            Relation.
   *
   * @type        property
   * @parent      rico:agentIsTargetOfCreationRelation
   * @domain      rico:Group or rico:Person or rico:Position
   * @range       rico:AuthorshipRelation
   */
  public readonly agentIsTargetOfAuthorshipRelation = this.toIri().concat('agentIsTargetOfAuthorshipRelation')

  /**
   * **[rico:agent is target of creation relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfCreationRelation)**
   *
   * Connects a creator Agent to a Creation Relation
   *
   * @type        property
   * @parent      rico:agentIsTargetOfAgentOriginationRelation
   * @domain      rico:Agent
   * @range       rico:CreationRelation
   */
  public readonly agentIsTargetOfCreationRelation = this.toIri().concat('agentIsTargetOfCreationRelation')

  /**
   * **[rico:agent is target of mandate relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfMandateRelation)**
   *
   * Connects a mandated Agent to a Mandate Relation
   *
   * @type        property
   * @parent      rico:thingIsTargetOfRuleRelation
   * @domain      rico:Agent
   * @range       rico:MandateRelation
   */
  public readonly agentIsTargetOfMandateRelation = this.toIri().concat('agentIsTargetOfMandateRelation')

  /**
   * **[rico:agent is target of performance relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfPerformanceRelation)**
   *
   * Connects an Agent to a Performance Relation
   *
   * @type        property
   * @parent      rico:thingIsTargetOfRelation
   * @domain      rico:Agent
   * @range       rico:PerformanceRelation
   */
  public readonly agentIsTargetOfPerformanceRelation = this.toIri().concat('agentIsTargetOfPerformanceRelation')

  /**
   * **[rico:agent or activity is target of provenance relation ](https://www.ica.org/standards/RiC/ontology#agentOrActivityIsTargetOfProvenanceRelation)**
   *
   * Connects an Agent or Activity that is the provenance of a Record            resource or Instantiation, to a Provenance Relation
   *
   * @type        property
   * @parent      rico:thingIsTargetOfRelation
   * @domain      rico:Activity or rico:Agent
   * @range       rico:ProvenanceRelation
   */
  public readonly agentOrActivityIsTargetOfProvenanceRelation = this.toIri().concat('agentOrActivityIsTargetOfProvenanceRelation')

  /**
   * **[rico:agent origination relation has source ](https://www.ica.org/standards/RiC/ontology#agentOriginationRelationHasSource)**
   *
   * Connects an Agent Origination Relation to one of the resulting            Record Resource or Instantiation
   *
   * @type        property
   * @parent      rico:provenanceRelationHasSource
   * @domain      rico:AgentOriginationRelation
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly agentOriginationRelationHasSource = this.toIri().concat('agentOriginationRelationHasSource')

  /**
   * **[rico:agent origination relation has target ](https://www.ica.org/standards/RiC/ontology#agentOriginationRelationHasTarget)**
   *
   * Connects an Agent Origination Relation to one of the creating or            accumulating Agents
   *
   * @type        property
   * @parent      rico:provenanceRelationHasTarget
   * @domain      rico:AgentOriginationRelation
   * @range       rico:Agent
   */
  public readonly agentOriginationRelationHasTarget = this.toIri().concat('agentOriginationRelationHasTarget')

  /**
   * **[rico:agent relation connects ](https://www.ica.org/standards/RiC/ontology#agentRelationConnects)**
   *
   * Connects an Agent Relation to one of the involved            Agents
   *
   * @type        property
   * @parent      rico:relationConnects
   * @domain      rico:AgentToAgentRelation
   * @range       rico:Agent
   */
  public readonly agentRelationConnects = this.toIri().concat('agentRelationConnects')

  /**
   * **[rico:agent temporal relation has source ](https://www.ica.org/standards/RiC/ontology#agentTemporalRelationHasSource)**
   *
   * Connects an Agent Temporal Relation to one of the predecessor            Agents
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:AgentTemporalRelation
   * @range       rico:Agent
   */
  public readonly agentTemporalRelationHasSource = this.toIri().concat('agentTemporalRelationHasSource')

  /**
   * **[rico:agent temporal relation has target ](https://www.ica.org/standards/RiC/ontology#agentTemporalRelationHasTarget)**
   *
   * Connects an Agent Temporal Relation to one of the successor            Agents
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:AgentTemporalRelation
   * @range       rico:Agent
   */
  public readonly agentTemporalRelationHasTarget = this.toIri().concat('agentTemporalRelationHasTarget')

  /**
   * **[rico:altimetric system](https://www.ica.org/standards/RiC/ontology#altimetricSystem)**
   *
   * Reference system used for altitude
   *
   * @type        property
   * @parent      rico:referenceSystem
   * @domain      rico:Coordinates
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly altimetricSystem = this.toIri().concat('altimetricSystem')

  /**
   * **[rico:altitude](https://www.ica.org/standards/RiC/ontology#altitude)**
   *
   * The height of a Place above a reference level, especially above            sea level.
   *
   * @type        property
   * @parent      rico:measure
   * @domain      rico:Coordinates
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly altitude = this.toIri().concat('altitude')

  /**
   * **[rico:appellation is source of appellation relation ](https://www.ica.org/standards/RiC/ontology#appellationIsSourceOfAppellationRelation)**
   *
   * Connects an Appellation to an Appellation            Relation
   *
   * @type        property
   * @parent      rico:thingIsSourceOfRelation
   * @domain      rico:Appellation
   * @range       rico:AppellationRelation
   */
  public readonly appellationIsSourceOfAppellationRelation = this.toIri().concat('appellationIsSourceOfAppellationRelation')

  /**
   * **[rico:appellation relation has source ](https://www.ica.org/standards/RiC/ontology#appellationRelationHasSource)**
   *
   * Connects an Appellation Relation to the concerned            Appellation
   *
   * @type        property
   * @parent      rico:relationHasSource
   * @domain      rico:AppellationRelation
   * @range       rico:Appellation
   */
  public readonly appellationRelationHasSource = this.toIri().concat('appellationRelationHasSource')

  /**
   * **[rico:appellation relation has target ](https://www.ica.org/standards/RiC/ontology#appellationRelationHasTarget)**
   *
   * Connects an Appellation Relation to one of the designated            Things
   *
   * @type        property
   * @parent      rico:relationHasTarget
   * @domain      rico:AppellationRelation
   * @range       rico:Thing
   */
  public readonly appellationRelationHasTarget = this.toIri().concat('appellationRelationHasTarget')

  /**
   * **[rico:as concerns activity ](https://www.ica.org/standards/RiC/ontology#asConcernsActivity)**
   *
   * Connects an Agent Temporal Relation or Mandate Relation, to an            Activity that is, either transferred from an Agent to another one, or assigned by a            Mandate to an Agent.
   *
   * @type        property
   * @parent      rico:relationHasContext
   * @domain      rico:AgentTemporalRelation or rico:MandateRelation
   * @range       rico:Activity
   */
  public readonly asConcernsActivity = this.toIri().concat('asConcernsActivity')

  /**
   * **[rico:authenticity note](https://www.ica.org/standards/RiC/ontology#authenticityNote)**
   *
   * Description of evidences that the Record Resource or            Instantiation is what it purports to be, was created or sent by the said Agent, at the            said time and has not been tampered or corrupted.
   *
   * @type        property
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly authenticityNote = this.toIri().concat('authenticityNote')

  /**
   * **[rico:authority relation has source ](https://www.ica.org/standards/RiC/ontology#authorityRelationHasSource)**
   *
   * Connects an Authority Relation to an Agent that has the            authority
   *
   * @type        property
   * @parent      rico:relationHasSource
   * @domain      rico:AuthorityRelation
   * @range       rico:Agent
   */
  public readonly authorityRelationHasSource = this.toIri().concat('authorityRelationHasSource')

  /**
   * **[rico:authority relation has target ](https://www.ica.org/standards/RiC/ontology#authorityRelationHasTarget)**
   *
   * Connects an Authority Relation to a Thing over which the            Authority is performed
   *
   * @type        property
   * @parent      rico:relationHasTarget
   * @domain      rico:AuthorityRelation
   * @range       rico:Thing
   */
  public readonly authorityRelationHasTarget = this.toIri().concat('authorityRelationHasTarget')

  /**
   * **[rico:authorized by ](https://www.ica.org/standards/RiC/ontology#authorizedBy)**
   *
   * Inverse of 'authorizes' object property
   *
   * @type        property
   * @parent      rico:isAssociatedWithRule
   * @domain      rico:Agent
   * @range       rico:Mandate
   */
  public readonly authorizedBy = this.toIri().concat('authorizedBy')

  /**
   * **[rico:authorizes](https://www.ica.org/standards/RiC/ontology#authorizes)**
   *
   * Connects a Mandate to the Agent that the Mandate gives the            authority or competencies to act.
   *
   * @type        property
   * @parent      rico:isRuleAssociatedWith
   * @domain      rico:Mandate
   * @range       rico:Agent
   */
  public readonly authorizes = this.toIri().concat('authorizes')

  /**
   * **[rico:authorizing agent ](https://www.ica.org/standards/RiC/ontology#authorizingAgent)**
   *
   * Connects a Mandate Relation to an Agent that assigns the            Mandate.
   *
   * @type        property
   * @parent      rico:relationHasContext
   * @domain      rico:MandateRelation
   * @range       rico:Agent
   */
  public readonly authorizingAgent = this.toIri().concat('authorizingAgent')

  /**
   * **[rico:authorizing mandate](https://www.ica.org/standards/RiC/ontology#authorizingMandate)**
   *
   * Information on a Mandate that authorizes an Agent to perform an            Activity.
   *
   * @type        property
   * @parent      rico:ruleFollowed
   * @domain      rico:Agent
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly authorizingMandate = this.toIri().concat('authorizingMandate')

  /**
   * **[rico:authorship relation has source](https://www.ica.org/standards/RiC/ontology#authorshipRelationHasSource)**
   *
   * Connects an Authorship Relation to one of the Records involved            in the relation.
   *
   * @type        property
   * @parent      rico:creationRelationHasSource
   * @domain      rico:AuthorshipRelation
   * @range       rico:Record
   */
  public readonly authorshipRelationHasSource = this.toIri().concat('authorshipRelationHasSource')

  /**
   * **[rico:authorship relation has target](https://www.ica.org/standards/RiC/ontology#authorshipRelationHasTarget)**
   *
   * Connects an Authorship Relation to one of the author Person,            Group or Position.
   *
   * @type        property
   * @parent      rico:creationRelationHasTarget
   * @domain      rico:AuthorshipRelation
   * @range       rico:Group or rico:Person or rico:Position
   */
  public readonly authorshipRelationHasTarget = this.toIri().concat('authorshipRelationHasTarget')

  /**
   * **[rico:beginning date](https://www.ica.org/standards/RiC/ontology#beginningDate)**
   *
   * Date at which something began.
   *
   * @type        property
   * @parent      rico:date
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly beginningDate = this.toIri().concat('beginningDate')

  /**
   * **[rico:birth date](https://www.ica.org/standards/RiC/ontology#birthDate)**
   *
   * Date at which a Person was born.
   *
   * @type        property
   * @parent      rico:beginningDate
   * @domain      rico:Person
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly birthDate = this.toIri().concat('birthDate')

  /**
   * **[rico:calendar](https://www.ica.org/standards/RiC/ontology#calendar)**
   *
   * Used system of reckoning time in which the beginning, length,            and divisions of a year are defined, sometimes along with multiyear            cycles.
   *
   * @type        property
   * @parent      rico:dateStandard
   * @domain      rico:Date
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly calendar = this.toIri().concat('calendar')

  /**
   * **[rico:carrier extent](https://www.ica.org/standards/RiC/ontology#carrierExtent)**
   *
   * Number of physical units and/or physical dimensions of the            carrier of a record resource instantiation. Various carriers, depending on specific            needs, may have more than one relevant dimension. In some cases, indicating the number            of physical units may be sufficient, while in other case, relevant dimensions should be            used in order to characterize the carrier.
   *
   * @type        property
   * @parent      rico:physicalOrLogicalExtent
   * @domain      rico:Instantiation
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly carrierExtent = this.toIri().concat('carrierExtent')

  /**
   * **[rico:certainty](https://www.ica.org/standards/RiC/ontology#certainty)**
   *
   * Qualifies the level of certitude of the accuracy of a Date, an            Event or a Relation.
   *
   * @type        property
   * @domain      rico:Date or rico:Event or rico:Relation
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly certainty = this.toIri().concat('certainty')

  /**
   * **[rico:child relation has source ](https://www.ica.org/standards/RiC/ontology#childRelationHasSource)**
   *
   * Connects a Child Relation to a parent Person
   *
   * @type        property
   * @parent      rico:descendanceRelationHasSource
   * @domain      rico:ChildRelation
   * @range       rico:Person
   */
  public readonly childRelationHasSource = this.toIri().concat('childRelationHasSource')

  /**
   * **[rico:child relation has target ](https://www.ica.org/standards/RiC/ontology#childRelationHasTarget)**
   *
   * Connects a Child Relation to a child Person
   *
   * @type        property
   * @parent      rico:descendanceRelationHasTarget
   * @domain      rico:ChildRelation
   * @range       rico:Person
   */
  public readonly childRelationHasTarget = this.toIri().concat('childRelationHasTarget')

  /**
   * **[rico:classification](https://www.ica.org/standards/RiC/ontology#classification)**
   *
   * A term, number or alphanumeric string that is usually taken from            an external classification vocabulary or scheme that qualifies the Record            Resource.
   *
   * @type        property
   * @domain      rico:RecordResource
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly classification = this.toIri().concat('classification')

  /**
   * **[rico:close to](https://www.ica.org/standards/RiC/ontology#closeTo)**
   *
   * An annotation property for recording a possible mapping to a            component in another model or ontology
   *
   * @type        property
   * @parent      http://www.w3.org/2000/01/rdf-schema#comment
   */
  public readonly closeTo = this.toIri().concat('closeTo')

  /**
   * **[rico:conditions of access](https://www.ica.org/standards/RiC/ontology#conditionsOfAccess)**
   *
   * Terms and circumstances affecting the availability of a Record            Resource for consultation. Such conditions may originate in laws, regulations and            policies, including those pertaining to privacy and security concerns or restrictions;            they may concern a specific Instantiation of a Record Resource, for example, conditions            that require preservation treatment; or they may specify the software or hardware            necessary to access the Instantiation.
   *
   * @type        property
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly conditionsOfAccess = this.toIri().concat('conditionsOfAccess')

  /**
   * **[rico:conditions of use](https://www.ica.org/standards/RiC/ontology#conditionsOfUse)**
   *
   * Terms and circumstances affecting the use of a Record Resource            after access has been provided. Includes conditions governing reproduction of the Record            Resource under applicable copyright (intellectual property) and/or property legislation,            and of the Instantiation, due to conservation status.
   *
   * @type        property
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly conditionsOfUse = this.toIri().concat('conditionsOfUse')

  /**
   * **[rico:contains or contained](https://www.ica.org/standards/RiC/ontology#containsOrContained)**
   *
   * Connects a Place to a region that is or was within            it.
   *
   * @type        property
   * @parent      rico:hasOrHadPart
   * @domain      rico:Place
   * @range       rico:Place
   */
  public readonly containsOrContained = this.toIri().concat('containsOrContained')

  /**
   * **[rico:correspondence relation connects ](https://www.ica.org/standards/RiC/ontology#correspondenceRelationConnects)**
   *
   * Connects a Correspondence Relation to one of the Persons            involved
   *
   * @type        property
   * @parent      rico:knowingRelationConnects
   * @domain      rico:CorrespondenceRelation
   * @range       rico:Person
   */
  public readonly correspondenceRelationConnects = this.toIri().concat('correspondenceRelationConnects')

  /**
   * **[rico:creation date](https://www.ica.org/standards/RiC/ontology#creationDate)**
   *
   * Date at which an entity was created.
   *
   * @type        property
   * @parent      rico:beginningDate
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly creationDate = this.toIri().concat('creationDate')

  /**
   * **[rico:creation relation has source ](https://www.ica.org/standards/RiC/ontology#creationRelationHasSource)**
   *
   * Connects a Creation Relation to one of the created Record            Resources or Instantiations
   *
   * @type        property
   * @parent      rico:agentOriginationRelationHasSource
   * @domain      rico:CreationRelation
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly creationRelationHasSource = this.toIri().concat('creationRelationHasSource')

  /**
   * **[rico:creation relation has target ](https://www.ica.org/standards/RiC/ontology#creationRelationHasTarget)**
   *
   * Connects a Creation Relation to one of the creator            Agents
   *
   * @type        property
   * @parent      rico:agentOriginationRelationHasTarget
   * @domain      rico:CreationRelation
   * @range       rico:Agent
   */
  public readonly creationRelationHasTarget = this.toIri().concat('creationRelationHasTarget')

  /**
   * **[rico:creation with role ](https://www.ica.org/standards/RiC/ontology#creationWithRole)**
   *
   * Connects a Creation Relation to the Role Type that the creator            Agent(s) has in the creation process
   *
   * @type        property
   * @parent      rico:relationHasContext
   * @domain      rico:CreationRelation
   * @range       rico:RoleType
   */
  public readonly creationWithRole = this.toIri().concat('creationWithRole')

  /**
   * **[rico:date](https://www.ica.org/standards/RiC/ontology#date)**
   *
   * Chronological information associated with an entity that            contributes to its identification and contextualization.
   *
   * @type        property
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly date = this.toIri().concat('date')

  /**
   * **[rico:date qualifier](https://www.ica.org/standards/RiC/ontology#dateQualifier)**
   *
   * Indicates the precision of a date. It specifies if, and to what            extent, the value is an estimation.
   *
   * @type        property
   * @domain      rico:Date
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly dateQualifier = this.toIri().concat('dateQualifier')

  /**
   * **[rico:date standard](https://www.ica.org/standards/RiC/ontology#dateStandard)**
   *
   * Identifier of the standard of the Normalized            date.
   *
   * @type        property
   * @parent      rico:referenceSystem
   * @domain      rico:Date
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly dateStandard = this.toIri().concat('dateStandard')

  /**
   * **[rico:death date](https://www.ica.org/standards/RiC/ontology#deathDate)**
   *
   * Date at which a Person died.
   *
   * @type        property
   * @parent      rico:endDate
   * @domain      rico:Person
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly deathDate = this.toIri().concat('deathDate')

  /**
   * **[rico:deletion date](https://www.ica.org/standards/RiC/ontology#deletionDate)**
   *
   * Date at which an entity was deleted.
   *
   * @type        property
   * @parent      rico:endDate
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly deletionDate = this.toIri().concat('deletionDate')

  /**
   * **[rico:derivation relation has source ](https://www.ica.org/standards/RiC/ontology#derivationRelationHasSource)**
   *
   * Connects a Derivation Relation to the Instantiation from which            one or more Instantiations is derived.
   *
   * @type        property
   * @parent      rico:instantiationToInstantiationRelationConnects
   * @domain      rico:DerivationRelation
   * @range       rico:Instantiation
   */
  public readonly derivationRelationHasSource = this.toIri().concat('derivationRelationHasSource')

  /**
   * **[rico:derivation relation has target ](https://www.ica.org/standards/RiC/ontology#derivationRelationHasTarget)**
   *
   * Connects a Derivation Relation to one of the derived            Instantiations
   *
   * @type        property
   * @parent      rico:instantiationToInstantiationRelationConnects
   * @domain      rico:DerivationRelation
   * @range       rico:Instantiation
   */
  public readonly derivationRelationHasTarget = this.toIri().concat('derivationRelationHasTarget')

  /**
   * **[rico:descendance relation has source ](https://www.ica.org/standards/RiC/ontology#descendanceRelationHasSource)**
   *
   * Connects a Descendance Relation to one of the ancestor            Persons
   *
   * @type        property
   * @parent      rico:agentTemporalRelationHasSource
   * @domain      rico:DescendanceRelation
   * @range       rico:Person
   */
  public readonly descendanceRelationHasSource = this.toIri().concat('descendanceRelationHasSource')

  /**
   * **[rico:descendance relation has target ](https://www.ica.org/standards/RiC/ontology#descendanceRelationHasTarget)**
   *
   * Connects a Descendance Relation to one of the descendant            Persons
   *
   * @type        property
   * @parent      rico:agentTemporalRelationHasTarget
   * @domain      rico:DescendanceRelation
   * @range       rico:Person
   */
  public readonly descendanceRelationHasTarget = this.toIri().concat('descendanceRelationHasTarget')

  /**
   * **[rico:describes or described](https://www.ica.org/standards/RiC/ontology#describesOrDescribed)**
   *
   * Connects a Record Resource to a Thing that it            describes.
   *
   * @type        property
   * @parent      rico:hasOrHadSubject
   * @domain      rico:RecordResource
   * @range       rico:Thing
   */
  public readonly describesOrDescribed = this.toIri().concat('describesOrDescribed')

  /**
   * **[rico:descriptive note](https://www.ica.org/standards/RiC/ontology#descriptiveNote)**
   *
   * Descriptive information about an entity that is not otherwise            addressed.
   *
   * @type        property
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly descriptiveNote = this.toIri().concat('descriptiveNote')

  /**
   * **[rico:documented by](https://www.ica.org/standards/RiC/ontology#documentedBy)**
   *
   * Inverse of 'documents' object property.
   *
   * @type        property
   * @parent      rico:resultsOrResultedIn
   * @domain      rico:Activity
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly documentedBy = this.toIri().concat('documentedBy')

  /**
   * **[rico:documents](https://www.ica.org/standards/RiC/ontology#documents)**
   *
   * Connects a Record Resource or an Instantiation to the Activity            that generates the Record Resource or Instantiation.
   *
   * @type        property
   * @parent      rico:resultsOrResultedFrom
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:Activity
   */
  public readonly documents = this.toIri().concat('documents')

  /**
   * **[rico:end date](https://www.ica.org/standards/RiC/ontology#endDate)**
   *
   * Date at which something ended.
   *
   * @type        property
   * @parent      rico:date
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly endDate = this.toIri().concat('endDate')

  /**
   * **[rico:event is source of event relation ](https://www.ica.org/standards/RiC/ontology#eventIsSourceOfEventRelation)**
   *
   * Connects an Event to an Event Relation
   *
   * @type        property
   * @parent      rico:thingIsSourceOfRelation
   * @domain      rico:Event
   * @range       rico:EventRelation
   */
  public readonly eventIsSourceOfEventRelation = this.toIri().concat('eventIsSourceOfEventRelation')

  /**
   * **[rico:event relation has source ](https://www.ica.org/standards/RiC/ontology#eventRelationHasSource)**
   *
   * Connects an Event Relation to an Event
   *
   * @type        property
   * @parent      rico:relationHasSource
   * @domain      rico:EventRelation
   * @range       rico:Event
   */
  public readonly eventRelationHasSource = this.toIri().concat('eventRelationHasSource')

  /**
   * **[rico:event relation has target ](https://www.ica.org/standards/RiC/ontology#eventRelationHasTarget)**
   *
   * Connects an Event Relation to an associated Thing
   *
   * @type        property
   * @parent      rico:relationHasTarget
   * @domain      rico:EventRelation
   * @range       rico:Thing
   */
  public readonly eventRelationHasTarget = this.toIri().concat('eventRelationHasTarget')

  /**
   * **[rico:exists or existed in](https://www.ica.org/standards/RiC/ontology#existsOrExistedIn)**
   *
   * Connects a Position to a Group in which that Position exists or            existed, or that is defined by that Group�s organizational structure.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Position
   * @range       rico:Group
   */
  public readonly existsOrExistedIn = this.toIri().concat('existsOrExistedIn')

  /**
   * **[rico:expressed date](https://www.ica.org/standards/RiC/ontology#expressedDate)**
   *
   * Natural language expression of a Date.
   *
   * @type        property
   * @parent      rico:textualValue
   * @domain      rico:Date
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly expressedDate = this.toIri().concat('expressedDate')

  /**
   * **[rico:expresses or expressed](https://www.ica.org/standards/RiC/ontology#expressesOrExpressed)**
   *
   * Inverse of 'is or was expressed by' object            property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithRule
   * @domain      rico:RecordResource
   * @range       rico:Rule
   */
  public readonly expressesOrExpressed = this.toIri().concat('expressesOrExpressed')

  /**
   * **[rico:family relation connects ](https://www.ica.org/standards/RiC/ontology#familyRelationConnects)**
   *
   * Connects a Family Relation to a Person.
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:FamilyRelation
   * @range       rico:Person
   */
  public readonly familyRelationConnects = this.toIri().concat('familyRelationConnects')

  /**
   * **[rico:follows in time](https://www.ica.org/standards/RiC/ontology#followsInTime)**
   *
   * Inverse of 'precedes in time' object property.
   *
   * @type        property
   * @parent      rico:followsOrFollowed
   * @domain      rico:Thing
   * @range       rico:Thing
   */
  public readonly followsInTime = this.toIri().concat('followsInTime')

  /**
   * **[rico:follows or followed](https://www.ica.org/standards/RiC/ontology#followsOrFollowed)**
   *
   * Inverse of 'precedesOrPreceded' object property.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Thing
   */
  public readonly followsOrFollowed = this.toIri().concat('followsOrFollowed')

  /**
   * **[rico:functional equivalence relation connects ](https://www.ica.org/standards/RiC/ontology#functionalEquivalenceRelationConnects)**
   *
   * Connects a Functional Equivalence Relation to one of the            functionally equivalent Instantiations.
   *
   * @type        property
   * @parent      rico:instantiationToInstantiationRelationConnects
   * @domain      rico:FunctionalEquivalenceRelation
   * @range       rico:Instantiation
   */
  public readonly functionalEquivalenceRelationConnects = this.toIri().concat('functionalEquivalenceRelationConnects')

  /**
   * **[rico:geodesic system](https://www.ica.org/standards/RiC/ontology#geodesicSystem)**
   *
   * Reference system used for geographical            coordinates.
   *
   * @type        property
   * @parent      rico:referenceSystem
   * @domain      rico:Coordinates
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly geodesicSystem = this.toIri().concat('geodesicSystem')

  /**
   * **[rico:geographical coordinates](https://www.ica.org/standards/RiC/ontology#geographicalCoordinates)**
   *
   * Longitudinal and latitudinal information of a            Place.
   *
   * @type        property
   * @domain      rico:Place
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly geographicalCoordinates = this.toIri().concat('geographicalCoordinates')

  /**
   * **[rico:group is source of group subdivision relation ](https://www.ica.org/standards/RiC/ontology#groupIsSourceOfGroupSubdivisionRelation)**
   *
   * Connects the Group that has at least a subdivision, to a Group            Subdivision Relation
   *
   * @type        property
   * @parent      rico:agentIsSourceOfAgentHierarchicalRelation
   * @domain      rico:Group
   * @range       rico:GroupSubdivisionRelation
   */
  public readonly groupIsSourceOfGroupSubdivisionRelation = this.toIri().concat('groupIsSourceOfGroupSubdivisionRelation')

  /**
   * **[rico:group is source of membership relation ](https://www.ica.org/standards/RiC/ontology#groupIsSourceOfMembershipRelation)**
   *
   * Connects the Group (that has one to many members) to a            Membership Relation
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Group
   * @range       rico:MembershipRelation
   */
  public readonly groupIsSourceOfMembershipRelation = this.toIri().concat('groupIsSourceOfMembershipRelation')

  /**
   * **[rico:group is target of group subdivision relation ](https://www.ica.org/standards/RiC/ontology#groupIsTargetOfGroupSubdivisionRelation)**
   *
   * Connects a Group that is a subdivision, to a Group Subdivision            Relation
   *
   * @type        property
   * @parent      rico:agentIsTargetOfAgentHierarchicalRelation
   * @domain      rico:Group
   * @range       rico:GroupSubdivisionRelation
   */
  public readonly groupIsTargetOfGroupSubdivisionRelation = this.toIri().concat('groupIsTargetOfGroupSubdivisionRelation')

  /**
   * **[rico:group is target of leadership relation ](https://www.ica.org/standards/RiC/ontology#groupIsTargetOfLeadershipRelation)**
   *
   * Connects a Group (which has a leader) to a Leadership            Relation
   *
   * @type        property
   * @parent      rico:agentIsTargetOfAgentControlRelation
   * @domain      rico:Group
   * @range       rico:LeadershipRelation
   */
  public readonly groupIsTargetOfLeadershipRelation = this.toIri().concat('groupIsTargetOfLeadershipRelation')

  /**
   * **[rico:group is target of position to group relation ](https://www.ica.org/standards/RiC/ontology#groupIsTargetOfPositionToGroupRelation)**
   *
   * Connects the Group (in which a Position exists) to a Position To            Group Relation
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Group
   * @range       rico:PositionToGroupRelation
   */
  public readonly groupIsTargetOfPositionToGroupRelation = this.toIri().concat('groupIsTargetOfPositionToGroupRelation')

  /**
   * **[rico:group subdivision relation has source ](https://www.ica.org/standards/RiC/ontology#groupSubdivisionRelationHasSource)**
   *
   * Connects a Group Subdivision Relation to the Group that has            subdivisions
   *
   * @type        property
   * @parent      rico:agentHierarchicalRelationHasSource
   * @domain      rico:GroupSubdivisionRelation
   * @range       rico:Group
   */
  public readonly groupSubdivisionRelationHasSource = this.toIri().concat('groupSubdivisionRelationHasSource')

  /**
   * **[rico:group subdivision relation has target ](https://www.ica.org/standards/RiC/ontology#groupSubdivisionRelationHasTarget)**
   *
   * Connects a Group Subdivision Relation to one of the Groups that            is a subdivision
   *
   * @type        property
   * @parent      rico:agentHierarchicalRelationHasTarget
   * @domain      rico:GroupSubdivisionRelation
   * @range       rico:Group
   */
  public readonly groupSubdivisionRelationHasTarget = this.toIri().concat('groupSubdivisionRelationHasTarget')

  /**
   * **[rico:has accumulator](https://www.ica.org/standards/RiC/ontology#hasAccumulator)**
   *
   * Connects a Record Resource or an Instantiation to the Agent that            accumulates it, be it intentionally (collecting) or not (receiving in the course of its            activities).
   *
   * @type        property
   * @parent      rico:hasProvenance
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:Agent
   */
  public readonly hasAccumulator = this.toIri().concat('hasAccumulator')

  /**
   * **[rico:has activity type](https://www.ica.org/standards/RiC/ontology#hasActivityType)**
   *
   * Connects an Activity to an Activity Type that categorizes            it.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Activity
   * @range       rico:ActivityType
   */
  public readonly hasActivityType = this.toIri().concat('hasActivityType')

  /**
   * **[rico:has addressee](https://www.ica.org/standards/RiC/ontology#hasAddressee)**
   *
   * Connects a Record Resource or an Instantiation to the Agent that            it is addressed to.
   *
   * @type        property
   * @parent      rico:hasProvenance
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:Agent
   */
  public readonly hasAddressee = this.toIri().concat('hasAddressee')

  /**
   * **[rico:has ancestor](https://www.ica.org/standards/RiC/ontology#hasAncestor)**
   *
   * Inverse of 'has descendant' object property.
   *
   * @type        property
   * @parent      rico:hasFamilyAssociationWith
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly hasAncestor = this.toIri().concat('hasAncestor')

  /**
   * **[rico:has author](https://www.ica.org/standards/RiC/ontology#hasAuthor)**
   *
   * Connects a Record to the Group, Person or Position that is            responsible for conceiving and formulating the information contained in the            Record.
   *
   * @type        property
   * @parent      rico:hasCreator
   * @domain      rico:Record
   * @range       rico:Group or rico:Person or rico:Position
   */
  public readonly hasAuthor = this.toIri().concat('hasAuthor')

  /**
   * **[rico:has beginning date ](https://www.ica.org/standards/RiC/ontology#hasBeginningDate)**
   *
   * Inverse of 'is beginning date of' object property
   *
   * @type        property
   * @parent      rico:isAssociatedWithDate
   * @domain      rico:Thing
   * @range       rico:Date
   */
  public readonly hasBeginningDate = this.toIri().concat('hasBeginningDate')

  /**
   * **[rico:has birth date ](https://www.ica.org/standards/RiC/ontology#hasBirthDate)**
   *
   * Inverse of 'is birth date of' object property
   *
   * @type        property
   * @parent      rico:hasBeginningDate
   * @domain      rico:Person
   * @range       rico:Date
   */
  public readonly hasBirthDate = this.toIri().concat('hasBirthDate')

  /**
   * **[rico:has carrier type](https://www.ica.org/standards/RiC/ontology#hasCarrierType)**
   *
   * Connects an Instantiation to a Carrier Type which categorizes            its carrier.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Instantiation
   * @range       rico:CarrierType
   */
  public readonly hasCarrierType = this.toIri().concat('hasCarrierType')

  /**
   * **[rico:has child](https://www.ica.org/standards/RiC/ontology#hasChild)**
   *
   * Connects a Person to one of their children.
   *
   * @type        property
   * @parent      rico:hasDescendant
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly hasChild = this.toIri().concat('hasChild')

  /**
   * **[rico:has collector](https://www.ica.org/standards/RiC/ontology#hasCollector)**
   *
   * Connects a Record Resource or an Instantiation to the Agent that            collects it intentionally (is a collector).
   *
   * @type        property
   * @parent      rico:hasAccumulator
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:Agent
   */
  public readonly hasCollector = this.toIri().concat('hasCollector')

  /**
   * **[rico:has content of type](https://www.ica.org/standards/RiC/ontology#hasContentOfType)**
   *
   * Connects a Record or a Record Part to a Content Type which            categorizes its content.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Record or rico:RecordPart
   * @range       rico:ContentType
   */
  public readonly hasContentOfType = this.toIri().concat('hasContentOfType')

  /**
   * **[rico:has copy ](https://www.ica.org/standards/RiC/ontology#hasCopy)**
   *
   * Connects a Record Resource to a copy of that Record            Resource.
   *
   * @type        property
   * @parent      rico:hasGeneticLinkToRecordResource
   * @domain      rico:RecordResource
   * @range       rico:RecordResource
   */
  public readonly hasCopy = this.toIri().concat('hasCopy')

  /**
   * **[rico:has creator](https://www.ica.org/standards/RiC/ontology#hasCreator)**
   *
   * Connects a Record Resource or an Instantiation to an Agent that            is either responsible for all or some of the content of the Record Resource or is a            contributor to the genesis or production of an Instantiation.
   *
   * @type        property
   * @parent      rico:hasProvenance
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:Agent
   */
  public readonly hasCreator = this.toIri().concat('hasCreator')

  /**
   * **[rico:has death date ](https://www.ica.org/standards/RiC/ontology#hasDeathDate)**
   *
   * Inverse of 'is death date of' object property
   *
   * @type        property
   * @parent      rico:hasEndDate
   * @domain      rico:Person
   * @range       rico:Date
   */
  public readonly hasDeathDate = this.toIri().concat('hasDeathDate')

  /**
   * **[rico:has derived instantiation ](https://www.ica.org/standards/RiC/ontology#hasDerivedInstantiation)**
   *
   * Connects an Instantiation to an Instantiation that is derived            from it.
   *
   * @type        property
   * @parent      rico:isInstantiationAssociatedWithInstantiation
   * @domain      rico:Instantiation
   * @range       rico:Instantiation
   */
  public readonly hasDerivedInstantiation = this.toIri().concat('hasDerivedInstantiation')

  /**
   * **[rico:has descendant](https://www.ica.org/standards/RiC/ontology#hasDescendant)**
   *
   * Connects a Person to one of their descendants.
   *
   * @type        property
   * @parent      rico:hasFamilyAssociationWith
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly hasDescendant = this.toIri().concat('hasDescendant')

  /**
   * **[rico:has documentary form type](https://www.ica.org/standards/RiC/ontology#hasDocumentaryFormType)**
   *
   * Connects a Record or Record Part to its Documentary Form            Type.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Record or rico:RecordPart
   * @range       rico:DocumentaryFormType
   */
  public readonly hasDocumentaryFormType = this.toIri().concat('hasDocumentaryFormType')

  /**
   * **[rico:has draft ](https://www.ica.org/standards/RiC/ontology#hasDraft)**
   *
   * Inverse of 'is draft of' object property.
   *
   * @type        property
   * @parent      rico:followsInTime
   * @domain      rico:Record or rico:RecordPart
   * @range       rico:Record or rico:RecordPart
   */
  public readonly hasDraft = this.toIri().concat('hasDraft')

  /**
   * **[rico:has end date ](https://www.ica.org/standards/RiC/ontology#hasEndDate)**
   *
   * Inverse of 'is end date of' object property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithDate
   * @domain      rico:Thing
   * @range       rico:Date
   */
  public readonly hasEndDate = this.toIri().concat('hasEndDate')

  /**
   * **[rico:has event type](https://www.ica.org/standards/RiC/ontology#hasEventType)**
   *
   * Connects an Event to an Event Type which categorizes            it.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Event
   * @range       rico:EventType
   */
  public readonly hasEventType = this.toIri().concat('hasEventType')

  /**
   * **[rico:has extent](https://www.ica.org/standards/RiC/ontology#hasExtent)**
   *
   * Connects a Record Resource or Instantiation to an Extent
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:Extent
   */
  public readonly hasExtent = this.toIri().concat('hasExtent')

  /**
   * **[rico:has extent type](https://www.ica.org/standards/RiC/ontology#hasExtentType)**
   *
   * Connects an Extent to an Extent Type that categorizes what is being            measured.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Extent
   * @range       rico:ExtentType
   */
  public readonly hasExtentType = this.toIri().concat('hasExtentType')

  /**
   * **[rico:has family association with](https://www.ica.org/standards/RiC/ontology#hasFamilyAssociationWith)**
   *
   * Connects two Persons that have some type of family link, i.e.            belong to the same family. This relation is symmetric.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly hasFamilyAssociationWith = this.toIri().concat('hasFamilyAssociationWith')

  /**
   * **[rico:has family type](https://www.ica.org/standards/RiC/ontology#hasFamilyType)**
   *
   * Connects a Family to a Family Type that categorizes            it.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Family
   * @range       rico:FamilyType
   */
  public readonly hasFamilyType = this.toIri().concat('hasFamilyType')

  /**
   * **[rico:has genetic link to record resource ](https://www.ica.org/standards/RiC/ontology#hasGeneticLinkToRecordResource)**
   *
   * Connects two Record Resources when there is a genetic link            between them. Genetic in this sense is as defined by diplomatics, i.e. the process by            which a Record Resource is developed. This relation is symmetric.
   *
   * @type        property
   * @parent      rico:isRecordResourceAssociatedWithRecordResource
   * @domain      rico:RecordResource
   * @range       rico:RecordResource
   */
  public readonly hasGeneticLinkToRecordResource = this.toIri().concat('hasGeneticLinkToRecordResource')

  /**
   * **[rico:has identifier type](https://www.ica.org/standards/RiC/ontology#hasIdentifierType)**
   *
   * Connects an Identifier and an Identifier Type that categorizes            it.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Identifier
   * @range       rico:IdentifierType
   */
  public readonly hasIdentifierType = this.toIri().concat('hasIdentifierType')

  /**
   * **[rico:has instantiation](https://www.ica.org/standards/RiC/ontology#hasInstantiation)**
   *
   * Connects a Record Resource to one of its            Instantiations.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:RecordResource
   * @range       rico:Instantiation
   */
  public readonly hasInstantiation = this.toIri().concat('hasInstantiation')

  /**
   * **[rico:has modification date ](https://www.ica.org/standards/RiC/ontology#hasModificationDate)**
   *
   * Inverse of 'is modification date of' object            property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithDate
   * @domain      rico:Thing
   * @range       rico:Date
   */
  public readonly hasModificationDate = this.toIri().concat('hasModificationDate')

  /**
   * **[rico:has or had agent name](https://www.ica.org/standards/RiC/ontology#hasOrHadAgentName)**
   *
   * Connects an Agent and (one of) its present or past Agent            Name.
   *
   * @type        property
   * @parent      rico:hasOrHadName
   * @domain      rico:Agent
   * @range       rico:AgentName
   */
  public readonly hasOrHadAgentName = this.toIri().concat('hasOrHadAgentName')

  /**
   * **[rico:has or had all members with category](https://www.ica.org/standards/RiC/ontology#hasOrHadAllMembersWithCategory)**
   *
   * Connects a Record Set and a Category (Type) to which all the            Records or Record Parts that are or were included in the Record Set            belong.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:RecordSet
   * @range       rico:Type
   */
  public readonly hasOrHadAllMembersWithCategory = this.toIri().concat('hasOrHadAllMembersWithCategory')

  /**
   * **[rico:has of had all members with content type](https://www.ica.org/standards/RiC/ontology#hasOrHadAllMembersWithContentType)**
   *
   * Connects a Record Set and a Content Type that categorizes all            the Records or Record Parts that are or were included in the Record Set.
   *
   * @type        property
   * @parent      rico:hasOrHadAllMembersWithCategory
   * @domain      rico:RecordSet
   * @range       rico:ContentType
   */
  public readonly hasOrHadAllMembersWithContentType = this.toIri().concat('hasOrHadAllMembersWithContentType')

  /**
   * **[rico:has of had all members with documentary form type](https://www.ica.org/standards/RiC/ontology#hasOrHadAllMembersWithDocumentaryFormType)**
   *
   * Connects a Record Set and a Documentary Form Type that            categorizes all the Records or Record Parts that are or were included in the Record            Set.
   *
   * @type        property
   * @parent      rico:hasOrHadAllMembersWithCategory
   * @domain      rico:RecordSet
   * @range       rico:DocumentaryFormType
   */
  public readonly hasOrHadAllMembersWithDocumentaryFormType = this.toIri().concat('hasOrHadAllMembersWithDocumentaryFormType')

  /**
   * **[rico:has of had all members with language](https://www.ica.org/standards/RiC/ontology#hasOrHadAllMembersWithLanguage)**
   *
   * Connects a Record Set and a Language used by all the Records or            Record Parts that are or were included in the Record Set.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:RecordSet
   * @range       rico:Language
   */
  public readonly hasOrHadAllMembersWithLanguage = this.toIri().concat('hasOrHadAllMembersWithLanguage')

  /**
   * **[rico:has of had all members with legal status](https://www.ica.org/standards/RiC/ontology#hasOrHadAllMembersWithLegalStatus)**
   *
   * Connects a Record Set and a Legal Status that categorizes all            the Records or Record Parts that are or were included in the Record Set.
   *
   * @type        property
   * @parent      rico:hasOrHadAllMembersWithCategory
   * @domain      rico:RecordSet
   * @range       rico:LegalStatus
   */
  public readonly hasOrHadAllMembersWithLegalStatus = this.toIri().concat('hasOrHadAllMembersWithLegalStatus')

  /**
   * **[rico:has of had all members with record state](https://www.ica.org/standards/RiC/ontology#hasOrHadAllMembersWithRecordState)**
   *
   * Connects a Record Set and a Record State that categorizes all            the Records or Record Parts that are or were included in the Record Set.
   *
   * @type        property
   * @parent      rico:hasOrHadAllMembersWithCategory
   * @domain      rico:RecordSet
   * @range       rico:RecordState
   */
  public readonly hasOrHadAllMembersWithRecordState = this.toIri().concat('hasOrHadAllMembersWithRecordState')

  /**
   * **[rico:has or had appellation](https://www.ica.org/standards/RiC/ontology#hasOrHadAppellation)**
   *
   * Connects a Thing to an Appellation that is or was used for            designating it.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Appellation
   */
  public readonly hasOrHadAppellation = this.toIri().concat('hasOrHadAppellation')

  /**
   * **[rico:has or had authority over](https://www.ica.org/standards/RiC/ontology#hasOrHadAuthorityOver)**
   *
   * Connects an Agent to a Thing the Agent has or had authority            over.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Agent
   * @range       rico:Thing
   */
  public readonly hasOrHadAuthorityOver = this.toIri().concat('hasOrHadAuthorityOver')

  /**
   * **[rico:has or had category](https://www.ica.org/standards/RiC/ontology#hasOrHadCategory)**
   *
   * Connects a Thing to a Type that categorizes or categorized            it.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Type
   */
  public readonly hasOrHadCategory = this.toIri().concat('hasOrHadCategory')

  /**
   * **[rico:has or had component](https://www.ica.org/standards/RiC/ontology#hasOrHadComponent)**
   *
   * Connects an Instantiation to one of its present or past            component instantiations.
   *
   * @type        property
   * @parent      rico:hasOrHadPart
   * @domain      rico:Instantiation
   * @range       rico:Instantiation
   */
  public readonly hasOrHadComponent = this.toIri().concat('hasOrHadComponent')

  /**
   * **[rico:has or had constituent](https://www.ica.org/standards/RiC/ontology#hasOrHadConstituent)**
   *
   * Connects a Record to a Record Part that is or was a component of            that Record.
   *
   * @type        property
   * @parent      rico:hasOrHadPart
   * @domain      rico:Record
   * @range       rico:RecordPart
   */
  public readonly hasOrHadConstituent = this.toIri().concat('hasOrHadConstituent')

  /**
   * **[rico:has or had controller](https://www.ica.org/standards/RiC/ontology#hasOrHadController)**
   *
   * Inverse of 'is or was controller of' object            property.
   *
   * @type        property
   * @parent      rico:isOrWasSubordinateTo
   * @domain      rico:Agent
   * @range       rico:Agent
   */
  public readonly hasOrHadController = this.toIri().concat('hasOrHadController')

  /**
   * **[rico:has coordinates](https://www.ica.org/standards/RiC/ontology#hasOrHadCoordinates)**
   *
   * Connects a Physical Location to its past or present coordinates            in a reference system.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:PhysicalLocation
   * @range       rico:Coordinates
   */
  public readonly hasOrHadCoordinates = this.toIri().concat('hasOrHadCoordinates')

  /**
   * **[rico:has or had corporate body type](https://www.ica.org/standards/RiC/ontology#hasOrHadCorporateBodyType)**
   *
   * Connects a Corporate Body to a Corporate Body Type which            categorizes or categorized it.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:CorporateBody
   * @range       rico:CorporateBodyType
   */
  public readonly hasOrHadCorporateBodyType = this.toIri().concat('hasOrHadCorporateBodyType')

  /**
   * **[rico:has or had correspondent](https://www.ica.org/standards/RiC/ontology#hasOrHadCorrespondent)**
   *
   * Connects two Persons that correspond or have corresponded with            each other. This relation is symmetric.
   *
   * @type        property
   * @parent      rico:knows
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly hasOrHadCorrespondent = this.toIri().concat('hasOrHadCorrespondent')

  /**
   * **[rico:has or had demographic group](https://www.ica.org/standards/RiC/ontology#hasOrHadDemographicGroup)**
   *
   * Connects a Person or a Group to a Demographic Group to which it            belongs or belonged.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Group or rico:Person
   * @range       rico:DemographicGroup
   */
  public readonly hasOrHadDemographicGroup = this.toIri().concat('hasOrHadDemographicGroup')

  /**
   * **[rico:has or had holder](https://www.ica.org/standards/RiC/ontology#hasOrHadHolder)**
   *
   * Inverse of 'is or was holder of' object property.
   *
   * @type        property
   * @parent      rico:hasOrHadManager
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:Agent
   */
  public readonly hasOrHadHolder = this.toIri().concat('hasOrHadHolder')

  /**
   * **[rico:has or had identifier](https://www.ica.org/standards/RiC/ontology#hasOrHadIdentifier)**
   *
   * Connects a Thing to one of its past or present            Identifiers.
   *
   * @type        property
   * @parent      rico:hasOrHadAppellation
   * @domain      rico:Thing
   * @range       rico:Identifier
   */
  public readonly hasOrHadIdentifier = this.toIri().concat('hasOrHadIdentifier')

  /**
   * **[rico:has or had intellectual property rights holder](https://www.ica.org/standards/RiC/ontology#hasOrHadIntellectualPropertyRightsHolder)**
   *
   * Inverse of 'is or was holder of intellectual property rights of'            object property.
   *
   * @type        property
   * @parent      rico:isOrWasUnderAuthorityOf
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:Group or rico:Person or rico:Position
   */
  public readonly hasOrHadIntellectualPropertyRightsHolder = this.toIri().concat('hasOrHadIntellectualPropertyRightsHolder')

  /**
   * **[rico:has or had jurisdiction](https://www.ica.org/standards/RiC/ontology#hasOrHadJurisdiction)**
   *
   * Inverse of 'is or was jurisdiction of' object            property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithPlace
   * @domain      rico:Agent
   * @range       rico:Place
   */
  public readonly hasOrHadJurisdiction = this.toIri().concat('hasOrHadJurisdiction')

  /**
   * **[rico:has or had language](https://www.ica.org/standards/RiC/ontology#hasOrHadLanguage)**
   *
   * Connects an Agent or Record Resource to a Language that it uses            or used.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Agent or rico:Record or rico:RecordPart
   * @range       rico:Language
   */
  public readonly hasOrHadLanguage = this.toIri().concat('hasOrHadLanguage')

  /**
   * **[rico:has or had leader](https://www.ica.org/standards/RiC/ontology#hasOrHadLeader)**
   *
   * Inverse of 'is or was leader of' object property.
   *
   * @type        property
   * @parent      rico:hasOrHadController
   * @domain      rico:Group
   * @range       rico:Person
   */
  public readonly hasOrHadLeader = this.toIri().concat('hasOrHadLeader')

  /**
   * **[rico:has or had legal status](https://www.ica.org/standards/RiC/ontology#hasOrHadLegalStatus)**
   *
   * Connects an Agent or Record Resource to a Legal Status which            categorized or categorizes it.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Agent or rico:Record or rico:RecordPart
   * @range       rico:LegalStatus
   */
  public readonly hasOrHadLegalStatus = this.toIri().concat('hasOrHadLegalStatus')

  /**
   * **[rico:has or had location](https://www.ica.org/standards/RiC/ontology#hasOrHadLocation)**
   *
   * Inverse of 'is or was location of' object            property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithPlace
   * @domain      rico:Thing
   * @range       rico:Place
   */
  public readonly hasOrHadLocation = this.toIri().concat('hasOrHadLocation')

  /**
   * **[rico:has or had main subject](https://www.ica.org/standards/RiC/ontology#hasOrHadMainSubject)**
   *
   * Connects a Record Resource to a Thing that is or was its main            subject.
   *
   * @type        property
   * @parent      rico:hasOrHadSubject
   * @domain      rico:RecordResource
   * @range       rico:Thing
   */
  public readonly hasOrHadMainSubject = this.toIri().concat('hasOrHadMainSubject')

  /**
   * **[rico:has or had manager](https://www.ica.org/standards/RiC/ontology#hasOrHadManager)**
   *
   * Inverse of 'is or was manager of' object            property.
   *
   * @type        property
   * @parent      rico:isOrWasUnderAuthorityOf
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:Agent
   */
  public readonly hasOrHadManager = this.toIri().concat('hasOrHadManager')

  /**
   * **[rico:has or had member](https://www.ica.org/standards/RiC/ontology#hasOrHadMember)**
   *
   * Connects a Group to a Person that is or was a member of that            Group.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Group
   * @range       rico:Person
   */
  public readonly hasOrHadMember = this.toIri().concat('hasOrHadMember')

  /**
   * **[rico:has or had name](https://www.ica.org/standards/RiC/ontology#hasOrHadName)**
   *
   * Connects a Thing to one of its past or present            Names.
   *
   * @type        property
   * @parent      rico:hasOrHadAppellation
   * @domain      rico:Thing
   * @range       rico:Name
   */
  public readonly hasOrHadName = this.toIri().concat('hasOrHadName')

  /**
   * **[rico:has or had occupation of type](https://www.ica.org/standards/RiC/ontology#hasOrHadOccupationOfType)**
   *
   * Connects a Person to an Occupation Type that categorized or            categorizes his/her occupation (profession, trade or craft).
   *
   * @type        property
   * @parent      rico:hasOrHadDemographicGroup
   * @domain      rico:Person
   * @range       rico:OccupationType
   */
  public readonly hasOrHadOccupationOfType = this.toIri().concat('hasOrHadOccupationOfType')

  /**
   * **[rico:has or had owner](https://www.ica.org/standards/RiC/ontology#hasOrHadOwner)**
   *
   * Inverse of 'is or was owner of' object property.
   *
   * @type        property
   * @parent      rico:isOrWasUnderAuthorityOf
   * @domain      rico:Thing
   * @range       rico:Group or rico:Person or rico:Position
   */
  public readonly hasOrHadOwner = this.toIri().concat('hasOrHadOwner')

  /**
   * **[rico:has or had part](https://www.ica.org/standards/RiC/ontology#hasOrHadPart)**
   *
   * Connects a Thing to a constitutive or component part of that            Thing.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Thing
   */
  public readonly hasOrHadPart = this.toIri().concat('hasOrHadPart')

  /**
   * **[rico:has or had participant](https://www.ica.org/standards/RiC/ontology#hasOrHadParticipant)**
   *
   * Connects an Event to a Thing that is or was actively or            passively involved in it.
   *
   * @type        property
   * @parent      rico:isEventAssociatedWith
   * @domain      rico:Event
   * @range       rico:Thing
   */
  public readonly hasOrHadParticipant = this.toIri().concat('hasOrHadParticipant')

  /**
   * **[rico:has or had physical location](https://www.ica.org/standards/RiC/ontology#hasOrHadPhysicalLocation)**
   *
   * Connects a Place to one of its past or present Physical            Location.
   *
   * @type        property
   * @parent      rico:isPlaceAssociatedWith
   * @domain      rico:Place
   * @range       rico:PhysicalLocation
   */
  public readonly hasOrHadPhysicalLocation = this.toIri().concat('hasOrHadPhysicalLocation')

  /**
   * **[rico:has or had place name](https://www.ica.org/standards/RiC/ontology#hasOrHadPlaceName)**
   *
   * Connects a Place to one of its past or present            names.
   *
   * @type        property
   * @parent      rico:hasOrHadName
   * @domain      rico:Place
   * @range       rico:PlaceName
   */
  public readonly hasOrHadPlaceName = this.toIri().concat('hasOrHadPlaceName')

  /**
   * **[rico:has or had place type](https://www.ica.org/standards/RiC/ontology#hasOrHadPlaceType)**
   *
   * Connects a Place to a Place Type that categorized or categorizes            it.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Place
   * @range       rico:PlaceType
   */
  public readonly hasOrHadPlaceType = this.toIri().concat('hasOrHadPlaceType')

  /**
   * **[rico:has or had position](https://www.ica.org/standards/RiC/ontology#hasOrHadPosition)**
   *
   * Inverse of 'exists or existed in' object            property.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Group
   * @range       rico:Position
   */
  public readonly hasOrHadPosition = this.toIri().concat('hasOrHadPosition')

  /**
   * **[rico:has or had rule type](https://www.ica.org/standards/RiC/ontology#hasOrHadRuleType)**
   *
   * Connects a Rule to a Rule Type that categorized or categorizes            it.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Rule
   * @range       rico:RuleType
   */
  public readonly hasOrHadRuleType = this.toIri().concat('hasOrHadRuleType')

  /**
   * **[rico:has or had some members with category](https://www.ica.org/standards/RiC/ontology#hasOrHadSomeMembersWithCategory)**
   *
   * Connects a Record Set and a Category (Type) to which some of the            Records or Record Parts that are or were included in the Record Set            belong.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:RecordSet
   * @range       rico:Type
   */
  public readonly hasOrHadSomeMembersWithCategory = this.toIri().concat('hasOrHadSomeMembersWithCategory')

  /**
   * **[rico:has or had some members with content type](https://www.ica.org/standards/RiC/ontology#hasOrHadSomeMembersWithContentType)**
   *
   * Connects a Record Set and a Content Type that categorizes some            of the Records or Record Parts that are or were included in the Record            Set.
   *
   * @type        property
   * @parent      rico:hasOrHadSomeMembersWithCategory
   * @domain      rico:RecordSet
   * @range       rico:ContentType
   */
  public readonly hasOrHadSomeMembersWithContentType = this.toIri().concat('hasOrHadSomeMembersWithContentType')

  /**
   * **[rico:has or had some members with language](https://www.ica.org/standards/RiC/ontology#hasOrHadSomeMembersWithLanguage)**
   *
   * Connects a Record Set and a Language used by some of the Records            or Record Parts that are or were included in the Record Set.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:RecordSet
   * @range       rico:Language
   */
  public readonly hasOrHadSomeMembersWithLanguage = this.toIri().concat('hasOrHadSomeMembersWithLanguage')

  /**
   * **[rico:has or had some members with legal status](https://www.ica.org/standards/RiC/ontology#hasOrHadSomeMembersWithLegalStatus)**
   *
   * Connects a Record Set and a Legal Status that categorizes some            of the Records or Record Parts that are or were included in the Record            Set.
   *
   * @type        property
   * @parent      rico:hasOrHadSomeMembersWithCategory
   * @domain      rico:RecordSet
   * @range       rico:LegalStatus
   */
  public readonly hasOrHadSomeMembersWithLegalStatus = this.toIri().concat('hasOrHadSomeMembersWithLegalStatus')

  /**
   * **[rico:has or had some members with record state](https://www.ica.org/standards/RiC/ontology#hasOrHadSomeMembersWithRecordState)**
   *
   * Connects a Record Set and a Record State that categorizes some            of the Records or Record Parts that are or were included in the Record            Set.
   *
   * @type        property
   * @parent      rico:hasOrHadSomeMembersWithCategory
   * @domain      rico:RecordSet
   * @range       rico:RecordState
   */
  public readonly hasOrHadSomeMembersWithRecordState = this.toIri().concat('hasOrHadSomeMembersWithRecordState')

  /**
   * **[rico:has or had some members with documentary form type](https://www.ica.org/standards/RiC/ontology#hasOrHadSomeMemberswithDocumentaryFormType)**
   *
   * Connects a Record Set and a Documentary Form Type that            categorizes some of the Records or Record Parts that are or were included in the Record            Set.
   *
   * @type        property
   * @parent      rico:hasOrHadSomeMembersWithCategory
   * @domain      rico:RecordSet
   * @range       rico:DocumentaryFormType
   */
  public readonly hasOrHadSomeMemberswithDocumentaryFormType = this.toIri().concat('hasOrHadSomeMemberswithDocumentaryFormType')

  /**
   * **[rico:has or had spouse](https://www.ica.org/standards/RiC/ontology#hasOrHadSpouse)**
   *
   * Connects two Persons that are or were married. This relation is            symmetric.
   *
   * @type        property
   * @parent      rico:hasFamilyAssociationWith
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly hasOrHadSpouse = this.toIri().concat('hasOrHadSpouse')

  /**
   * **[rico:has or had student](https://www.ica.org/standards/RiC/ontology#hasOrHadStudent)**
   *
   * Inverse of 'has or had teacher' object property.
   *
   * @type        property
   * @parent      rico:knows
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly hasOrHadStudent = this.toIri().concat('hasOrHadStudent')

  /**
   * **[rico:has or had subdivision](https://www.ica.org/standards/RiC/ontology#hasOrHadSubdivision)**
   *
   * Connects a Group to one of its present or past            subdivisions.
   *
   * @type        property
   * @parent      rico:hasOrHadPart
   * @domain      rico:Group
   * @range       rico:Group
   */
  public readonly hasOrHadSubdivision = this.toIri().concat('hasOrHadSubdivision')

  /**
   * **[rico:has or had subevent](https://www.ica.org/standards/RiC/ontology#hasOrHadSubevent)**
   *
   * Connects an Event to one of a series of Events that constitute            the original, broader, past or ongoing Event.
   *
   * @type        property
   * @parent      rico:hasOrHadPart
   * @domain      rico:Event
   * @range       rico:Event
   */
  public readonly hasOrHadSubevent = this.toIri().concat('hasOrHadSubevent')

  /**
   * **[rico:has or had subject](https://www.ica.org/standards/RiC/ontology#hasOrHadSubject)**
   *
   * Connects a Record Resource to a Thing that is or was its            subject.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:RecordResource
   * @range       rico:Thing
   */
  public readonly hasOrHadSubject = this.toIri().concat('hasOrHadSubject')

  /**
   * **[rico:has or had subordinate](https://www.ica.org/standards/RiC/ontology#hasOrHadSubordinate)**
   *
   * Connects an Agent to an Agent that is hierarchically            inferior.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Agent
   * @range       rico:Agent
   */
  public readonly hasOrHadSubordinate = this.toIri().concat('hasOrHadSubordinate')

  /**
   * **[rico:has or had teacher](https://www.ica.org/standards/RiC/ontology#hasOrHadTeacher)**
   *
   * Connects a Person to another Person who is or was their            student.
   *
   * @type        property
   * @parent      rico:knows
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly hasOrHadTeacher = this.toIri().concat('hasOrHadTeacher')

  /**
   * **[rico:has or had title](https://www.ica.org/standards/RiC/ontology#hasOrHadTitle)**
   *
   * Connects a Record Resource, Instantiation or Rule to a title            that is or was used for designating it.
   *
   * @type        property
   * @parent      rico:hasOrHadName
   * @domain      rico:Instantiation or rico:RecordResource or rico:Rule
   * @range       rico:Title
   */
  public readonly hasOrHadTitle = this.toIri().concat('hasOrHadTitle')

  /**
   * **[rico:has or had work relation with](https://www.ica.org/standards/RiC/ontology#hasOrHadWorkRelationWith)**
   *
   * Connects two Agents that have or had some type of work relation            in the course of their activities. This relation is symmetric.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Agent
   * @range       rico:Agent
   */
  public readonly hasOrHadWorkRelationWith = this.toIri().concat('hasOrHadWorkRelationWith')

  /**
   * **[rico:has original ](https://www.ica.org/standards/RiC/ontology#hasOriginal)**
   *
   * Inverse of 'is original of' object property.
   *
   * @type        property
   * @parent      rico:followsInTime
   * @domain      rico:Record or rico:RecordPart
   * @range       rico:Record or rico:RecordPart
   */
  public readonly hasOriginal = this.toIri().concat('hasOriginal')

  /**
   * **[rico:has production technique type](https://www.ica.org/standards/RiC/ontology#hasProductionTechniqueType)**
   *
   * Connects an Instantiation to a Production Technique Type that            categorizes its production technique.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Instantiation
   * @range       rico:ProductionTechniqueType
   */
  public readonly hasProductionTechniqueType = this.toIri().concat('hasProductionTechniqueType')

  /**
   * **[rico:has provenance ](https://www.ica.org/standards/RiC/ontology#hasProvenance)**
   *
   * Connects a Record Resource or an Instantiation to an Agent that            creates or accumulates the Record Resource, receives it, or sends it.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:Agent
   */
  public readonly hasProvenance = this.toIri().concat('hasProvenance')

  /**
   * **[rico:hasPublisher](https://www.ica.org/standards/RiC/ontology#hasPublisher)**
   *
   * Connects a Record resource to an Agent who published            it.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:RecordResource
   * @range       rico:Agent
   */
  public readonly hasPublisher = this.toIri().concat('hasPublisher')

  /**
   * **[rico:has receiver](https://www.ica.org/standards/RiC/ontology#hasReceiver)**
   *
   * Connects a Record Resource or an Instantiation to the Agent that            receives it in the course of its activities.
   *
   * @type        property
   * @parent      rico:hasAccumulator
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:Agent
   */
  public readonly hasReceiver = this.toIri().concat('hasReceiver')

  /**
   * **[rico:has record set type](https://www.ica.org/standards/RiC/ontology#hasRecordSetType)**
   *
   * Connects a Record Set to a Record Set Type that categorizes            it.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:RecordSet
   * @range       rico:RecordSetType
   */
  public readonly hasRecordSetType = this.toIri().concat('hasRecordSetType')

  /**
   * **[rico:has record state](https://www.ica.org/standards/RiC/ontology#hasRecordState)**
   *
   * Connects a Record or Record Part to a Record State that            categorizes its state.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Record or rico:RecordPart
   * @range       rico:RecordState
   */
  public readonly hasRecordState = this.toIri().concat('hasRecordState')

  /**
   * **[rico:has reply](https://www.ica.org/standards/RiC/ontology#hasReply)**
   *
   * Connects a Record Resource to a reply, usually in the form of            correspondence.
   *
   * @type        property
   * @parent      rico:isRecordResourceAssociatedWithRecordResource
   * @domain      rico:RecordResource
   * @range       rico:RecordResource
   */
  public readonly hasReply = this.toIri().concat('hasReply')

  /**
   * **[rico:has representation type](https://www.ica.org/standards/RiC/ontology#hasRepresentationType)**
   *
   * Connects an Instantiation to a Representation Type that            categorizes its representation type.
   *
   * @type        property
   * @parent      rico:hasOrHadCategory
   * @domain      rico:Instantiation
   * @range       rico:RepresentationType
   */
  public readonly hasRepresentationType = this.toIri().concat('hasRepresentationType')

  /**
   * **[rico:has sender ](https://www.ica.org/standards/RiC/ontology#hasSender)**
   *
   * Connects a Record Resource or an Instantiation to the Agent that            sends it
   *
   * @type        property
   * @parent      rico:hasProvenance
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:Agent
   */
  public readonly hasSender = this.toIri().concat('hasSender')

  /**
   * **[rico:has sibling](https://www.ica.org/standards/RiC/ontology#hasSibling)**
   *
   * Connects two Persons that are siblings. This relation is            symmetric.
   *
   * @type        property
   * @parent      rico:hasFamilyAssociationWith
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly hasSibling = this.toIri().concat('hasSibling')

  /**
   * **[rico:has source ](https://www.ica.org/standards/RiC/ontology#hasSource)**
   *
   * Connects a Record Resource or Relation to a Record Resource or            Agent that is used as a source of information for identifying or describing            it.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:RecordResource or rico:Relation
   * @range       rico:Agent or rico:RecordResource
   */
  public readonly hasSource = this.toIri().concat('hasSource')

  /**
   * **[rico:has successor](https://www.ica.org/standards/RiC/ontology#hasSuccessor)**
   *
   * Connects an Agent to another Agent that succeeds it            chronologically.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Agent
   * @range       rico:Agent
   */
  public readonly hasSuccessor = this.toIri().concat('hasSuccessor')

  /**
   * **[rico:has unit of measurement](https://www.ica.org/standards/RiC/ontology#hasUnitOfMeasurement)**
   *
   * Connects an Extent to a Unit Of Measurement
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Extent
   * @range       rico:UnitOfMeasurement
   */
  public readonly hasUnitOfMeasurement = this.toIri().concat('hasUnitOfMeasurement')

  /**
   * **[rico:height](https://www.ica.org/standards/RiC/ontology#height)**
   *
   * Vertical dimension of an entity.
   *
   * @type        property
   * @parent      rico:measure
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly height = this.toIri().concat('height')

  /**
   * **[rico:history](https://www.ica.org/standards/RiC/ontology#history)**
   *
   * Summary of the development of an entity, since its origin until            present time.
   *
   * @type        property
   * @domain      rico:Activity or rico:Agent or rico:Event or rico:Instantiation or rico:Place or rico:RecordResource or rico:Rule
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly history = this.toIri().concat('history')

  /**
   * **[rico:identifier](https://www.ica.org/standards/RiC/ontology#identifier)**
   *
   * A word, number, letter, symbol, or any combination of these used            to uniquely identify or reference an individual instance of an entity within a specific            information domain. Includes Global Persistent Identifiers (globally unique and            persistently resolvable identifier for the entity) and/or Local            Identifiers.
   *
   * @type        property
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly identifier = this.toIri().concat('identifier')

  /**
   * **[rico:includes or included](https://www.ica.org/standards/RiC/ontology#includesOrIncluded)**
   *
   * Connects a Record Set to a Record or Record Set it aggregates,            or aggregated in the past.
   *
   * @type        property
   * @parent      rico:isRecordResourceAssociatedWithRecordResource
   * @domain      rico:RecordSet
   * @range       rico:Record or rico:RecordSet
   */
  public readonly includesOrIncluded = this.toIri().concat('includesOrIncluded')

  /**
   * **[rico:Instantiation extent](https://www.ica.org/standards/RiC/ontology#instantiationExtent)**
   *
   * Countable characteristics of the Instantiation expressed as a            quantity.
   *
   * @type        property
   * @parent      rico:physicalOrLogicalExtent
   * @domain      rico:Instantiation
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly instantiationExtent = this.toIri().concat('instantiationExtent')

  /**
   * **[rico:instantiation is connected to functional equivalence relation
        ](https://www.ica.org/standards/RiC/ontology#instantiationIsConnectedToFunctionalEquivalenceRelation)**
   *
   * Connects an Instantiation to a Functional Equivalence            Relation
   *
   * @type        property
   * @parent      rico:instantiationIsConnectedToInstantiationRelation
   * @domain      rico:Instantiation
   * @range       rico:FunctionalEquivalenceRelation
   */
  public readonly instantiationIsConnectedToFunctionalEquivalenceRelation = this.toIri().concat('instantiationIsConnectedToFunctionalEquivalenceRelation')

  /**
   * **[rico:instantiation is connected to instantiation relation ](https://www.ica.org/standards/RiC/ontology#instantiationIsConnectedToInstantiationRelation)**
   *
   * Connects an Instantiation to an Instantiation to Instantiation            Relation.
   *
   * @type        property
   * @parent      rico:thingIsConnectedToRelation
   * @domain      rico:Instantiation
   * @range       rico:InstantiationToInstantiationRelation
   */
  public readonly instantiationIsConnectedToInstantiationRelation = this.toIri().concat('instantiationIsConnectedToInstantiationRelation')

  /**
   * **[rico:instantiation is source of derivation relation ](https://www.ica.org/standards/RiC/ontology#instantiationIsSourceOfDerivationRelation)**
   *
   * Connects an Instantiation (from which at least one Instantiation            is derived) to a Derivation Relation.
   *
   * @type        property
   * @parent      rico:instantiationIsConnectedToInstantiationRelation
   * @domain      rico:Instantiation
   * @range       rico:DerivationRelation
   */
  public readonly instantiationIsSourceOfDerivationRelation = this.toIri().concat('instantiationIsSourceOfDerivationRelation')

  /**
   * **[rico:instantiation is source of migration relation ](https://www.ica.org/standards/RiC/ontology#instantiationIsSourceOfMigrationRelation)**
   *
   * Connects an Instantiation (from which at least one Instantiation            is migrated) to a Migration Relation.
   *
   * @type        property
   * @parent      rico:instantiationIsSourceOfDerivationRelation
   * @domain      rico:Instantiation
   * @range       rico:MigrationRelation
   */
  public readonly instantiationIsSourceOfMigrationRelation = this.toIri().concat('instantiationIsSourceOfMigrationRelation')

  /**
   * **[rico:instantiation is target of derivation relation ](https://www.ica.org/standards/RiC/ontology#instantiationIsTargetOfDerivationRelation)**
   *
   * Connects a derived Instantiation to a Derivation            Relation.
   *
   * @type        property
   * @parent      rico:instantiationIsConnectedToInstantiationRelation
   * @domain      rico:Instantiation
   * @range       rico:DerivationRelation
   */
  public readonly instantiationIsTargetOfDerivationRelation = this.toIri().concat('instantiationIsTargetOfDerivationRelation')

  /**
   * **[rico:instantiation is target of migration relation ](https://www.ica.org/standards/RiC/ontology#instantiationIsTargetOfMigrationRelation)**
   *
   * Connects an Instantiation which results from a migration, to a            Migration Relation.
   *
   * @type        property
   * @parent      rico:instantiationIsTargetOfDerivationRelation
   * @domain      rico:Instantiation
   * @range       rico:MigrationRelation
   */
  public readonly instantiationIsTargetOfMigrationRelation = this.toIri().concat('instantiationIsTargetOfMigrationRelation')

  /**
   * **[rico:instantiation is target of record resource to instantiation
            relation ](https://www.ica.org/standards/RiC/ontology#instantiationIsTargetOfRecordResourceToInstantiationRelation)**
   *
   * Connects an Instantiation of a Record Resource to the Record            Resource to Instantiation Relation.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfRelation
   * @domain      rico:Instantiation
   * @range       rico:RecordResourceToInstantiationRelation
   */
  public readonly instantiationIsTargetOfRecordResourceToInstantiationRelation = this.toIri().concat('instantiationIsTargetOfRecordResourceToInstantiationRelation')

  /**
   * **[rico:Instantiation structure](https://www.ica.org/standards/RiC/ontology#instantiationStructure)**
   *
   * Information about the physical arrangement and composition of an            Instantiation.
   *
   * @type        property
   * @parent      rico:structure
   * @domain      rico:Instantiation
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly instantiationStructure = this.toIri().concat('instantiationStructure')

  /**
   * **[rico:instantiation to instantiation relation connects ](https://www.ica.org/standards/RiC/ontology#instantiationToInstantiationRelationConnects)**
   *
   * Connects an Instantiation to Instantiation Relation to one of            the related Instantiations.
   *
   * @type        property
   * @parent      rico:relationConnects
   * @domain      rico:InstantiationToInstantiationRelation
   * @range       rico:Instantiation
   */
  public readonly instantiationToInstantiationRelationConnects = this.toIri().concat('instantiationToInstantiationRelationConnects')

  /**
   * **[rico:integrity](https://www.ica.org/standards/RiC/ontology#integrity)**
   *
   * Information about the completeness of a Record Resource or            Instantiation.
   *
   * @type        property
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly integrity = this.toIri().concat('integrity')

  /**
   * **[rico:intellectual property rights relation has source ](https://www.ica.org/standards/RiC/ontology#intellectualPropertyRightsRelationHasSource)**
   *
   * Connects an IntellectualPropertyRightsRelation to one of the            Group, Person or Position that holds the rights.
   *
   * @type        property
   * @parent      rico:authorityRelationHasSource
   * @domain      rico:IntellectualPropertyRightsRelation
   * @range       rico:Group or rico:Person or rico:Position
   */
  public readonly intellectualPropertyRightsRelationHasSource = this.toIri().concat('intellectualPropertyRightsRelationHasSource')

  /**
   * **[rico:intellectual property rights relation has target ](https://www.ica.org/standards/RiC/ontology#intellectualPropertyRightsRelationHasTarget)**
   *
   * Connects an IintellectualPropertyRightsRelation to one of the            Record Resource or Instantiation on which the rights are held.
   *
   * @type        property
   * @parent      rico:authorityRelationHasTarget
   * @domain      rico:IntellectualPropertyRightsRelation
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly intellectualPropertyRightsRelationHasTarget = this.toIri().concat('intellectualPropertyRightsRelationHasTarget')

  /**
   * **[rico:is accumulator of](https://www.ica.org/standards/RiC/ontology#isAccumulatorOf)**
   *
   * Inverse of 'has accumulator' object property.
   *
   * @type        property
   * @parent      rico:isProvenanceOf
   * @domain      rico:Agent
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly isAccumulatorOf = this.toIri().concat('isAccumulatorOf')

  /**
   * **[rico:is activity type of](https://www.ica.org/standards/RiC/ontology#isActivityTypeOf)**
   *
   * Connects an Activity Type to an Activity that it            categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:ActivityType
   * @range       rico:Activity
   */
  public readonly isActivityTypeOf = this.toIri().concat('isActivityTypeOf')

  /**
   * **[rico:is addressee of ](https://www.ica.org/standards/RiC/ontology#isAddresseeOf)**
   *
   * Inverse of 'has addressee' object property.
   *
   * @type        property
   * @parent      rico:isProvenanceOf
   * @domain      rico:Agent
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly isAddresseeOf = this.toIri().concat('isAddresseeOf')

  /**
   * **[rico:is agent associated with agent ](https://www.ica.org/standards/RiC/ontology#isAgentAssociatedWithAgent)**
   *
   * Connects two Agents. This object property is            symmetric.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Agent
   * @range       rico:Agent
   */
  public readonly isAgentAssociatedWithAgent = this.toIri().concat('isAgentAssociatedWithAgent')

  /**
   * **[rico:is associated with date ](https://www.ica.org/standards/RiC/ontology#isAssociatedWithDate)**
   *
   * Inverse of 'is date associated with' object            property.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Date
   */
  public readonly isAssociatedWithDate = this.toIri().concat('isAssociatedWithDate')

  /**
   * **[rico:is associated with event ](https://www.ica.org/standards/RiC/ontology#isAssociatedWithEvent)**
   *
   * Inverse of 'is event associated with' object            property.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Event
   */
  public readonly isAssociatedWithEvent = this.toIri().concat('isAssociatedWithEvent')

  /**
   * **[rico:is associated with place ](https://www.ica.org/standards/RiC/ontology#isAssociatedWithPlace)**
   *
   * Inverse of 'is place associated with' object            property.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Place
   */
  public readonly isAssociatedWithPlace = this.toIri().concat('isAssociatedWithPlace')

  /**
   * **[rico:is associated with rule ](https://www.ica.org/standards/RiC/ontology#isAssociatedWithRule)**
   *
   * Inverse of 'is rule associated with' object            property.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Rule
   */
  public readonly isAssociatedWithRule = this.toIri().concat('isAssociatedWithRule')

  /**
   * **[rico:is author of](https://www.ica.org/standards/RiC/ontology#isAuthorOf)**
   *
   * Inverse of 'has author' object property.
   *
   * @type        property
   * @parent      rico:isCreatorOf
   * @domain      rico:Group or rico:Person or rico:Position
   * @range       rico:Record
   */
  public readonly isAuthorOf = this.toIri().concat('isAuthorOf')

  /**
   * **[rico:is authorizing agent in mandate relation ](https://www.ica.org/standards/RiC/ontology#isAuthorizingAgentInMandateRelation)**
   *
   * Connects an Agent that assigns the Mandate, to a Mandate            Relation.
   *
   * @type        property
   * @parent      rico:thingIsContextOfRelation
   * @domain      rico:Agent
   * @range       rico:MandateRelation
   */
  public readonly isAuthorizingAgentInMandateRelation = this.toIri().concat('isAuthorizingAgentInMandateRelation')

  /**
   * **[rico:is beginning date of ](https://www.ica.org/standards/RiC/ontology#isBeginningDateOf)**
   *
   * Connects a Date to a Thing that came into existence on that            Date.
   *
   * @type        property
   * @parent      rico:isDateAssociatedWith
   * @domain      rico:Date
   * @range       rico:Thing
   */
  public readonly isBeginningDateOf = this.toIri().concat('isBeginningDateOf')

  /**
   * **[rico:is birth date of ](https://www.ica.org/standards/RiC/ontology#isBirthDateOf)**
   *
   * Connects a Date to a Person that was born on that            Date.
   *
   * @type        property
   * @parent      rico:isBeginningDateOf
   * @domain      rico:Date
   * @range       rico:Person
   */
  public readonly isBirthDateOf = this.toIri().concat('isBirthDateOf')

  /**
   * **[rico:is carrier type of](https://www.ica.org/standards/RiC/ontology#isCarrierTypeOf)**
   *
   * Connects a Carrier Type to an Instantiation whose carrier it            categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:CarrierType
   * @range       rico:Instantiation
   */
  public readonly isCarrierTypeOf = this.toIri().concat('isCarrierTypeOf')

  /**
   * **[rico:is child of](https://www.ica.org/standards/RiC/ontology#isChildOf)**
   *
   * Inverse of 'has child' object property.
   *
   * @type        property
   * @parent      rico:hasAncestor
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly isChildOf = this.toIri().concat('isChildOf')

  /**
   * **[rico:is collector of](https://www.ica.org/standards/RiC/ontology#isCollectorOf)**
   *
   * Inverse of 'has collector' object property.
   *
   * @type        property
   * @parent      rico:isAccumulatorOf
   * @domain      rico:Agent
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly isCollectorOf = this.toIri().concat('isCollectorOf')

  /**
   * **[rico:is content type of](https://www.ica.org/standards/RiC/ontology#isContentTypeOf)**
   *
   * Connects a Content Type to a Record or Record Part whose content            it categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:ContentType
   * @range       rico:Record or rico:RecordPart
   */
  public readonly isContentTypeOf = this.toIri().concat('isContentTypeOf')

  /**
   * **[rico:is copy of](https://www.ica.org/standards/RiC/ontology#isCopyOf)**
   *
   * Inverse of 'has copy' object property.
   *
   * @type        property
   * @parent      rico:followsInTime
   * @domain      rico:RecordResource
   * @range       rico:RecordResource
   */
  public readonly isCopyOf = this.toIri().concat('isCopyOf')

  /**
   * **[rico:is creator of](https://www.ica.org/standards/RiC/ontology#isCreatorOf)**
   *
   * Inverse of 'has creator' object property.
   *
   * @type        property
   * @parent      rico:isProvenanceOf
   * @domain      rico:Agent
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly isCreatorOf = this.toIri().concat('isCreatorOf')

  /**
   * **[rico:is date associated with ](https://www.ica.org/standards/RiC/ontology#isDateAssociatedWith)**
   *
   * Connects a Date to a Thing that the Date is associated with the            existence and lifecycle of.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Date
   * @range       rico:Thing
   */
  public readonly isDateAssociatedWith = this.toIri().concat('isDateAssociatedWith')

  /**
   * **[rico:is death date of ](https://www.ica.org/standards/RiC/ontology#isDeathDateOf)**
   *
   * Connects a Date to a Person who died on that            Date.
   *
   * @type        property
   * @parent      rico:isEndDateOf
   * @domain      rico:Date
   * @range       rico:Person
   */
  public readonly isDeathDateOf = this.toIri().concat('isDeathDateOf')

  /**
   * **[rico:is derived from instantiation ](https://www.ica.org/standards/RiC/ontology#isDerivedFromInstantiation)**
   *
   * Inverse of 'has derived instantiation' object            property.
   *
   * @type        property
   * @parent      rico:followsInTime
   * @domain      rico:Instantiation
   * @range       rico:Instantiation
   */
  public readonly isDerivedFromInstantiation = this.toIri().concat('isDerivedFromInstantiation')

  /**
   * **[rico:is documentary form type of](https://www.ica.org/standards/RiC/ontology#isDocumentaryFormTypeOf)**
   *
   * Connects a Documentary Form Type to a Record or Record Part that            it categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:DocumentaryFormType
   * @range       rico:Record or rico:RecordPart
   */
  public readonly isDocumentaryFormTypeOf = this.toIri().concat('isDocumentaryFormTypeOf')

  /**
   * **[rico:is draft of ](https://www.ica.org/standards/RiC/ontology#isDraftOf)**
   *
   * Connects a draft to the final version of a            Record.
   *
   * @type        property
   * @parent      rico:hasGeneticLinkToRecordResource
   * @domain      rico:Record or rico:RecordPart
   * @range       rico:Record or rico:RecordPart
   */
  public readonly isDraftOf = this.toIri().concat('isDraftOf')

  /**
   * **[rico:is end date of ](https://www.ica.org/standards/RiC/ontology#isEndDateOf)**
   *
   * Connects a Date to a Thing whose existence ended on that            Date.
   *
   * @type        property
   * @parent      rico:isDateAssociatedWith
   * @domain      rico:Date
   * @range       rico:Thing
   */
  public readonly isEndDateOf = this.toIri().concat('isEndDateOf')

  /**
   * **[rico:is equivalent to ](https://www.ica.org/standards/RiC/ontology#isEquivalentTo)**
   *
   * Connects two Things that are considered            equivalent.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Thing
   */
  public readonly isEquivalentTo = this.toIri().concat('isEquivalentTo')

  /**
   * **[rico:is event associated with ](https://www.ica.org/standards/RiC/ontology#isEventAssociatedWith)**
   *
   * Connects an Event to a Thing that is associated with the            existence and lifecycle of the Event.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Event
   * @range       rico:Thing
   */
  public readonly isEventAssociatedWith = this.toIri().concat('isEventAssociatedWith')

  /**
   * **[rico:is event type of](https://www.ica.org/standards/RiC/ontology#isEventTypeOf)**
   *
   * Connects an Event Type to an Event that is            categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:EventType
   * @range       rico:Event
   */
  public readonly isEventTypeOf = this.toIri().concat('isEventTypeOf')

  /**
   * **[rico:is extent of](https://www.ica.org/standards/RiC/ontology#isExtentOf)**
   *
   * Connects an Extent to a Record Resource or Instantiation
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Extent
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly isExtentOf = this.toIri().concat('isExtentOf')

  /**
   * **[rico:is extent type of](https://www.ica.org/standards/RiC/ontology#isExtentTypeOf)**
   *
   * Connects an Extent Type to an Extent that it            categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:ExtentType
   * @range       rico:Extent
   */
  public readonly isExtentTypeOf = this.toIri().concat('isExtentTypeOf')

  /**
   * **[rico:is family type of](https://www.ica.org/standards/RiC/ontology#isFamilyTypeOf)**
   *
   * Connects a Family Type to a Family that is            categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:FamilyType
   * @range       rico:Family
   */
  public readonly isFamilyTypeOf = this.toIri().concat('isFamilyTypeOf')

  /**
   * **[rico:is from use date of ](https://www.ica.org/standards/RiC/ontology#isFromUseDateOf)**
   *
   * Connects a Date to an Appellation, when it is the date at which            the Appellation was first used.
   *
   * @type        property
   * @parent      rico:isDateAssociatedWith
   * @domain      rico:Date
   * @range       rico:Appellation
   */
  public readonly isFromUseDateOf = this.toIri().concat('isFromUseDateOf')

  /**
   * **[rico:is functionally equivalent to](https://www.ica.org/standards/RiC/ontology#isFunctionallyEquivalentTo)**
   *
   * Connects two Instantiations which may be considered as            equivalent. This relation is symmetric.
   *
   * @type        property
   * @parent      rico:isEquivalentTo
   * @domain      rico:Instantiation
   * @range       rico:Instantiation
   */
  public readonly isFunctionallyEquivalentTo = this.toIri().concat('isFunctionallyEquivalentTo')

  /**
   * **[rico:is identifier type of](https://www.ica.org/standards/RiC/ontology#isIdentifierTypeOf)**
   *
   * Connects an Identifier Type and an Identifier that it            categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:IdentifierType
   * @range       rico:Identifier
   */
  public readonly isIdentifierTypeOf = this.toIri().concat('isIdentifierTypeOf')

  /**
   * **[rico:is instantiation associated with instantiation ](https://www.ica.org/standards/RiC/ontology#isInstantiationAssociatedWithInstantiation)**
   *
   * Connects two Instantiations. This object property is            symmetric.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Instantiation
   * @range       rico:Instantiation
   */
  public readonly isInstantiationAssociatedWithInstantiation = this.toIri().concat('isInstantiationAssociatedWithInstantiation')

  /**
   * **[rico:is instantiation of](https://www.ica.org/standards/RiC/ontology#isInstantiationOf)**
   *
   * Inverse of 'has instantiation' object property.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Instantiation
   * @range       rico:RecordResource
   */
  public readonly isInstantiationOf = this.toIri().concat('isInstantiationOf')

  /**
   * **[rico:is last update date of ](https://www.ica.org/standards/RiC/ontology#isLastUpdateDateOf)**
   *
   * Connects a Date and a Thing that was last modified at this            Date.
   *
   * @type        property
   * @parent      rico:isModificationDateOf
   * @domain      rico:Date
   * @range       rico:Thing
   */
  public readonly isLastUpdateDateOf = this.toIri().concat('isLastUpdateDateOf')

  /**
   * **[rico:is modification date of ](https://www.ica.org/standards/RiC/ontology#isModificationDateOf)**
   *
   * Connects a Date to a Thing that was modified on that            Date.
   *
   * @type        property
   * @parent      rico:isDateAssociatedWith
   * @domain      rico:Date
   * @range       rico:Thing
   */
  public readonly isModificationDateOf = this.toIri().concat('isModificationDateOf')

  /**
   * **[rico:is or was adjacent to](https://www.ica.org/standards/RiC/ontology#isOrWasAdjacentTo)**
   *
   * Connects two Places that are or were geographically adjacent.            This is a symmetric object property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithPlace
   * @domain      rico:Place
   * @range       rico:Place
   */
  public readonly isOrWasAdjacentTo = this.toIri().concat('isOrWasAdjacentTo')

  /**
   * **[rico:is or was affected by](https://www.ica.org/standards/RiC/ontology#isOrWasAffectedBy)**
   *
   * Inverse of 'affects or affected' object property.
   *
   * @type        property
   * @parent      rico:isOrWasParticipantIn
   * @domain      rico:Thing
   * @range       rico:Event
   */
  public readonly isOrWasAffectedBy = this.toIri().concat('isOrWasAffectedBy')

  /**
   * **[rico:is or was agent name of](https://www.ica.org/standards/RiC/ontology#isOrWasAgentNameOf)**
   *
   * Connects an Agent Name to an Agent it designates or            designated.
   *
   * @type        property
   * @parent      rico:isOrWasNameOf
   * @domain      rico:AgentName
   * @range       rico:Agent
   */
  public readonly isOrWasAgentNameOf = this.toIri().concat('isOrWasAgentNameOf')

  /**
   * **[rico:is or was appellation of](https://www.ica.org/standards/RiC/ontology#isOrWasAppellationOf)**
   *
   * Connects an Appellation to a Thing that it designates or            designated.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Appellation
   * @range       rico:Thing
   */
  public readonly isOrWasAppellationOf = this.toIri().concat('isOrWasAppellationOf')

  /**
   * **[rico:is or was category of](https://www.ica.org/standards/RiC/ontology#isOrWasCategoryOf)**
   *
   * Connects a Type (a category) to a Thing that it categorizes or            categorized.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Type
   * @range       rico:Thing
   */
  public readonly isOrWasCategoryOf = this.toIri().concat('isOrWasCategoryOf')

  /**
   * **[rico:is or was category of all members of](https://www.ica.org/standards/RiC/ontology#isOrWasCategoryOfAllMembersOf)**
   *
   * Connects a Category (Type) and a Record Set whose all present or            past Record or Record Part members belong to that Category.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Type
   * @range       rico:RecordSet
   */
  public readonly isOrWasCategoryOfAllMembersOf = this.toIri().concat('isOrWasCategoryOfAllMembersOf')

  /**
   * **[rico:is or was category of some members of](https://www.ica.org/standards/RiC/ontology#isOrWasCategoryOfSomeMembersOf)**
   *
   * Connects a Category (Type) and a Record Set whose some present            or past Record or Record Part members belong to that Category.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Type
   * @range       rico:RecordSet
   */
  public readonly isOrWasCategoryOfSomeMembersOf = this.toIri().concat('isOrWasCategoryOfSomeMembersOf')

  /**
   * **[rico:is or was component of](https://www.ica.org/standards/RiC/ontology#isOrWasComponentOf)**
   *
   * Inverse of 'has or had component' object            property.
   *
   * @type        property
   * @parent      rico:isInstantiationAssociatedWithInstantiation
   * @domain      rico:Instantiation
   * @range       rico:Instantiation
   */
  public readonly isOrWasComponentOf = this.toIri().concat('isOrWasComponentOf')

  /**
   * **[rico:is or was constituent of](https://www.ica.org/standards/RiC/ontology#isOrWasConstituentOf)**
   *
   * Inverse of 'has or had constituent' object            property.
   *
   * @type        property
   * @parent      rico:isOrWasPartOf
   * @domain      rico:RecordPart
   * @range       rico:Record
   */
  public readonly isOrWasConstituentOf = this.toIri().concat('isOrWasConstituentOf')

  /**
   * **[rico:is or was contained by](https://www.ica.org/standards/RiC/ontology#isOrWasContainedBy)**
   *
   * Inverse of 'contains or contained' object            property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithPlace
   * @domain      rico:Place
   * @range       rico:Place
   */
  public readonly isOrWasContainedBy = this.toIri().concat('isOrWasContainedBy')

  /**
   * **[rico:is or was content type of all members of](https://www.ica.org/standards/RiC/ontology#isOrWasContentTypeOfAllMembersOf)**
   *
   * Connects a Content Type and a Record Set whose all past or            present Record or Record Part members have that Content Type.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOfAllMembersOf
   * @domain      rico:ContentType
   * @range       rico:RecordSet
   */
  public readonly isOrWasContentTypeOfAllMembersOf = this.toIri().concat('isOrWasContentTypeOfAllMembersOf')

  /**
   * **[rico:is or was content type of some members of](https://www.ica.org/standards/RiC/ontology#isOrWasContentTypeOfSomeMembersOf)**
   *
   * Connects a Content Type and a Record Set whose some past or            present Record or Record Part members have that Content Type.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOfSomeMembersOf
   * @domain      rico:ContentType
   * @range       rico:RecordSet
   */
  public readonly isOrWasContentTypeOfSomeMembersOf = this.toIri().concat('isOrWasContentTypeOfSomeMembersOf')

  /**
   * **[rico:is or was controller of](https://www.ica.org/standards/RiC/ontology#isOrWasControllerOf)**
   *
   * Connects an Agent to another Agent it controls or controlled via            Activities, i.e. controls by function.
   *
   * @type        property
   * @parent      rico:hasOrHadAuthorityOver
   * @domain      rico:Agent
   * @range       rico:Agent
   */
  public readonly isOrWasControllerOf = this.toIri().concat('isOrWasControllerOf')

  /**
   * **[rico:is or was coordinates of](https://www.ica.org/standards/RiC/ontology#isOrWasCoordinatesOf)**
   *
   * Connects an instance of Coordinates to a Physical Location it            locates or located on earth, according to some reference system.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Coordinates
   * @range       rico:PhysicalLocation
   */
  public readonly isOrWasCoordinatesOf = this.toIri().concat('isOrWasCoordinatesOf')

  /**
   * **[rico:is or was corporate body type of](https://www.ica.org/standards/RiC/ontology#isOrWasCorporateBodyTypeOf)**
   *
   * Connects a Corporate Body Type to a Corporate Body that it            categorizes or categorized.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:CorporateBodyType
   * @range       rico:CorporateBody
   */
  public readonly isOrWasCorporateBodyTypeOf = this.toIri().concat('isOrWasCorporateBodyTypeOf')

  /**
   * **[rico:is or was demographic group of](https://www.ica.org/standards/RiC/ontology#isOrWasDemographicGroupOf)**
   *
   * Connects a Demographic Group to a Person or Group which belongs            or belonged to it.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:DemographicGroup
   * @range       rico:Group or rico:Person
   */
  public readonly isOrWasDemographicGroupOf = this.toIri().concat('isOrWasDemographicGroupOf')

  /**
   * **[rico:is or was described by](https://www.ica.org/standards/RiC/ontology#isOrWasDescribedBy)**
   *
   * Inverse of 'describes or described' object            property.
   *
   * @type        property
   * @parent      rico:isOrWasSubjectOf
   * @domain      rico:Thing
   * @range       rico:RecordResource
   */
  public readonly isOrWasDescribedBy = this.toIri().concat('isOrWasDescribedBy')

  /**
   * **[rico:is or was documentary form type of all members of](https://www.ica.org/standards/RiC/ontology#isOrWasDocumentaryFormTypeOfAllMembersOf)**
   *
   * Connects a Documentary Form Type and a Record Set whose all past            or present Record or Record Part members have that Documentary Form Type.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOfAllMembersOf
   * @domain      rico:DocumentaryFormType
   * @range       rico:RecordSet
   */
  public readonly isOrWasDocumentaryFormTypeOfAllMembersOf = this.toIri().concat('isOrWasDocumentaryFormTypeOfAllMembersOf')

  /**
   * **[rico:is or was documentary form type of some members of](https://www.ica.org/standards/RiC/ontology#isOrWasDocumentaryFormTypeOfSomeMembersOf)**
   *
   * Connects a Documentary Form Type and a Record Set whose some            past or present Record or Record Part members have that Documentary Form            Type.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOfSomeMembersOf
   * @domain      rico:DocumentaryFormType
   * @range       rico:RecordSet
   */
  public readonly isOrWasDocumentaryFormTypeOfSomeMembersOf = this.toIri().concat('isOrWasDocumentaryFormTypeOfSomeMembersOf')

  /**
   * **[rico:is or was enforced by](https://www.ica.org/standards/RiC/ontology#isOrWasEnforcedBy)**
   *
   * Connects a Rule to an Agent that enforces or enforced the            Rule.
   *
   * @type        property
   * @parent      rico:isRuleAssociatedWith
   * @domain      rico:Rule
   * @range       rico:Agent
   */
  public readonly isOrWasEnforcedBy = this.toIri().concat('isOrWasEnforcedBy')

  /**
   * **[rico:is or was expressed by](https://www.ica.org/standards/RiC/ontology#isOrWasExpressedBy)**
   *
   * Connects a Rule to a Record Resource that expresses or expressed            the Rule.
   *
   * @type        property
   * @parent      rico:isRuleAssociatedWith
   * @domain      rico:Rule
   * @range       rico:RecordResource
   */
  public readonly isOrWasExpressedBy = this.toIri().concat('isOrWasExpressedBy')

  /**
   * **[rico:is or was holder of](https://www.ica.org/standards/RiC/ontology#isOrWasHolderOf)**
   *
   * Connects an Agent to a Record Resource or Instantiation that the            Agent holds or held.
   *
   * @type        property
   * @parent      rico:isOrWasManagerOf
   * @domain      rico:Agent
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly isOrWasHolderOf = this.toIri().concat('isOrWasHolderOf')

  /**
   * **[rico:is or was holder of intellectual property rights of](https://www.ica.org/standards/RiC/ontology#isOrWasHolderOfIntellectualPropertyRightsOf)**
   *
   * Connects an Agent to a Record Resource or Instantiation on which            the Agent has or had some intellectual property rights.
   *
   * @type        property
   * @parent      rico:hasOrHadAuthorityOver
   * @domain      rico:Group or rico:Person or rico:Position
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly isOrWasHolderOfIntellectualPropertyRightsOf = this.toIri().concat('isOrWasHolderOfIntellectualPropertyRightsOf')

  /**
   * **[rico:is or was identifier of](https://www.ica.org/standards/RiC/ontology#isOrWasIdentifierOf)**
   *
   * Connects an Identifier to a Thing that it identified or            identifies.
   *
   * @type        property
   * @parent      rico:isOrWasAppellationOf
   * @domain      rico:Identifier
   * @range       rico:Thing
   */
  public readonly isOrWasIdentifierOf = this.toIri().concat('isOrWasIdentifierOf')

  /**
   * **[rico:is or was included in](https://www.ica.org/standards/RiC/ontology#isOrWasIncludedIn)**
   *
   * Inverse of 'includes or included' object            property.
   *
   * @type        property
   * @parent      rico:isRecordResourceAssociatedWithRecordResource
   * @domain      rico:Record or rico:RecordSet
   * @range       rico:RecordSet
   */
  public readonly isOrWasIncludedIn = this.toIri().concat('isOrWasIncludedIn')

  /**
   * **[rico:is or was jurisdiction of](https://www.ica.org/standards/RiC/ontology#isOrWasJurisdictionOf)**
   *
   * Connects a Place to an Agent that has or had jurisdiction over            the Place.
   *
   * @type        property
   * @parent      rico:isPlaceAssociatedWith
   * @domain      rico:Place
   * @range       rico:Agent
   */
  public readonly isOrWasJurisdictionOf = this.toIri().concat('isOrWasJurisdictionOf')

  /**
   * **[rico:is or was language of](https://www.ica.org/standards/RiC/ontology#isOrWasLanguageOf)**
   *
   * Connects a Language to an Agent, Record or Record Part that uses            or used it.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Language
   * @range       rico:Agent or rico:Record or rico:RecordPart
   */
  public readonly isOrWasLanguageOf = this.toIri().concat('isOrWasLanguageOf')

  /**
   * **[rico:is or was language of all members of](https://www.ica.org/standards/RiC/ontology#isOrWasLanguageOfAllMembersOf)**
   *
   * Connects a Language and a Record Set whose all present or past            Record or Record Part members use that Language.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Language
   * @range       rico:RecordSet
   */
  public readonly isOrWasLanguageOfAllMembersOf = this.toIri().concat('isOrWasLanguageOfAllMembersOf')

  /**
   * **[rico:is or was language of some members of](https://www.ica.org/standards/RiC/ontology#isOrWasLanguageOfSomeMembersOf)**
   *
   * Connects a Language and a Record Set whose some present or past            Record or Record Part members use that Language.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Language
   * @range       rico:RecordSet
   */
  public readonly isOrWasLanguageOfSomeMembersOf = this.toIri().concat('isOrWasLanguageOfSomeMembersOf')

  /**
   * **[rico:is or was leader of](https://www.ica.org/standards/RiC/ontology#isOrWasLeaderOf)**
   *
   * Connects a Person to the Group that Person leads or led in the            past.
   *
   * @type        property
   * @parent      rico:isOrWasControllerOf
   * @domain      rico:Person
   * @range       rico:Group
   */
  public readonly isOrWasLeaderOf = this.toIri().concat('isOrWasLeaderOf')

  /**
   * **[rico:is or was legal status of](https://www.ica.org/standards/RiC/ontology#isOrWasLegalStatusOf)**
   *
   * Connects a Legal Status to an Agent or Record Resource that it            categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:LegalStatus
   * @range       rico:Agent or rico:Record or rico:RecordPart
   */
  public readonly isOrWasLegalStatusOf = this.toIri().concat('isOrWasLegalStatusOf')

  /**
   * **[rico:is or was legal status of all members of](https://www.ica.org/standards/RiC/ontology#isOrWasLegalStatusOfAllMembersOf)**
   *
   * Connects a Legal Status and a Record Set whose all past or            present Record or Record Part members have that Legal Status.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOfAllMembersOf
   * @domain      rico:LegalStatus
   * @range       rico:RecordSet
   */
  public readonly isOrWasLegalStatusOfAllMembersOf = this.toIri().concat('isOrWasLegalStatusOfAllMembersOf')

  /**
   * **[rico:is or was legal status of some members of](https://www.ica.org/standards/RiC/ontology#isOrWasLegalStatusOfSomeMembersOf)**
   *
   * Connects a Legal Status and a Record Set whose some past or            present Record or Record Part members have that Legal Status.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOfSomeMembersOf
   * @domain      rico:LegalStatus
   * @range       rico:RecordSet
   */
  public readonly isOrWasLegalStatusOfSomeMembersOf = this.toIri().concat('isOrWasLegalStatusOfSomeMembersOf')

  /**
   * **[rico:is or was location of](https://www.ica.org/standards/RiC/ontology#isOrWasLocationOf)**
   *
   * Connects a Place to a Thing that is or was located in the            Place.
   *
   * @type        property
   * @parent      rico:isPlaceAssociatedWith
   * @domain      rico:Place
   * @range       rico:Thing
   */
  public readonly isOrWasLocationOf = this.toIri().concat('isOrWasLocationOf')

  /**
   * **[rico:is or was main subject of](https://www.ica.org/standards/RiC/ontology#isOrWasMainSubjectOf)**
   *
   * Inverse of 'has or had main subject' object            property.
   *
   * @type        property
   * @parent      rico:isOrWasSubjectOf
   * @domain      rico:Thing
   * @range       rico:RecordResource
   */
  public readonly isOrWasMainSubjectOf = this.toIri().concat('isOrWasMainSubjectOf')

  /**
   * **[rico:is or was manager of](https://www.ica.org/standards/RiC/ontology#isOrWasManagerOf)**
   *
   * Connects an Agent to a Record Resource or Instantiation that the            Agent managed or manages.
   *
   * @type        property
   * @parent      rico:hasOrHadAuthorityOver
   * @domain      rico:Agent
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly isOrWasManagerOf = this.toIri().concat('isOrWasManagerOf')

  /**
   * **[rico:is or was member of](https://www.ica.org/standards/RiC/ontology#isOrWasMemberOf)**
   *
   * Inverse of 'has or had member' object property.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Person
   * @range       rico:Group
   */
  public readonly isOrWasMemberOf = this.toIri().concat('isOrWasMemberOf')

  /**
   * **[rico:is or was name of](https://www.ica.org/standards/RiC/ontology#isOrWasNameOf)**
   *
   * Connects a Name to a Thing that it designated or            designates.
   *
   * @type        property
   * @parent      rico:isOrWasAppellationOf
   * @domain      rico:Name
   * @range       rico:Thing
   */
  public readonly isOrWasNameOf = this.toIri().concat('isOrWasNameOf')

  /**
   * **[rico:is or was occupation type of](https://www.ica.org/standards/RiC/ontology#isOrWasOccupationTypeOf)**
   *
   * Connects an Occupation Type to a Person whose occupation is or            was categorized by it.
   *
   * @type        property
   * @parent      rico:isOrWasDemographicGroupOf
   * @domain      rico:OccupationType
   * @range       rico:Person
   */
  public readonly isOrWasOccupationTypeOf = this.toIri().concat('isOrWasOccupationTypeOf')

  /**
   * **[rico:is or was occupied by](https://www.ica.org/standards/RiC/ontology#isOrWasOccupiedBy)**
   *
   * Inverse of 'occupies or occupied' object            property.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Position
   * @range       rico:Person
   */
  public readonly isOrWasOccupiedBy = this.toIri().concat('isOrWasOccupiedBy')

  /**
   * **[rico:is or was owner of](https://www.ica.org/standards/RiC/ontology#isOrWasOwnerOf)**
   *
   * Connects a Group, Person or Position to a Thing that this Agent            owns or owned.
   *
   * @type        property
   * @parent      rico:hasOrHadAuthorityOver
   * @domain      rico:Group or rico:Person or rico:Position
   * @range       rico:Thing
   */
  public readonly isOrWasOwnerOf = this.toIri().concat('isOrWasOwnerOf')

  /**
   * **[rico:is or was part of](https://www.ica.org/standards/RiC/ontology#isOrWasPartOf)**
   *
   * Inverse of 'has or had part' relation.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Thing
   */
  public readonly isOrWasPartOf = this.toIri().concat('isOrWasPartOf')

  /**
   * **[rico:is or was participant in](https://www.ica.org/standards/RiC/ontology#isOrWasParticipantIn)**
   *
   * Inverse of 'has or had participant' object            property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithEvent
   * @domain      rico:Thing
   * @range       rico:Event
   */
  public readonly isOrWasParticipantIn = this.toIri().concat('isOrWasParticipantIn')

  /**
   * **[rico:is or was performed by](https://www.ica.org/standards/RiC/ontology#isOrWasPerformedBy)**
   *
   * Connects an Activity to an Agent that performed or performs the            Activity.
   *
   * @type        property
   * @parent      rico:hasOrHadParticipant
   * @domain      rico:Activity
   * @range       rico:Agent
   */
  public readonly isOrWasPerformedBy = this.toIri().concat('isOrWasPerformedBy')

  /**
   * **[rico:is or was physical location of](https://www.ica.org/standards/RiC/ontology#isOrWasPhysicalLocationOf)**
   *
   * Connects a Physical Location to a Place, when it is or was its            location.
   *
   * @type        property
   * @parent      rico:isAssociatedWithPlace
   * @domain      rico:PhysicalLocation
   * @range       rico:Place
   */
  public readonly isOrWasPhysicalLocationOf = this.toIri().concat('isOrWasPhysicalLocationOf')

  /**
   * **[rico:is or was place name of](https://www.ica.org/standards/RiC/ontology#isOrWasPlaceNameOf)**
   *
   * Connects a Place Name to a Place that was or is designated by            it.
   *
   * @type        property
   * @parent      rico:isOrWasNameOf
   * @domain      rico:PlaceName
   * @range       rico:Place
   */
  public readonly isOrWasPlaceNameOf = this.toIri().concat('isOrWasPlaceNameOf')

  /**
   * **[rico:is or was place type of](https://www.ica.org/standards/RiC/ontology#isOrWasPlaceTypeOf)**
   *
   * Connects a Place Type to a Place that is or was categorized by            it.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:PlaceType
   * @range       rico:Place
   */
  public readonly isOrWasPlaceTypeOf = this.toIri().concat('isOrWasPlaceTypeOf')

  /**
   * **[rico:is or was record state of all members of](https://www.ica.org/standards/RiC/ontology#isOrWasRecordStateOfAllMembersOf)**
   *
   * Connects a Record State and a Record Set whose all past or            present Record or Record Part members have that Record State.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOfAllMembersOf
   * @domain      rico:RecordState
   * @range       rico:RecordSet
   */
  public readonly isOrWasRecordStateOfAllMembersOf = this.toIri().concat('isOrWasRecordStateOfAllMembersOf')

  /**
   * **[rico:is or was record state of some members of](https://www.ica.org/standards/RiC/ontology#isOrWasRecordStateOfSomeMembersOf)**
   *
   * Connects a Record State and a Record Set whose some past or            present Record or Record Part members have that Record State.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOfSomeMembersOf
   * @domain      rico:RecordState
   * @range       rico:RecordSet
   */
  public readonly isOrWasRecordStateOfSomeMembersOf = this.toIri().concat('isOrWasRecordStateOfSomeMembersOf')

  /**
   * **[rico:is or was regulated by](https://www.ica.org/standards/RiC/ontology#isOrWasRegulatedBy)**
   *
   * Inverse of the 'regulates or regulated' object            property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithRule
   * @domain      rico:Thing
   * @range       rico:Rule
   */
  public readonly isOrWasRegulatedBy = this.toIri().concat('isOrWasRegulatedBy')

  /**
   * **[rico:is or was responsible for enforcing](https://www.ica.org/standards/RiC/ontology#isOrWasResponsibleForEnforcing)**
   *
   * Inverse of 'is or was enforced by' object            property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithRule
   * @domain      rico:Agent
   * @range       rico:Rule
   */
  public readonly isOrWasResponsibleForEnforcing = this.toIri().concat('isOrWasResponsibleForEnforcing')

  /**
   * **[rico:is or was rule type of](https://www.ica.org/standards/RiC/ontology#isOrWasRuleTypeOf)**
   *
   * connects a Rule Type to a Rule that it categorized or            categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:RuleType
   * @range       rico:Rule
   */
  public readonly isOrWasRuleTypeOf = this.toIri().concat('isOrWasRuleTypeOf')

  /**
   * **[rico:is or was subdivision of](https://www.ica.org/standards/RiC/ontology#isOrWasSubdivisionOf)**
   *
   * Inverse of 'has or had subdivision' object            property.
   *
   * @type        property
   * @parent      rico:isOrWasPartOf
   * @domain      rico:Group
   * @range       rico:Group
   */
  public readonly isOrWasSubdivisionOf = this.toIri().concat('isOrWasSubdivisionOf')

  /**
   * **[rico:is or was subevent of](https://www.ica.org/standards/RiC/ontology#isOrWasSubeventOf)**
   *
   * Inverse of 'has or had subevent' object property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithEvent
   * @domain      rico:Event
   * @range       rico:Event
   */
  public readonly isOrWasSubeventOf = this.toIri().concat('isOrWasSubeventOf')

  /**
   * **[rico:is or was subject of](https://www.ica.org/standards/RiC/ontology#isOrWasSubjectOf)**
   *
   * Inverse of 'has or had subject' object property.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:RecordResource
   */
  public readonly isOrWasSubjectOf = this.toIri().concat('isOrWasSubjectOf')

  /**
   * **[rico:is or was subordinate to](https://www.ica.org/standards/RiC/ontology#isOrWasSubordinateTo)**
   *
   * Inverse of 'has or had subordinate' object            property.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Agent
   * @range       rico:Agent
   */
  public readonly isOrWasSubordinateTo = this.toIri().concat('isOrWasSubordinateTo')

  /**
   * **[rico:is or was title of](https://www.ica.org/standards/RiC/ontology#isOrWasTitleOf)**
   *
   * Connects a Title to a Record Resource, Instantiation or Rule            that it designated or designates.
   *
   * @type        property
   * @parent      rico:isOrWasNameOf
   * @domain      rico:Title
   * @range       rico:Instantiation or rico:RecordResource or rico:Rule
   */
  public readonly isOrWasTitleOf = this.toIri().concat('isOrWasTitleOf')

  /**
   * **[rico:is or was under authority of](https://www.ica.org/standards/RiC/ontology#isOrWasUnderAuthorityOf)**
   *
   * Inverse of 'has or had authority over' object            property.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Agent
   */
  public readonly isOrWasUnderAuthorityOf = this.toIri().concat('isOrWasUnderAuthorityOf')

  /**
   * **[rico:is original of ](https://www.ica.org/standards/RiC/ontology#isOriginalOf)**
   *
   * Connects the original version of a Record to a copy or a later            version.
   *
   * @type        property
   * @parent      rico:hasGeneticLinkToRecordResource
   * @domain      rico:Record or rico:RecordPart
   * @range       rico:Record or rico:RecordPart
   */
  public readonly isOriginalOf = this.toIri().concat('isOriginalOf')

  /**
   * **[rico:is place associated with ](https://www.ica.org/standards/RiC/ontology#isPlaceAssociatedWith)**
   *
   * Connects a Place to a Thing that Place is associated with the            existence and lifecycle of.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Place
   * @range       rico:Thing
   */
  public readonly isPlaceAssociatedWith = this.toIri().concat('isPlaceAssociatedWith')

  /**
   * **[rico:is production technique type of](https://www.ica.org/standards/RiC/ontology#isProductionTechniqueTypeOf)**
   *
   * Connects a Production Technique Type to an Instantiation whose            production technique is categorized by it.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:ProductionTechniqueType
   * @range       rico:Instantiation
   */
  public readonly isProductionTechniqueTypeOf = this.toIri().concat('isProductionTechniqueTypeOf')

  /**
   * **[rico:is provenance of ](https://www.ica.org/standards/RiC/ontology#isProvenanceOf)**
   *
   * inverse of 'has provenance' object property.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Agent
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly isProvenanceOf = this.toIri().concat('isProvenanceOf')

  /**
   * **[rico:isPublisherOf](https://www.ica.org/standards/RiC/ontology#isPublisherOf)**
   *
   * Connects an Agent to a Record Resource that it            published.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Agent
   * @range       rico:RecordResource
   */
  public readonly isPublisherOf = this.toIri().concat('isPublisherOf')

  /**
   * **[rico:is receiver of](https://www.ica.org/standards/RiC/ontology#isReceiverOf)**
   *
   * Inverse of 'received by' object property.
   *
   * @type        property
   * @parent      rico:isAccumulatorOf
   * @domain      rico:Agent
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly isReceiverOf = this.toIri().concat('isReceiverOf')

  /**
   * **[rico:is record resource associated with record resource ](https://www.ica.org/standards/RiC/ontology#isRecordResourceAssociatedWithRecordResource)**
   *
   * Connects two Record Resources. This object property is            symmetric.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:RecordResource
   * @range       rico:RecordResource
   */
  public readonly isRecordResourceAssociatedWithRecordResource = this.toIri().concat('isRecordResourceAssociatedWithRecordResource')

  /**
   * **[rico:is record set type of](https://www.ica.org/standards/RiC/ontology#isRecordSetTypeOf)**
   *
   * Connects a Record Set Type to a Record Set that it            categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:RecordSetType
   * @range       rico:RecordSet
   */
  public readonly isRecordSetTypeOf = this.toIri().concat('isRecordSetTypeOf')

  /**
   * **[rico:is record state of](https://www.ica.org/standards/RiC/ontology#isRecordStateOf)**
   *
   * Connects a Record State to a Record or Record Part whose state            it categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:RecordState
   * @range       rico:Record or rico:RecordPart
   */
  public readonly isRecordStateOf = this.toIri().concat('isRecordStateOf')

  /**
   * **[rico:is related to ](https://www.ica.org/standards/RiC/ontology#isRelatedTo)**
   *
   * The most generic object property. Connects an Thing to any other            Thing This is a symmetric object property.
   *
   * @type        property
   * @domain      rico:Thing
   * @range       rico:Thing
   */
  public readonly isRelatedTo = this.toIri().concat('isRelatedTo')

  /**
   * **[rico:is reply to](https://www.ica.org/standards/RiC/ontology#isReplyTo)**
   *
   * Inverse of 'has reply' object property.
   *
   * @type        property
   * @parent      rico:followsInTime
   * @domain      rico:RecordResource
   * @range       rico:RecordResource
   */
  public readonly isReplyTo = this.toIri().concat('isReplyTo')

  /**
   * **[rico:is representation type of](https://www.ica.org/standards/RiC/ontology#isRepresentationTypeOf)**
   *
   * Connects a Representation Type to an Instantiation that it            categorizes.
   *
   * @type        property
   * @parent      rico:isOrWasCategoryOf
   * @domain      rico:RepresentationType
   * @range       rico:Instantiation
   */
  public readonly isRepresentationTypeOf = this.toIri().concat('isRepresentationTypeOf')

  /**
   * **[rico:is responsible for issuing ](https://www.ica.org/standards/RiC/ontology#isResponsibleForIssuing)**
   *
   * Inverse of 'issued by' object property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithRule
   * @domain      rico:Agent
   * @range       rico:Rule
   */
  public readonly isResponsibleForIssuing = this.toIri().concat('isResponsibleForIssuing')

  /**
   * **[rico:is rule associated with ](https://www.ica.org/standards/RiC/ontology#isRuleAssociatedWith)**
   *
   * Connects a Rule to a Thing that is associated with the existence            and lifecycle of the Rule.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Rule
   * @range       rico:Thing
   */
  public readonly isRuleAssociatedWith = this.toIri().concat('isRuleAssociatedWith')

  /**
   * **[rico:is sender of ](https://www.ica.org/standards/RiC/ontology#isSenderOf)**
   *
   * Inverse of 'has sender' object property.
   *
   * @type        property
   * @parent      rico:isProvenanceOf
   * @domain      rico:Agent
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly isSenderOf = this.toIri().concat('isSenderOf')

  /**
   * **[rico:is source of ](https://www.ica.org/standards/RiC/ontology#isSourceOf)**
   *
   * Connects a Record Resource or an Agent to a Record Resource or            Relation, when the first is used as a source of information for identifying or            describing the second one.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Agent or rico:RecordResource
   * @range       rico:RecordResource or rico:Relation
   */
  public readonly isSourceOf = this.toIri().concat('isSourceOf')

  /**
   * **[rico:is successor of](https://www.ica.org/standards/RiC/ontology#isSuccessorOf)**
   *
   * Inverse of 'has successor' object property.
   *
   * @type        property
   * @parent      rico:followsInTime
   * @domain      rico:Agent
   * @range       rico:Agent
   */
  public readonly isSuccessorOf = this.toIri().concat('isSuccessorOf')

  /**
   * **[rico:is to use date of ](https://www.ica.org/standards/RiC/ontology#isToUseDateOf)**
   *
   * Connects a Date to an Appellation, when it is the date till            which the Appellation was used.
   *
   * @type        property
   * @parent      rico:isDateAssociatedWith
   * @domain      rico:Date
   * @range       rico:Appellation
   */
  public readonly isToUseDateOf = this.toIri().concat('isToUseDateOf')

  /**
   * **[rico:is unit of measurement of](https://www.ica.org/standards/RiC/ontology#isUnitOfMeasurementOf)**
   *
   * Inverse of 'has unit of measurement' object property
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:UnitOfMeasurement
   * @range       rico:Extent
   */
  public readonly isUnitOfMeasurementOf = this.toIri().concat('isUnitOfMeasurementOf')

  /**
   * **[rico:issued by ](https://www.ica.org/standards/RiC/ontology#issuedBy)**
   *
   * Connects a Rule to the Agent that issued or published the            Rule.
   *
   * @type        property
   * @parent      rico:isRuleAssociatedWith
   * @domain      rico:Rule
   * @range       rico:Agent
   */
  public readonly issuedBy = this.toIri().concat('issuedBy')

  /**
   * **[rico:knowing of relation has source ](https://www.ica.org/standards/RiC/ontology#knowingOfRelationHasSource)**
   *
   * Connects a Knowing Of Relation to a 'knowing of' Person (a            Person who has some knowledge of another one.)
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:KnowingOfRelation
   * @range       rico:Person
   */
  public readonly knowingOfRelationHasSource = this.toIri().concat('knowingOfRelationHasSource')

  /**
   * **[rico:knowing of relation has target ](https://www.ica.org/standards/RiC/ontology#knowingOfRelationHasTarget)**
   *
   * Connects a Knowing Of Relation to a 'known by' Person (a Person            on which another one has some has some knowledge.)
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:KnowingOfRelation
   * @range       rico:Person
   */
  public readonly knowingOfRelationHasTarget = this.toIri().concat('knowingOfRelationHasTarget')

  /**
   * **[rico:knowing relation connects ](https://www.ica.org/standards/RiC/ontology#knowingRelationConnects)**
   *
   * Connects Knowing Relation to any known Person            involved.
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:KnowingRelation
   * @range       rico:Person
   */
  public readonly knowingRelationConnects = this.toIri().concat('knowingRelationConnects')

  /**
   * **[rico:known by ](https://www.ica.org/standards/RiC/ontology#knownBy)**
   *
   * Inverse of 'knows of' object property.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly knownBy = this.toIri().concat('knownBy')

  /**
   * **[rico:knows ](https://www.ica.org/standards/RiC/ontology#knows)**
   *
   * Connects two Persons that directly know each other during their            existence. This object property is symmetric.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly knows = this.toIri().concat('knows')

  /**
   * **[rico:knows of ](https://www.ica.org/standards/RiC/ontology#knowsOf)**
   *
   * Connects a Person to another Person they have some knowledge of            through time or space.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Person
   * @range       rico:Person
   */
  public readonly knowsOf = this.toIri().concat('knowsOf')

  /**
   * **[rico:last modification date](https://www.ica.org/standards/RiC/ontology#lastModificationDate)**
   *
   * Date at which an entity was last updated.
   *
   * @type        property
   * @parent      rico:modificationDate
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly lastModificationDate = this.toIri().concat('lastModificationDate')

  /**
   * **[rico:latitude](https://www.ica.org/standards/RiC/ontology#latitude)**
   *
   * Distance in degrees north or south of the            equator.
   *
   * @type        property
   * @parent      rico:measure
   * @domain      rico:Coordinates
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly latitude = this.toIri().concat('latitude')

  /**
   * **[rico:leadership relation has source ](https://www.ica.org/standards/RiC/ontology#leadershipRelationHasSource)**
   *
   * Connects a Leadership Relation to a Person who is involved as a            leader.
   *
   * @type        property
   * @parent      rico:agentControlRelationHasSource
   * @domain      rico:LeadershipRelation
   * @range       rico:Person
   */
  public readonly leadershipRelationHasSource = this.toIri().concat('leadershipRelationHasSource')

  /**
   * **[rico:leadership relation has target ](https://www.ica.org/standards/RiC/ontology#leadershipRelationHasTarget)**
   *
   * Connects a Leadership Relation to a lead Group.
   *
   * @type        property
   * @parent      rico:agentControlRelationHasTarget
   * @domain      rico:LeadershipRelation
   * @range       rico:Group
   */
  public readonly leadershipRelationHasTarget = this.toIri().concat('leadershipRelationHasTarget')

  /**
   * **[rico:leadership with position ](https://www.ica.org/standards/RiC/ontology#leadershipWithPosition)**
   *
   * Connects a Leadership Relation to the Position occupied by the            leading Person.
   *
   * @type        property
   * @parent      rico:relationHasContext
   * @domain      rico:LeadershipRelation
   * @range       rico:Position
   */
  public readonly leadershipWithPosition = this.toIri().concat('leadershipWithPosition')

  /**
   * **[rico:location](https://www.ica.org/standards/RiC/ontology#location)**
   *
   * A delimitation of the physical territory of a place. This            datatype property is used to describe basic human-readable text such as an address, a            cadastral reference, or less precise information found in a record.
   *
   * @type        property
   * @domain      rico:Place
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly location = this.toIri().concat('location')

  /**
   * **[rico:longitude](https://www.ica.org/standards/RiC/ontology#longitude)**
   *
   * Distance in degrees east or west of a prime            meridian.
   *
   * @type        property
   * @parent      rico:measure
   * @domain      rico:Coordinates
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly longitude = this.toIri().concat('longitude')

  /**
   * **[rico:management relation has source ](https://www.ica.org/standards/RiC/ontology#managementRelationHasSource)**
   *
   * Connects a Management Relation to an Agent who is involved as a            manager.
   *
   * @type        property
   * @parent      rico:authorityRelationHasSource
   * @domain      rico:ManagementRelation
   * @range       rico:Agent
   */
  public readonly managementRelationHasSource = this.toIri().concat('managementRelationHasSource')

  /**
   * **[rico:management relation has target ](https://www.ica.org/standards/RiC/ontology#managementRelationHasTarget)**
   *
   * Connects a Management Relation to a Record Resource or            Instantiation that is involved as a managed thing.
   *
   * @type        property
   * @parent      rico:authorityRelationHasTarget
   * @domain      rico:ManagementRelation
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly managementRelationHasTarget = this.toIri().concat('managementRelationHasTarget')

  /**
   * **[rico:mandate is source of mandate relation ](https://www.ica.org/standards/RiC/ontology#mandateIsSourceOfMandateRelation)**
   *
   * Connects a Mandate to a Mandate Relation.
   *
   * @type        property
   * @parent      rico:ruleIsSourceOfRuleRelation
   * @domain      rico:Mandate
   * @range       rico:MandateRelation
   */
  public readonly mandateIsSourceOfMandateRelation = this.toIri().concat('mandateIsSourceOfMandateRelation')

  /**
   * **[rico:mandate relation has source ](https://www.ica.org/standards/RiC/ontology#mandateRelationHasSource)**
   *
   * Connects a Mandate Relation to a Mandate.
   *
   * @type        property
   * @parent      rico:ruleRelationHasSource
   * @domain      rico:MandateRelation
   * @range       rico:Mandate
   */
  public readonly mandateRelationHasSource = this.toIri().concat('mandateRelationHasSource')

  /**
   * **[rico:mandate relation has target ](https://www.ica.org/standards/RiC/ontology#mandateRelationHasTarget)**
   *
   * Connects a Mandate Relation to an Agent who is given the            authority or competencies to act.
   *
   * @type        property
   * @parent      rico:ruleRelationHasTarget
   * @domain      rico:MandateRelation
   * @range       rico:Agent
   */
  public readonly mandateRelationHasTarget = this.toIri().concat('mandateRelationHasTarget')

  /**
   * **[rico:measure](https://www.ica.org/standards/RiC/ontology#measure)**
   *
   * The extent, quantity, amount, or degree of an entity, as            determined by measurement or calculation.
   *
   * @type        property
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly measure = this.toIri().concat('measure')

  /**
   * **[rico:membership relation has source ](https://www.ica.org/standards/RiC/ontology#membershipRelationHasSource)**
   *
   * Connects a Membership Relation to the Group that has            member(s).
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:MembershipRelation
   * @range       rico:Group
   */
  public readonly membershipRelationHasSource = this.toIri().concat('membershipRelationHasSource')

  /**
   * **[rico:membership relation has target ](https://www.ica.org/standards/RiC/ontology#membershipRelationHasTarget)**
   *
   * Connects a Membership Relation to a Person who is involved as a            member.
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:MembershipRelation
   * @range       rico:Person
   */
  public readonly membershipRelationHasTarget = this.toIri().concat('membershipRelationHasTarget')

  /**
   * **[rico:membership with position ](https://www.ica.org/standards/RiC/ontology#membershipWithPosition)**
   *
   * Connects a Membership Relation to the Position occupied by the            member Person(s).
   *
   * @type        property
   * @parent      rico:relationHasContext
   * @domain      rico:MembershipRelation
   * @range       rico:Position
   */
  public readonly membershipWithPosition = this.toIri().concat('membershipWithPosition')

  /**
   * **[rico:migrated from](https://www.ica.org/standards/RiC/ontology#migratedFrom)**
   *
   * Inverse of 'migrated into' object property.
   *
   * @type        property
   * @parent      rico:isDerivedFromInstantiation
   * @domain      rico:Instantiation
   * @range       rico:Instantiation
   */
  public readonly migratedFrom = this.toIri().concat('migratedFrom')

  /**
   * **[rico:migrated into](https://www.ica.org/standards/RiC/ontology#migratedInto)**
   *
   * Connects an Instantiation to a version it has been migrated            to.
   *
   * @type        property
   * @parent      rico:hasDerivedInstantiation
   * @domain      rico:Instantiation
   * @range       rico:Instantiation
   */
  public readonly migratedInto = this.toIri().concat('migratedInto')

  /**
   * **[rico:migration relation has source ](https://www.ica.org/standards/RiC/ontology#migrationRelationHasSource)**
   *
   * Connects a Migration Relation to the migrated            Instantiation.
   *
   * @type        property
   * @parent      rico:derivationRelationHasSource
   * @domain      rico:MigrationRelation
   * @range       rico:Instantiation
   */
  public readonly migrationRelationHasSource = this.toIri().concat('migrationRelationHasSource')

  /**
   * **[rico:migration relation has target ](https://www.ica.org/standards/RiC/ontology#migrationRelationHasTarget)**
   *
   * Connects a Migration Relation to a resulting            Instantiation.
   *
   * @type        property
   * @parent      rico:derivationRelationHasTarget
   * @domain      rico:MigrationRelation
   * @range       rico:Instantiation
   */
  public readonly migrationRelationHasTarget = this.toIri().concat('migrationRelationHasTarget')

  /**
   * **[rico:modification date](https://www.ica.org/standards/RiC/ontology#modificationDate)**
   *
   * Date of the modification of an entity.
   *
   * @type        property
   * @parent      rico:date
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly modificationDate = this.toIri().concat('modificationDate')

  /**
   * **[rico:name](https://www.ica.org/standards/RiC/ontology#name)**
   *
   * A label, title or term designating the entity in order to make            it distinguishable from other similar entities. For Record Resource or Instantiation,            the Name is generally assigned by an Agent as most do not have a Name given when            created.
   *
   * @type        property
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly name = this.toIri().concat('name')

  /**
   * **[rico:normalized date value](https://www.ica.org/standards/RiC/ontology#normalizedDateValue)**
   *
   * Date representation based on a standard, preferably            machine-readable.
   *
   * @type        property
   * @parent      rico:normalizedValue
   * @domain      rico:Date
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly normalizedDateValue = this.toIri().concat('normalizedDateValue')

  /**
   * **[rico:normalized value](https://www.ica.org/standards/RiC/ontology#normalizedValue)**
   *
   * Value representation based on a standard, preferably            machine-readable.
   *
   * @type        property
   * @parent      rico:textualValue
   * @domain      rico:Appellation or rico:Date
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly normalizedValue = this.toIri().concat('normalizedValue')

  /**
   * **[rico:occupies or occupied](https://www.ica.org/standards/RiC/ontology#occupiesOrOccupied)**
   *
   * Connects a Person to a Position they occupy or            occupied.
   *
   * @type        property
   * @parent      rico:isAgentAssociatedWithAgent
   * @domain      rico:Person
   * @range       rico:Position
   */
  public readonly occupiesOrOccupied = this.toIri().concat('occupiesOrOccupied')

  /**
   * **[rico:overlaps or overlapped](https://www.ica.org/standards/RiC/ontology#overlapsOrOverlapped)**
   *
   * Connects two Places that geographically overlap or overlapped.            This object property is symmetric.
   *
   * @type        property
   * @parent      rico:isAssociatedWithPlace
   * @domain      rico:Place
   * @range       rico:Place
   */
  public readonly overlapsOrOverlapped = this.toIri().concat('overlapsOrOverlapped')

  /**
   * **[rico:ownership relation has source ](https://www.ica.org/standards/RiC/ontology#ownershipRelationHasSource)**
   *
   * Connects an Ownership Relation to a Person, Group or Position            that is involved as an owner.
   *
   * @type        property
   * @parent      rico:authorityRelationHasSource
   * @domain      rico:OwnershipRelation
   * @range       rico:Group or rico:Person or rico:Position
   */
  public readonly ownershipRelationHasSource = this.toIri().concat('ownershipRelationHasSource')

  /**
   * **[rico:owner ship relation has target ](https://www.ica.org/standards/RiC/ontology#ownershipRelationHasTarget)**
   *
   * Connects an Ownership Relation to a Thing that is            owned.
   *
   * @type        property
   * @parent      rico:authorityRelationHasTarget
   * @domain      rico:OwnershipRelation
   * @range       rico:Thing
   */
  public readonly ownershipRelationHasTarget = this.toIri().concat('ownershipRelationHasTarget')

  /**
   * **[rico:performance relation has source ](https://www.ica.org/standards/RiC/ontology#performanceRelationHasSource)**
   *
   * Connects a Performance Relation to a performed            Activity.
   *
   * @type        property
   * @parent      rico:relationHasSource
   * @domain      rico:PerformanceRelation
   * @range       rico:Activity
   */
  public readonly performanceRelationHasSource = this.toIri().concat('performanceRelationHasSource')

  /**
   * **[rico:performance relation has target ](https://www.ica.org/standards/RiC/ontology#performanceRelationHasTarget)**
   *
   * Connects a Performance Relation to a performing            Agent.
   *
   * @type        property
   * @parent      rico:relationHasTarget
   * @domain      rico:PerformanceRelation
   * @range       rico:Agent
   */
  public readonly performanceRelationHasTarget = this.toIri().concat('performanceRelationHasTarget')

  /**
   * **[rico:performs or performed](https://www.ica.org/standards/RiC/ontology#performsOrPerformed)**
   *
   * Inverse of 'is or was performed by' object            property.
   *
   * @type        property
   * @parent      rico:isOrWasParticipantIn
   * @domain      rico:Agent
   * @range       rico:Activity
   */
  public readonly performsOrPerformed = this.toIri().concat('performsOrPerformed')

  /**
   * **[rico:person has correspondence relation ](https://www.ica.org/standards/RiC/ontology#personHasCorrespondenceRelation)**
   *
   * Connects a Person to a Correspondence Relation.
   *
   * @type        property
   * @parent      rico:personHasKnowingRelation
   * @domain      rico:Person
   * @range       rico:CorrespondenceRelation
   */
  public readonly personHasCorrespondenceRelation = this.toIri().concat('personHasCorrespondenceRelation')

  /**
   * **[rico:person has family relation ](https://www.ica.org/standards/RiC/ontology#personHasFamilyRelation)**
   *
   * Connects a Person to a Family Relation.
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Person
   * @range       rico:FamilyRelation
   */
  public readonly personHasFamilyRelation = this.toIri().concat('personHasFamilyRelation')

  /**
   * **[rico:person has knowing relation ](https://www.ica.org/standards/RiC/ontology#personHasKnowingRelation)**
   *
   * Connects a Person to a Knowing Relation.
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Person
   * @range       rico:KnowingRelation
   */
  public readonly personHasKnowingRelation = this.toIri().concat('personHasKnowingRelation')

  /**
   * **[rico:person has sibling relation ](https://www.ica.org/standards/RiC/ontology#personHasSiblingRelation)**
   *
   * Connects a Person to a Sibling Relation.
   *
   * @type        property
   * @parent      rico:personHasFamilyRelation
   * @domain      rico:Person
   * @range       rico:SiblingRelation
   */
  public readonly personHasSiblingRelation = this.toIri().concat('personHasSiblingRelation')

  /**
   * **[rico:person has spouse relation ](https://www.ica.org/standards/RiC/ontology#personHasSpouseRelation)**
   *
   * Connects a Person to a Spouse Relation.
   *
   * @type        property
   * @parent      rico:personHasFamilyRelation
   * @domain      rico:Person
   * @range       rico:SpouseRelation
   */
  public readonly personHasSpouseRelation = this.toIri().concat('personHasSpouseRelation')

  /**
   * **[rico:person is source of child relation ](https://www.ica.org/standards/RiC/ontology#personIsSourceOfChildRelation)**
   *
   * Connects a Person (as a parent) to a Child            Relation.
   *
   * @type        property
   * @parent      rico:personIsSourceOfDescendanceRelation
   * @domain      rico:Person
   * @range       rico:ChildRelation
   */
  public readonly personIsSourceOfChildRelation = this.toIri().concat('personIsSourceOfChildRelation')

  /**
   * **[rico:person is source of descendance relation ](https://www.ica.org/standards/RiC/ontology#personIsSourceOfDescendanceRelation)**
   *
   * Connects a Person (as an ancestor) to a Descendance            Relation.
   *
   * @type        property
   * @parent      rico:agentIsSourceOfAgentTemporalRelation
   * @domain      rico:Person
   * @range       rico:DescendanceRelation
   */
  public readonly personIsSourceOfDescendanceRelation = this.toIri().concat('personIsSourceOfDescendanceRelation')

  /**
   * **[rico:person is source of knowing of relation ](https://www.ica.org/standards/RiC/ontology#personIsSourceOfKnowingOfRelation)**
   *
   * Connects a Person (who has some knowledge of another one) to a            Knowing Of Relation.
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Person
   * @range       rico:KnowingOfRelation
   */
  public readonly personIsSourceOfKnowingOfRelation = this.toIri().concat('personIsSourceOfKnowingOfRelation')

  /**
   * **[rico:person is source of leadership relation ](https://www.ica.org/standards/RiC/ontology#personIsSourceOfLeadershipRelation)**
   *
   * Connects a Person (as a leader) to a Leadership            Relation.
   *
   * @type        property
   * @parent      rico:agentIsSourceOfAgentControlRelation
   * @domain      rico:Person
   * @range       rico:LeadershipRelation
   */
  public readonly personIsSourceOfLeadershipRelation = this.toIri().concat('personIsSourceOfLeadershipRelation')

  /**
   * **[rico:person is source of position holding relation ](https://www.ica.org/standards/RiC/ontology#personIsSourceOfPositionHoldingRelation)**
   *
   * Connects a Person (who occupies a Position) to a Position            Holding Relation.
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Person
   * @range       rico:PositionHoldingRelation
   */
  public readonly personIsSourceOfPositionHoldingRelation = this.toIri().concat('personIsSourceOfPositionHoldingRelation')

  /**
   * **[rico:person is source of teaching relation ](https://www.ica.org/standards/RiC/ontology#personIsSourceOfTeachingRelation)**
   *
   * Connects a Person (as a teacher) to a Teaching            Relation.
   *
   * @type        property
   * @parent      rico:personHasKnowingRelation
   * @domain      rico:Person
   * @range       rico:TeachingRelation
   */
  public readonly personIsSourceOfTeachingRelation = this.toIri().concat('personIsSourceOfTeachingRelation')

  /**
   * **[rico:person is target of child relation ](https://www.ica.org/standards/RiC/ontology#personIsTargetOfChildRelation)**
   *
   * Connects a Person (as a child) to a Child            Relation.
   *
   * @type        property
   * @parent      rico:personIsTargetOfDescendanceRelation
   * @domain      rico:Person
   * @range       rico:ChildRelation
   */
  public readonly personIsTargetOfChildRelation = this.toIri().concat('personIsTargetOfChildRelation')

  /**
   * **[rico:person is target of descendance relation ](https://www.ica.org/standards/RiC/ontology#personIsTargetOfDescendanceRelation)**
   *
   * Connects a Person (as a descendant) to a Descendance            Relation.
   *
   * @type        property
   * @parent      rico:agentIsTargetOfAgentTemporalRelation
   * @domain      rico:Person
   * @range       rico:DescendanceRelation
   */
  public readonly personIsTargetOfDescendanceRelation = this.toIri().concat('personIsTargetOfDescendanceRelation')

  /**
   * **[rico:person is target of knowing of relation ](https://www.ica.org/standards/RiC/ontology#personIsTargetOfKnowingOfRelation)**
   *
   * Connects a Person (of which another Person has some knowledge)            to a Knowing Of Relation.
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Person
   * @range       rico:KnowingOfRelation
   */
  public readonly personIsTargetOfKnowingOfRelation = this.toIri().concat('personIsTargetOfKnowingOfRelation')

  /**
   * **[rico:person is target of membership relation ](https://www.ica.org/standards/RiC/ontology#personIsTargetOfMembershipRelation)**
   *
   * Connects a Person (as a member of a Group) to a Membership            Relation.
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Person
   * @range       rico:MembershipRelation
   */
  public readonly personIsTargetOfMembershipRelation = this.toIri().concat('personIsTargetOfMembershipRelation')

  /**
   * **[rico:person is target of teaching relation ](https://www.ica.org/standards/RiC/ontology#personIsTargetOfTeachingRelation)**
   *
   * Connects a Person (as a student) to a Teaching            Relation.
   *
   * @type        property
   * @parent      rico:personHasKnowingRelation
   * @domain      rico:Person
   * @range       rico:TeachingRelation
   */
  public readonly personIsTargetOfTeachingRelation = this.toIri().concat('personIsTargetOfTeachingRelation')

  /**
   * **[rico:physical characteristics](https://www.ica.org/standards/RiC/ontology#physicalCharacteristics)**
   *
   * Information about the physical features of the Instantiation.            Includes information about the physical nature and condition such as conservation            status.
   *
   * @type        property
   * @domain      rico:Instantiation
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly physicalCharacteristics = this.toIri().concat('physicalCharacteristics')

  /**
   * **[rico:physical or logical extent](https://www.ica.org/standards/RiC/ontology#physicalOrLogicalExtent)**
   *
   * Countable characteristics of the content of an entity expressed            as a quantity.
   *
   * @type        property
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly physicalOrLogicalExtent = this.toIri().concat('physicalOrLogicalExtent')

  /**
   * **[rico:place is source of place relation ](https://www.ica.org/standards/RiC/ontology#placeIsSourceOfPlaceRelation)**
   *
   * Connects a Place (as associated to a Thing) to a Place            Relation.
   *
   * @type        property
   * @parent      rico:thingIsSourceOfRelation
   * @domain      rico:Place
   * @range       rico:PlaceRelation
   */
  public readonly placeIsSourceOfPlaceRelation = this.toIri().concat('placeIsSourceOfPlaceRelation')

  /**
   * **[rico:place relation has source ](https://www.ica.org/standards/RiC/ontology#placeRelationHasSource)**
   *
   * Connects a Place Relation to the Place concerned.
   *
   * @type        property
   * @parent      rico:relationHasSource
   * @domain      rico:PlaceRelation
   * @range       rico:Place
   */
  public readonly placeRelationHasSource = this.toIri().concat('placeRelationHasSource')

  /**
   * **[rico:place relation has target ](https://www.ica.org/standards/RiC/ontology#placeRelationHasTarget)**
   *
   * Connects a Place Relation to a Thing that is associated to the            Place.
   *
   * @type        property
   * @parent      rico:relationHasTarget
   * @domain      rico:PlaceRelation
   * @range       rico:Thing
   */
  public readonly placeRelationHasTarget = this.toIri().concat('placeRelationHasTarget')

  /**
   * **[rico:position holding relation has source ](https://www.ica.org/standards/RiC/ontology#positionHoldingRelationHasSource)**
   *
   * Connects a Position Holding Relation to a Person (who occupies a            Position).
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:PositionHoldingRelation
   * @range       rico:Person
   */
  public readonly positionHoldingRelationHasSource = this.toIri().concat('positionHoldingRelationHasSource')

  /**
   * **[rico:position holding relation has target ](https://www.ica.org/standards/RiC/ontology#positionHoldingRelationHasTarget)**
   *
   * Connects a Position Holding Relation to a Position (that is            occupied).
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:PositionHoldingRelation
   * @range       rico:Position
   */
  public readonly positionHoldingRelationHasTarget = this.toIri().concat('positionHoldingRelationHasTarget')

  /**
   * **[rico:position is context of leadership relation ](https://www.ica.org/standards/RiC/ontology#positionIsContextOfLeadershipRelation)**
   *
   * Connects a Position to a Leadership Relation (the leading Person            occupies that Position).
   *
   * @type        property
   * @parent      rico:thingIsContextOfRelation
   * @domain      rico:Position
   * @range       rico:LeadershipRelation
   */
  public readonly positionIsContextOfLeadershipRelation = this.toIri().concat('positionIsContextOfLeadershipRelation')

  /**
   * **[rico:position is context of membership relation ](https://www.ica.org/standards/RiC/ontology#positionIsContextOfMembershipRelation)**
   *
   * Connects a Position to a Membership Relation (the member Person            occupies that Position).
   *
   * @type        property
   * @parent      rico:thingIsContextOfRelation
   * @domain      rico:Position
   * @range       rico:MembershipRelation
   */
  public readonly positionIsContextOfMembershipRelation = this.toIri().concat('positionIsContextOfMembershipRelation')

  /**
   * **[rico:position is source of position to group relation ](https://www.ica.org/standards/RiC/ontology#positionIsSourceOfPositionToGroupRelation)**
   *
   * Connects a Position (that exists within a Group) to a Position            to Group Relation.
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Position
   * @range       rico:PositionToGroupRelation
   */
  public readonly positionIsSourceOfPositionToGroupRelation = this.toIri().concat('positionIsSourceOfPositionToGroupRelation')

  /**
   * **[rico:position is target of position holding relation ](https://www.ica.org/standards/RiC/ontology#positionIsTargetOfPositionHoldingRelation)**
   *
   * Connects a Position (that is occupied by a Person) to a Position            Holding Relation.
   *
   * @type        property
   * @parent      rico:agentIsConnectedToAgentRelation
   * @domain      rico:Position
   * @range       rico:PositionHoldingRelation
   */
  public readonly positionIsTargetOfPositionHoldingRelation = this.toIri().concat('positionIsTargetOfPositionHoldingRelation')

  /**
   * **[rico:position to group relation has source ](https://www.ica.org/standards/RiC/ontology#positionToGroupRelationHasSource)**
   *
   * Connects a Position to Group Relation to a Position (that exists            in a Group).
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:PositionToGroupRelation
   * @range       rico:Position
   */
  public readonly positionToGroupRelationHasSource = this.toIri().concat('positionToGroupRelationHasSource')

  /**
   * **[rico:position to group relation has target ](https://www.ica.org/standards/RiC/ontology#positionToGroupRelationHasTarget)**
   *
   * Connects a Position to Group Relation to a Group (in which a            Position exists).
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:PositionToGroupRelation
   * @range       rico:Group
   */
  public readonly positionToGroupRelationHasTarget = this.toIri().concat('positionToGroupRelationHasTarget')

  /**
   * **[rico:precedes in time](https://www.ica.org/standards/RiC/ontology#precedesInTime)**
   *
   * Connects a Thing to a Thing that follows it in chronological            order.
   *
   * @type        property
   * @parent      rico:precedesOrPreceded
   * @domain      rico:Thing
   * @range       rico:Thing
   */
  public readonly precedesInTime = this.toIri().concat('precedesInTime')

  /**
   * **[rico:precedes or preceded](https://www.ica.org/standards/RiC/ontology#precedesOrPreceded)**
   *
   * Connects a Thing to a Thing that follows or followed it in some            sequence.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Thing
   */
  public readonly precedesOrPreceded = this.toIri().concat('precedesOrPreceded')

  /**
   * **[rico:production technique](https://www.ica.org/standards/RiC/ontology#productionTechnique)**
   *
   * Method used in the representation of information on the            Instantiation.
   *
   * @type        property
   * @domain      rico:Instantiation
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly productionTechnique = this.toIri().concat('productionTechnique')

  /**
   * **[rico:provenance relation has source ](https://www.ica.org/standards/RiC/ontology#provenanceRelationHasSource)**
   *
   * Connects a Provenance Relation to a Record Resource or            Instantiation.
   *
   * @type        property
   * @parent      rico:relationHasSource
   * @domain      rico:ProvenanceRelation
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly provenanceRelationHasSource = this.toIri().concat('provenanceRelationHasSource')

  /**
   * **[rico:provenance relation has target ](https://www.ica.org/standards/RiC/ontology#provenanceRelationHasTarget)**
   *
   * Connects a Provenance Relation to an Agent or            Activity.
   *
   * @type        property
   * @parent      rico:relationHasTarget
   * @domain      rico:ProvenanceRelation
   * @range       rico:Activity or rico:Agent
   */
  public readonly provenanceRelationHasTarget = this.toIri().concat('provenanceRelationHasTarget')

  /**
   * **[rico:proxy for ](https://www.ica.org/standards/RiC/ontology#proxyFor)**
   *
   * Connects a Proxy to the Record Resource it stands for in the            specific context of a Record Set.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Proxy
   * @range       rico:RecordResource
   */
  public readonly proxyFor = this.toIri().concat('proxyFor')

  /**
   * **[rico:proxy in ](https://www.ica.org/standards/RiC/ontology#proxyIn)**
   *
   * Connects a Proxy to the Record Set in which it stands for            (represents) another Record Resource.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Proxy
   * @range       rico:RecordSet
   */
  public readonly proxyIn = this.toIri().concat('proxyIn')

  /**
   * **[rico:publication date](https://www.ica.org/standards/RiC/ontology#publicationDate)**
   *
   * Date of the publication of a Record Resource.
   *
   * @type        property
   * @parent      rico:date
   * @domain      rico:RecordResource
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly publicationDate = this.toIri().concat('publicationDate')

  /**
   * **[rico:quality of representation](https://www.ica.org/standards/RiC/ontology#qualityOfRepresentation)**
   *
   * Conditions of an Instantiation that impact the legibility or            completeness of Record Resource, and thus the viability of its use. Conditions may be            associated with deficiencies in the processes of Record (re)creation or capture, or the            deterioration of the Instantiation (e.g. its carrier) causing loss of information of the            record over time
   *
   * @type        property
   * @domain      rico:Instantiation
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly qualityOfRepresentation = this.toIri().concat('qualityOfRepresentation')

  /**
   * **[rico:quantity](https://www.ica.org/standards/RiC/ontology#quantity)**
   *
   * Machine-readable quantity.
   *
   * @type        property
   * @parent      rico:textualValue
   * @domain      rico:Extent
   * @range       http://www.w3.org/2001/XMLSchema#decimal
   */
  public readonly quantity = this.toIri().concat('quantity')

  /**
   * **[rico:record is source of authorship relation](https://www.ica.org/standards/RiC/ontology#recordIsSourceOfAuthorshipRelation)**
   *
   * Connects a Record and an Authorship Relation.
   *
   * @type        property
   * @parent      rico:recordResourceOrInstantiationIsSourceOfCreationRelation
   * @domain      rico:Record
   * @range       rico:AuthorshipRelation
   */
  public readonly recordIsSourceOfAuthorshipRelation = this.toIri().concat('recordIsSourceOfAuthorshipRelation')

  /**
   * **[rico:Record Resource extent](https://www.ica.org/standards/RiC/ontology#recordResourceExtent)**
   *
   * The quantity of information content as human experienced            represented in the Record Resource. The method and precision of expressing the quantity            of information represented in a Record Resource will vary by the kind of Record Resource            being described as well as by processing economy constraints. For record sets, quantity            may be expressed as number of records, or, for analogue records in particular, by the            physical storage dimensions of the Record members. For individual records or record            parts, quantity may be expressed in more precise terms. Use if you don't use            RecordResourceExtent class and its properties for handling such            information.
   *
   * @type        property
   * @parent      rico:physicalOrLogicalExtent
   * @domain      rico:RecordResource
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly recordResourceExtent = this.toIri().concat('recordResourceExtent')

  /**
   * **[rico:record resource genetic relation connects ](https://www.ica.org/standards/RiC/ontology#recordResourceGeneticRelationConnects)**
   *
   * Connects a Record Resource Genetic Relation to one of the            associated Record Resources.
   *
   * @type        property
   * @parent      rico:recordResourceRelationConnects
   * @domain      rico:RecordResourceGeneticRelation
   * @range       rico:RecordResource
   */
  public readonly recordResourceGeneticRelationConnects = this.toIri().concat('recordResourceGeneticRelationConnects')

  /**
   * **[rico:record resource holding relation has source ](https://www.ica.org/standards/RiC/ontology#recordResourceHoldingRelationHasSource)**
   *
   * Connects a Record Resource Holding Relation to an Agent (as the            holder of a Record Resource or Instantiation).
   *
   * @type        property
   * @parent      rico:managementRelationHasSource
   * @domain      rico:RecordResourceHoldingRelation
   * @range       rico:Agent
   */
  public readonly recordResourceHoldingRelationHasSource = this.toIri().concat('recordResourceHoldingRelationHasSource')

  /**
   * **[rico:record resource holding relation has target ](https://www.ica.org/standards/RiC/ontology#recordResourceHoldingRelationHasTarget)**
   *
   * Connects a Record Resource Holding Relation to a Record Resource            or Instantiation (that is held by an Agent).
   *
   * @type        property
   * @parent      rico:managementRelationHasTarget
   * @domain      rico:RecordResourceHoldingRelation
   * @range       rico:Instantiation or rico:RecordResource
   */
  public readonly recordResourceHoldingRelationHasTarget = this.toIri().concat('recordResourceHoldingRelationHasTarget')

  /**
   * **[rico:record resource is connected to record resource genetic relation
        ](https://www.ica.org/standards/RiC/ontology#recordResourceIsConnectedToRecordResourceGeneticRelation)**
   *
   * Connects a Record Resource to a Record Resource Genetic            Relation.
   *
   * @type        property
   * @parent      rico:recordResourceIsConnectedToRecordResourceRelation
   * @domain      rico:RecordResource
   * @range       rico:RecordResourceGeneticRelation
   */
  public readonly recordResourceIsConnectedToRecordResourceGeneticRelation = this.toIri().concat('recordResourceIsConnectedToRecordResourceGeneticRelation')

  /**
   * **[rico:record resource is connected to record resource relation
        ](https://www.ica.org/standards/RiC/ontology#recordResourceIsConnectedToRecordResourceRelation)**
   *
   * Connects a Record Resource to a Record Resource            Relation.
   *
   * @type        property
   * @parent      rico:thingIsConnectedToRelation
   * @domain      rico:RecordResource
   * @range       rico:RecordResourceToRecordResourceRelation
   */
  public readonly recordResourceIsConnectedToRecordResourceRelation = this.toIri().concat('recordResourceIsConnectedToRecordResourceRelation')

  /**
   * **[rico:record resource is source of record resource to instantiation
            relation ](https://www.ica.org/standards/RiC/ontology#recordResourceIsSourceOfRecordResourceToInstantiationRelation)**
   *
   * Connects a Record Resource (that was instantiated) to a Record            Resource To Instantiation Relation
   *
   * @type        property
   * @parent      rico:thingIsSourceOfRelation
   * @domain      rico:RecordResource
   * @range       rico:RecordResourceToInstantiationRelation
   */
  public readonly recordResourceIsSourceOfRecordResourceToInstantiationRelation = this.toIri().concat('recordResourceIsSourceOfRecordResourceToInstantiationRelation')

  /**
   * **[rico:record resource or instantiation is source of accumulation
            relation ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsSourceOfAccumulationRelation)**
   *
   * Connects a Record Resource or Instantiation (that is            accumulated) to an Accumulation Relation.
   *
   * @type        property
   * @parent      rico:recordResourceOrInstantiationIsSourceOfAgentOriginationRelation
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:AccumulationRelation
   */
  public readonly recordResourceOrInstantiationIsSourceOfAccumulationRelation = this.toIri().concat('recordResourceOrInstantiationIsSourceOfAccumulationRelation')

  /**
   * **[rico:record resource or instantiation is source of activity
            documentation relation ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation)**
   *
   * Connects a Record Resource or Instantiation (that documents an            Activity) to an Activity Documentation Relation.
   *
   * @type        property
   * @parent      rico:recordResourceOrInstantiationIsSourceOfProvenanceRelation
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:ActivityDocumentationRelation
   */
  public readonly recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation = this.toIri().concat('recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation')

  /**
   * **[rico:record resource or instantiation is source of agent origination
            relation ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsSourceOfAgentOriginationRelation)**
   *
   * Connects a Record Resource or Instantiation (that is created,            sent or accumulated) to an Agent Origination Relation.
   *
   * @type        property
   * @parent      rico:recordResourceOrInstantiationIsSourceOfProvenanceRelation
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:AgentOriginationRelation
   */
  public readonly recordResourceOrInstantiationIsSourceOfAgentOriginationRelation = this.toIri().concat('recordResourceOrInstantiationIsSourceOfAgentOriginationRelation')

  /**
   * **[rico:record resource or instantiation is source of creation relation
        ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsSourceOfCreationRelation)**
   *
   * Connects a Record Resource or Instantiation (that is created) to            a Creation Relation.
   *
   * @type        property
   * @parent      rico:recordResourceOrInstantiationIsSourceOfAgentOriginationRelation
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:CreationRelation
   */
  public readonly recordResourceOrInstantiationIsSourceOfCreationRelation = this.toIri().concat('recordResourceOrInstantiationIsSourceOfCreationRelation')

  /**
   * **[rico:record resource or instantiation is source of provenance relation
        ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsSourceOfProvenanceRelation)**
   *
   * Connects a Record Resource or Instantiation (that is created or            accumulated by an Agent, or documents an Activity) to a Provenance            Relation.
   *
   * @type        property
   * @parent      rico:thingIsSourceOfRelation
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:ProvenanceRelation
   */
  public readonly recordResourceOrInstantiationIsSourceOfProvenanceRelation = this.toIri().concat('recordResourceOrInstantiationIsSourceOfProvenanceRelation')

  /**
   * **[rico:record resource or instantiation is target of intellectual
            property rights relation ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation)**
   *
   * Connects a Record Resource or Instantiation (on which some            intellectual property rights are held) to an Intellectual Property Rights            Relation.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfAuthorityRelation
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:IntellectualPropertyRightsRelation
   */
  public readonly recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation = this.toIri().concat('recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation')

  /**
   * **[rico:record resource or instantiation is target of management relation
        ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsTargetOfManagementRelation)**
   *
   * Connects a Record Resource or Instantiation (that is managed by            an Agent) to a Management Relation.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfAuthorityRelation
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:ManagementRelation
   */
  public readonly recordResourceOrInstantiationIsTargetOfManagementRelation = this.toIri().concat('recordResourceOrInstantiationIsTargetOfManagementRelation')

  /**
   * **[rico:record resource or instantiation is target of record resource
            holding relation ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation)**
   *
   * Connects a Record Resource or Instantiation (that is held by an            Agent) to a Record Resource Holding Relation.
   *
   * @type        property
   * @parent      rico:recordResourceOrInstantiationIsTargetOfManagementRelation
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       rico:RecordResourceHoldingRelation
   */
  public readonly recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation = this.toIri().concat('recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation')

  /**
   * **[rico:record resource relation connects ](https://www.ica.org/standards/RiC/ontology#recordResourceRelationConnects)**
   *
   * Connects a Record Resource relation to one of the related Record            Resources.
   *
   * @type        property
   * @parent      rico:relationConnects
   * @domain      rico:RecordResourceToRecordResourceRelation
   * @range       rico:RecordResource
   */
  public readonly recordResourceRelationConnects = this.toIri().concat('recordResourceRelationConnects')

  /**
   * **[rico:Record Resource structure](https://www.ica.org/standards/RiC/ontology#recordResourceStructure)**
   *
   * Information about the intellectual arrangement and composition            of a Record Resource. For Record and Record Part, it encompasses information about the            intellectual composition of the record, the presence of record parts and their            functions. For Record Set, it encompasses information about the methodology or criteria            used for arranging the Record Set members or Record members within the containing Record            Set
   *
   * @type        property
   * @parent      rico:structure
   * @domain      rico:RecordResource
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly recordResourceStructure = this.toIri().concat('recordResourceStructure')

  /**
   * **[rico:record resource to instantiation relation has source ](https://www.ica.org/standards/RiC/ontology#recordResourceToInstantiationRelationHasSource)**
   *
   * Connects a Record Resource To Instantiation Relation to the            Record Resource (that was instantiated).
   *
   * @type        property
   * @parent      rico:relationHasSource
   * @domain      rico:RecordResourceToInstantiationRelation
   * @range       rico:RecordResource
   */
  public readonly recordResourceToInstantiationRelationHasSource = this.toIri().concat('recordResourceToInstantiationRelationHasSource')

  /**
   * **[rico:record resource to instantiation relation has target ](https://www.ica.org/standards/RiC/ontology#recordResourceToInstantiationRelationHasTarget)**
   *
   * Connects a Record Resource To Instantiation Relation to an            Instantiation of the involved Record Resource.
   *
   * @type        property
   * @parent      rico:relationHasTarget
   * @domain      rico:RecordResourceToInstantiationRelation
   * @range       rico:Instantiation
   */
  public readonly recordResourceToInstantiationRelationHasTarget = this.toIri().concat('recordResourceToInstantiationRelationHasTarget')

  /**
   * **[rico:reference system](https://www.ica.org/standards/RiC/ontology#referenceSystem)**
   *
   * Framework or standard used to represent an            information.
   *
   * @type        property
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly referenceSystem = this.toIri().concat('referenceSystem')

  /**
   * **[rico:regulates or regulated](https://www.ica.org/standards/RiC/ontology#regulatesOrRegulated)**
   *
   * Connects a Rule to a Thing that it regulates or            regulated.
   *
   * @type        property
   * @parent      rico:isRuleAssociatedWith
   * @domain      rico:Rule
   * @range       rico:Thing
   */
  public readonly regulatesOrRegulated = this.toIri().concat('regulatesOrRegulated')

  /**
   * **[rico:relation connects ](https://www.ica.org/standards/RiC/ontology#relationConnects)**
   *
   * Connects an n-ary Relation to any of the Things            involved.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Relation
   * @range       rico:Thing
   */
  public readonly relationConnects = this.toIri().concat('relationConnects')

  /**
   * **[rico:relation has context ](https://www.ica.org/standards/RiC/ontology#relationHasContext)**
   *
   * Connects an n-ary Relation to a Thing that is a secondary,            contextual entity during the existence of the Relation.
   *
   * @type        property
   * @parent      rico:relationConnects
   * @domain      rico:Relation
   * @range       rico:Thing
   */
  public readonly relationHasContext = this.toIri().concat('relationHasContext')

  /**
   * **[rico:relation has source ](https://www.ica.org/standards/RiC/ontology#relationHasSource)**
   *
   * Connects an n-ary Relation to a Thing that is its            source.
   *
   * @type        property
   * @parent      rico:relationConnects
   * @domain      rico:Relation
   * @range       rico:Thing
   */
  public readonly relationHasSource = this.toIri().concat('relationHasSource')

  /**
   * **[rico:relation has target ](https://www.ica.org/standards/RiC/ontology#relationHasTarget)**
   *
   * Connects an n-ary Relation to a Thing that is its            target.
   *
   * @type        property
   * @parent      rico:relationConnects
   * @domain      rico:Relation
   * @range       rico:Thing
   */
  public readonly relationHasTarget = this.toIri().concat('relationHasTarget')

  /**
   * **[rico:Relation state](https://www.ica.org/standards/RiC/ontology#relationState)**
   *
   * Used to qualify the state of a Relation (e. g. present, past,            ongoing, unknown).
   *
   * @type        property
   * @domain      rico:Relation
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly relationState = this.toIri().concat('relationState')

  /**
   * **[rico:results or resulted from](https://www.ica.org/standards/RiC/ontology#resultsOrResultedFrom)**
   *
   * Inverse of 'results or resulted in' object            property.
   *
   * @type        property
   * @parent      rico:isAssociatedWithEvent
   * @domain      rico:Thing
   * @range       rico:Event
   */
  public readonly resultsOrResultedFrom = this.toIri().concat('resultsOrResultedFrom')

  /**
   * **[rico:results or resulted in](https://www.ica.org/standards/RiC/ontology#resultsOrResultedIn)**
   *
   * Connects an Event to a Thing that results or resulted from the            Event.
   *
   * @type        property
   * @parent      rico:isEventAssociatedWith
   * @domain      rico:Event
   * @range       rico:Thing
   */
  public readonly resultsOrResultedIn = this.toIri().concat('resultsOrResultedIn')

  /**
   * **[rico:role is context of creation relation ](https://www.ica.org/standards/RiC/ontology#roleIsContextOfCreationRelation)**
   *
   * Connects a Role Type to a Creation Relation (this Role Type            being the specific role played by the creating Person in the context of this            Relation).
   *
   * @type        property
   * @parent      rico:thingIsContextOfRelation
   * @domain      rico:RoleType
   * @range       rico:CreationRelation
   */
  public readonly roleIsContextOfCreationRelation = this.toIri().concat('roleIsContextOfCreationRelation')

  /**
   * **[rico:rule followed](https://www.ica.org/standards/RiC/ontology#ruleFollowed)**
   *
   * The rule or conditions that govern the existence or lifecycle of            a Thing.
   *
   * @type        property
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly ruleFollowed = this.toIri().concat('ruleFollowed')

  /**
   * **[rico:rule is source of rule relation ](https://www.ica.org/standards/RiC/ontology#ruleIsSourceOfRuleRelation)**
   *
   * Connects a Rule to a Rule Relation.
   *
   * @type        property
   * @parent      rico:thingIsSourceOfRelation
   * @domain      rico:Rule
   * @range       rico:RuleRelation
   */
  public readonly ruleIsSourceOfRuleRelation = this.toIri().concat('ruleIsSourceOfRuleRelation')

  /**
   * **[rico:rule relation has source ](https://www.ica.org/standards/RiC/ontology#ruleRelationHasSource)**
   *
   * Connects a Rule Relation to a Rule.
   *
   * @type        property
   * @parent      rico:relationHasSource
   * @domain      rico:RuleRelation
   * @range       rico:Rule
   */
  public readonly ruleRelationHasSource = this.toIri().concat('ruleRelationHasSource')

  /**
   * **[rico:rule relation has target ](https://www.ica.org/standards/RiC/ontology#ruleRelationHasTarget)**
   *
   * Connects a Rule Relation to a Thing (that is associated to a            Rule).
   *
   * @type        property
   * @parent      rico:relationHasTarget
   * @domain      rico:RuleRelation
   * @range       rico:Thing
   */
  public readonly ruleRelationHasTarget = this.toIri().concat('ruleRelationHasTarget')

  /**
   * **[rico:scope and content](https://www.ica.org/standards/RiC/ontology#scopeAndContent)**
   *
   * Summary of the scope (such as time periods, geography) and            content (such as subject matter, administrative processes) of the Record Resource. It            should highlight the information conveyed in the Record Resource, why it was created,            received, and/or maintained, and the Agents connected to it. Scope and Content provides            a more complete summary of the informational content of the Record Resource. It may            include description of relations with agents, activities, dates and places, or with            other record resources. It is not to be confused with the History attribute which            focuses on the origination and subsequence changes to a Record Resource.
   *
   * @type        property
   * @domain      rico:RecordResource
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly scopeAndContent = this.toIri().concat('scopeAndContent')

  /**
   * **[rico:sequential relation has source ](https://www.ica.org/standards/RiC/ontology#sequentialRelationHasSource)**
   *
   * Connects a Sequential Relation to a Thing that precedes other            Thing(s) in the sequence.
   *
   * @type        property
   * @parent      rico:relationHasSource
   * @domain      rico:SequentialRelation
   * @range       rico:Thing
   */
  public readonly sequentialRelationHasSource = this.toIri().concat('sequentialRelationHasSource')

  /**
   * **[rico:sequential relation has target ](https://www.ica.org/standards/RiC/ontology#sequentialRelationHasTarget)**
   *
   * Connects a Sequential Relation to a Thing that follows other            Thing(s) in the sequence.
   *
   * @type        property
   * @parent      rico:relationHasTarget
   * @domain      rico:SequentialRelation
   * @range       rico:Thing
   */
  public readonly sequentialRelationHasTarget = this.toIri().concat('sequentialRelationHasTarget')

  /**
   * **[rico:sibling relation connects ](https://www.ica.org/standards/RiC/ontology#siblingRelationConnects)**
   *
   * Connects a Sibling Relation to one of the siblings            involved.
   *
   * @type        property
   * @parent      rico:familyRelationConnects
   * @domain      rico:SiblingRelation
   * @range       rico:Person
   */
  public readonly siblingRelationConnects = this.toIri().concat('siblingRelationConnects')

  /**
   * **[rico:source](https://www.ica.org/standards/RiC/ontology#source)**
   *
   * Information about a source used to identify or describe an            entity.
   *
   * @type        property
   * @domain      rico:RecordResource or rico:Relation
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly source = this.toIri().concat('source')

  /**
   * **[rico:spouse relation connects ](https://www.ica.org/standards/RiC/ontology#spouseRelationConnects)**
   *
   * Connects a Sibling Relation to one of the spouses            involved.
   *
   * @type        property
   * @parent      rico:familyRelationConnects
   * @domain      rico:SpouseRelation
   * @range       rico:Person
   */
  public readonly spouseRelationConnects = this.toIri().concat('spouseRelationConnects')

  /**
   * **[rico:structure](https://www.ica.org/standards/RiC/ontology#structure)**
   *
   * Information about the intellectual arrangement and composition            of a Record Resource or the physical arrangement and composition of an Instantiation.            For Record and Record Part, it encompasses information about the intellectual            composition of the record, the presence of record parts and their functions. For Record            Set, it encompasses information about the methodology or criteria used for arranging the            Record Set members or Record members within the containing Record Set. For            Instantiation, it may comprise information about the composition of the physical            elements of the instantiation
   *
   * @type        property
   * @domain      rico:Instantiation or rico:RecordResource
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly structure = this.toIri().concat('structure')

  /**
   * **[rico:teaching relation has source ](https://www.ica.org/standards/RiC/ontology#teachingRelationHasSource)**
   *
   * Connects a Teaching Relation to a Person (who is a            teacher).
   *
   * @type        property
   * @parent      rico:knowingRelationConnects
   * @domain      rico:TeachingRelation
   * @range       rico:Person
   */
  public readonly teachingRelationHasSource = this.toIri().concat('teachingRelationHasSource')

  /**
   * **[rico:teaching relation has target ](https://www.ica.org/standards/RiC/ontology#teachingRelationHasTarget)**
   *
   * Connects a Teaching Relation to a Person (who is a            student).
   *
   * @type        property
   * @parent      rico:knowingRelationConnects
   * @domain      rico:TeachingRelation
   * @range       rico:Person
   */
  public readonly teachingRelationHasTarget = this.toIri().concat('teachingRelationHasTarget')

  /**
   * **[rico:technical characteristics](https://www.ica.org/standards/RiC/ontology#technicalCharacteristics)**
   *
   * Describes any relevant physical or software feature of any            device involved in the creation or management of a Record Resource.
   *
   * @type        property
   * @domain      rico:Mechanism
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly technicalCharacteristics = this.toIri().concat('technicalCharacteristics')

  /**
   * **[rico:temporal relation has source ](https://www.ica.org/standards/RiC/ontology#temporalRelationHasSource)**
   *
   * Connects a Temporal Relation to a Thing that precedes other            Thing(s) in time.
   *
   * @type        property
   * @parent      rico:sequentialRelationHasSource
   * @domain      rico:TemporalRelation
   * @range       rico:Thing
   */
  public readonly temporalRelationHasSource = this.toIri().concat('temporalRelationHasSource')

  /**
   * **[rico:temporal relation has target ](https://www.ica.org/standards/RiC/ontology#temporalRelationHasTarget)**
   *
   * Connects a Temporal Relation to a Thing that follows other            Thing(s) in time.
   *
   * @type        property
   * @parent      rico:sequentialRelationHasTarget
   * @domain      rico:TemporalRelation
   * @range       rico:Thing
   */
  public readonly temporalRelationHasTarget = this.toIri().concat('temporalRelationHasTarget')

  /**
   * **[rico:textual value](https://www.ica.org/standards/RiC/ontology#textualValue)**
   *
   * A textual expression of an Appellation or Date.
   *
   * @type        property
   * @domain      rico:Appellation or rico:Date or rico:Extent
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly textualValue = this.toIri().concat('textualValue')

  /**
   * **[rico:thing is connected to relation ](https://www.ica.org/standards/RiC/ontology#thingIsConnectedToRelation)**
   *
   * Connects a Thing to a n-ary Relation.
   *
   * @type        property
   * @parent      rico:isRelatedTo
   * @domain      rico:Thing
   * @range       rico:Relation
   */
  public readonly thingIsConnectedToRelation = this.toIri().concat('thingIsConnectedToRelation')

  /**
   * **[rico:thing is context of relation ](https://www.ica.org/standards/RiC/ontology#thingIsContextOfRelation)**
   *
   * Connects a Thing (that is a secondary, contextual entity during            the existence of the Relation) to a n-ary Relation.
   *
   * @type        property
   * @parent      rico:thingIsConnectedToRelation
   * @domain      rico:Thing
   * @range       rico:Relation
   */
  public readonly thingIsContextOfRelation = this.toIri().concat('thingIsContextOfRelation')

  /**
   * **[rico:thing is source of relation ](https://www.ica.org/standards/RiC/ontology#thingIsSourceOfRelation)**
   *
   * Connects a Thing (that is the source of a Relation) to a            Relation.
   *
   * @type        property
   * @parent      rico:thingIsConnectedToRelation
   * @domain      rico:Thing
   * @range       rico:Relation
   */
  public readonly thingIsSourceOfRelation = this.toIri().concat('thingIsSourceOfRelation')

  /**
   * **[rico:thing is source of sequential relation ](https://www.ica.org/standards/RiC/ontology#thingIsSourceOfSequentialRelation)**
   *
   * Connects a Thing to a Sequential Relation, when this Thing            precedes other Thing(s) in the sequence.
   *
   * @type        property
   * @parent      rico:thingIsSourceOfRelation
   * @domain      rico:Thing
   * @range       rico:SequentialRelation
   */
  public readonly thingIsSourceOfSequentialRelation = this.toIri().concat('thingIsSourceOfSequentialRelation')

  /**
   * **[rico:thing is source of temporal relation ](https://www.ica.org/standards/RiC/ontology#thingIsSourceOfTemporalRelation)**
   *
   * Connects a Thing to a Temporal Relation, when this Thing            precedes other Thing(s) in time.
   *
   * @type        property
   * @parent      rico:thingIsSourceOfSequentialRelation
   * @domain      rico:Thing
   * @range       rico:TemporalRelation
   */
  public readonly thingIsSourceOfTemporalRelation = this.toIri().concat('thingIsSourceOfTemporalRelation')

  /**
   * **[rico:thing is source of whole part relation ](https://www.ica.org/standards/RiC/ontology#thingIsSourceOfWholePartRelation)**
   *
   * Connects a Thing to a Whole Part Relation, when this Thing has            Part other Thing(s).
   *
   * @type        property
   * @parent      rico:thingIsSourceOfRelation
   * @domain      rico:Thing
   * @range       rico:WholePartRelation
   */
  public readonly thingIsSourceOfWholePartRelation = this.toIri().concat('thingIsSourceOfWholePartRelation')

  /**
   * **[rico:thing is target of appellation relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfAppellationRelation)**
   *
   * Connects a Thing (that is designated by an Appellation) to an            Appellation Relation.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfRelation
   * @domain      rico:Thing
   * @range       rico:AppellationRelation
   */
  public readonly thingIsTargetOfAppellationRelation = this.toIri().concat('thingIsTargetOfAppellationRelation')

  /**
   * **[rico:thing is target of authority relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfAuthorityRelation)**
   *
   * Connects a Thing (that is under authority of an Agent) to an            Authority Relation.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfRelation
   * @domain      rico:Thing
   * @range       rico:AuthorityRelation
   */
  public readonly thingIsTargetOfAuthorityRelation = this.toIri().concat('thingIsTargetOfAuthorityRelation')

  /**
   * **[rico:thing is target of event relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfEventRelation)**
   *
   * Connects a Thing (that is associated with an Event) to an Event            Relation.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfRelation
   * @domain      rico:Thing
   * @range       rico:EventRelation
   */
  public readonly thingIsTargetOfEventRelation = this.toIri().concat('thingIsTargetOfEventRelation')

  /**
   * **[rico:thing is target of ownership relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfOwnershipRelation)**
   *
   * Connects a Thing (that is owned by a Group, a Person or a            Position) to an Ownership Relation.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfAuthorityRelation
   * @domain      rico:Thing
   * @range       rico:OwnershipRelation
   */
  public readonly thingIsTargetOfOwnershipRelation = this.toIri().concat('thingIsTargetOfOwnershipRelation')

  /**
   * **[rico:thing is target of place relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfPlaceRelation)**
   *
   * Connects a Thing (that is associated with a Place) to a Place            Relation.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfRelation
   * @domain      rico:Thing
   * @range       rico:PlaceRelation
   */
  public readonly thingIsTargetOfPlaceRelation = this.toIri().concat('thingIsTargetOfPlaceRelation')

  /**
   * **[rico:thing is target of relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfRelation)**
   *
   * Connects a Thing to a n-ary Relation.
   *
   * @type        property
   * @parent      rico:thingIsConnectedToRelation
   * @domain      rico:Thing
   * @range       rico:Relation
   */
  public readonly thingIsTargetOfRelation = this.toIri().concat('thingIsTargetOfRelation')

  /**
   * **[rico:thing is target of rule relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfRuleRelation)**
   *
   * Connects a Thing (that is associated with a Rule) to a Rule            Relation.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfRelation
   * @domain      rico:Thing
   * @range       rico:RuleRelation
   */
  public readonly thingIsTargetOfRuleRelation = this.toIri().concat('thingIsTargetOfRuleRelation')

  /**
   * **[rico:thing is target of sequential relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfSequentialRelation)**
   *
   * Connects a Thing (that follows other Thing(s) in a sequence) to            a Sequential Relation.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfRelation
   * @domain      rico:Thing
   * @range       rico:SequentialRelation
   */
  public readonly thingIsTargetOfSequentialRelation = this.toIri().concat('thingIsTargetOfSequentialRelation')

  /**
   * **[rico:thing is target of temporal relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfTemporalRelation)**
   *
   * Connects a Thing (that follows other Thing(s) in time) to a            Temporal Relation.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfSequentialRelation
   * @domain      rico:Thing
   * @range       rico:TemporalRelation
   */
  public readonly thingIsTargetOfTemporalRelation = this.toIri().concat('thingIsTargetOfTemporalRelation')

  /**
   * **[rico:thing is target of type relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfTypeRelation)**
   *
   * Connects a Thing (that is categorized by a Type) to a Type            Relation.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfRelation
   * @domain      rico:Thing
   * @range       rico:TypeRelation
   */
  public readonly thingIsTargetOfTypeRelation = this.toIri().concat('thingIsTargetOfTypeRelation')

  /**
   * **[rico:thing is target of whole part relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfWholePartRelation)**
   *
   * Connects a Thing to a Whole Part Relation, when this Thing is            Part of another Thing.
   *
   * @type        property
   * @parent      rico:thingIsTargetOfRelation
   * @domain      rico:Thing
   * @range       rico:WholePartRelation
   */
  public readonly thingIsTargetOfWholePartRelation = this.toIri().concat('thingIsTargetOfWholePartRelation')

  /**
   * **[rico:title](https://www.ica.org/standards/RiC/ontology#title)**
   *
   * An identifying name of a Record Resource, Instantiation or            Rule.
   *
   * @type        property
   * @parent      rico:name
   * @domain      rico:Instantiation or rico:RecordResource or rico:Rule
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly title = this.toIri().concat('title')

  /**
   * **[rico:type](https://www.ica.org/standards/RiC/ontology#type)**
   *
   * A term used to characterize an entity.
   *
   * @type        property
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly type = this.toIri().concat('type')

  /**
   * **[rico:type is source of type relation ](https://www.ica.org/standards/RiC/ontology#typeIsSourceOfTypeRelation)**
   *
   * Connects a Type (a category) to a Type Relation.
   *
   * @type        property
   * @parent      rico:thingIsSourceOfRelation
   * @domain      rico:Type
   * @range       rico:TypeRelation
   */
  public readonly typeIsSourceOfTypeRelation = this.toIri().concat('typeIsSourceOfTypeRelation')

  /**
   * **[rico:type relation has source ](https://www.ica.org/standards/RiC/ontology#typeRelationHasSource)**
   *
   * Connects a Type Relation to the Type (that categorizes the            involved Thing(s)).
   *
   * @type        property
   * @parent      rico:relationHasSource
   * @domain      rico:TypeRelation
   * @range       rico:Type
   */
  public readonly typeRelationHasSource = this.toIri().concat('typeRelationHasSource')

  /**
   * **[rico:type relation has target ](https://www.ica.org/standards/RiC/ontology#typeRelationHasTarget)**
   *
   * Connects a Type Relation to a Thing (that is categorized by the            involved Type).
   *
   * @type        property
   * @parent      rico:relationHasTarget
   * @domain      rico:TypeRelation
   * @range       rico:Thing
   */
  public readonly typeRelationHasTarget = this.toIri().concat('typeRelationHasTarget')

  /**
   * **[rico:unit of measurement](https://www.ica.org/standards/RiC/ontology#unitOfMeasurement)**
   *
   * A definite magnitude of a quantity, defined and adopted by convention or by            law, that is used as a standard for measurement of the same kind of quantity. Can be            spacial units (cm, m), weight (g, kg), time (s, h), storage (MB, TB) or more informal            units used in the archival context like number of boxes, pages or words.
   *
   * @type        property
   * @domain      rico:Extent
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly unitOfMeasurement = this.toIri().concat('unitOfMeasurement')

  /**
   * **[rico:used from date](https://www.ica.org/standards/RiC/ontology#usedFromDate)**
   *
   * Date at which an Appellation was first used.
   *
   * @type        property
   * @parent      rico:date
   * @domain      rico:Appellation
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly usedFromDate = this.toIri().concat('usedFromDate')

  /**
   * **[rico:used to date](https://www.ica.org/standards/RiC/ontology#usedToDate)**
   *
   * Date until an Appellation was used.
   *
   * @type        property
   * @parent      rico:date
   * @domain      rico:Appellation
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly usedToDate = this.toIri().concat('usedToDate')

  /**
   * **[rico:was last updated at date ](https://www.ica.org/standards/RiC/ontology#wasLastUpdatedAtDate)**
   *
   * Connects a Thing to the Date when it was last            modified.
   *
   * @type        property
   * @parent      rico:hasModificationDate
   * @domain      rico:Thing
   * @range       rico:Date
   */
  public readonly wasLastUpdatedAtDate = this.toIri().concat('wasLastUpdatedAtDate')

  /**
   * **[rico:was used from date ](https://www.ica.org/standards/RiC/ontology#wasUsedFromDate)**
   *
   * Connects an Appellation to the Date from which it was            used.
   *
   * @type        property
   * @parent      rico:isAssociatedWithDate
   * @domain      rico:Appellation
   * @range       rico:Date
   */
  public readonly wasUsedFromDate = this.toIri().concat('wasUsedFromDate')

  /**
   * **[rico:was used to date ](https://www.ica.org/standards/RiC/ontology#wasUsedToDate)**
   *
   * Connects an Appellation to the Date till when it was            used.
   *
   * @type        property
   * @parent      rico:isAssociatedWithDate
   * @domain      rico:Appellation
   * @range       rico:Date
   */
  public readonly wasUsedToDate = this.toIri().concat('wasUsedToDate')

  /**
   * **[rico:whole part relation has source ](https://www.ica.org/standards/RiC/ontology#wholePartRelationHasSource)**
   *
   * Connects a Whole Part Relation to the Thing that has some            parts.
   *
   * @type        property
   * @parent      rico:relationHasSource
   * @domain      rico:WholePartRelation
   * @range       rico:Thing
   */
  public readonly wholePartRelationHasSource = this.toIri().concat('wholePartRelationHasSource')

  /**
   * **[rico:whole part relation has target ](https://www.ica.org/standards/RiC/ontology#wholePartRelationHasTarget)**
   *
   * Connects a Whole Part Relation to a Thing that is a            part.
   *
   * @type        property
   * @parent      rico:relationHasTarget
   * @domain      rico:WholePartRelation
   * @range       rico:Thing
   */
  public readonly wholePartRelationHasTarget = this.toIri().concat('wholePartRelationHasTarget')

  /**
   * **[rico:width](https://www.ica.org/standards/RiC/ontology#width)**
   *
   * Horizontal dimension of an entity.
   *
   * @type        property
   * @parent      rico:measure
   * @domain      rico:Thing
   * @range       http://www.w3.org/2000/01/rdf-schema#Literal
   */
  public readonly width = this.toIri().concat('width')

  /**
   * **[rico:work relation connects ](https://www.ica.org/standards/RiC/ontology#workRelationConnects)**
   *
   * Connects a Work Relation to an Agent.
   *
   * @type        property
   * @parent      rico:agentRelationConnects
   * @domain      rico:WorkRelation
   * @range       rico:Agent
   */
  public readonly workRelationConnects = this.toIri().concat('workRelationConnects')
}

/**
 * prefix **rico:** <<https://www.ica.org/standards/RiC/ontology#>>
 *
 * Records in Contexts Ontology (ICA RiC-O)
 *
 * RiC-O (Records in Contexts-Ontology) is an OWL ontology for describing archival record resources. As the second part of Records in Contexts standard, it is a formal representation of Records in Contexts Conceptual Model (RiC-CM).
 *
 * - Homepage: <https://www.ica.org/standards/RiC/RiC-O_v0-2.html#>
 * - Version: 0.2
 */
const rico = new Vocabulary('https://www.ica.org/standards/RiC/ontology#')
export default rico
