import { type DefaultFactory, getFactory } from '@triplydb/data-factory'
import { NamedNode, type ValidationStatus } from '@triplydb/data-factory/Terms.js'

const factory = getFactory()

export default class Iri<IriString extends string = string> extends NamedNode<IriString> {
  public $IriClass = 'IriClass'

  public static pathPrefix = ''
  public static pathSuffix = ''

  constructor (iri: IriString | NamedNode<IriString>, opts?: { validationStatus?: ValidationStatus, factory?: DefaultFactory }) {
    let $iri: IriString
    if (typeof iri === 'string') {
      $iri = factory.namedNode(iri, { validationStatus: opts?.validationStatus }).value
    } else {
      $iri = iri.value
    }
    super($iri, opts?.validationStatus ?? 'disabled')
  }

  public concat<Path extends string>(path: Path): Iri<`${IriString}${Path}`> {
    return new Iri<`${IriString}${Path}`>(`${this.toString()}${path}`)
  }

  public toString (): IriString {
    return this.value
  }
}

export function isIri (obj: any): obj is Iri {
  return typeof obj === 'object' && Object.hasOwn(obj, '$IriClass')
}
