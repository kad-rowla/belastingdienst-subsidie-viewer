import { type BlankNode, type NamedNode } from '@triplydb/data-factory/Terms.js'
const rq = `
prefix shacl: <http://www.w3.org/ns/shacl#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select ?shape ?target where {
  {
    # https://w3c.github.io/data-shapes/shacl/#targetNode
    ?shape shacl:targetNode ?target
  } union {
    # https://w3c.github.io/data-shapes/shacl/#targetClass
    ?shape shacl:targetClass ?targetClass .
    ?subClass rdfs:subClassOf* ?targetClass .
    ?target a ?subClass .
  } union {
    # https://w3c.github.io/data-shapes/shacl/#implicit-targetClass
    ?shape a shacl:NodeShape; a/rdfs:subClassOf* rdfs:Class . 
    ?target a/rdfs:subClassOf* ?shape
  } union {
    # https://w3c.github.io/data-shapes/shacl/#targetSubjectsOf
    ?shape shacl:targetSubjectsOf ?targetSubjectsOf .
    ?target ?targetSubjectsOf [] .
  } union {
    # https://w3c.github.io/data-shapes/shacl/#targetObjectsOf
    ?shape shacl:targetObjectsOf ?targetObjectsOf .
    [] ?targetObjectsOf ?target .
  }
  #} union {
  #  # Custom targets https://www.w3.org/TR/shacl-af/#targets
  #  ?shape shacl:target ?target .
  #}
  # {FILTER}
} 
group by ?shape ?target
`
export default rq.replace('# {FILTER}', '')

export const getQuery = (shape?: NamedNode | BlankNode): string => {
  if (shape === undefined) return rq.replace('# {FILTER}', '')
  else return rq.replace('# {FILTER}', `filter(?shape = <${shape.value}>)`)
}
