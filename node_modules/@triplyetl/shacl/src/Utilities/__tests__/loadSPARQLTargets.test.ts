import { assert } from 'chai'
import getDatasetFromResource from '../getDatasetFromResource.js'
import { getFactory } from '@triplydb/data-factory'
import { type NamedNode } from '@triplydb/data-factory/Terms.js'
import loadSPARQLTargets, { getSPARQLTargets } from '../loadSPARQLTargets.js'
import { sh } from '@triplyetl/vocabularies'
import { newEngine } from '@triplydb/speedy-memory'

const prefixer = (local: string): NamedNode => getFactory().namedNode(`http://example.org/${local}`)
const shape = prefixer('USCitizenShape')
const John = prefixer('John')

describe('SPARQL-based Targets', () => {
  it('should correctly return nodes using the SHACL example', async () => {
    const dataset = getDatasetFromResource('sparql-based-target.ttl', 'static', 'resources')
    const targets = await getSPARQLTargets(dataset)
    assert.equal(targets.size, 1)
    assert.equal(targets.getQuads(shape, sh.targetNode, John, null).length, 1)
  })

  describe('should correctly load using the SHACL example', () => {
    it('using the dataset, no engine', async () => {
      const shapes = getDatasetFromResource('sparql-based-target.ttl', 'static', 'resources')
      assert.equal(shapes.getObjects(shape, sh.targetNode, null).length, 0)
      await loadSPARQLTargets({ shapes })
      assert.equal(shapes.getObjects(shape, sh.targetNode, null).length, 1)
      assert.isTrue(shapes.getObjects(shape, sh.targetNode, null)[0].equals(John))
    })
    it('using a preloaded engine', async () => {
      const shapes = getDatasetFromResource('sparql-based-target.ttl', 'static', 'resources')
      assert.equal(shapes.getObjects(shape, sh.targetNode, null).length, 0)
      await loadSPARQLTargets({ shapes, engine: newEngine(shapes) })
      assert.equal(shapes.getObjects(shape, sh.targetNode, null).length, 1)
      assert.isTrue(shapes.getObjects(shape, sh.targetNode, null)[0].equals(John))
    })
  })
})
