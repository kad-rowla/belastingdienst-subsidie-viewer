import { assert } from 'chai'
import getDatasetFromResource from '../getDatasetFromResource.js'
import { getFactory } from '@triplydb/data-factory'
import { type NamedNode } from '@triplydb/data-factory/Terms.js'
import { sh } from '@triplyetl/vocabularies'
import loadSPARQLTargetTypes from '../loadSPARQLTargetTypes.js'

const prefixer = (local: string): NamedNode => getFactory().namedNode(`http://example.org/${local}`)
const USCitizenShape = prefixer('USCitizenShape')
const DutchCitizenShape = prefixer('DutchCitizenShape')
const John = prefixer('John')
const Jane = prefixer('Jane')
const Jan = prefixer('Jan')

describe('SPARQL-based Target Types', () => {
  it('should correctly return nodes using the SHACL example', async () => {
    const shapes = getDatasetFromResource('sparql-based-target-types.ttl', 'static', 'resources')
    let targetNodes = shapes.getObjects(USCitizenShape, sh.targetNode, null)
    assert.equal(targetNodes.length, 0)
    await loadSPARQLTargetTypes({ shapes })
    targetNodes = shapes.getObjects(USCitizenShape, sh.targetNode, null)
    assert.equal(targetNodes.length, 2)
    assert.equal(shapes.getQuads(USCitizenShape, sh.targetNode, John, null).length, 1)
    assert.equal(shapes.getQuads(USCitizenShape, sh.targetNode, Jane, null).length, 1)
    targetNodes = shapes.getObjects(DutchCitizenShape, sh.targetNode, null)
    assert.equal(shapes.getQuads(DutchCitizenShape, sh.targetNode, Jan, null).length, 1)
    assert.equal(targetNodes.length, 1)
  })
})
