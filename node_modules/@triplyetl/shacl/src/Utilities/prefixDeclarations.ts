import { type DefaultFactory, getFactory, type Store } from '@triplydb/data-factory'
import { newEngine } from '@triplydb/speedy-memory'
import { type SparqlEngine } from '@triplydb/engine/SparqlEngine.js'
import prefixDeclarationsRq from '../Queries/prefixDeclarations.rq.js'
import { isEngine } from './isEngine.js'
import { Iri } from '@triplyetl/vocabularies'

/**
 * Implements 5.2.1 Prefix Declarations for SPARQL Queries
 *
 * @see https://w3c.github.io/data-shapes/shacl/#sparql-prefixes
 */
async function prefixDeclarations (
  datasetOrEngine: Store,
  factory?: DefaultFactory
): Promise<Record<string, Iri>>
async function prefixDeclarations (
  datasetOrEngine: SparqlEngine,
  factory?: DefaultFactory
): Promise<Record<string, Iri>>
async function prefixDeclarations (
  datasetOrEngine: SparqlEngine | Store,
  factory?: DefaultFactory
): Promise<Record<string, Iri>> {
  const engine = isEngine(datasetOrEngine) ? datasetOrEngine : newEngine(datasetOrEngine)
  factory = factory ?? getFactory()
  return await engine
    .select(prefixDeclarationsRq)
    .then(async bindings => {
      const prefixer: Record<string, Iri> = {}
      for await (const binding of bindings) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        prefixer[binding.prefix!.value] = new Iri(binding.namespace!.value)
      }
      return prefixer
    })
}

export default prefixDeclarations
