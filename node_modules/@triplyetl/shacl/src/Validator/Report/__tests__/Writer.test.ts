import { assert } from 'chai'
import Writer from '../Writer.js'
import { Store, getFactory, parse } from '@triplydb/data-factory'
import getDatasetFromResource from '../../../Utilities/getDatasetFromResource.js'
import { isomorphic } from 'rdf-isomorphic'
import { a, sh, xsd } from '@triplyetl/vocabularies'
import { type BlankNode, type Quad } from '@triplydb/data-factory/Terms.js'

export const getValidationReport = (conforms: boolean = true, ...quads: Quad[]): { dataset: Store, node: BlankNode } => {
  const dataset = new Store()
  const node = factory.blankNode()
  dataset.addQuads([factory.quad(node, a, sh.ValidationReport), factory.quad(node, sh.conforms, factory.literal(conforms ? 'true' : 'false', xsd.boolean)), ...quads])
  return { dataset, node }
}

const prefixes = {
  ex: 'https://example.org/',
  id: 'https://example.org/id/',
  shp: 'https://example.org/model/shp/'
}

const factory = getFactory()
describe('Validator/Report/Writer', () => {
  it('work with an validation report (sh:conforms = true)', async () => {
    const { dataset } = getValidationReport()
    const writer = new Writer(dataset)
    assert.isTrue(writer.conforms)
    assert.isTrue(isomorphic(parse(await writer.toRdf()), dataset.getQuads({})))
  })

  it('should parse all results', async () => {
    const report = getDatasetFromResource('static/resources/Validator/Report/Writer/report-non-conforming.ttl')
    const model = getDatasetFromResource('static/resources/Validator/Report/Writer/model-non-conforming.ttl')
    const data = getDatasetFromResource('static/resources/Validator/Report/Writer/data-non-conforming.ttl')
    const writer = new Writer(report, { prefixes, model, data })
    assert.isFalse(writer.conforms)
    const results = await writer.getResults()
    assert.equal(results.length, 18)
    // console.log(await writer.toString())
  })
})
