import { getFactory, type Store } from '@triplydb/data-factory'
import { type NamedNode } from '@triplydb/data-factory/Terms.js'
import { a, sh, xsd } from '@triplyetl/vocabularies'
import { type BlankNodeOrIRI } from '../../../Types.js'

const assertIsSHACLValidationReport = (dataset: Store): { report: BlankNodeOrIRI, conforms: boolean } => {
  const reports = dataset.getSubjects(a, sh.ValidationReport, null)
  if (reports.length === 0) {
    throw new Error('The dataset does not look like a SHACL Validation Report.')
  } else if (reports.length !== 1) {
    throw new Error(`The dataset contains ${reports.length} SHACL Validation Reports. This Writer only works with 1.`)
  }

  const conforms = dataset.getObjects(reports[0], sh.conforms, null)
  if (conforms.length === 0) {
    throw new Error('Missing a `sh:conforms` predicate on the SHACL Validation Report.')
  } else if (conforms.length !== 1) {
    throw new Error(`The SHACL Validation Report contains ${conforms.length} values for \`sh:conforms\`./`)
  } else if (conforms[0].termType !== 'Literal') {
    throw new Error(`The object value for \`sh:conforms\` must be a literal, got "${conforms[0].termType}".`)
  } else if (!conforms[0].datatype.equals(xsd.boolean)) {
    throw new Error(`The object value for \`sh:conforms\` must be a boolean, got <${conforms[0].datatype.value}>.`)
  }

  return {
    report: reports[0].termType === 'BlankNode' ? reports[0] : (reports[0] as NamedNode),
    conforms: conforms[0].equals(getFactory().literal('true', xsd.boolean))
  }
}

export default assertIsSHACLValidationReport
