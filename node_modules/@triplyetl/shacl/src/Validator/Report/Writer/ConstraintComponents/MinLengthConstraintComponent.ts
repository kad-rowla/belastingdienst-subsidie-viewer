import { type Term } from '@triplydb/data-factory/Terms.js'
import { sh } from '@triplyetl/vocabularies'
import ConstraintComponent from '../ConstraintComponent.js'

export default class MinLengthConstraintComponent extends ConstraintComponent {
  public async toString (): Promise<string> {
    let predicate: Term = sh.minCount
    let msg = 'minimum'
    switch (this.result.sourceConstraintComponent.value) {
      case sh.MinLengthConstraintComponent.value:
        predicate = sh.minLength
        msg = 'minimum'
        break
      case sh.MaxLengthConstraintComponent.value:
        predicate = sh.maxLength
        msg = 'maximum'
        break
    }
    if (this.opts.model !== undefined && this.result.sourceShape !== undefined) {
      return await Promise.resolve(
        this.format(
          'The node %o has a predicate %o%s of incorrect length; your shape %o defines a %s length of %i.',
          this.result.focusNode,
          this.result.resultPath ?? '[unknown]',
          this.valuesToString(),
          this.result.sourceShape ?? '[unknown]',
          msg,
          this.opts.model.getObjects(this.result.sourceShape, predicate, null)[0]?.value ?? '[unknown]'
        )
      )
    } else {
      return await Promise.resolve(
        this.format(
          'The node %o has a predicate %o%s of incorrect length; your shape %o reports: %s.',
          this.result.focusNode,
          this.result.resultPath ?? '[unknown]',
          this.valuesToString(),
          this.result.sourceShape ?? '[unknown]',
          this.resultMessagesToString()
        )
      )
    }
  }
}
