import { a, sh } from '@triplyetl/vocabularies'
import ConstraintComponent from '../ConstraintComponent.js'

export default class ClassConstraintComponent extends ConstraintComponent {
  public async toString (): Promise<string> {
    let expectedShClass = this.format('[unknown]')
    if (this.result.sourceShape !== undefined) {
      const classes = this.opts.model?.getObjects(this.result.sourceShape, sh.class, null)
      expectedShClass = classes?.map((c) => this.format('%o', c)).join(', ') ?? expectedShClass
    }
    let actualShClass = this.format('[unknown]')
    if (this.result.values.length > 0) {
      const classes = this.opts.data?.getObjects(this.result.values[0], a, null)
      actualShClass = classes?.map((c) => this.format('%o', c)).join(', ') ?? actualShClass
    }
    return await Promise.resolve(this.format('The node %o has a predicate %o%s of class %s, your shape %o only allows (sub)class %s.', this.result.focusNode, this.result.resultPath ?? '[unknown sh:resultPath]', this.valuesToString(), actualShClass, this.result.sourceShape ?? '[unknown SHACL SourceShape]', expectedShClass))
  }
}
