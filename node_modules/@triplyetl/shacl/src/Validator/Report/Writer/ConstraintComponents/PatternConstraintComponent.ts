import { sh } from '@triplyetl/vocabularies'
import ConstraintComponent from '../ConstraintComponent.js'

export default class PatternConstraintComponent extends ConstraintComponent {
  public async toString (): Promise<string> {
    let pattern = (this.result.resultMessages[0]?.value ?? '[unknown]').replace(/Value does not match pattern /, '')
    if (this.opts.model !== undefined && this.result.sourceShape !== undefined) {
      const shPattern = this.opts.model.getObjects(this.result.sourceShape, sh.pattern, null)[0]
      const flags = this.opts.model.getObjects(this.result.sourceShape, sh.flags, null)[0]
      if (shPattern !== undefined) pattern = '/' + shPattern.value + '/'
      if (flags !== undefined) pattern += flags.value
    }
    return await Promise.resolve(this.format('The node %o has a predicate %o%s which does not match the pattern %o defined in your shape %o.', this.result.focusNode, this.result.resultPath ?? '[unknown sh:resultPath]', this.valuesToString(), pattern, this.result.sourceShape ?? '[unknown SHACL SourceShape]'))
  }
}
