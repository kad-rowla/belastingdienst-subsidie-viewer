import { sh } from '@triplyetl/vocabularies'
import ClosedConstraintComponent from './ClosedConstraintComponent.js'
import DatatypeConstraintComponent from './DatatypeConstraintComponent.js'
import PropertyPairConstraintComponents from './PropertyPairConstraintComponents.js'
import ValueRangeConstraintComponents from './ValueRangeConstraintComponents.js'
import NodeConstraintComponent from './NodeConstraintComponent.js'
import ClassConstraintComponent from './ClassConstraintComponent.js'
import CardinalityConstraintComponents from './CardinalityConstraintComponents.js'
import MinLengthConstraintComponent from './MinLengthConstraintComponent.js'
import MaxLengthConstraintComponent from './MaxLengthConstraintComponent.js'
import PatternConstraintComponent from './PatternConstraintComponent.js'
import LanguageInConstraintComponent from './LanguageInConstraintComponent .js'
import UniqueLangConstraintComponent from './UniqueLangConstraintComponent.js'
import HasValueConstraintComponent from './HasValueConstraintComponent.js'
import InConstraintComponent from './InConstraintComponent.js'
import LogicalConstraintComponents from './LogicalConstraintComponents.js'
import SPARQLConstraintComponent from './SPARQLConstraintComponent.js'
import type ConstraintComponent from '../ConstraintComponent.js'
import type ValidationResult from '../ValidationResult.js'
import { type SparqlEngine } from '@triplydb/engine/SparqlEngine.js'
import { type Options as WriterOptions } from '../../Writer.js'
import NodeKindConstraintComponent from './NodeKindConstraintComponent.js'

// eslint-disable-next-line @typescript-eslint/no-extraneous-class
export default class Factory {
  public static getConstraintComponent (result: ValidationResult, engine: SparqlEngine, opts: WriterOptions): ConstraintComponent {
    switch (result.sourceConstraintComponent.value) {
      case sh.ClosedConstraintComponent.value:
        return new ClosedConstraintComponent(result, engine, opts)
      case sh.DatatypeConstraintComponent.value:
        return new DatatypeConstraintComponent(result, engine, opts)
      case sh.LessThanConstraintComponent.value:
      case sh.LessThanOrEqualsConstraintComponent.value:
      case sh.EqualsConstraintComponent.value:
      case sh.DisjointConstraintComponent.value:
        return new PropertyPairConstraintComponents(result, engine, opts)
      case sh.MinExclusiveConstraintComponent.value:
      case sh.MaxExclusiveConstraintComponent.value:
      case sh.MinInclusiveConstraintComponent.value:
      case sh.MaxInclusiveConstraintComponent.value:
        return new ValueRangeConstraintComponents(result, engine, opts)
      case sh.MinCountConstraintComponent.value:
      case sh.MaxCountConstraintComponent.value:
        return new CardinalityConstraintComponents(result, engine, opts)
      case sh.HasValueConstraintComponent.value:
        return new HasValueConstraintComponent(result, engine, opts)
      case sh.MinLengthConstraintComponent.value:
        return new MinLengthConstraintComponent(result, engine, opts)
      case sh.MaxLengthConstraintComponent.value:
        return new MaxLengthConstraintComponent(result, engine, opts)
      case sh.UniqueLangConstraintComponent.value:
        return new UniqueLangConstraintComponent(result, engine, opts)
      case sh.LanguageInConstraintComponent.value:
        return new LanguageInConstraintComponent(result, engine, opts)
      case sh.InConstraintComponent.value:
        return new InConstraintComponent(result, engine, opts)
      case sh.ClassConstraintComponent.value:
        return new ClassConstraintComponent(result, engine, opts)
      case sh.NodeConstraintComponent.value:
        return new NodeConstraintComponent(result, engine, opts)
      case sh.NodeKindConstraintComponent.value:
        return new NodeKindConstraintComponent(result, engine, opts)
      case sh.PatternConstraintComponent.value:
        return new PatternConstraintComponent(result, engine, opts)
      case sh.SPARQLConstraintComponent.value:
        return new SPARQLConstraintComponent(result, engine, opts)
      case sh.XoneConstraintComponent.value:
      case sh.NotConstraintComponent.value:
      case sh.OrConstraintComponent.value:
      case sh.AndConstraintComponent.value:
        return new LogicalConstraintComponents(result, engine, opts)
      default:
        throw new Error('Unkown SHACL ConstraintComponent: ' + result.sourceConstraintComponent.value)
    }
  }
}
