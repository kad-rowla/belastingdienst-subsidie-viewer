import { sh } from '@triplyetl/vocabularies'
import ConstraintComponent from '../ConstraintComponent.js'

export default class NodeKindConstraintComponent extends ConstraintComponent {
  public async toString (): Promise<string> {
    let nodeKind: any = (this.result.resultMessages[0]?.value ?? '[unknown]').replace(/Value does not have node kind /, '')
    if (this.opts.model !== undefined && this.result.sourceShape !== undefined) {
      nodeKind = this.opts.model.getObjects(this.result.sourceShape, sh.nodeKind, null).shift() ?? nodeKind
    }
    return await Promise.resolve(this.format('The node %o has a predicate %o%s, your shape %o only allows a node kind %o.', this.result.focusNode, this.result.resultPath ?? '[unknown sh:resultPath]', this.valuesToString(), this.result.sourceShape ?? '[unknown SHACL SourceShape]', nodeKind))
  }
}
