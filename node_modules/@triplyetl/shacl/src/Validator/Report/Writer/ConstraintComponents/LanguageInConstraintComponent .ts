import { type Literal } from '@triplydb/data-factory/Terms.js'
import { rdf, sh } from '@triplyetl/vocabularies'
import ConstraintComponent from '../ConstraintComponent.js'

export default class LanguageInConstraintComponent extends ConstraintComponent {
  public async toString (): Promise<string> {
    if (
      this.opts.model === undefined ||
      this.opts.data === undefined ||
      this.result.resultPath === undefined ||
      this.result.values.length === 0 ||
      this.result.sourceShape === undefined
    ) {
      return await Promise.resolve(this.resultMessagesToString())
    }
    // happy coding: only 1 value is expected
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const value = this.result.values.shift()! as Literal
    let expectedLanguagesList = this.opts.model.getObjects(this.result.sourceShape, sh.languageIn, null)[0]
    const expectedLanguages: string[] = []
    while (true) {
      expectedLanguages.push(this.opts.model.getObjects(expectedLanguagesList, rdf.first, null)[0].value)
      const rest = this.opts.model.getObjects(expectedLanguagesList, rdf.rest, null)[0]
      if (rest.equals(rdf.nil) || rest === undefined) {
        break
      }
      expectedLanguagesList = rest
    }
    return await Promise.resolve(
      this.format(
        'The node %o has a predicate %o with value %o; your shape %o only allows language%s %s',
        this.result.focusNode,
        this.result.resultPath ?? '[unknown sh:resultPath]',
        value,
        this.result.sourceShape ?? '[unknown SHACL SourceShape]',
        expectedLanguages.length === 1 ? '' : 's',
        this.format(expectedLanguages.map((_) => '%o').join(', '), ...expectedLanguages)
      )
    )
  }
}
