import { type Term } from '@triplydb/data-factory/Terms.js'
import { sh } from '@triplyetl/vocabularies'
import ConstraintComponent from '../ConstraintComponent.js'

export default class LogicalConstraintComponents extends ConstraintComponent {
  public async toString (): Promise<string> {
    let predicate: Term = sh.xone
    switch (this.result.sourceConstraintComponent.value) {
      case sh.XoneConstraintComponent.value:
        predicate = sh.xone
        break
      case sh.AndConstraintComponent.value:
        predicate = sh.and
        break
      case sh.OrConstraintComponent.value:
        predicate = sh.or
        break
      case sh.NotConstraintComponent.value:
        predicate = sh.not
        break
    }
    let shape = ''
    if (this.opts.model !== undefined && this.result.sourceShape !== undefined) {
      shape = this.format('does not have shape %o', this.opts.model?.getObjects(this.result.sourceShape, predicate, null)[0] ?? '[unknown]')
    }
    return await Promise.resolve(
      this.format(
        'The node %o%s%s defined in shape %o.',
        this.result.focusNode,
        this.valuesToString(),
        shape,
        this.result.sourceShape ?? '[unknown SHACL SourceShape]'
      )
    )
  }
}
