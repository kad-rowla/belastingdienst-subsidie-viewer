import { getFactory } from '@triplydb/data-factory'
import { type Term } from '@triplydb/data-factory/Terms.js'
import { sh } from '@triplyetl/vocabularies'
import ConstraintComponent from '../ConstraintComponent.js'
import { type BindingsResult } from '@triplydb/engine/QueryResults.js'
export default class DatatypeConstraintComponent extends ConstraintComponent {
  public async toString (): Promise<string> {
    let predicate: Term = sh.minCount
    let msg = 'minimum'
    switch (this.result.sourceConstraintComponent.value) {
      case sh.LessThanConstraintComponent.value:
        predicate = sh.lessThan
        msg = 'less than'
        break
      case sh.LessThanOrEqualsConstraintComponent.value:
        predicate = sh.lessThanOrEquals
        msg = 'less than or equal to'
        break
      case sh.EqualsConstraintComponent.value:
        predicate = sh.equals
        msg = 'equal to'
        break
      case sh.DisjointConstraintComponent.value:
        predicate = sh.disjoint
        msg = 'the disjoint of'
        break
      default:
        throw Error(`Unkown component <${this.result.sourceConstraintComponent.value}>`)
    }
    if (this.result.sourceShape === undefined || this.result.resultPath === undefined) {
      return await Promise.resolve(this.resultMessagesToString())
    }
    const rq = `
select ?compare ?actual ?comparePredicate where {
  <${this.result.sourceShape.value}> <${predicate.value}> ?comparePredicate .
  <${this.result.focusNode.value}> <${this.result.resultPath.value}> ?actual; ?comparePredicate ?compare .
} limit 1`
    return await this.engine
      .query(rq)
      .then(async (results) => await (results as BindingsResult).toArray())
      .then((bindings) => {
        let compare: Term = getFactory().literal('[unknown value]')
        let comparePredicate: Term = getFactory().literal('[unknown value]')
        if (bindings.length > 0) {
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          compare = bindings[0].compare!
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          comparePredicate = bindings[0].comparePredicate!
        }
        const template =
          'The node %o has a predicate %o%s, your shape %o defines that this value must be ' +
          msg +
          ' the value of predicate %o which is %o'
        return this.format(
          template,
          this.result.focusNode,
          this.result.resultPath ?? '[unknown sh:resultPath]',
          this.valuesToString(),
          this.result.sourceShape ?? '[unknown SHACL SourceShape]',
          comparePredicate,
          compare
        )
      })
      .catch((e) => {
        throw e as Error
      })
  }
}
// const foo = async (validationResult: Term, component: Term, store: Store): Promise<Template> => {
//   const focusNode = store.getObjects(validationResult, sh.focusNode, null)[0]
//   const resultPath = store.getObjects(validationResult, sh.resultPath, null)[0]
//   const sourceShape = store.getObjects(validationResult, sh.sourceShape, null)[0]

//   const engine = newEngine(store)
//   const results = await engine.query(rq)
//   let compare: Term = getFactory().literal('[unknown value]')
//   let actual: Term = getFactory().literal('[unknown value]')
//   let comparePredicate: Term = getFactory().literal('[unknown value]')
//   if (results.type === 'bindings') {
//     const bindings = await results.toArray()
//     if (bindings.length > 0) {
//       // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
//       compare = bindings[0].compare!
//       // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
//       actual = bindings[0].actual!
//       // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
//       comparePredicate = bindings[0].comparePredicate!
//     }
//   }
//   return await Promise.resolve({
//     template:
//       'your node {{0}} has a predicate {{1}} with value "{{3}}", your shape {{2}} defines that this value must be ' +
//       msg +
//       ' the value of predicate {{4}} which is ' +
//       (component.equals(sh.DisjointConstraintComponent) ? 'also ' : '') +
//       '"{{5}}".',
//     nodes: [focusNode, resultPath, sourceShape, actual, comparePredicate, compare]
//   })
// }
