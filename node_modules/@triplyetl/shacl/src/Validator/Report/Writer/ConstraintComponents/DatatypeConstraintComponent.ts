import { sh } from '@triplyetl/vocabularies'
import ConstraintComponent from '../ConstraintComponent.js'
import { type Term } from '@triplydb/data-factory/Terms.js'

export default class DatatypeConstraintComponent extends ConstraintComponent {
  public async toString (): Promise<string> {
    let expectedDatatype: Term | undefined
    if (this.opts.model !== undefined && this.result.sourceShape !== undefined) {
      expectedDatatype = this.opts.model.getObjects(this.result.sourceShape, sh.datatype, null).shift()
    }
    return await Promise.resolve(
      this.format(
        'The node %o has a predicate %o%s; your shape %o requires datatype %o.',
        this.result.focusNode,
        this.result.resultPath ?? '[unknown sh:resultPath]',
        this.valuesToString(),
        this.result.sourceShape ?? '[unknown SHACL SourceShape]',
        expectedDatatype ?? '[unknown dataType]'
      )
    )
  }
}
