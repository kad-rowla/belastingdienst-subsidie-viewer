import { type Term } from '@triplydb/data-factory/Terms.js'
import { sh } from '@triplyetl/vocabularies'
import ConstraintComponent from '../ConstraintComponent.js'

export default class CardinalityConstraintComponents extends ConstraintComponent {
  public async toString (): Promise<string> {
    let predicate: Term = sh.minCount
    let msg = 'minimum'
    switch (this.result.sourceConstraintComponent.value) {
      case sh.MinCountConstraintComponent.value:
        predicate = sh.minCount
        msg = 'minimum'
        break
      case sh.MaxCountConstraintComponent.value:
        predicate = sh.maxCount
        msg = 'maximum'
        break
    }

    if (this.result.sourceShape === undefined || this.result.resultPath === undefined) {
      return await Promise.resolve(this.resultMessagesToString())
    }

    let values = ''
    let constraintMessage = (this.result.resultMessages[0]?.value ?? '[error: no resultMessage]').toLowerCase()
    if (this.opts.data !== undefined && this.result.resultPath !== undefined) {
      const nodes = this.opts.data.getObjects(this.result.focusNode, this.result.resultPath, null)
      if (nodes.length > 0) {
        values = ' (' + this.format(nodes.map((_) => '%o').join(', '), ...nodes) + ')'
        constraintMessage = nodes.length.toString() + ' value' + (nodes.length === 1 ? '' : 's')
      } else {
        constraintMessage = 'no values'
      }
    }
    let cardinality: any = '[unknown]'
    if (this.result.sourceShape !== undefined) {
      cardinality = this.opts.model?.getObjects(this.result.sourceShape, predicate, null)[0]
      if (cardinality !== undefined) {
        cardinality = cardinality.value
      }
    }

    return await Promise.resolve(this.format('The node %o has a predicate %o with %s%s, your shape %o defines a %s of %i.', this.result.focusNode, this.result.resultPath ?? '[unknown sh:resultPath]', constraintMessage, values, this.result.sourceShape ?? '[unknown SHACL SourceShape]', msg, cardinality))
  }
}
