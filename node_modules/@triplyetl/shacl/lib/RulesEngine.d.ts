import { type DefaultFactory, Store } from '@triplydb/data-factory';
import { type NamedNode, type Quad } from '@triplydb/data-factory/Terms.js';
import { type SparqlEngine } from '@triplydb/engine/SparqlEngine.js';
export interface RulesEngineOptions {
    data: Store;
    engine?: SparqlEngine;
    factory: DefaultFactory;
    maxIterations: number;
    errorOnMaxIterations: 'throw' | 'warn' | 'none';
    debug?: boolean;
    prefix?: Record<string, string | NamedNode | ReturnType<DefaultFactory['prefixer']>>;
    graph?: NamedNode;
}
export default class RulesEngine {
    model: Store;
    $signature: string;
    private readonly engine;
    readonly data: Store;
    private readonly factory;
    private readonly opts;
    /**
     * The combined dataset of model and data (if provided)
     */
    private readonly dataset;
    constructor(model: Store, opts?: Partial<RulesEngineOptions>);
    /**
     * Execute rules and stores the result in the dataset
     *
     * @returns the new Quads
     */
    execute(): Promise<Quad[]>;
    private $execute;
    static isRulesEngine(obj: unknown): obj is RulesEngine;
    private getShapesThatHaveRules;
    private loadFocusnodesFromShapes;
    private validateNode;
    private applyRules;
    private applyTripleRule;
    private applySPARQLRule;
}
//# sourceMappingURL=RulesEngine.d.ts.map