#!/usr/bin/env node
import util from 'util';
import chalk from 'chalk';
import checkFileAccessibility from '../Utilities/fileAvailable.js';
import getDatasetFromResource from '../Utilities/getDatasetFromResource.js';
import Validator from '../Validator.js';
const [shapesFile, dataFile] = process.argv.slice(2);
const error = (msg, exit = 0) => {
    if (exit > 0) {
        console.error(chalk.red(msg));
        process.exit(exit);
    }
    else if (exit < 0) {
        console.info(chalk.blue(msg));
    }
    else if (exit === 0) {
        console.info(chalk.green(msg));
    }
};
if (shapesFile === undefined)
    error('usage: npx validate <shapes> [<data>]', 1);
if (!await checkFileAccessibility(shapesFile))
    error(`${util.format('%o', shapesFile)}}: file is not accessible`, 2);
if (dataFile !== undefined && !await checkFileAccessibility(dataFile))
    error(`${util.format('%o', dataFile)}: file is not accessible`, 2);
let dataset;
let shapes;
try {
    shapes = getDatasetFromResource(shapesFile);
}
catch (e) {
    error(util.format('failed to load shapes file %o as valid rdf', shapesFile), 3);
}
if (dataFile !== undefined) {
    try {
        dataset = getDatasetFromResource(dataFile);
    }
    catch (e) {
        error(util.format('failed to load data file %o as valid rdf', dataFile), 3);
    }
}
if (shapes !== undefined) {
    const validator = new Validator(shapes);
    const report = await validator.validate({ dataset });
    if (!report.conforms) {
        console.error(await report.writer.toString());
    }
    process.exit(report.conforms ? 0 : 6);
}
else {
    error('this should not happen ...', 10);
}
//# sourceMappingURL=validate.js.map