var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
import { getFactory } from '@triplydb/data-factory';
import { newEngine } from '@triplydb/speedy-memory';
import prefixDeclarationsRq from '../Queries/prefixDeclarations.rq.js';
import { isEngine } from './isEngine.js';
import { Iri } from '@triplyetl/vocabularies';
async function prefixDeclarations(datasetOrEngine, factory) {
    const engine = isEngine(datasetOrEngine) ? datasetOrEngine : newEngine(datasetOrEngine);
    factory = factory !== null && factory !== void 0 ? factory : getFactory();
    return await engine
        .select(prefixDeclarationsRq)
        .then(async (bindings) => {
        var _a, e_1, _b, _c;
        const prefixer = {};
        try {
            for (var _d = true, bindings_1 = __asyncValues(bindings), bindings_1_1; bindings_1_1 = await bindings_1.next(), _a = bindings_1_1.done, !_a; _d = true) {
                _c = bindings_1_1.value;
                _d = false;
                const binding = _c;
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                prefixer[binding.prefix.value] = new Iri(binding.namespace.value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = bindings_1.return)) await _b.call(bindings_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return prefixer;
    });
}
export default prefixDeclarations;
//# sourceMappingURL=prefixDeclarations.js.map