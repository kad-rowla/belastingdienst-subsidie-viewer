var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
import { getFactory, Store } from '@triplydb/data-factory';
import { newEngine } from '@triplydb/speedy-memory';
import { isEngine } from './isEngine.js';
import SPARQLTargetsRq from '../Queries/SPARQLTargets.rq.js';
import { sh } from '@triplyetl/vocabularies';
export const getEngineFromOptions = (opts) => {
    let engine;
    if (opts.engine !== undefined) {
        engine = opts.engine;
    }
    else {
        const store = new Store(opts.shapes.getQuads({}).concat(opts.data === undefined ? [] : opts.data.getQuads({})));
        engine = newEngine(store);
    }
    return engine;
};
/**
 * Use this function to preload you model with SPARQL Targets
 *
 * @param opts.shapes a RdfJs dataset/store containing the shapes
 * @param opts.data an optional RdfJs dataset/store containing the data
 * @param opts.engines a Speedy engine, use this if you want to re-use the engine for other usage
 * @param opts.factory an optional DataFactory
 * @see https://www.w3.org/TR/shacl-af/#SPARQLTarget
 */
export default async function loadSPARQLTargets(opts) {
    var _a;
    const factory = (_a = opts.factory) !== null && _a !== void 0 ? _a : getFactory();
    const dataset = await getSPARQLTargets(getEngineFromOptions(opts), factory);
    opts.shapes.addQuads(dataset.getQuads({}));
    return dataset;
}
export async function getSPARQLTargets(datasetOrEngine, factory) {
    var _a, e_1, _b, _c, _d, e_2, _e, _f;
    const engine = isEngine(datasetOrEngine) ? datasetOrEngine : newEngine(datasetOrEngine);
    const $factory = factory !== null && factory !== void 0 ? factory : getFactory();
    const dataset = new Store();
    try {
        for (var _g = true, _h = __asyncValues(await engine.select(SPARQLTargetsRq)), _j; _j = await _h.next(), _a = _j.done, !_a; _g = true) {
            _c = _j.value;
            _g = false;
            const binding = _c;
            if (binding.query !== undefined && binding.shape !== undefined) {
                try {
                    for (var _k = true, _l = (e_2 = void 0, __asyncValues(await engine.select(binding.query.value))), _m; _m = await _l.next(), _d = _m.done, !_d; _k = true) {
                        _f = _m.value;
                        _k = false;
                        const targetBinding = _f;
                        if (targetBinding.this === undefined) {
                            return await Promise.reject(new Error("Expected the bound variable '$this' in the result."));
                        }
                        else if (targetBinding.this.termType === 'Literal') {
                            return await Promise.reject(new Error("Expected the bound variable '$this' to be a NamedNode or Blanknode, got a Literal."));
                        }
                        else {
                            dataset.addQuad($factory.quad(binding.shape, sh.targetNode, targetBinding.this));
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (!_k && !_d && (_e = _l.return)) await _e.call(_l);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            else {
                console.error(SPARQLTargetsRq);
                throw new Error('There is probably something wrong with the SPARQL query that loads the sh:select queries.');
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (!_g && !_a && (_b = _h.return)) await _b.call(_h);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return dataset;
}
//# sourceMappingURL=loadSPARQLTargets.js.map