import { Store } from '@triplydb/data-factory';
import { type Term } from '@triplydb/data-factory/Terms.js';
import { Validator as ValidatorBase } from 'shacl-engine';
import Report from './Validator/Report.js';
import { type Targets } from './Types.js';
import { type SparqlEngine } from '@triplydb/engine/SparqlEngine.js';
import Writer from './Validator/Report/Writer.js';
import { type DefaultFactoryWithDataset } from './Utilities/getDataFactoryWithDataset.js';
export interface ValidatorOptions {
    factory: DefaultFactoryWithDataset;
    debug?: boolean;
    details?: boolean;
    trace?: boolean;
    coverage?: boolean;
    engine?: SparqlEngine;
    allowSPARQLTargets?: boolean;
    skipShaclShaclValidaton?: boolean;
}
export declare class ModelValidationError extends Error {
    writer: Writer;
    constructor(message: string, writer: Writer);
}
export default class Validator extends ValidatorBase {
    model: Store;
    opts?: Partial<ValidatorOptions> | undefined;
    $signature: string;
    protected _data: Store | undefined;
    protected engine: SparqlEngine | undefined;
    /**
     * Constructor for the SHACL Validation Engine
     *
     * @param model a RdfJs compatible Store that holds the SHACL shapes (the model)
     * @param opts
     */
    constructor(model: Store, opts?: Partial<ValidatorOptions> | undefined);
    private rebuild;
    get data(): Store;
    set data(data: Store);
    /**
     * @see https://issues.triply.cc/issues/6223
     */
    private static fixForIssue6223;
    /**
     * @param data The data must have the following structure:
     *  - dataset: An RDF/JS DatasetCore object that contains the quads. (required)
     *  - terms: An iterable object of RDF/JS Terms that will be used as initial focus nodes. (optional)
     * @param shapes The shapes object is optional, but if given must have the following structure:
     *  - terms: An iterable object of RDF/JS Terms that refers to the initial set of shapes. (optional) This doesn't limit the nested shapes.
     * @returns a SHACL Validation Report object
     */
    validate(data: {
        dataset?: Store;
        terms?: Term[];
    }, shapes?: Term[] | Term): Promise<Report>;
    /**
     * Validate models against Shacl-Shacl
     *
     * @param model a Store containing the shapes
     * @param factory an optional DataFactory
     * @throws ModelValidationError
     */
    static validateModel(model: Store, factory?: DefaultFactoryWithDataset): Promise<void>;
    /**
     * @see https://git.triply.cc/triply/etl/-/issues/263
     */
    protected validateAnyURI(engine: SparqlEngine, report: Report): Promise<void>;
    static getTargets(opts: {
        shapes: Store;
        data?: Store;
    }): Promise<Targets>;
    static isValidator(obj: unknown): obj is Validator;
}
//# sourceMappingURL=Validator.d.ts.map