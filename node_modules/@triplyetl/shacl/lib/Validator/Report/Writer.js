var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
/* eslint-disable @typescript-eslint/no-base-to-string */
import { Store, getWriter, getFactory } from '@triplydb/data-factory';
import { rdf, rdfs, sdo, sh } from '@triplyetl/vocabularies';
import assertIsSHACLValidationReport from './Writer/assertIsSHACLValidationReport.js';
import { newEngine } from '@triplydb/speedy-memory';
import SHACLValidationResultRq from '../../Queries/SHACLValidationResult.rq.js';
import ConstraintComponentFactory from './Writer/ConstraintComponents/Factory.js';
import chalk from 'chalk';
import wrap from 'word-wrap';
import { shrink } from '@zazuko/prefixes';
import { formatWithOptions } from 'util';
import { promises as fs } from 'fs';
const $SIGNATURE = '@triplyetl/shacl/Validator/Report/Writer';
const standardPrefixes = {
    // eslint-disable-next-line @typescript-eslint/no-base-to-string
    sh: sh.toString(),
    // eslint-disable-next-line @typescript-eslint/no-base-to-string
    rdf: rdf.toString(),
    // eslint-disable-next-line @typescript-eslint/no-base-to-string
    rdfs: rdfs.toString(),
    // eslint-disable-next-line @typescript-eslint/no-base-to-string
    sdo: sdo.toString(),
    ex: 'http://example.org/',
    exs: 'https://example.org/',
    exc: 'http://example.con/',
    excs: 'https://example.con/',
    triply: 'http://triplydb.com/'
};
/**
 * The class that turns a SHACL Validation report into human readable messages
 */
export default class Writer {
    constructor(dataset, opts) {
        var _a;
        this.dataset = dataset;
        this.$signature = $SIGNATURE;
        const { report, conforms } = assertIsSHACLValidationReport(dataset);
        this.report = report;
        this.conforms = conforms;
        this.opts = Object.assign(Object.assign({}, opts), { factory: (_a = opts === null || opts === void 0 ? void 0 : opts.factory) !== null && _a !== void 0 ? _a : getFactory(), prefixes: Object.assign(Object.assign({}, standardPrefixes), opts === null || opts === void 0 ? void 0 : opts.prefixes) });
    }
    static fromReport(report, model) {
        const writer = new Writer(report.dataset, { model });
        return writer;
    }
    static fromValidationReport(report, model) {
        const writer = new Writer(report, { model });
        return writer;
    }
    /**
     * Turn the Results into a tree, grouped by result
     */
    async getResults() {
        if (this.$results !== undefined) {
            return this.$results;
        }
        // SHACL implementations may use other SHACL subclasses of sh:AbstractResult see https://w3c.github.io/data-shapes/shacl/#results-validation-result
        this.dataset.addQuad(this.opts.factory.quad(sh.ValidationResult, rdfs.subClassOf, sh.AbstractResult));
        const engine = newEngine(this.dataset);
        return await engine
            .select(SHACLValidationResultRq)
            .then(async (bindings) => {
            var _a, e_1, _b, _c;
            var _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
            let i = 0;
            const map = new Map();
            const results = [];
            let ix;
            try {
                for (var _u = true, bindings_1 = __asyncValues(bindings), bindings_1_1; bindings_1_1 = await bindings_1.next(), _a = bindings_1_1.done, !_a; _u = true) {
                    _c = bindings_1_1.value;
                    _u = false;
                    const binding = _c;
                    ix = map.get((_e = (_d = binding.result) === null || _d === void 0 ? void 0 : _d.value) !== null && _e !== void 0 ? _e : '<>');
                    if (ix === undefined) {
                        map.set((_g = (_f = binding.result) === null || _f === void 0 ? void 0 : _f.value) !== null && _g !== void 0 ? _g : '<>', i);
                        results[i] = {
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            resultNode: binding.result,
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            focusNode: binding.focusNode,
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            sourceConstraintComponent: binding.sourceConstraintComponent,
                            resultSeverity: ((_j = (_h = binding.resultSeverity) === null || _h === void 0 ? void 0 : _h.value.replace(sh.toString(), '')) !== null && _j !== void 0 ? _j : 'Violation'),
                            resultMessages: [],
                            values: []
                        };
                        ix = i;
                        i++;
                    }
                    if (((_k = binding.resultMessage) === null || _k === void 0 ? void 0 : _k.termType) === 'Literal') {
                        results[ix].resultMessages.push(binding.resultMessage);
                    }
                    if (((_l = binding.resultPath) === null || _l === void 0 ? void 0 : _l.termType) === 'NamedNode') {
                        results[ix].resultPath = binding.resultPath;
                    }
                    if (((_m = binding.detail) === null || _m === void 0 ? void 0 : _m.termType) === 'NamedNode') {
                        results[ix].detail = binding.detail;
                    }
                    if (((_o = binding.sourceShape) === null || _o === void 0 ? void 0 : _o.termType) === 'NamedNode' || ((_p = binding.sourceShape) === null || _p === void 0 ? void 0 : _p.termType) === 'BlankNode') {
                        results[ix].sourceShape = binding.sourceShape;
                    }
                    if (((_q = binding.value) === null || _q === void 0 ? void 0 : _q.termType) === 'Literal' || ((_r = binding.value) === null || _r === void 0 ? void 0 : _r.termType) === 'NamedNode') {
                        results[ix].values.push(binding.value);
                    }
                    if (((_s = binding.sourceConstraint) === null || _s === void 0 ? void 0 : _s.termType) === 'BlankNode' || ((_t = binding.sourceConstraint) === null || _t === void 0 ? void 0 : _t.termType) === 'NamedNode') {
                        results[ix].sourceConstraint = binding.sourceConstraint;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_u && !_a && (_b = bindings_1.return)) await _b.call(bindings_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.$results = results;
            return this.$results;
        });
    }
    async saveRdf(destination, options) {
        await this.toRdf(options === null || options === void 0 ? void 0 : options.rdf)
            .then(async (rdf) => {
            await fs.writeFile(destination, rdf, options === null || options === void 0 ? void 0 : options.file);
        });
    }
    async toRdf(options) {
        var _a;
        options = options !== null && options !== void 0 ? options : {};
        options.prefixes = Object.assign({ sh: sh.toIri(), rdf: rdf.toIri(), rdfs: rdfs.toIri(), ex: getFactory().namedNode('http://example.org/') }, ((_a = options === null || options === void 0 ? void 0 : options.prefixes) !== null && _a !== void 0 ? _a : {}));
        const writer = getWriter(options);
        writer.addQuads(this.dataset.getQuads({}));
        return await new Promise((resolve, reject) => {
            writer.end(function (error, result) {
                if (error !== null)
                    reject(new Error('failed to write quads'));
                else
                    resolve(result);
            });
        });
    }
    async toString() {
        var _a, _b;
        const store = new Store(this.dataset.getQuads({}));
        if (this.opts.model !== undefined)
            store.addQuads(this.opts.model.getQuads({}));
        if (this.opts.data !== undefined)
            store.addQuads(this.opts.data.getQuads({}));
        const engine = newEngine(store);
        const resultMessages = [];
        for (const result of await this.getResults()) {
            let indent = 'â–Œ ';
            switch (result.resultSeverity) {
                case 'Info':
                    indent = chalk.blue(indent);
                    break;
                case 'Warning':
                    indent = chalk.cyan(indent);
                    break;
                case 'Violation':
                    indent = chalk.red(indent);
                    break;
            }
            const label = shrink(result.sourceConstraintComponent.value, { sh: sh.toString() });
            let resultMessage = result.resultMessages.map(msg => msg.value).join('; ');
            const iris = [];
            for (const m of resultMessage.matchAll(/<(.*?)>/g)) {
                resultMessage = resultMessage.replace(m[0], '%o');
                const shronken = shrink(m[1], this.opts.prefixes);
                iris.push(shronken === '' ? m[0] : shronken);
            }
            resultMessage = formatWithOptions({ colors: true }, resultMessage, ...iris);
            const width = ((_a = process.stdout.columns) !== null && _a !== void 0 ? _a : 80) > 80 ? 80 : ((_b = process.stdout.columns) !== null && _b !== void 0 ? _b : 80);
            try {
                const component = ConstraintComponentFactory.getConstraintComponent(result, engine, this.opts);
                const componentMessage = wrap(await component.toString(), { width, indent });
                resultMessages.push(componentMessage +
                    chalk.gray(`\n   - ${chalk.italic('severity')}  : `) +
                    (result.resultSeverity === 'Info' ? chalk.blue('Info') : '') +
                    (result.resultSeverity === 'Warning' ? chalk.cyan('Warning') : '') +
                    (result.resultSeverity === 'Violation' ? chalk.red('Violation') : '') +
                    chalk.gray(`\n   - ${chalk.italic('component')} : ${label}`) +
                    (result.resultMessages.length > 0 ? chalk.grey(`\n   - ${chalk.italic('message')}   : ${resultMessage}`) : ''));
            }
            catch (e) {
                resultMessages.push(wrap(resultMessage, { width, indent }) +
                    chalk.gray(`\n   - ${chalk.italic('severity')}  : `) +
                    (result.resultSeverity === 'Info' ? chalk.blue('Info') : '') +
                    (result.resultSeverity === 'Warning' ? chalk.cyan('Warning') : '') +
                    (result.resultSeverity === 'Violation' ? chalk.red('Violation') : '') +
                    chalk.gray(`\n   - ${chalk.italic('component')} : ${label}`));
            }
        }
        return resultMessages.join('\n\n');
    }
    static isWriter(obj) {
        if (typeof obj !== 'object')
            return false;
        if (obj === null)
            return false;
        if (!Object.hasOwn(obj, '$signature'))
            return false;
        // @ts-expect-error we now know this property does exists
        return obj.$signature === $SIGNATURE;
    }
}
//# sourceMappingURL=Writer.js.map