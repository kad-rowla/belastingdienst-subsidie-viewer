import { assert } from 'chai';
import Writer from '../../Writer.js';
import { Store, getFactory } from '@triplydb/data-factory';
import { a, sh, xsd } from '@triplyetl/vocabularies';
import assertIsSHACLValidationReport from '../assertIsSHACLValidationReport.js';
const factory = getFactory();
describe('assertIsSHACLValidationReport', () => {
    it('should fail on a dataset that does not have a sh:ValidationReport', () => {
        assert.throw(() => assertIsSHACLValidationReport(new Store()), 'The dataset does not look like a SHACL Validation Report.');
    });
    it('should fail on a dataset that has more than 1 sh:ValidationReport', () => {
        const dataset = new Store();
        dataset.addQuads([factory.quad(factory.blankNode(), a, sh.ValidationReport), factory.quad(factory.blankNode(), a, sh.ValidationReport)]);
        assert.throw(() => new Writer(dataset), 'The dataset contains 2 SHACL Validation Reports. This Writer only works with 1.');
    });
    it('should fail on a report without `sh:conforms`', () => {
        const dataset = new Store();
        dataset.addQuads([factory.quad(factory.blankNode(), a, sh.ValidationReport)]);
        assert.throw(() => new Writer(dataset), 'Missing a `sh:conforms` predicate on the SHACL Validation Report.');
    });
    it('should fail on a report with more than 1 `sh:conforms`', () => {
        const dataset = new Store();
        const node = factory.blankNode();
        dataset.addQuads([factory.quad(node, a, sh.ValidationReport), factory.quad(node, sh.conforms, factory.literal('true', xsd.boolean)), factory.quad(node, sh.conforms, factory.literal('false', xsd.boolean))]);
        assert.throw(() => new Writer(dataset), 'The SHACL Validation Report contains 2 values for `sh:conforms`.');
    });
    it('should fail on a report with an invalid `sh:conforms`', () => {
        const dataset = new Store();
        const node = factory.blankNode();
        dataset.addQuads([factory.quad(node, a, sh.ValidationReport), factory.quad(node, sh.conforms, factory.literal('geldig', xsd.string))]);
        assert.throw(() => new Writer(dataset), 'The object value for `sh:conforms` must be a boolean, got <http://www.w3.org/2001/XMLSchema#string>.');
    });
});
//# sourceMappingURL=assertIsSHACLValidationReport.test.js.map