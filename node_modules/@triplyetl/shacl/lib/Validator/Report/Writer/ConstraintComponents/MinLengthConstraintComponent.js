import { sh } from '@triplyetl/vocabularies';
import ConstraintComponent from '../ConstraintComponent.js';
export default class MinLengthConstraintComponent extends ConstraintComponent {
    async toString() {
        var _a, _b, _c, _d, _e, _f;
        let predicate = sh.minCount;
        let msg = 'minimum';
        switch (this.result.sourceConstraintComponent.value) {
            case sh.MinLengthConstraintComponent.value:
                predicate = sh.minLength;
                msg = 'minimum';
                break;
            case sh.MaxLengthConstraintComponent.value:
                predicate = sh.maxLength;
                msg = 'maximum';
                break;
        }
        if (this.opts.model !== undefined && this.result.sourceShape !== undefined) {
            return await Promise.resolve(this.format('The node %o has a predicate %o%s of incorrect length; your shape %o defines a %s length of %i.', this.result.focusNode, (_a = this.result.resultPath) !== null && _a !== void 0 ? _a : '[unknown]', this.valuesToString(), (_b = this.result.sourceShape) !== null && _b !== void 0 ? _b : '[unknown]', msg, (_d = (_c = this.opts.model.getObjects(this.result.sourceShape, predicate, null)[0]) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : '[unknown]'));
        }
        else {
            return await Promise.resolve(this.format('The node %o has a predicate %o%s of incorrect length; your shape %o reports: %s.', this.result.focusNode, (_e = this.result.resultPath) !== null && _e !== void 0 ? _e : '[unknown]', this.valuesToString(), (_f = this.result.sourceShape) !== null && _f !== void 0 ? _f : '[unknown]', this.resultMessagesToString()));
        }
    }
}
//# sourceMappingURL=MinLengthConstraintComponent.js.map