import { rdf, sh } from '@triplyetl/vocabularies';
import ConstraintComponent from '../ConstraintComponent.js';
export default class LanguageInConstraintComponent extends ConstraintComponent {
    async toString() {
        var _a, _b;
        if (this.opts.model === undefined ||
            this.opts.data === undefined ||
            this.result.resultPath === undefined ||
            this.result.values.length === 0 ||
            this.result.sourceShape === undefined) {
            return await Promise.resolve(this.resultMessagesToString());
        }
        // happy coding: only 1 value is expected
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const value = this.result.values.shift();
        let expectedLanguagesList = this.opts.model.getObjects(this.result.sourceShape, sh.languageIn, null)[0];
        const expectedLanguages = [];
        while (true) {
            expectedLanguages.push(this.opts.model.getObjects(expectedLanguagesList, rdf.first, null)[0].value);
            const rest = this.opts.model.getObjects(expectedLanguagesList, rdf.rest, null)[0];
            if (rest.equals(rdf.nil) || rest === undefined) {
                break;
            }
            expectedLanguagesList = rest;
        }
        return await Promise.resolve(this.format('The node %o has a predicate %o with value %o; your shape %o only allows language%s %s', this.result.focusNode, (_a = this.result.resultPath) !== null && _a !== void 0 ? _a : '[unknown sh:resultPath]', value, (_b = this.result.sourceShape) !== null && _b !== void 0 ? _b : '[unknown SHACL SourceShape]', expectedLanguages.length === 1 ? '' : 's', this.format(expectedLanguages.map((_) => '%o').join(', '), ...expectedLanguages)));
    }
}
//# sourceMappingURL=LanguageInConstraintComponent%20.js.map