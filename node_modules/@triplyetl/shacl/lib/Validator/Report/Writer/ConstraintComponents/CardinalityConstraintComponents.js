import { sh } from '@triplyetl/vocabularies';
import ConstraintComponent from '../ConstraintComponent.js';
export default class CardinalityConstraintComponents extends ConstraintComponent {
    async toString() {
        var _a, _b, _c, _d, _e;
        let predicate = sh.minCount;
        let msg = 'minimum';
        switch (this.result.sourceConstraintComponent.value) {
            case sh.MinCountConstraintComponent.value:
                predicate = sh.minCount;
                msg = 'minimum';
                break;
            case sh.MaxCountConstraintComponent.value:
                predicate = sh.maxCount;
                msg = 'maximum';
                break;
        }
        if (this.result.sourceShape === undefined || this.result.resultPath === undefined) {
            return await Promise.resolve(this.resultMessagesToString());
        }
        let values = '';
        let constraintMessage = ((_b = (_a = this.result.resultMessages[0]) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : '[error: no resultMessage]').toLowerCase();
        if (this.opts.data !== undefined && this.result.resultPath !== undefined) {
            const nodes = this.opts.data.getObjects(this.result.focusNode, this.result.resultPath, null);
            if (nodes.length > 0) {
                values = ' (' + this.format(nodes.map((_) => '%o').join(', '), ...nodes) + ')';
                constraintMessage = nodes.length.toString() + ' value' + (nodes.length === 1 ? '' : 's');
            }
            else {
                constraintMessage = 'no values';
            }
        }
        let cardinality = '[unknown]';
        if (this.result.sourceShape !== undefined) {
            cardinality = (_c = this.opts.model) === null || _c === void 0 ? void 0 : _c.getObjects(this.result.sourceShape, predicate, null)[0];
            if (cardinality !== undefined) {
                cardinality = cardinality.value;
            }
        }
        return await Promise.resolve(this.format('The node %o has a predicate %o with %s%s, your shape %o defines a %s of %i.', this.result.focusNode, (_d = this.result.resultPath) !== null && _d !== void 0 ? _d : '[unknown sh:resultPath]', constraintMessage, values, (_e = this.result.sourceShape) !== null && _e !== void 0 ? _e : '[unknown SHACL SourceShape]', msg, cardinality));
    }
}
//# sourceMappingURL=CardinalityConstraintComponents.js.map