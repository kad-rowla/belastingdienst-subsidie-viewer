import { sh } from '@triplyetl/vocabularies';
import ConstraintComponent from '../ConstraintComponent.js';
export default class DatatypeConstraintComponent extends ConstraintComponent {
    async toString() {
        var _a, _b;
        let expectedDatatype;
        if (this.opts.model !== undefined && this.result.sourceShape !== undefined) {
            expectedDatatype = this.opts.model.getObjects(this.result.sourceShape, sh.datatype, null).shift();
        }
        return await Promise.resolve(this.format('The node %o has a predicate %o%s; your shape %o requires datatype %o.', this.result.focusNode, (_a = this.result.resultPath) !== null && _a !== void 0 ? _a : '[unknown sh:resultPath]', this.valuesToString(), (_b = this.result.sourceShape) !== null && _b !== void 0 ? _b : '[unknown SHACL SourceShape]', expectedDatatype !== null && expectedDatatype !== void 0 ? expectedDatatype : '[unknown dataType]'));
    }
}
//# sourceMappingURL=DatatypeConstraintComponent.js.map