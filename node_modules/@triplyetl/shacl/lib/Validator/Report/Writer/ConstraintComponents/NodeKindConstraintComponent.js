import { sh } from '@triplyetl/vocabularies';
import ConstraintComponent from '../ConstraintComponent.js';
export default class NodeKindConstraintComponent extends ConstraintComponent {
    async toString() {
        var _a, _b, _c, _d, _e;
        let nodeKind = ((_b = (_a = this.result.resultMessages[0]) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : '[unknown]').replace(/Value does not have node kind /, '');
        if (this.opts.model !== undefined && this.result.sourceShape !== undefined) {
            nodeKind = (_c = this.opts.model.getObjects(this.result.sourceShape, sh.nodeKind, null).shift()) !== null && _c !== void 0 ? _c : nodeKind;
        }
        return await Promise.resolve(this.format('The node %o has a predicate %o%s, your shape %o only allows a node kind %o.', this.result.focusNode, (_d = this.result.resultPath) !== null && _d !== void 0 ? _d : '[unknown sh:resultPath]', this.valuesToString(), (_e = this.result.sourceShape) !== null && _e !== void 0 ? _e : '[unknown SHACL SourceShape]', nodeKind));
    }
}
//# sourceMappingURL=NodeKindConstraintComponent.js.map