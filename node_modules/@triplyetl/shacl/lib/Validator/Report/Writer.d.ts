/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Store, type DefaultFactory } from '@triplydb/data-factory';
import { type WriterOptions } from '@triplydb/data-factory/serialize.js';
import type Report from '../Report.js';
import type ValidationResult from './Writer/ValidationResult.js';
import { type PathLike, type WriteFileOptions, promises as fs } from 'fs';
export interface Options {
    factory: DefaultFactory;
    prefixes: Record<string, string>;
    model?: Store;
    data?: Store;
}
/**
 * The class that turns a SHACL Validation report into human readable messages
 */
export default class Writer {
    private readonly dataset;
    $signature: string;
    private readonly report;
    conforms: boolean;
    protected opts: Options;
    $results?: ValidationResult[];
    constructor(dataset: Store, opts?: Partial<Options>);
    static fromReport(report: Report, model?: Store): Writer;
    static fromValidationReport(report: Store, model?: Store): Writer;
    /**
     * Turn the Results into a tree, grouped by result
     */
    getResults(): Promise<ValidationResult[]>;
    saveRdf(destination: fs.FileHandle | PathLike, options?: {
        rdf: WriterOptions;
        file: WriteFileOptions;
    }): Promise<void>;
    toRdf(options?: WriterOptions): Promise<string>;
    toString(): Promise<string>;
    static isWriter(obj: unknown): obj is Writer;
}
//# sourceMappingURL=Writer.d.ts.map