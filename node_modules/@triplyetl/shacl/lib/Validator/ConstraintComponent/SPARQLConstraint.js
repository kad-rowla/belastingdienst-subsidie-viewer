var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
import { getFactory } from '@triplydb/data-factory';
import { newEngine } from '@triplydb/speedy-memory';
import { a, rdf, sh, xsd } from '@triplyetl/vocabularies';
import SPARQLConstraintRq from '../../Queries/SPARQLConstraint.rq.js';
import SHACLAnnotationsRq from '../../Queries/SHACLAnnotations.rq.js';
/**
 * SHACL-SPARQL supports a constraint component that can be used to express restrictions based on a SPARQL SELECT query.
 *
 * This function modifies the validation report and adds new sh:result nodes when applicable
 *
 * @see https://www.w3.org/TR/shacl/#sparql-constraints
 * @param opts
 * @returns a boolean that indicates if non-conforming data is detected
 */
export default async function SPARQLConstraints(opts) {
    var _a, _b;
    const $engine = (_a = opts.engine) !== null && _a !== void 0 ? _a : newEngine(opts.store);
    const factory = (_b = opts.factory) !== null && _b !== void 0 ? _b : getFactory();
    let conforms = true;
    return await $engine
        .select(SPARQLConstraintRq)
        .then(async (bindings) => {
        var _a, e_1, _b, _c;
        try {
            for (var _d = true, bindings_1 = __asyncValues(bindings), bindings_1_1; bindings_1_1 = await bindings_1.next(), _a = bindings_1_1.done, !_a; _d = true) {
                _c = bindings_1_1.value;
                _d = false;
                const binding = _c;
                if (binding.query === undefined)
                    throw new Error("expected binding for 'query'");
                if (binding.shape === undefined)
                    throw new Error("expected binding for 'shape'");
                if (binding.SPARQLConstraint === undefined)
                    throw new Error("expected binding for 'SPARQLConstraint'");
                const shape = binding.shape;
                const SPARQLConstraint = binding.SPARQLConstraint;
                const shMessage = binding.message !== undefined ? binding.message : undefined;
                await $engine
                    .select(binding.query.value)
                    .then(async (bindings) => {
                    var _a, e_2, _b, _c;
                    var _d, _e, _f;
                    const results = [];
                    try {
                        for (var _g = true, bindings_2 = __asyncValues(bindings), bindings_2_1; bindings_2_1 = await bindings_2.next(), _a = bindings_2_1.done, !_a; _g = true) {
                            _c = bindings_2_1.value;
                            _g = false;
                            const binding = _c;
                            const result = factory.blankNode();
                            results.push(result);
                            conforms = false;
                            if (binding.this === undefined)
                                throw new Error("expected binding for 'this'");
                            // if (binding.path === undefined) throw new Error("expected binding for 'path'")
                            opts.report.dataset.addQuads([
                                factory.quad(result, rdf.type, sh.ValidationResult),
                                factory.quad(result, sh.resultSeverity, (_d = binding.severity) !== null && _d !== void 0 ? _d : sh.Violation),
                                factory.quad(result, sh.focusNode, binding.this),
                                factory.quad(result, sh.sourceConstraintComponent, sh.SPARQLConstraintComponent),
                                factory.quad(result, sh.sourceShape, shape),
                                factory.quad(result, sh.sourceConstraint, SPARQLConstraint)
                            ]);
                            if (binding.path !== undefined) {
                                opts.report.dataset.addQuad(factory.quad(result, sh.resultPath, binding.path));
                            }
                            // do we have Annotation Properties?
                            const rq = SHACLAnnotationsRq(shape.termType === 'BlankNode' ? shape : shape, binding.this.termType === 'BlankNode' ? binding.this : binding.this);
                            await $engine.select(rq)
                                .then(async (bindings) => {
                                var _a, e_3, _b, _c;
                                try {
                                    for (var _d = true, bindings_3 = __asyncValues(bindings), bindings_3_1; bindings_3_1 = await bindings_3.next(), _a = bindings_3_1.done, !_a; _d = true) {
                                        _c = bindings_3_1.value;
                                        _d = false;
                                        const binding = _c;
                                        let value;
                                        if (binding.value !== undefined) {
                                            value = binding.value;
                                        }
                                        else if (binding.annotationVarName !== undefined && binding[binding.annotationVarName.value] !== undefined) {
                                            value = binding[binding.annotationVarName.value];
                                        }
                                        if (value !== undefined) {
                                            opts.report.dataset.addQuad(
                                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                                            factory.quad(result, binding.annotationProperty, value));
                                        }
                                    }
                                }
                                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                finally {
                                    try {
                                        if (!_d && !_a && (_b = bindings_3.return)) await _b.call(bindings_3);
                                    }
                                    finally { if (e_3) throw e_3.error; }
                                }
                            });
                            let message;
                            if (binding.message !== undefined) {
                                if (binding.message.termType !== 'Literal') {
                                    throw new Error(`when a message is returned it must be a Literal, got a ${binding.message.termType}`);
                                }
                                message = binding.message;
                            }
                            else if (shMessage !== undefined) {
                                message = shMessage;
                            }
                            else {
                                message = factory.literal('SHACL Constraint violation');
                            }
                            let messageTemplate = message.value;
                            for (const b in binding) {
                                messageTemplate = messageTemplate.replace(`{?${b}}`, (_f = (_e = binding[b]) === null || _e === void 0 ? void 0 : _e.value) !== null && _f !== void 0 ? _f : `{?${b}}`);
                            }
                            message = factory.literal(messageTemplate, message.language !== '' ? message.language : message.datatype);
                            opts.report.dataset.addQuad(factory.quad(result, sh.resultMessage, message));
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (!_g && !_a && (_b = bindings_2.return)) await _b.call(bindings_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    return results;
                })
                    .then((results) => {
                    if (!conforms) {
                        const reports = opts.report.dataset.getSubjects(a, sh.ValidationReport, null);
                        if (reports.length > 0) {
                            reports.forEach((subject) => {
                                opts.report.dataset.removeQuads(opts.report.dataset.getQuads({ subject, predicate: sh.conforms }));
                                opts.report.dataset.addQuad(factory.quad(subject, sh.conforms, factory.literal('false', xsd.boolean)));
                                for (const result of results) {
                                    opts.report.dataset.addQuad(factory.quad(subject, sh.result, result));
                                }
                            });
                        }
                        else {
                            const bn = factory.blankNode();
                            opts.report.dataset.addQuad(factory.quad(bn, a, sh.ValidationReport));
                            opts.report.dataset.addQuad(factory.quad(bn, sh.conforms, factory.literal('false', xsd.boolean)));
                            for (const result of results) {
                                opts.report.dataset.addQuad(factory.quad(bn, sh.result, result));
                            }
                        }
                    }
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = bindings_1.return)) await _b.call(bindings_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return conforms;
    });
}
//# sourceMappingURL=SPARQLConstraint.js.map