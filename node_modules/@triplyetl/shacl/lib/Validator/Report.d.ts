import { type DefaultFactory, type Store } from '@triplydb/data-factory';
import { type BlankNode, type NamedNode, type Quad } from '@triplydb/data-factory/Terms.js';
import type ReportBase from 'shacl-engine/lib/Report.js';
import Writer from './Report/Writer.js';
import type ValidationResult from './Report/Writer/ValidationResult.js';
export interface ReportOptions {
    prefixes: Record<string, string>;
    model: Store;
}
export declare const commonPrefixes: Record<string, string>;
interface Severities {
    violation: Quad[];
    warning: Quad[];
    info: Quad[];
}
export default class Report {
    protected report: ReportBase;
    opts: Partial<ReportOptions>;
    private _severities?;
    SPARQLConstraintConforms: boolean;
    private $conforms;
    constructor(report: ReportBase, opts?: Partial<ReportOptions>);
    addPrefixes(prefixes: Record<string, string>): Report;
    get conforms(): boolean;
    set conforms(value: boolean);
    addValidationResult(result: ValidationResult): void;
    get details(): boolean;
    get factory(): DefaultFactory;
    get options(): any;
    get dataset(): Store;
    get results(): any[];
    get writer(): Writer;
    get severity(): Severities;
    /**
     * Get all Focusnodes from the report
     *
     * @returns the focusnodes that are not valid
     */
    get focusNodes(): Array<NamedNode | BlankNode>;
    get severityMessage(): string;
    countWarnings(): number;
    countInfos(): number;
    countViolations(): number;
}
export {};
//# sourceMappingURL=Report.d.ts.map