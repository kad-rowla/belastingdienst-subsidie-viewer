import { expect } from "chai";
import fs from "fs-extra";

const { readFileSync, unlink } = fs;

import { loadRdf, toRdf, Etl, Source, Destination } from "../../../index.js";
import { LdExtensions, WRITABLE_LD_EXTENSIONS } from "../../../../utils/files.js";
import tty from "../terminal.js";

async function testTTY(ttyName: "stdout" | "stderr", extension: LdExtensions) {
  const destinationFile = `tmp/${Math.random()}.${extension}`;
  let srcFromTTY = "";
  const orig_write = process[ttyName].write.bind(process[ttyName]);
  process[ttyName].write = (buffer): boolean => {
    srcFromTTY += buffer;
    return true;
  };
  const app = new Etl();

  app.use([
    loadRdf([
      Source.file("./src/__tests__/resources/validationFiles/data.ttl"),
      Source.file("./src/__tests__/resources/validationFiles/shapes.ttl"),
    ]),
    toRdf(tty(ttyName, extension)),
    toRdf(Destination.file(destinationFile)),
  ]);
  await app.run();
  process[ttyName].write = orig_write;
  const srcFromFile = readFileSync(destinationFile).toString();
  expect(srcFromFile).to.equal(srcFromTTY);
  await unlink(destinationFile);
}

(process.platform === "win32" ? describe.skip : describe)("Writing data to console", function () {
  WRITABLE_LD_EXTENSIONS.forEach((extension) => {
    it(`some TTL files to STDOUT and STDERR using extension '.${extension}'`, async () => {
      await testTTY("stdout", extension);
      await testTTY("stderr", extension);
    });
  });
});
