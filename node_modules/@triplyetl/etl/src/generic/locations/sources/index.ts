import stream from "stream";
import { sum } from "lodash-es";
import Etl from "../../Etl.js";

import asset from "./asset.js";
import rdf from "./rdf.js";
import file from "./file.js";
import savedQuery from "./savedQuery.js";
import url from "./url.js";
import { CompressionType } from "../../../utils/files.js";
import string from "./string.js";
const Source = {
  TriplyDb: {
    asset: asset,
    rdf: rdf,
    query: savedQuery,
  },
  url: url,
  file: file,
  string: string,
};

export default Source;

export type ContentType = "string" | "records" | "statements" | "boolean";

interface GeneralSourceInfo {
  /** Name for presenting to humans */
  name: string;
  /**
   * Unique location identifier, as content-dependent as feasible.
   *
   * Should start with the type, e.g. `asset://` or `TriplyDb-rdf://`.
   */
  id: () => Promise<string>;
  mediaType: () => Promise<string | undefined>;
}

export interface SizeableSourceInfo extends GeneralSourceInfo {
  /**
   *  Size in bytes
   */
  getSize: () => Promise<number>;
}

export interface FileSourceInfo extends SizeableSourceInfo {
  compression: () => Promise<CompressionType>;
  extension: () => Promise<string | undefined>;
  getLocalPath: () => Promise<string>;
  getStream: () => Promise<stream.Readable>;
}

export interface StringSourceInfo extends SizeableSourceInfo {
  getString: () => Promise<string>;
}

export interface BooleanSourceInfo extends GeneralSourceInfo {
  getBoolean: () => Promise<boolean>;
}

export interface IterableSourceInfo<E> extends GeneralSourceInfo {
  getAsyncIterable: () => Promise<AsyncIterable<E>>;
}

export type SourceInfo<E = unknown> = FileSourceInfo | StringSourceInfo | BooleanSourceInfo | IterableSourceInfo<E>;

export type SourceGetter<
  C extends ContentType = ContentType,
  I extends SourceInfo<unknown> = FileSourceInfo & StringSourceInfo,
> = {
  get: (app: Etl, requestedContentType: C) => Promise<I[]>;
};

export async function getTotalSize(locations: SizeableSourceInfo[]) {
  return sum(await Promise.all(locations.map((l) => l.getSize())));
}
