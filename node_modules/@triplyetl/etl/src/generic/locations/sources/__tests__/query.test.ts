import Etl from "../../../Etl.js";
import chai from "chai";
import path from "path";
import { exec } from "child_process";
import { randomUUID } from "crypto";
import Source from "../index.js";
import { parse } from "@triplydb/data-factory";
const expect = chai.expect;

describe("TriplyDB Queries", function () {
  afterEach(function () {
    Etl.CliContext = undefined;
  });
  it("should read latest query string", async function () {
    const app = new Etl({
      defaultGraph: "https://default.com/",
      sources: {
        query: Source.TriplyDb.query("triply", "ratt-query-string-test", {
          variables: { sub: "whatever" },
          triplyDb: { url: "https://api.nightly.triplydb.com" },
        }),
      },
    });
    const infos = await app.sources.query.get(app, "string");
    expect(infos.length).to.equal(1);
    expect(await infos[0].getString()).to.equal(`PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX schema: <http://schema.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT * WHERE {
  <whatever> rdfs:label ?name;
    schema:video ?videoObject.
  ?videoObject schema:contentUrl ?videoUrl.
  OPTIONAL { ?videoObject (schema:thumbnail/schema:contentUrl) ?videoThumbnail. }
  BIND("<h1>{{name}}</h1><video width=\\"500px\\" height=\\"300px\\" controls poster=\\"{{videoThumbnail}}\\" src=\\"{{videoUrl}}\\"/>"^^rdf:HTML AS ?widget)
}
LIMIT 11`);
    let count = 0;
    for await (const _ of await infos[0].getStream()) count++;
    expect(count).to.equal(1);
  });
  it("should read version of query string", async function () {
    this.timeout(20000);
    const app = new Etl({
      defaultGraph: "https://default.com/",
      sources: {
        query: Source.TriplyDb.query("triply", "ratt-query-string-test", {
          variables: { sub: "whatever" },
          version: 1,
          triplyDb: { url: "https://api.nightly.triplydb.com" },
        }),
      },
    });
    const infos = await app.sources.query.get(app, "string");
    expect(infos.length).to.equal(1);
    expect(await infos[0].getString()).to.equal(`PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX schema: <http://schema.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT * WHERE {
  <whatever> rdfs:label ?name;
    schema:video ?videoObject.
  ?videoObject schema:contentUrl ?videoUrl.
  OPTIONAL { ?videoObject (schema:thumbnail/schema:contentUrl) ?videoThumbnail. }
  BIND("<h1>{{name}}</h1><video width=\\"500px\\" height=\\"300px\\" controls poster=\\"{{videoThumbnail}}\\" src=\\"{{videoUrl}}\\"/>"^^rdf:HTML AS ?widget)
}
LIMIT 10`);
    let count = 0;
    for await (const _ of await infos[0].getStream()) count++;
    expect(count).to.equal(1);
  });

  it("should read results from construct query (> 10k)", async function () {
    this.timeout(20000);
    const dataDir = path.resolve("data", "tmp", "unit-tests", randomUUID());
    after(async () => exec(`rm -r ${dataDir}`));
    Etl.CliContext = { dataDir }; // "disable" the cache
    const app = new Etl({
      defaultGraph: "https://default.com/",
      sources: {
        query: Source.TriplyDb.query("triply", "ratt-construct-query-test", {
          variables: { fake: "whatever" },
          triplyDb: { url: "https://api.nightly.triplydb.com" },
        }),
      },
    });
    const infos = await app.sources.query.get(app, "statements");
    expect(infos.length).to.equal(1);
    expect(await infos[0].compression()).to.equal("gz");
    expect(parse(await infos[0].getString())).to.have.lengthOf(100000);
  });
  it("should read results from select query (> 10k)", async function () {
    this.timeout(20000);
    const dataDir = path.resolve("data", "tmp", "unit-tests", randomUUID());
    after(async () => exec(`rm -r ${dataDir}`));
    Etl.CliContext = { dataDir }; // "disable" the cache
    const app = new Etl({
      defaultGraph: "https://default.com/",
      sources: {
        query: Source.TriplyDb.query("triply", "ratt-select-query-test", {
          variables: { fake: "whatever" },
          triplyDb: { url: "https://api.nightly.triplydb.com" },
        }),
      },
    });
    const infos = await app.sources.query.get(app, "records");
    expect(infos.length).to.equal(1);
    let count = 0;
    for await (const binding of await infos[0].getAsyncIterable()) {
      count++;
      expect(binding["newo"]).to.equal(binding["o"] + "-2");
    }
    expect(count).to.equal(50_000);
  });
  it("should read results from Describe query", async function () {
    // https://nightly.triplydb.com/Triply/-/queries/ratt-describe-query-test/1
    this.timeout(10000);
    const dataDir = path.resolve("data", "tmp", "unit-tests", randomUUID());
    after(async () => exec(`rm -r ${dataDir}`));
    Etl.CliContext = { dataDir }; // "disable" the cache
    const etl = new Etl({
      defaultGraph: "https://default.com/",
      sources: {
        query: Source.TriplyDb.query("Triply", "ratt-describe-query-test", {
          variables: { pokemonName: "pikachu" },
          version: 1,
          triplyDb: { url: "https://api.nightly.triplydb.com" },
        }),
      },
    });
    const description = await etl.sources.query.get(etl, "statements");
    expect(description.length).to.equal(1);
    expect(await description.at(0)?.compression()).to.equal("gz");
    expect(parse(await description[0].getString())).to.have.lengthOf(49);
  });
});
