import { Key, MiddlewareList, when } from "../../index.js";
import { UseWhenCb } from "../../Etl.js";
import forEach from "./forEach.js";
// import { addMwCallSiteToError } from "../../utils";

/**
 * Runs the same middleware for each object in a list of objects (like
 * {@link forEach}), but does not emit an error if the key does not exist
 * (like {@link when}).
 *
 * @remarks
 * Notice that this middleware can only loop over *objects*.  It cannot loop
 * over other types like strings or numbers.
 *
 * @param key - A key that stores a list of object, if present.
 *
 * @param middleware - One or more middlewares that are run for each element.
 *
 * @see This middleware is a combination of the two middlewares {@link when}
 * and {@link forEach}.  See their respective documentation for more
 * information.
 *
 * @see If you want to loop over primitive types like strings or numbers, use
 * {@link iri} and {@link literal} instead.
 */
export default function (key: Key, ...middleware: MiddlewareList): MiddlewareList {
  const whenFn: UseWhenCb<unknown> = (ctx) => ctx.hasKey(key);
  whenFn.sourceFuncName = "_whenForEach";
  return when(whenFn, [forEach(key, middleware)]);
}
