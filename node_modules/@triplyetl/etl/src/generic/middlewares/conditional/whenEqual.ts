import { deepEqual } from "assert";
import { castArray, isObject } from "lodash-es";
import { Key, MiddlewareList } from "../../index.js";
import { UseWhenCb } from "../../Etl.js";
import when from "./when.js";

/**
 * Run middlewares under the condition that the given key exists and
 * has the specified value or one of the specified values.
 *
 * @remarks
 * If the given key does not exist, the middlewares are not run.
 * If the given key exists but contains an empty value, the middlewares are
 * not run.  An empty value is `null`, `undefined`, the empty string (`''`),
 * the empty array (`[]`), or the empty object (`{}`).
 *
 * @param key - The key whose value is going to be compared against one or
 * more values.
 *
 * @param value - The value or array of values that are used to compare the
 * value of `key` against.  If multiple values are specified, the middlewares
 * are run if at least one of the specified value matches the value stored in
 * `key`.
 *
 * @param middleware - A middleware or an array of middlewares.
 *
 * @example
 * In the following snippet, only French labels are asserted.  Labels in
 * other languages are skipped.
 *
 * ```ts
 * fromJson([
 *   { language: 'DE', value: 'London' },
 *   { language: 'EN', value: 'London' },
 *   { language: 'FR', value: 'Londres' },
 *   { language: 'NL', value: 'Londen' },
 * ]),
 * whenEqual('language', 'FR', [
 *   triple(iri(prefix.city, str('london')), rdfs.label, 'value'),
 * ]),
 * ```
 *
 * This results in the following linked data assertion:
 *
 * ```ts
 * city:london rdfs:label 'Londres'.
 * ```
 *
 * @example
 * The following snippet extends the previous example by asserting French and
 * Dutch labels.  Labels in other languages are skipped.
 *
 * ```ts
 * fromJson([
 *   { language: 'DE', value: 'London' },
 *   { language: 'EN', value: 'London' },
 *   { language: 'FR', value: 'Londres' },
 *   { language: 'NL', value: 'Londen' },
 * ]),
 * whenEqual('language', ['FR', 'NL'], [
 *   triple(iri(prefix.city, str('london')), rdfs.label, 'value'),
 * ]),
 * ```
 *
 * This results in the following linked data assertions:
 *
 * ```ts
 * city:london rdfs:label 'Londres', 'Londen'.
 * ```
 *
 * @see Use {@link whenNotEqual} to run middlewares under the condition that
 * the given key exists and *does not have* the specified value or *does not
 * have* one of the specified values.
 */
export default function <T, R = unknown>(
  key: string,
  value: T | T[],
  ...middleware: MiddlewareList
): MiddlewareList<R> {
  return whenEqualOrNotEqual(key, value, false, middleware);
}

export function whenEqualOrNotEqual<T, R = unknown>(
  key: Key,
  value: T | T[],
  negate: boolean,
  ...middleware: MiddlewareList
): MiddlewareList<R> {
  const whenFn: UseWhenCb<R> = (context) => {
    if (!context.hasKey(key) || context.isEmpty(key)) return false;
    if (isObject(context.getAny(key) as T)) {
      try {
        deepEqual(context.getAny(key) as T, value);
        return !negate;
      } catch (_) {
        return negate;
      }
    }
    const isEqual = castArray(value).includes(context.getAny(key) as T);
    return negate ? !isEqual : isEqual;
  };
  whenFn.sourceFuncName = negate ? "_whenNotEqual" : "_whenEqual";
  return when(whenFn, middleware);
}
