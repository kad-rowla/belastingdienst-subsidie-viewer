import getCurrentLine from "get-current-line";
import { isArray } from "lodash-es";
import { Etl, Context, Middleware, MiddlewareList, Key } from "../../index.js";
import { addMwCallSiteToError } from "../../../utils/index.js";
import { getErr } from "../../../utils/Error.js";
import ifElse, { Else, IfThen } from "./ifElse.js";

const isCaseWhen = (arg: CaseWhen | Middleware | MiddlewareList): arg is CaseWhen =>
  isArray(arg) &&
  arg.length === 2 &&
  (typeof arg[0] === "string" ||
    (typeof arg[0] === "function" && typeof arg[0](new Context(new Etl()), () => Promise.resolve()) === "boolean")) &&
  (typeof arg[1] === "function" || isArray(arg[1]));

const isElse = (arg: CaseWhen | Middleware | MiddlewareList): arg is Middleware | MiddlewareList =>
  !isCaseWhen(arg) && (typeof arg === "function" || isArray(arg[0]));

// An tuple where tuple[0] is the case check, tuple[1] is the middleware(s) to be executed
type CaseWhen = [string | ((context: Context) => boolean), Middleware | MiddlewareList];

type ArrayofAtLeatsOne<T> = [T, ...T[]];
/**
 * using a double underscore here as we are wrapping this function here:
 * @see _switch
 * by our own convention, single underscores are reserved for function names in
 * @see addMwCallSiteToError
 */
export function __switch(
  key: Key,
  ...cases: ArrayofAtLeatsOne<CaseWhen | Middleware | MiddlewareList>
): MiddlewareList<unknown> {
  const IfThens: IfThen[] = [];
  const Elses: Else[] = [];
  const e = getErr(new Error());
  e.setCallSite(getCurrentLine({ frames: 3 }));
  cases.forEach((IfThenElse) => {
    if (isCaseWhen(IfThenElse)) {
      IfThens.push({
        if: (ctx: Context) => ctx.getAny(key) === IfThenElse[0],
        then: IfThenElse[1],
      });
    } else if (isElse(IfThenElse)) {
      if (Elses.length === 1) {
        e.setMessage("Only one default value allowed in a switch statement.");
        throw e;
      }
      Elses.push({ else: IfThenElse });
    }
  });
  if (IfThens.length === 0) {
    if (Elses.length > 0) {
      e.setMessage("`switch` middleware reported: no Cases provided, only a Default.");
      throw e;
    } else {
      e.setMessage("`switch` middleware reported: no Cases provided.");
      throw e;
    }
  }
  const IfThen = IfThens.shift() ?? {
    if: "",
    then: async () => {
      e.setMessage("This should not happen, contact Triply support.");
      throw e;
    },
  };
  return ifElse(IfThen, ...IfThens, ...Elses);
}

/**
 * Switch between different cases, based on the value of a specified key.
 *
 * @param key The key whose value is compared against the specified values.
 * @param cases One or more cases.  Each case is represented by a pair.
 *        The first element of the pair is the value that is checked for
 *        equivalence with the value in `key`.  The second element is either
 *        one middleware or a list of middlewares.
 *        Whenever the value in `key` is equal to the value in one of the
 *        cases, the corresponding middleware(s) are run.
 *
 * Notice that we must write `conditional.switch()` because `switch` is a
 * reserved keyword.
 *
 * @throws An error is emitted if the value for `key` does not match any of the
 *         cases.
 *
 * @example
 * When an ETL uses multiple data sources, we can use a `switch()` to run a
 * dedicated sub-ETL for each data source.
 *
 * Suppose we have two tabular data sources: `file.episodes` and `file.people`.
 * We can use the following `switch()` statement to run different sub-ETLs:
 *
 * ```ts
 * conditional.switch(key.fileName,
 *   [file.episodes, etl_episodes],
 *   [file.people, etl_people],
 * ),
 * ```
 *
 * @example
 * When ETLs transform different kinds of entities, it can be useful
 * run a sub-ETL based on the type of entity.
 *
 * For example, if the current Etl Record represents a person we want to
 * assert their age.  But if the current Etl Record represents a location we
 * want to assert its latitude and longitude,
 *
 * This is a great use case for `switch()`:
 *
 * ```ts
 * const etl_location = [
 *   triple('iri', sdo.latitude, literal('lat', xsd.double)),
 *   triple('iri', sdo.longitude, literal('long', xsd.double)),
 * ]
 *
 * const etl_person = [
 *   triple('iri', sdo.age, literal('age', xsd.nonNegativeInteger)),
 * ]
 *
 * etl.run(
 *   conditional.switch('type',
 *     ['location', etl_location],
 *     ['person', etl_person],
 *   ),
 * )
 */
export default function _switch(
  key: string,
  ...cases: ArrayofAtLeatsOne<CaseWhen | Middleware | MiddlewareList>
): MiddlewareList {
  return [
    addMwCallSiteToError(
      (_ctx, next) => {
        return next();
      },
      {
        sourceFuncName: "_switch",
        callSite: getCurrentLine({ frames: 2 }),
      },
    ),
    __switch(key, ...cases),
  ];
}
