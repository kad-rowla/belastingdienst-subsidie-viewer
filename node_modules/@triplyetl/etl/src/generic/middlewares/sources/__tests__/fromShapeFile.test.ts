import chai from "chai";
import chaiAsPromised from "chai-as-promised";

chai.use(chaiAsPromised);
const expect = chai.expect;
const assert = chai.assert;

import Etl from "../../../Etl.js";
import Source from "../../../locations/sources/index.js";

import fromShapeFile from "../fromShapeFile.js";
import trimRecordFromSource from "../util/trimRecordFromSource.js";

describe("Read shp documents", function () {
  it("Read a single shp document", async function () {
    const app = new Etl({ defaultGraph: "https://default.com/" });
    app.use(fromShapeFile(Source.file("./src/__tests__/resources/shapeFiles/places.shp"), { skipEnrich: true }));
    let count = 0;
    app.use(async (ctx) => {
      if (count === 0) {
        // test first shape
        expect(ctx.record).to.deep.equal({
          type: "Feature",
          properties: { osm_id: 150932333, name: "Kino", type: "hamlet", population: null },
          geometry: { type: "Point", coordinates: [-111.0620433, 32.3347964] },
        });
      }
      count++;
    });
    await app.run();
    expect(count).to.equal(69);
  });
  it("Read a multiple shp documents", async function () {
    const app = new Etl({ defaultGraph: "https://default.com/" });
    app.use(
      fromShapeFile(
        [
          Source.file("./src/__tests__/resources/shapeFiles/places.shp"),
          Source.file("./src/__tests__/resources/shapeFiles/railways.shp"),
        ],
        { skipEnrich: true },
      ),
    );
    await app.run();
  });
  it("Report problematic document", async function () {
    const app = new Etl({ defaultGraph: "https://default.com/" });
    app.use(
      fromShapeFile(Source.file("./src/__tests__/resources/shapeFiles/places-with-error.shp"), {
        skipEnrich: true,
      }),
    );
    return expect(app.run()).to.eventually.be.rejectedWith(/places-with-error\.shp/);
  });

  const properties = {
    "no-space": "space in",
    " before": "before",
    after: "after",
    " both": "both",
  };

  it("should trim keys and values by default", () => {
    const app = new Etl();
    app.use(fromShapeFile(Source.file("./src/__tests__/resources/shapeFiles/noot.shp")), async (ctx, next) => {
      assert.doesNotThrow(() => ctx.getAny("properties"));
      assert.deepEqual(ctx.getAny("properties"), trimRecordFromSource({ ...properties }));
      return next();
    });
    return app.run();
  });

  it("should not trim keys and values when requested", () => {
    const app = new Etl();
    app.use(
      fromShapeFile(Source.file("./src/__tests__/resources/shapeFiles/noot.shp"), { skipTrim: true }),
      async (ctx, next) => {
        assert.doesNotThrow(() => ctx.getAny("properties"));
        assert.deepEqual(ctx.getAny("properties"), properties);
        return next();
      },
    );
    return app.run();
  });
});
