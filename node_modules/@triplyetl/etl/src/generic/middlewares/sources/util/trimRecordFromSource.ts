import { isStatic } from "../../../../ratt/middlewares/assertions/term/str.js";

export default function recursivelyTrimObject(obj: any): any {
  if (obj === null || obj === undefined) return obj;
  if (typeof obj !== "object" || isStatic(obj)) {
    if (typeof obj === "string" || isStatic(obj)) {
      return obj.toString().trim();
    }
    return obj;
  }

  if (Array.isArray(obj)) {
    return obj.map((item) => recursivelyTrimObject(item));
  }

  for (const key in obj) {
    if (obj && obj.hasOwnProperty(key)) {
      const trimmedKey = key.trim();
      const trimmedValue = recursivelyTrimObject(obj[key]);
      obj[trimmedKey] = trimmedValue;
      if (trimmedKey !== key) delete obj[key];
    }
  }
  return obj;
}
