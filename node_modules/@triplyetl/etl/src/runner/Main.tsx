import React from "react";
import { useMessageCounts, useEtl } from "./hooks.js";
import ProgressBar from "./components/ProgressBar.js";
import ErrorReport from "./components/ErrorReport.js";
import { Box } from "ink";
import Status from "./components/Status.js";
import PrePostHookInfo from "./components/PrePostHookInfo.js";
import Report from "./components/Report.js";
import { EtlError } from "../utils/Error.js";
import { InitEtl } from "../generic/Etl.js";
export interface Props {
  getEtl?: InitEtl;
  initError: Error | undefined;
}

const Main: React.FC<Props> = ({ getEtl, initError }) => {
  const { app, error, finalReport, status, untouchedMiddlewares } = useEtl(getEtl);
  const isTraceDebug = error instanceof EtlError && !!error.trace && error.trace.isTraceDebug;
  const messageCounts = useMessageCounts(app, !isTraceDebug && !!error);
  if (initError) {
    throw initError;
  }
  return (
    <Box margin={1} flexDirection="column">
      {error && <ErrorReport untouchedMiddlewares={untouchedMiddlewares} error={error} />}
      <PrePostHookInfo type="pre" executing={status === "beforeHook"} />
      {app && <ProgressBar finished={!!finalReport} etl={app} />}
      <PrePostHookInfo type="post" executing={status === "afterHook"} />
      {app && status !== "done" && !error && <Status messageCounts={messageCounts} etl={app} />}
      {app && status === "done" && finalReport && (
        <Report messageCounts={messageCounts} untouchedMiddlewares={untouchedMiddlewares || []} report={finalReport} />
      )}
    </Box>
  );
};
export default Main;
