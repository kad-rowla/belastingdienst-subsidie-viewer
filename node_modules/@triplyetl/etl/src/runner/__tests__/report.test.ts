import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { Etl, Source, fromJson } from "../../generic/index.js";
import { concat, iri, pairs } from "../../ratt/index.js";
import { a, sdo } from "@triplyetl/vocabularies";
import { validate } from "../../shacl/index.js";

const expect = chai.expect;
chai.use(chaiAsPromised);

const shape = `
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sdo: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ex: <http://ex.com/>. 
ex:PersonShape
    a sh:NodeShape ;
    sh:targetClass sdo:Person ;
    sh:closed true;
    sh:ignoredProperties (rdf:type);
    sh:property [
        sh:path sdo:givenName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ("Jane" "John")
    ], [
        sh:path sdo:familyName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:severity sh:Warning  ;
        sh:value "Doe"
    ], [
        sh:path sdo:name ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:severity sh:Info  ;
        sh:in ("Jane Doe" "John Doe")
    ]
.
`;
const data = [{ id: 1, firstName: "John", familyName: "Doe", $recordId: 1 }];

describe("Terminal Reports", () => {
  it("Should run and update the correct message count", async () => {
    const app = new Etl();
    Etl.silent = true;
    app.use(
      fromJson(data),
      // expecting the following number of messages for  Etl: #Error  3 | #Warning  2 | #Info  1
      async (ctx, next) => {
        ctx.app.info("Just one message send to info");
        return next();
      },
      async (ctx, next) => {
        ctx.app.warn("First message send to warn");
        ctx.app.warn("Second message send to warn");
        return next();
      },
      async (ctx, next) => {
        ctx.app.error("First message send to error");
        ctx.app.error("Second message send to error");
        ctx.app.error("Third message send to error");
        return next();
      },

      concat({ content: ["firstName", "familyName"], key: "name", separator: " " }),
      pairs(iri(app.standardPrefixes.id, "$recordId"), [a, sdo.Person]),

      validate(Source.string(shape), { terminateOn: "Never" }),
      async (ctx, next) => {
        const mc = ctx.app["_messageCounts"];
        const correctMc = {
          EtlInfo: 1,
          EtlWarning: 2,
          EtlError: 3 + 1, //the+1 is for the SHACL violation
          ShaclViolation: 1,
          ShaclWarning: 1,
          ShaclInfo: 1,
        };
        expect(mc).to.deep.equal(correctMc);
        return next();
      }
    );
    await app.run();
    Etl.silent = false;
  });
});
