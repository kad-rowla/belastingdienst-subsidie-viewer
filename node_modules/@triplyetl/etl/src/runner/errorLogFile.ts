import { isEmpty, mapValues } from "lodash-es";
import { Literal, NamedNode } from "@triplydb/data-factory/Terms.js";
import { termToString } from "rdf-string";
import StackTracey from "stacktracey";
import { table } from "table";
import { Location } from "get-current-line";

import { EtlError } from "../utils/Error.js";
import { getExcerpt } from "./components/Stacktrace.js";
import fs from "fs-extra";
import { getExcerptsByFile } from "./components/UntouchedMiddlewares.js";
import { safeStringify } from "../utils/index.js";
import { TermGetter } from "../ratt/middlewares/assertions/term/getter.js";

function termGetterToString(value?: TermGetter<NamedNode | Literal | string>): string {
  if (value === undefined) return "unset";
  if (typeof value === "string") return value;
  if ("termType" in value) {
    if (value.termType === "NamedNode") return `<${termToString(value)}>`;
    return termToString(value);
  }
  if (typeof value === "function") {
    return "getter()";
  }
  return value;
}

function indentMultipleLines(text?: string) {
  if (!text) return "";
  return text
    .split("\n")
    .map((line) => "   " + line)
    .join("\n");
}

export default function writeToFile(
  error: EtlError,
  info: { untouchedMiddlewares?: Location[]; cmd: string; recordString?: string; etlScriptFile: string; file: string },
) {
  const addQuadInfo = "addQuad" in error ? error.addQuad : undefined;
  const shaclQuads = "quads" in error ? error.quads : undefined;
  const recordId = "recordId" in error ? error.recordId : undefined;
  const lines: string[] = [];
  lines.push("File:", `   ${info.etlScriptFile}`);
  lines.push("Message:", `   ${error.message}`);
  lines.push("command:", `   ${info.cmd}`);
  if (recordId !== undefined) lines.push("Record ID:", `   ${recordId}`);
  if (addQuadInfo) {
    lines.push("", "");
    lines.push(`This error occured when trying to add the following quad:`);
    lines.push(`  subject: ${termGetterToString(addQuadInfo[0])}`);
    lines.push(`  predicate: ${termGetterToString(addQuadInfo[1])}`);
    lines.push(`  object: ${termGetterToString(addQuadInfo[2])}`);
    lines.push(`  graph: ${termGetterToString(addQuadInfo[3])}`);
  }

  if (shaclQuads) {
    lines.push("", "");
    lines.push(`This shacl error occured when validating the following quads:`);
    lines.push(
      table([
        ["subject", "predicate", "object", "graph"],
        ...shaclQuads.map((q) => {
          return [termToString(q.subject), termToString(q.predicate), termToString(q.object), termToString(q.graph)];
        }),
      ]),
    );
  }

  const triplyDbJsInfo = error.getTriplyDbJsErrorInfo();
  if (triplyDbJsInfo) {
    lines.push("", "");
    lines.push("TriplyDB-JS context:");
    if (triplyDbJsInfo.statusCode) lines.push(`  Status code: ${triplyDbJsInfo.statusCode}`);
    if (!isEmpty(triplyDbJsInfo.context)) {
      lines.push(indentMultipleLines(safeStringify(triplyDbJsInfo.context)));
    }
  }

  if (error.callSite) {
    lines.push("", "");
    lines.push(`At middleware: ${error.callSite.file}:${error.callSite.line}:${error.callSite.char}`);
    const excerpt = getExcerpt(error.callSite);
    for (const line of excerpt.excerpt || []) {
      if (line.line === error.callSite.line) {
        lines.push(`>>[${line.line}] ${line.value}`);
      } else {
        lines.push(`  [${line.line}] ${line.value}`);
      }
    }
  }
  lines.push("", "");
  lines.push("Stacktrace:", indentMultipleLines(new StackTracey(error.getErrForStacktrace()).withSources().asTable()));

  if (info.untouchedMiddlewares?.length) {
    lines.push("", "");
    lines.push(`Warning, the following middlewares were not executed:`);
    const byFile = mapValues(getExcerptsByFile(info.untouchedMiddlewares), (v) => v?.excerpt);
    for (const f in byFile) {
      const excerpts = byFile[f];
      if (!excerpts) continue;
      lines.push("");
      lines.push(`> ${f}:`);
      for (const line of excerpts) {
        lines.push(`  [${line.line}] ${line.value}`);
      }
    }
  }
  if (info.recordString) {
    lines.push("", "");
    lines.push("record:", indentMultipleLines(info.recordString));
  }
  lines.push(""); //finish with empty line, to force a linebreak
  fs.writeFileSync(info.file, lines.join("\n"));
}
