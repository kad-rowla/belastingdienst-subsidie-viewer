import * as React from "react";
import { Text, Box, Static } from "ink";
import { Change } from "diff";
import { SerializedTraceInfo, TraceInfo } from "../../utils/Error.js";
import { useCliContext } from "../CliContext.js";
import fs from "fs-extra";
import { omit, toNumber } from "lodash-es";
import { getLogFilename, removeCliArgument } from "../../utils/index.js";

// trim line breaks, as the <Text> components already introduces them
function trimLinebreaks(value: string) {
  return value.replace(/^\n/, "").replace(/\n$/, "");
}
const SingleTrace: React.FC<{ trace: Change[] }> = ({ trace }) => {
  if (!trace || (trace.length === 1 && !trace[0].value.trim().length)) {
    return (
      <Box flexDirection="column" marginBottom={1}>
        <Text italic>empty</Text>
      </Box>
    );
  }
  return (
    <Box flexDirection="column" marginBottom={1}>
      {trace.map((item, i) => {
        let color = "white";
        if (item.added) color = "green";
        if (item.removed) color = "red";
        return (
          <Text key={i} color={color}>
            {trimLinebreaks(item.value)}
          </Text>
        );
      })}
    </Box>
  );
};
const SingleTraceWithLabel: React.FC<{ trace: Change[]; label: string }> = ({ trace, label }) => {
  const somethingChanged = trace.some((t) => t.added || t.removed);
  return (
    <>
      <Box flexDirection="column" paddingX={1} marginBottom={1} borderStyle="single" width={"100%"}>
        <Box justifyContent="center">
          <Text bold color="blueBright">
            {label} {!somethingChanged && "(unchanged)"}
          </Text>
        </Box>
        <SingleTrace trace={trace} />
      </Box>
    </>
  );
};

const TraceInfoFc: React.FC<TraceInfo> = (props) => {
  const { cmd, useCmdInCliFeedback, logDir, logId, etlFile } = useCliContext();
  const showTraceError = cmd.includes("--trace-error") || cmd.includes("--verbose");
  let cmdClone = [...cmd]; //avoid mutating the property

  cmdClone = removeCliArgument(cmdClone, { removeArg: "--from-record-id", isPair: true });
  cmdClone = removeCliArgument(cmdClone, { removeArg: "--trace", isPair: true });
  cmdClone = removeCliArgument(cmdClone, {
    removeArg: "--head",
    isPair: (nextArg) => {
      const number = toNumber(nextArg);
      return isFinite(number) && number > 0;
    },
  });

  const traceFilename = getLogFilename({
    filename: props.isTraceDebug ? "etl.traceDebug" : "etl.traceError.json",
    logDir,
    logId: logId,
    etlFile,
  });
  const serializedTraceInfo: SerializedTraceInfo = omit(props, ["recordDiff", "quadsDiff"]);
  fs.writeFileSync(traceFilename, JSON.stringify(serializedTraceInfo, null, 2));

  const debugCmd = [...cmdClone, props.isTraceDebug ? "--traceDebug" : "--traceError", traceFilename].join(" ");
  const items = [
    { label: "Record trace information", trace: props.recordDiff },
    { label: "Quads trace information", trace: props.quadsDiff },
  ];
  // Use Static component. That means the terminal history (including console.log statements) wont
  // be cleared when we're rendering a trace higher than the terminal window
  // Static component when showing trace after an error is rendered twice, that is why we use a Box when trace is isTraceError === false
  const debugFlag = props.isTraceDebug ? " --trace " : " --trace-error ";
  return (
    <>
      {props.isTraceDebug && (
        <Static items={items}>
          {(opts) => {
            return <SingleTraceWithLabel key={opts.label} {...opts} />;
          }}
        </Static>
      )}
      {showTraceError && props.isTraceError && (
        <Box display={"flex"} flexDirection={"column"}>
          {items &&
            items.map((item) => {
              return <SingleTraceWithLabel key={item.label} {...item} />;
            })}
        </Box>
      )}
      <>
        <Box>
          <Text>
            To rerun the traced middlewares for this record{" "}
            {useCmdInCliFeedback ? "use the following command:" : "add the following options to your command:"}
          </Text>
        </Box>
        <Box>
          <Text>{useCmdInCliFeedback ? "> " + debugCmd : debugFlag + traceFilename}</Text>
        </Box>
      </>
    </>
  );
};

export default TraceInfoFc;
