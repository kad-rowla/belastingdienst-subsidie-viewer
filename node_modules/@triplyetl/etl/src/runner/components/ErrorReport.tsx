import * as React from "react";
import { useCliContext } from "../CliContext.js";
import { Text, Box, useApp } from "ink";
import Stacktrace from "./Stacktrace.js";
import { termToString } from "rdf-string";
import { Literal, NamedNode } from "@triplydb/data-factory/Terms.js";
import { getErr, EtlError } from "../../utils/Error.js";
import { Table as InkTable } from "@alcalzone/ink-table";

import { Location } from "get-current-line";

import writeErrorLogFile from "../errorLogFile.js";
import { getLogFilename, safeStringify } from "../../utils/index.js";
import TraceInfo from "./TraceInfo.js";
import { TermGetter } from "../../ratt/middlewares/assertions/term/getter.js";
interface Props {
  untouchedMiddlewares?: Location[];
  readonly error: Error | EtlError;
}

const Term: React.FC<{ value?: TermGetter<NamedNode | Literal | string> }> = ({ value }) => {
  if (value === undefined) {
    return <Text color="grey">unset</Text>;
  }
  if (typeof value === "string") {
    return <Text color="green">${value}</Text>;
  }
  if ("termType" in value) {
    if (value.termType === "NamedNode") {
      return (
        <Text color="blue">
          {"<"}
          {termToString(value)}
          {">"}
        </Text>
      );
    } else {
      return <Text color="blue">{termToString(value)}</Text>;
    }
  }
  if (typeof value === "function") {
    return <Text color="cyan">getter()</Text>;
  }
  return <Text>term</Text>;
};

const AddQuadsInfo: React.FC<{ addQuadInfo: Exclude<EtlError["addQuad"], undefined> }> = ({ addQuadInfo }) => {
  return (
    <Box marginBottom={1} flexDirection="column">
      <Text>This error occured when trying to add the following quad:</Text>
      <Box marginLeft={2} flexDirection="row">
        <Box marginRight={1} flexDirection="column">
          <Text dimColor>Subject:</Text>
          <Text dimColor>Predicate:</Text>
          <Text dimColor>Object:</Text>
          <Text dimColor>Graph:</Text>
        </Box>
        <Box flexDirection="column">
          <Term value={addQuadInfo[0]} />
          <Term value={addQuadInfo[1]} />
          <Term value={addQuadInfo[2]} />
          <Term value={addQuadInfo[3]} />
        </Box>
      </Box>
    </Box>
  );
};
const ErrorReport: React.FC<Props> = (props) => {
  const error = getErr(props.error);
  const { verbosity, cmd, useCmdInCliFeedback, logDir, logId, etlFile } = useCliContext();
  const { exit } = useApp();

  React.useEffect(() => {
    // we need to wrap the exit in a setTimeout to avoid the Static component rendering twice
    // see https://github.com/vadimdemedes/ink/issues/397
    setTimeout(() => exit(new Error("Exit")), 0);
  }, [exit]);

  if (error.trace && error.trace.isTraceDebug) return <TraceInfo {...error.trace} />;

  let recordId: number | undefined = (error as any).recordId;
  const cmdClone = [...cmd]; //avoid mutating the property

  const fromRecordIdArgIndex = cmdClone.indexOf("--from-record-id");
  if (fromRecordIdArgIndex >= 0) {
    cmdClone.splice(fromRecordIdArgIndex, 2); //remove the --from-record-id and the following argument
  }
  if (cmdClone.indexOf("--verbose") < 0) {
    cmdClone.push("--verbose");
  }

  if (recordId) {
    // Sometimes we get errors before the first record
    // See: https://issues.triply.cc/issues/6648
    cmdClone.push("--from-record-id", recordId + "");
  }

  let debugCmd = cmdClone.join(" ");

  let record = safeStringify((error as any).record);
  const addQuadInfo = "addQuad" in error ? error.addQuad : undefined;
  const shaclQuads = "quads" in error ? error.quads : undefined;
  const writeShaclQuadsToScreen = shaclQuads && shaclQuads.length < 50;
  let renderRecord = record;
  let renderingRecordSlice = false;
  if (record) {
    const maxRenderedLines = 20;
    const lines = record.split("\n");
    if (lines.length > maxRenderedLines) {
      renderRecord = lines.splice(0, maxRenderedLines).join("\n");
      renderingRecordSlice = true;
    }
  }
  const logFile = getLogFilename({ etlFile, logDir, logId, filename: "etl.err" });
  writeErrorLogFile(error, {
    file: logFile,
    etlScriptFile: etlFile,
    cmd: cmd.join(" "),
    recordString: record,
    untouchedMiddlewares: props.untouchedMiddlewares,
  });
  const hasRecordInfo = !!recordId;
  const triplyDbJsInfo = verbosity && error.getTriplyDbJsErrorInfo();
  const statusCode = error.getTriplyDbJsErrorInfo()?.statusCode;
  return (
    <>
      <Box marginBottom={1}>
        <Text backgroundColor="red" color="white">
          {" ERROR"}
          {statusCode && ` (${statusCode})`}
          {hasRecordInfo && ` (Record #${recordId})`}{" "}
        </Text>
        <Text> {error.message}</Text>
      </Box>
      {addQuadInfo && <AddQuadsInfo addQuadInfo={addQuadInfo} />}
      {writeShaclQuadsToScreen && shaclQuads && (
        <Box marginBottom={1} flexDirection="column">
          <Text>Shacl validation failed on the following set of triples:</Text>
          <InkTable
            data={shaclQuads.map((q) => {
              return {
                subject: termToString(q.subject),
                predicate: termToString(q.predicate),
                object: termToString(q.object),
              };
            })}
          />
        </Box>
      )}
      {useCmdInCliFeedback && (
        <>
          <Text dimColor>To reproduce this error{hasRecordInfo && " for this record alone"}, run:</Text>
          <Box marginBottom={1} marginLeft={1}>
            <Text italic>{debugCmd}</Text>
          </Box>
        </>
      )}

      {!!verbosity && (
        <Box flexDirection="column" paddingX={1} marginBottom={1} borderStyle="single">
          <Box justifyContent="center">
            <Text bold color="blueBright">
              Last record
            </Text>
          </Box>
          <Text color="blueBright">{renderRecord}</Text>

          {renderingRecordSlice && <Text>... (see {logFile} for the complete record)</Text>}
        </Box>
      )}

      {!!triplyDbJsInfo && (
        <Box flexDirection="column" paddingX={1} borderStyle="single">
          <Box justifyContent="center">
            <Text bold color="blueBright">
              TriplyDB-JS Context
            </Text>
          </Box>
          <Text color="blueBright">
            {safeStringify({ statusCode: triplyDbJsInfo.statusCode, ...triplyDbJsInfo.context })}
          </Text>
        </Box>
      )}

      <Stacktrace error={error} verbosity={verbosity} />

      {!!error.trace && error.trace.isTraceError && <TraceInfo {...error.trace} />}

      {!verbosity && (
        <Box marginTop={1}>
          <Text dimColor>For more info see:</Text>
          <Box marginBottom={1} marginLeft={1}>
            <Text italic>{logFile}</Text>
          </Box>
        </Box>
      )}
    </>
  );
};

export default ErrorReport;
