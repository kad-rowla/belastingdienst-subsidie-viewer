import fs from "fs";
import React from "react";
import { Text, Box } from "ink";
import { Location } from "get-current-line";
import codeExcerpt, { CodeExcerpt } from "code-excerpt";
import { flatten, groupBy, mapValues, omitBy, sortBy, uniqWith } from "lodash-es";

export interface Line extends CodeExcerpt {
  precedeWithDots: boolean;
}
export type ExcerptsByFile = {
  [file: string]: {
    excerpt?: Line[];
    // Number of digits in the line number
    lineWidth: number;
  };
};
export function getExcerptsByFile(locations: Location[]): ExcerptsByFile {
  // Make locations unique per line to avoid react duplicate-key errors
  locations = uniqWith(locations, (lhs, rhs) => {
    return lhs.file === rhs.file && lhs.line === rhs.line;
  });
  const groupedByFile = groupBy(locations, (location) => location.file);

  const mappedValues = mapValues(groupedByFile, (locations, file) => {
    const fileUrl = new URL(file);
    if (fs.existsSync(fileUrl)) {
      const sourceCode = fs.readFileSync(fileUrl, "utf8");
      const origExcerpt = sortBy(
        flatten(locations.map((l) => codeExcerpt(sourceCode, l.line, { around: 0 }))).filter(
          (v) => !!v,
        ) as CodeExcerpt[],
        (v) => v.line,
      );

      let lineWidth = 0;
      let prevLineNumber: undefined | number;
      const excerpt: Line[] = origExcerpt.map((e) => {
        lineWidth = Math.max(lineWidth, String(e.line).length);
        const result = {
          ...e,
          value: e.value.trim(),
          precedeWithDots: prevLineNumber !== undefined && e.line - 1 !== prevLineNumber,
        };
        prevLineNumber = e.line;
        return result;
      });
      return { excerpt: excerpt, lineWidth };
    }
  });

  return omitBy(mappedValues, (v) => !v) as ExcerptsByFile;
}

export interface Props {
  callSites: Location[];
}

const UntouchedMiddlewares: React.FC<Props> = ({ callSites }) => {
  if (!callSites.length) return <></>;
  const excerptsByFile = getExcerptsByFile(callSites);
  return (
    <Box marginTop={1} flexDirection="column">
      {Object.entries(excerptsByFile).map(([file, excerpts]) => {
        if (!excerpts?.excerpt?.length) return <React.Fragment key={file}></React.Fragment>;
        return (
          <Box flexDirection="column" borderColor="white" borderStyle="single" paddingX={1} key={file}>
            <Box flexDirection="column" alignItems="center">
              <Text color="yellow">Untouched Middlewares ({excerpts.excerpt.length})</Text>
              <Text dimColor>{file}</Text>
            </Box>
            {excerpts.excerpt.map(({ line, value, precedeWithDots }) => {
              return (
                <React.Fragment key={line}>
                  {precedeWithDots && (
                    <Box>
                      <Box width={excerpts.lineWidth + 1}>
                        <Text dimColor>{"".padStart(excerpts.lineWidth + 1, " ")}</Text>
                      </Box>

                      <Text key={line}>{" ..."}</Text>
                    </Box>
                  )}
                  <Box>
                    <Box width={excerpts.lineWidth + 1}>
                      <Text dimColor>{String(line).padStart(excerpts.lineWidth, " ")}:</Text>
                    </Box>

                    <Text key={line}>{" " + value}</Text>
                  </Box>
                </React.Fragment>
              );
            })}
          </Box>
        );
      })}
    </Box>
  );
};
export default UntouchedMiddlewares;
