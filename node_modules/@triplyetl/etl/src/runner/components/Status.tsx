import React from "react";
import { Box, Newline, Text } from "ink";
import { MessageCounts, useStats } from "../hooks.js";
import Etl, { MessageLevel } from "../../generic/Etl.js";
import { millify } from "millify";

export interface Props {
  etl: Etl;
  messageCounts: MessageCounts;
}
function levelToColor(level: MessageLevel) {
  if (level === "Error") return "red";
  if (level === "Violation") return "red";
  if (level === "Warning") return "yellow";
  return "blue";
}

const Status: React.FC<Props> = ({ etl, messageCounts }) => {
  const stats = useStats(etl);
  let shaclReport: MessageCounts = {};
  let etlReport: MessageCounts = {};
  for (const m of Object.values(messageCounts)) {
    if (m.type == "Etl") {
      etlReport[m.level] = m;
    }
    if (m.type == "Shacl") {
      shaclReport[m.level] = m;
    }
  }
  return (
    <Box marginX={1} marginTop={1} flexDirection="column">
      <Text>
        <Text>
          {Object.keys(etlReport).length > 0 ? <Text>ETL</Text> : null}
          <Newline />
          {etlReport &&
            Object.entries(etlReport).map(([label, message], i) => {
              return (
                <React.Fragment key={label}>
                  {i > 0 && <Text>{" | "}</Text>}
                  <Text dimColor={message.count === 0} color={levelToColor(message.level)}>
                    #{label}: {message.count.toLocaleString()}
                  </Text>
                </React.Fragment>
              );
            })}
        </Text>
        <Newline />
        <Newline />
        <Text>
          {Object.keys(shaclReport).length > 0 ? <Text>Validation</Text> : null}
          <Newline />
          {shaclReport &&
            Object.entries(shaclReport).map(([label, message], i) => {
              return (
                <React.Fragment key={label}>
                  {i > 0 && <Text>{" | "}</Text>}
                  <Text dimColor={message.count === 0} color={levelToColor(message.level)}>
                    #{label}: {message.count.toLocaleString()}
                  </Text>
                </React.Fragment>
              );
            })}
        </Text>
      </Text>
      {stats &&
        Object.entries(stats).map(([label, stat]) => {
          return (
            <React.Fragment key={label}>
              <Newline />
              <Text key={label}>
                {label}: {typeof stat == "number" ? millify(stat) : stat}
              </Text>
            </React.Fragment>
          );
        })}
    </Box>
  );
};
export default Status;
