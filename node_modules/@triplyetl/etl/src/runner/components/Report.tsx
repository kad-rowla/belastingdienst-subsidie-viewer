import React from "react";
import { Box, Text } from "ink";
import { Location } from "get-current-line";
import { MessageCounts } from "../hooks.js";
import { MessageLevel, Stats } from "../../generic/Etl.js";
import { mapValues } from "lodash-es";
import { useCliContext } from "../CliContext.js";
import UntouchedMiddlewares from "./UntouchedMiddlewares.js";

export interface Props {
  report: Stats;
  messageCounts: MessageCounts;
  untouchedMiddlewares: Location[];
}

function levelToColor(level?: MessageLevel) {
  if (level === "Error") return "red";
  if (level === "Violation") return "red";
  if (level === "Warning") return "yellow";
  if (level === "Info") return "blue";
  return "white";
}

function usedShaclValidation(messageCounts: MessageCounts) {
  if (messageCounts["Violation"]?.count > 0) return true;
  if (messageCounts["Warning"]?.count > 0) return true;
  if (messageCounts["Info"]?.count > 0) return true;
  else false;
}

const Report: React.FC<Props> = ({ untouchedMiddlewares, messageCounts, report }) => {
  const { verbosity } = useCliContext();
  const keysEtl: { [key: string]: MessageLevel | undefined } = {
    ...mapValues(report, () => undefined),
  };
  const valuesEtl = [...Object.values(report)];

  let shaclReport: MessageCounts = {};
  let etlReport: MessageCounts = {};
  for (const m of Object.values(messageCounts)) {
    if (m.type == "Etl") {
      etlReport[m.level] = m;
    }
    if (m.type == "Shacl") {
      shaclReport[m.level] = m;
    }
  }
  let shaclValidationReport;
  if (usedShaclValidation(shaclReport)) {
    shaclValidationReport = (
      <>
        <Box flexDirection="row" marginLeft={1}>
          <Text>Validation:</Text>
          <Box flexDirection="row" marginX={8}>
            {Object.values(shaclReport).map((m, i, a) => {
              return (
                <React.Fragment key={m.level + i}>
                  <Box marginX={1}>
                    <Text color={levelToColor(m.level)}>#{m.level}</Text>
                  </Box>
                  <Box marginLeft={3} marginRight={1}>
                    <Text>{typeof m.count === "number" ? m.count.toLocaleString() : m.count}</Text>
                  </Box>
                  {i !== a.length - 1 ? <Text>|</Text> : null}
                </React.Fragment>
              );
            })}
          </Box>
        </Box>
      </>
    );
  } else {
    shaclValidationReport = <></>;
  }

  return (
    <>
      {!!verbosity && <UntouchedMiddlewares callSites={untouchedMiddlewares} />}
      {/* outer box */}
      <Box marginTop={1} borderStyle="single" borderColor="white" flexDirection="column">
        {/* ETL & SHACL report summary boxes */}
        <Box flexDirection="column">
          {/* SHACL Validation box */}
          {shaclValidationReport}

          {/* ETL Error Warning Info summary box */}
          <Box flexDirection="row" marginLeft={1}>
            <Text>Etl:</Text>
            <Box flexDirection="row" marginX={15}>
              {Object.values(etlReport).map((m, i, a) => {
                let num;
                m.level == "Error" && usedShaclValidation(shaclReport) ? (num = 7) : (num = 3);
                m.count.toString().length > 1 ? (num = num - (m.count.toString().length - 1)) : num;
                return (
                  <React.Fragment key={m.level + i}>
                    <Box marginX={1}>
                      <Text color={levelToColor(m.level)}>#{m.level}</Text>
                    </Box>
                    <Box marginLeft={num} marginRight={1}>
                      <Text>{typeof m.count === "number" ? m.count.toLocaleString() : m.count}</Text>
                    </Box>
                    {i !== a.length - 1 ? <Text>|</Text> : null}
                  </React.Fragment>
                );
              })}
            </Box>
          </Box>
        </Box>

        {/* ETL summary box */}
        <Box flexDirection="row" marginLeft={1}>
          <Box flexDirection="column">
            {Object.entries(keysEtl).map(([label, level]) => {
              return (
                <Text key={label} color={levelToColor(level)}>
                  {label}
                </Text>
              );
            })}
          </Box>
          <Box marginLeft={9} flexDirection="column">
            {valuesEtl.map((val, i) => {
              return <Text key={i}>{typeof val === "number" ? val.toLocaleString() : val}</Text>;
            })}
          </Box>
        </Box>
      </Box>
    </>
  );
};
export default Report;
