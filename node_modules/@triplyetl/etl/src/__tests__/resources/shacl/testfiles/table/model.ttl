
# External declarations.
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix sh:  <http://www.w3.org/ns/shacl#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix owl: <http://www.w3.org/2002/07/owl#>

prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

# Project-specific declarations.
prefix id:    <https://example.com/id/>
prefix def:   <https://example.com/model/def/>
prefix graph: <https://example.com/graph/>
prefix rule:  <https://example.com/model/rule/>
prefix shp:   <https://example.com/model/shp/>
prefix html: <https://example.com/model/html/>
prefix text: <https://example.com/text/>
prefix prefixes: <https://example.com/prefixes/>

# Declare namespaces so we can use them in our SPARQL queries using the `sh:prefixes` predicate:
def: sh:declare 
	[ sh:prefix "rdf" ; sh:namespace rdf: ],
	[ sh:prefix "xsd" ; sh:namespace xsd: ] ,
	[ sh:prefix "rdfs" ; sh:namespace rdfs: ] ,
	[ sh:prefix "id" ; sh:namespace id: ] ,
	[ sh:prefix "def" ; sh:namespace def: ] ,
	[sh:prefix "graph" ; sh:namespace graph: ] ,
	[ sh:prefix "rule" ; sh:namespace rule: ] ,
	[ sh:prefix "shp" ; sh:namespace shp: ] ,
	[ sh:prefix "html" ; sh:namespace html: ] ,
	[ sh:prefix "text" ; sh:namespace text: ] 
.

html:Element a rdfs:Class .
html:CDATA rdfs:subClassOf html:Element ; html:tagName '' .
html:TABLE rdfs:subClassOf html:Element ; html:tagName 'table' .
html:THEAD rdfs:subClassOf html:Element ; html:tagName 'thead' .
html:TBODY rdfs:subClassOf html:Element ; html:tagName 'tbody' .
html:TR rdfs:subClassOf    html:Element ; html:tagName 'tr' .
html:TH rdfs:subClassOf    html:Element ; html:tagName 'th' .
html:TD rdfs:subClassOf    html:Element ; html:tagName 'td' .
html:BODY rdfs:subClassOf  html:Element ; html:tagName 'body' .
html:HTML rdfs:subClassOf  html:Element ; html:tagName 'html' .

shp:Element a sh:NodeShape ;
  sh:target shp:Target ;
  sh:rule shp:GenerateHTML .

shp:Target a sh:SPARQLTarget ;
  sh:prefixes def: ;
  sh:select '''
SELECT ?this WHERE {
  $this a/rdfs:subClassOf* html:Element; html:childNodes/rdf:first/html:fragment ?childFragment .
  OPTIONAL {?this html:fragment ?fragment } .
  FILTER (!bound(?fragment))
}
''' .

shp:GenerateHTML a sh:SPARQLRule ;
  sh:prefixes def: ;
  sh:construct '''
CONSTRUCT {
	$this html:fragment ?childFragments
} 
WHERE {
	SELECT
		(STRDT(CONCAT('<', ?tagName, '>', GROUP_CONCAT(str(?childFragment)), '</', ?tagName, '>'), rdf:HTML) as ?childFragments)
	WHERE {
		$this a ?element; html:childNodes/rdf:rest*/rdf:first/html:fragment ?childFragment .
		?element html:tagName ?tagName .
		BIND(STRDT(CONCAT('<', ?tagName, '>', str(?childFragment), '</', ?tagName, '>'), rdf:HTML) AS ?fragment)
		FILTER(?element != html:Element)
		FILTER NOT EXISTS {
			$this html:fragment ?elementsOwnFragment .
		}
	} GROUP BY ?tagName
}
'''
 .