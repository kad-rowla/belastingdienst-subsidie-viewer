//external dependencies
import fs from "fs-extra";
import path from "path";
import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { expectNoBlankNodesMw } from "./util.js";
import { Destination, Etl, Iri, fromJson, toRdf } from "../generic/index.js";
import { iri, triple } from "../ratt/index.js";
import { getFactory } from "@triplydb/data-factory";
const dataFactory = getFactory();
chai.use(chaiAsPromised);
const expect = chai.expect;
import { fileURLToPath } from "url";
const currentDir = path.dirname(fileURLToPath(import.meta.url));
const testDestinationPath = path.resolve(currentDir, "out.nt");
const pref = Iri("https://example.org/");
const testDestination = Destination.file(testDestinationPath);

describe("Store quads", function () {
  it("With simple quad", async function () {
    this.timeout(8000); // writing to a file may take long in the CI
    const app = new Etl({ defaultGraph: "https://default/" });
    app.use(triple(pref.concat("a"), pref.concat("b"), pref.concat("c")));
    app.use(toRdf(testDestination));
    await app.run();

    expect(app["_runtimeStats"]["#Statements"]).to.equal(1);
  });
  it("With invalid IRIs directly", async function () {
    const app = new Etl({ defaultGraph: "https://default/" });
    app.use(async (ctx, next) => {
      ctx.store.addQuad(ctx.store.iri("494055"), ctx.store.iri("a:a"), ctx.store.iri("b:b"));
      return next();
    });
    await expect(app.run()).to.eventually.be.rejectedWith(/Unable to parse relative IRI without/i);
  });
  it("With invalid IRIs", async function () {
    const app = new Etl({ defaultGraph: "https://default/" });
    app.use(fromJson({ a: 1234 }));
    app.use(triple(iri("a"), pref.concat("a"), pref.concat("a")));
    await expect(app.run()).to.eventually.be.rejectedWith(/Invalid Iri/);
  });
  it("Write file", async function () {
    this.timeout(5000); // writing to a file may take long in the CI
    await fs.ensureDir("./tmp");
    const app = new Etl({ defaultGraph: "https://default.com/" });
    app.use(fromJson([{ a: "1" }, { a: "1" }, { a: "1" }]));
    app.use(triple(iri(pref, "a"), pref.concat("b"), pref.concat("c")));
    app.use(expectNoBlankNodesMw);
    app.use(toRdf(testDestination));
    await app.run();
    expect(fs.readFileSync(testDestinationPath, "utf8").split("\n")).to.have.lengthOf(4); //3 statements + linebreak
  });
  it("Using own mw to add things to store", async function () {
    this.timeout(5000);
    const app = new Etl({ defaultGraph: "https://default.com/" });
    app.use(async (ctx, next) => {
      ctx.store.addQuad(ctx.store.iri("a:a"), ctx.store.iri("b:b"), ctx.store.iri("c:c"));
      return next();
    });
    app.use(expectNoBlankNodesMw);
    app.use(toRdf(testDestination));
    await app.run();
    expect(app["_runtimeStats"]["#Statements"]).to.equal(1);
  });
  it("Using own mw to add blank nodes to store", async function () {
    this.timeout(5000);
    const app = new Etl({ defaultGraph: "https://default.com/" });
    app.use(async (ctx, next) => {
      ctx.store.addQuad(dataFactory.blankNode(), ctx.store.iri("b:b"), ctx.store.iri("c:c"));
      return next();
    });
    app.use(expectNoBlankNodesMw);
    app.use(toRdf(testDestination));
    await app.run();
    expect(app["_runtimeStats"]["#Statements"]).to.equal(1);
  });
});
