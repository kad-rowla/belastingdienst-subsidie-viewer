import Etl from "../generic/Etl.js";
import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { triple } from "../ratt/index.js";
import { a } from "@triplyetl/vocabularies";
import { Destination, Source, loadRdf, toRdf } from "../generic/index.js";
import dotenv from "dotenv";
import quadsToString from "../utils/quadsToString.js";

chai.use(chaiAsPromised);
const expect = chai.expect;
/**
 * This test is only run when NIGHTLY_TEST_TOKEN is present in the .env file
 * if the token is not present this test will not run.
 * This test uploads data to nightly and then checks if the correct data was uploaded
 */
dotenv.config();
const runTestLocally = process.env.NIGHTLY_TEST_TOKEN !== undefined ? describe : describe.skip;
const dataset = "test";

runTestLocally("copySource tests", async function () {
  before(async () => {
    process.env.TRIPLYDB_TOKEN = process.env.NIGHTLY_TEST_TOKEN;
  });

  it("Should allow multiple sources to be uploaded", async function () {
    // increase timeout for remote requests that take longer than 2 seconds
    this.timeout(20000);
    const correctResultStore = `@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix sdo: <https://schema.org/>.

<https://example.com/firstGraph> {
<http://ex.com/1> a sdo:Person;
    sdo:familyName "Doe";
    sdo:givenName "John".
<http://ex.com/2> a sdo:Person;
    sdo:familyName "Doe";
    sdo:givenName "Jane"
}
<https://example.com/secondGraph> {
<http://example.org/ns/a2> <http://example.org/ns/b2> <http://example.org/ns/c2>.
<http://example.org/ns/foo/a3> <http://example.org/ns/foo/b3> <http://example.org/ns/foo/c3>.
<http://example.org/ns/foo/bar#a4> <http://example.org/ns/foo/bar#b4> <http://example.org/ns/foo/bar#c4>.
<http://example.org/ns2#a5> <http://example.org/ns2#b5> <http://example.org/ns2#c5>.
<https://nightly.triplydb.com/philippe/test/a1> <https://nightly.triplydb.com/philippe/test/b1> <https://nightly.triplydb.com/philippe/test/c1>
}
<https://triplydb.com/graph/default> {
rdf:type a rdf:type
}
`;
    const etl = new Etl();
    etl.use(triple(a, a, a), toRdf(Destination.TriplyDb.rdf(dataset)));
    await etl.copySource(
      Source.file("src/__tests__/resources/rdfFiles/family-doe.ttl"),
      Destination.TriplyDb.rdf(dataset, { defaultGraph: "https://example.com/firstGraph" }),
    );
    const url = "https://www.w3.org/TeamSubmission/turtle/tests/test-30.ttl";
    await etl.copySource(
      Source.url(url),
      Destination.TriplyDb.rdf(dataset, { defaultGraph: "https://example.com/secondGraph" }),
    );
    await etl.run();
    const etl2 = new Etl();
    etl2.use(
      loadRdf(
        Source.TriplyDb.rdf(dataset, {
          // have to specify token in loadRdf to retrieve remote data - otherwise it never terminates
          triplyDb: { url: "https://api.nightly.triplydb.com", token: process.env.TRIPLYDB_TOKEN },
        }),
      ),
      async (ctx, next) => {
        const remoteStore = quadsToString(ctx.store.getQuads({}));
        expect(remoteStore.toString()).to.equal(correctResultStore.toString());
        return next();
      },
    );
    await etl2.run();
  });
  //at the end remove the token for remote access
  after(() => {
    delete process.env.TRIPLYDB_TOKEN;
  });
});
