import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { Middleware, Source } from "../generic/index.js";
import Etl from "../generic/Etl.js";
import {
  fromCsv,
  fromXlsx,
  fromXml,
  fromJson,
  fromTsv,
  fromShapeFile,
  fromOai,
} from "../generic/middlewares/sources/index.js";

chai.use(chaiAsPromised);
const assert = chai.assert;

// note: this used to be the test for the enrih() middleware,
// this is now integratedin the source middlewares by default,
// keeping the test anyway

const assertUtilityKeys =
  (throwOn: string[] = ["$selector", "$sheetName", "$tagName"]): Middleware =>
  (ctx, next) => {
    assert.doesNotThrow(() => ctx.getNumber("$recordId"));
    assert.doesNotThrow(() => ctx.getString("$fileName"));
    assert.doesNotThrow(() => ctx.getString("$environment"));
    assert.equal(ctx.getString("$fileName"), ctx.source?.name);
    assert.equal(ctx.getNumber("$recordId"), ctx.recordId);
    assert.equal(ctx.getString("$environment"), "Development");
    throwOn.forEach((keyName) => assert.throws(() => ctx.getString(keyName)));
    return next();
  };

describe("transform.record.enrich ", () => {
  it("should create new utility keys for CSV file", () => {
    const etl = new Etl();
    etl.use(fromCsv(Source.file("./src/__tests__/resources/csvFiles/addresses.csv")), assertUtilityKeys());
    return etl.run();
  });

  it("should create new utility keys for TSV file", () => {
    const etl = new Etl();
    etl.use(fromTsv(Source.file("./src/__tests__/resources/tsvFiles/addresses.tsv")), assertUtilityKeys());
    return etl.run();
  });

  it("should create new utility keys for JSON object", async () => {
    const etl = new Etl();
    let i = 0;
    etl.use(fromJson([{ id: 1 }, { id: 2 }]), async (ctx, next) => {
      assert.doesNotThrow(() => ctx.getNumber("$recordId"));
      assert.equal(ctx.getNumber("$recordId"), ctx.recordId);
      assert.equal(ctx.getNumber("$recordId"), ctx.getNumber("id"));
      i++;
      return next();
    });
    await etl.run();
    assert.equal(i, 2);
  });

  it("should create new utility keys for Shape file", () => {
    const etl = new Etl();
    etl.use(fromShapeFile(Source.file("./src/__tests__/resources/shapeFiles/places.shp")), assertUtilityKeys());
    return etl.run();
  });

  it("should create new utility keys for XLSX file", () => {
    const etl = new Etl();
    etl.use(
      fromXlsx(Source.file("./src/__tests__/resources/xlsxFiles/addresses_and_cities.xlsx")),
      assertUtilityKeys(["$tagName", "$selector"])
    );
    etl.use((ctx, next) => {
      assert.isTrue(ctx.getString("$sheetName") === "cities" || ctx.getString("$sheetName") === "addresses");
      return next();
    });
    return etl.run();
  });

  it("should create new utility keys for XML file", () => {
    const etl = new Etl();
    const file = "./src/__tests__/resources/xmlFiles/1.xml";
    const $selector = "Result.Performer";
    etl.use(
      fromXml(Source.file(file), { selectors: $selector }),
      assertUtilityKeys(["$sheetName"]),
      async (ctx, next) => {
        assert.equal(ctx.getString("$tagName"), "Performer");
        assert.deepEqual(ctx.getString("$selector"), $selector);
        return next();
      }
    );
    return etl.run();
  });

  it.skip("should create new utility keys for OAI-PMH service", () => {
    // see ./src/middlewares/reading/__tests__/fromOai.test.ts on how to run an OAI-PMH test server
    const etl = new Etl();
    etl.use(fromOai({ url: "http://localhost:8080/oaipmh/" }), async (ctx, next) => {
      assert.doesNotThrow(() => ctx.getNumber("$recordId"));
      assert.equal(ctx.getNumber("$recordId"), ctx.recordId);
      return next();
    });
    return etl.run();
  });

  it("should create utility keys overwriting data that already contains those keys", () => {
    const etl = new Etl();
    const file = "./src/__tests__/resources/csvFiles/utilityKeys.csv";
    etl.use([
      fromCsv(Source.file(file)),
      assertUtilityKeys([]),
      async (ctx, next) => {
        assert.equal(ctx.getString("$tagName"), "bar");
        return next();
      },
    ]);
    return etl.run();
  });
});
