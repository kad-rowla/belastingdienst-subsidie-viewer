import * as dataFactory from "@triplydb/data-factory";
import getCurrentLine from "get-current-line";
import { Context, Etl, Middleware } from "../../generic/index.js";
import { SourceGetter, StringSourceInfo } from "../../generic/locations/sources/index.js";
import { addMwCallSiteToError, coerceToIri, getQueryStrings, NamedNodeCompatibleType } from "../../utils/index.js";
import * as speedy from "@triplydb/speedy-memory";

export interface ConstructOptions {
  /**
   * Store the construct query results in this graph.
   * @default The Etl default graph
   */
  toGraph?: NamedNodeCompatibleType;
}

// TODO @DocumentationTeam: add TS doc comment here
export default function sparqlConstruct(
  query:
    | string
    | SourceGetter<"string", StringSourceInfo>
    | ((ctx: Context) => string | string[])
    | Array<string | SourceGetter<"string", StringSourceInfo> | ((ctx: Context) => string | string[])>,
  opts?: ConstructOptions,
): Middleware {
  const callSite = getCurrentLine({ frames: 2 });
  return addMwCallSiteToError(
    async function _construct(ctx, next) {
      const engine = speedy.newEngine(ctx.store);
      const queries = await getQueryStrings(ctx, query);
      const graph = coerceToIri(opts?.toGraph === undefined ? ctx.app.defaultGraph : opts.toGraph);
      const { quad, fromTerm } = dataFactory.getFactory({ skipValidation: Etl.skipValidation });
      for (const queryString of queries) {
        let queryResult;
        try {
          queryResult = await engine.construct(queryString);
        } catch (e) {
          if (e instanceof Error && e.message.startsWith("Parse error")) {
            e.message = "Failed to parse query: " + e.message;
          }
          throw e;
        }

        const quads = (await queryResult.quads()).map((q) => {
          return quad(fromTerm(q.subject), fromTerm(q.predicate), fromTerm(q.object), fromTerm(graph));
        });

        ctx.store.addQuads(quads);
        if (quads.length) ctx.app["markMwTouched"](callSite);
      }
      return next();
    },
    { reportTouched: false, callSite, sourceFuncName: "_sparql.construct" },
  );
}
