//external dependencies
import { Quad } from "@triplydb/data-factory/Terms.js";
import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { triple } from "../../../ratt/middlewares/assertions/statement/index.js";
import Etl from "../../../generic/Etl.js";
import update from "../update.js";
import { fromJson, Source } from "../../../generic/index.js";
import { Iri } from "@triplyetl/vocabularies";
import { getFactory } from "@triplydb/data-factory";
chai.use(chaiAsPromised);
const expect = chai.expect;

describe("SparqlUpdate", () => {
  it("Should insert data", async () => {
    const app = new Etl({ defaultGraph: "https://default/", prefixes: { ex: new Iri("http://example.org/") } });
    app.use(
      triple(
        app.prefix.ex.concat("Christopher_Columbus"),
        app.prefix.ex.concat("explored"),
        app.prefix.ex.concat("India"),
      ),
    );
    app.use(
      update(
        `INSERT DATA { GRAPH <${app.defaultGraph.value}> { <${app.prefix.ex.concat("Christopher_Columbus").value}> <${
          app.prefix.ex.concat("explored").value
        }> <${app.prefix.ex.concat("Caribbean").value}> } }`,
      ),
    );
    let quads: Quad[] = [];
    app.use(async (ctx) => {
      quads = ctx.store.getQuads({});
    });
    await app.run();
    expect(quads).to.have.lengthOf(2);
    expect(quads[0].subject.value).to.equal(app.prefix.ex.concat("Christopher_Columbus").value);
    expect(quads[0].object.value).to.equal(app.prefix.ex.concat("India").value);
    expect(quads[1].subject.value).to.equal(app.prefix.ex.concat("Christopher_Columbus").value);
    expect(quads[1].object.value).to.equal(app.prefix.ex.concat("Caribbean").value);
  });
  it("Delete data using query on file", async () => {
    const app = new Etl({
      defaultGraph: "https://default/",
      prefixes: { ex: new Iri("http://example.org/") },
      sources: { query: Source.file("./src/sparql/middlewares/__tests__/resources/updateQuery.ru") },
    });
    app.use(fromJson([{ explorer: "Christopher Columbus" }]));
    app.use(
      triple(
        app.prefix.ex.concat("Christopher_Columbus"),
        app.prefix.ex.concat("explored"),
        app.prefix.ex.concat("India"),
      ),
    );
    app.use(triple(app.prefix.ex.concat("Christopher_Columbus"), app.prefix.rdfs.concat("label"), "explorer"));
    let quadsBeforeDelete;
    app.use(async (ctx, next) => {
      quadsBeforeDelete = ctx.store.getQuads({});
      return next();
    });
    app.use(update(app.sources.query));
    let quads: Quad[] = [];
    app.use(async (ctx) => {
      quads = ctx.store.getQuads({});
    });
    await app.run();
    expect(quadsBeforeDelete).to.have.lengthOf(2);
    expect(quads).to.have.lengthOf(1);
  });
  // TODO find out why this test passes ran by itself but when ran inconjunctio with all the other test it fails
  it("Insert data into another graph using Query from nightly", async () => {
    const app = new Etl({
      defaultGraph: "https://default/",
      prefixes: { ex: new Iri("http://example.org/") },

      sources: {
        query: Source.TriplyDb.query("triply", "ratt-update-test", {
          triplyDb: { url: "https://api.nightly.triplydb.com" },
        }),
      },
    });
    app.use(update(app.sources.query));
    let quads: Quad[] = [];
    app.use(async (ctx) => {
      quads = ctx.store.getQuads({});
    });
    await app.run();
    expect(quads).to.have.lengthOf(1);
    expect(quads[0].graph.value).to.equal("https://www.triply.cc/");
  });
  it("Throws on an invalid query", async () => {
    const app = new Etl({
      defaultGraph: "https://default/",
    });
    app.use(update("DELETE DATA { ?s ?p ?o }"));
    return expect(app.run()).rejectedWith(`Detected illegal variable in BGP`);
  });
  it("should fix issues #233", async () => {
    const baseIri = "http://ex.com";
    const etl = new Etl({ baseIri });
    etl.use(
      update(`base <${etl.standardGraphs.default}>\ninsert data { <s> <p> <o>. }`),
      update(
        `base <${etl.standardGraphs.default}/>\ninsert { graph ?g { ?o ?p ?s. } }\nwhere { graph ?g { ?s ?p ?o. } }`,
      ),
      async (ctx, next) => {
        expect(ctx.store.size).to.equal(2);
        expect(
          ctx.store.getQuads({
            subject: getFactory().namedNode(`${etl.standardPrefixes.graph.concat("s")}`),
            predicate: getFactory().namedNode(`${etl.standardPrefixes.graph.concat("p")}`),
            object: getFactory().namedNode(`${etl.standardPrefixes.graph.concat("o")}`),
            graph: getFactory().namedNode(`${etl.standardGraphs.default}`),
          }).length,
        ).equal(1);
        expect(
          ctx.store.getQuads({
            subject: getFactory().namedNode(`${etl.standardPrefixes.graph.concat("o")}`),
            predicate: getFactory().namedNode(`${etl.standardPrefixes.graph.concat("p")}`),
            object: getFactory().namedNode(`${etl.standardPrefixes.graph.concat("s")}`),
            graph: getFactory().namedNode(`${etl.standardGraphs.default}`),
          }).length,
        ).equal(1);
        return next();
      },
    );
    await etl.run();
  });
});
