import { Store } from "@triplydb/data-factory";
import getCurrentLine from "get-current-line";

import RulesEngine, { RulesEngineOptions } from "@triplyetl/shacl/lib/RulesEngine.js";

import { addMwCallSiteToError } from "../../utils/index.js";
import { SourceGetter, StringSourceInfo } from "../../generic/locations/sources/index.js";
import { getQuads } from "../../generic/middlewares/sources/loadRdf.js";
import { Middleware } from "../../generic/index.js";

// TODO @DocumentationTeam: add TS doc comment here
export default function (
  oneOrMoreSources: SourceGetter<"statements", StringSourceInfo> | SourceGetter<"statements", StringSourceInfo>[],
  options?: Partial<RulesEngineOptions>,
): Middleware {
  const callSite = getCurrentLine({ frames: 2 });
  return addMwCallSiteToError(
    async function (ctx, next) {
      const quads = await getQuads(ctx, oneOrMoreSources);
      const shapes = new Store(quads);
      const engine = new RulesEngine(shapes, { ...options, data: ctx.store });
      ctx.store.addQuads(await engine.execute());
      return next();
    },
    { reportTouched: true, callSite, sourceFuncName: "_rules" },
  );
}
