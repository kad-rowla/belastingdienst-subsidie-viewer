//external dependencies
import { expect } from "chai";
import { fromJson } from "../../../../../generic/index.js";
import Etl from "../../../../../generic/Etl.js";
import copy from "../copy.js";

function getApp(records: Array<any>) {
  const app = new Etl({ defaultGraph: "https://default/" });
  app.use(fromJson(records));
  return app;
}
describe("copy", () => {
  it("Should copy value and apply change", async function () {
    let gotValue: string | undefined;
    const app = getApp([{ bla: "somestring   " }]);
    app.use(copy({ fromKey: "bla", type: "string", toKey: "bla2", change: (val) => val.trim() }));
    app.use(async (ctx) => {
      gotValue = ctx.getString("bla2");
    });
    await app.run();
    expect(gotValue).to.equal("somestring");
  });
  it("Should copy value as is", async function () {
    let gotValue: string | undefined;
    const app = getApp([{ bla: "Adagio" }]);
    app.use(copy({ fromKey: "bla", type: "string", toKey: "bla2" }));
    app.use(async (ctx) => {
      gotValue = ctx.getString("bla2");
    });
    await app.run();
    expect(gotValue).to.equal("Adagio");
  });
  it("Should throw when type does not match", async function () {
    const app = getApp([{ bla: { termType: "NamedNode", value: "http://im-an-iri" } }]);
    app.use(copy({ fromKey: "bla", toKey: "bla2", type: "boolean", change: (val) => Boolean(val) }));
    await expect(app.run()).to.eventually.be.rejectedWith(/^(Could not coerce)(.+)(to the desired type 'boolean')$/i);
  });
  it("Should now allow the same key", async function () {
    const app = getApp([{ bla: 1 }]);
    app.use(copy({ fromKey: "bla", toKey: "bla", type: "string", change: (val) => val + "woei" }));
    return expect(app.run()).rejectedWith(`fromKey" and "toKey" are both 'bla'`);
  });
  it("Should not allow overriding values", async function () {
    const app = getApp([{ bla: 1, bla2: 2 }]);
    app.use(copy({ fromKey: "bla", toKey: "bla2", type: "string", change: (val) => val + "woei" }));
    return expect(app.run()).rejectedWith(`Record already contains key 'bla2'`);
  });
});
