//external dependencies
import { expect } from "chai";
import { add } from "../index.js";
import { fromJson } from "../../../../../generic/index.js";
import Etl from "../../../../../generic/Etl.js";

function getApp(records: Array<any>) {
  const app = new Etl({ defaultGraph: "https://default/" });
  app.use(fromJson(records));
  return app;
}
describe("add", () => {
  it("Should add value", async function () {
    let gotValue: string | undefined;
    const app = getApp([{}]);
    app.use(add({ key: "bla", value: () => "w0rk w0rk" }));
    app.use(async (ctx) => {
      gotValue = ctx.getString("bla");
    });
    await app.run();
    expect(gotValue).to.equal("w0rk w0rk");
  });
  it("Can't add to an already existing key", async function () {
    const app = getApp([{ bla: 1 }]);
    app.use(add({ key: "bla", value: () => "Ready to work" }));
    return expect(app.run()).rejectedWith(`Record already contains key 'bla'`);
  });
  it("Can use context in value", async function () {
    let gotValue: number | undefined;
    const app = getApp([{ bla: 1, bla2: 2 }]);
    app.use(add({ key: "bla3", value: (ctx) => ctx.getNumber("bla") + ctx.getNumber("bla2") }));
    app.use(async (ctx) => {
      gotValue = ctx.getNumber("bla3");
    });
    await app.run();
    expect(gotValue).to.equal(3);
  });
});
