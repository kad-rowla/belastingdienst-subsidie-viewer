//external dependencies
import { expect } from "chai";
import { change } from "../index.js";
import { fromJson } from "../../../../../generic/index.js";
import Etl from "../../../../../generic/Etl.js";

function getApp(records: Array<any>) {
  const app = new Etl({ defaultGraph: "https://default/" });
  app.use(fromJson(records));
  return app;
}
describe("Change", function () {
  /**
   * Test whether typescript detects an error for the following lines
   */
  // @ts-expect-error
  change({ key: "blo", type: "doesnotexist", change: (val) => val });
  // @ts-expect-error
  change({ key: "blo", type: "number", change: (val) => val.trim() });
  // @ts-expect-error
  change({ key: "blo", change: (val) => val.trim() });

  it("Should fetch string-typed value properly", async function () {
    let gotValue: string | undefined;
    const app = getApp([{ bla: "somestring   " }]);
    app.use(change({ key: "bla", type: "string", change: (val) => val.trim() }));
    app.use(async (ctx) => {
      gotValue = ctx.getString("bla");
    });
    await app.run();
    expect(gotValue).to.equal("somestring");
  });
  it("Should apply change on multiple keys at the same time", async function () {
    let gotValue: string[] | undefined;
    const app = getApp([{ bla: "somestring          ", blub: "somestring2       " }]);
    app.use(change({ key: ["bla", "blub"], type: "string", change: (val) => val.trim() }));
    app.use(async (ctx) => {
      gotValue = [ctx.getString("bla"), ctx.getString("blub")];
    });
    await app.run();
    expect(gotValue).to.deep.equal(["somestring", "somestring2"]);
  });
  it("Should throw when type does not match", async function () {
    const app = getApp([
      {
        bla: [
          { termType: "NamedNode", value: "http://im-an-iri" },
          { termType: "NamedNode", value: "http://im-an-iri" },
        ],
      },
    ]);
    app.use(change({ key: "bla", type: "boolean", change: (val) => val }));
    await expect(app.run()).to.eventually.be.rejectedWith(/^(Could not coerce)(.+)(to the desired type 'boolean')$/i);
  });
});
