//external dependencies
import { expect } from "chai";
import { replace } from "../index.js";
import { fromJson, Etl } from "../../../../../generic/index.js";

function getApp(records: Array<any>) {
  const app = new Etl({ defaultGraph: "https://default/" });
  app.use(fromJson(records));
  return app;
}
describe("replace", () => {
  it("Should replace value and apply change", async function () {
    let gotValue: string | undefined;
    const app = getApp([{ bla: "forte", bla2: "piano" }]);
    app.use(replace({ fromKey: "bla", type: "string", toKey: "bla2", change: (val) => val.slice(0, 4) + "issimo" }));
    app.use(async (ctx) => {
      gotValue = ctx.getString("bla2");
    });
    await app.run();
    expect(gotValue).to.equal("fortissimo");
  });
  it("Should copy from when no change is specified", async function () {
    let gotValue: string | undefined;
    const app = getApp([{ bla: "forte", bla2: "piano" }]);
    app.use(replace({ fromKey: "bla", type: "string", toKey: "bla2" }));
    app.use(async (ctx) => {
      gotValue = ctx.getString("bla2");
    });
    await app.run();
    expect(gotValue).to.equal("forte");
  });
  it("Should throw when type does not match", async function () {
    const app = getApp([{ bla: { termType: "NamedNode", value: "I am an IRI" }, bla2: "adante" }]);
    app.use(replace({ fromKey: "bla", toKey: "bla2", type: "string", change: (val) => val + "woei" }));
    await expect(app.run()).to.eventually.be.rejectedWith(/^(Could not coerce)(.+)(to the desired type 'string')$/i);
  });
  it("Should now allow the same key", async function () {
    const app = getApp([{ bla: 1, bla2: "allegro" }]);
    app.use(replace({ fromKey: "bla", toKey: "bla", type: "string", change: (val) => val + "woei" }));
    return expect(app.run()).rejectedWith(`fromKey" and "toKey" are both 'bla'`);
  });
  it("Requires existing fromKey", async function () {
    const app = getApp([{ bla2: 1 }]);
    app.use(replace({ fromKey: "bla", toKey: "bla2", type: "number", change: (val) => val + "woei" }));
    return expect(app.run()).rejectedWith(`Could not find key 'bla' in the record`);
  });
  it("Requires existing toKey", function () {
    const app = getApp([{ bla: "presto" }]);
    app.use(replace({ fromKey: "bla", toKey: "bla2", type: "string", change: (val) => val + "woei" }));
    return expect(app.run()).rejectedWith(`Could not find key 'bla2' in the record`);
  });
});
