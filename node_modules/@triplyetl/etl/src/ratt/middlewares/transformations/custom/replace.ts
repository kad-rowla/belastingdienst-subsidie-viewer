import { has, set as lodashSet } from "lodash-es";
import { Middleware } from "../../../../generic/index.js";
import { getTypedValFromRecord, TypeForName, TypeName } from "../../../../generic/Context.js";
import { addMwCallSiteToError } from "../../../../utils/index.js";

export default function replace<R = unknown, T extends TypeName = "unknown">(opts: {
  /**
   * Key to use the value from
   */
  fromKey: string;
  /**
   * Key to replace
   */
  toKey: string;
  /**
   * Ensure the value is of this type
   */
  type: T;
  change?: (val: TypeForName<T>) => unknown;
}): Middleware<R> {
  return addMwCallSiteToError<R>(
    async function _replace(ctx, next) {
      if (opts.fromKey === opts.toKey)
        throw new Error(`"fromKey" and "toKey" are both '${opts.fromKey}'. Use the 'change' middleware instead`);
      if (!has(ctx.record, opts.fromKey)) throw new Error(`Could not find key '${opts.fromKey}' in the record`);
      if (!has(ctx.record, opts.toKey)) throw new Error(`Could not find key '${opts.toKey}' in the record`);
      const val = getTypedValFromRecord(ctx, opts.fromKey, opts.type);
      if (opts.change) {
        lodashSet(ctx.record, opts.toKey, await opts.change(val));
      } else {
        lodashSet(ctx.record, opts.toKey, val);
      }
      return next();
    },
    { sourceFuncName: "_replace" }
  );
}
