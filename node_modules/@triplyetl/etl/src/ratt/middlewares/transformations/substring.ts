import { castArray, isArray } from "lodash-es";
import { Key, Middleware } from "../../../generic/index.js";
import { addMwCallSiteToError } from "../../../utils/index.js";
import { StaticString } from "../assertions/term/str.js";
import { add } from "./custom/add.js";

/**
 * This middleware takes a substring from the input string and stores the
 * result in a new key.
 *
 * @param args.content - A key that stores a string value, or a string
 * specified with {@link url}.
 *
 * @param args.start - The index of the first character that is included in
 * the substring.  The first character has index 0.
 *
 * @param args.end - Optionally, the index of the first character that is
 * excluded from the substring.  If absent, the substring ends at the end of
 * the source string.
 *
 * @param args.key - The new key in which the substring is stored.
 *
 * @example
 * The Library of Congress MARC format stores the type of record in the sixth
 * character that appears in the leader key.  We use `substring` to extract
 * this characters and then use {@link translateAll} to map it to a
 * corresponding class IRI:
 *
 * ```ts
 * substring({
 *   content: 'metadata.marc:record.marc:leader.$text',
 *   start: 6,
 *   end: 7,
 *   key: '_typeOfRecord',
 * }),
 * translateAll({
 *   content: '_typeOfRecord',
 *   table: {
 *     a: dcm.Text,
 *     k: dcm.StillImage,
 *   },
 *   key: '_class',
 * }),
 * triple('_iri', a, '_class'),
 * ```
 */
export default function <R = unknown>(args: {
  content: StaticString | Key;
  key: string;
  start: number;
  end?: number;
}): Middleware<R> {
  return addMwCallSiteToError<R>(
    add({
      value: (context) => {
        const content: string[] = [];
        castArray(args.content).forEach((value) =>
          content.push(context.getString(value).substring(args.start, args.end).trim())
        );
        return isArray(args.content) ? content : content[0];
      },
      key: args.key,
    }),
    { sourceFuncName: "_substring" }
  );
}
