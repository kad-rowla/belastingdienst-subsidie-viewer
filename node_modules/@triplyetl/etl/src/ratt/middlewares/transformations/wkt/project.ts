import { NamedNode } from "@triplydb/data-factory/Terms.js";
import proj from "proj4";
import { epsg } from "@triplyetl/vocabularies";
import { add } from "../custom/add.js";
import { isString, toNumber } from "lodash-es";
import { Middleware } from "../../../../generic/index.js";
import { addMwCallSiteToError } from "../../../../utils/index.js";

/**
 * Helper function that returns the appropriate prefix of a Well-Known Text
 * (WKT) string, specifying the Coordinate Reference System (CRS).
 */
export function wktCrsPrefix(crs: NamedNode = epsg[4326]): string {
  return crs === epsg[4326] ? "" : "<" + crs.value + "> ";
}
/**
 * Instead of writing out the whole proj definition, by default proj4 has the following projections predefined:
 *
 * - 'EPSG:3857' with aliases 'EPSG:3785', 'GOOGLE', 'EPSG:900913', and 'EPSG:102113'.
 * - 'EPSG:4269'
 * - 'EPSG:4326' with alias 'WGS84'.
 */
export default function <R = unknown>(args: {
  content: number[] | String[];
  key: string;
  fromCrs: NamedNode<string>;
  toCrs?: NamedNode<string>;
}): Middleware<R> {
  return addMwCallSiteToError<R>(
    add({
      value: (ctx) => {
        const _crs = new Map<string, string>([
          [
            epsg["666"].value,
            'PROJCS["RD_New",GEOGCS["GCS_Amersfoort",DATUM["D_Amersfoort",SPHEROID["Bessel_1841",6377397.155,299.1528128]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Double_Stereographic"],PARAMETER["False_Easting",155000.0],PARAMETER["False_Northing",463000.0],PARAMETER["Central_Meridian",5.38763888888889],PARAMETER["Scale_Factor",0.9999079],PARAMETER["Latitude_Of_Origin",52.15616055555555],UNIT["Meter",1.0]]',
          ],
          [
            epsg["28992"].value,
            'PROJCS["Amersfoort / RD New",GEOGCS["Amersfoort",DATUM["Amersfoort",SPHEROID["Bessel 1841",6377397.155,299.1528128],TOWGS84[565.4171,50.3319,465.5524,1.9342,-1.6677,9.1019,4.0724999999]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4289"]],PROJECTION["Oblique_Stereographic"],PARAMETER["latitude_of_origin",52.1561605555556],PARAMETER["central_meridian",5.38763888888889],PARAMETER["scale_factor",0.9999079],PARAMETER["false_easting",155000],PARAMETER["false_northing",463000],UNIT["metre",1],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","28992"]]',
          ],
          [
            epsg["4326"].value,
            'GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]]',
          ],
        ]);
        const _toCrs = args.toCrs ?? epsg[4326];
        const fromCrsMaybe = _crs.get(args.fromCrs.value);
        if (fromCrsMaybe == null) {
          throw Error(`Implementation error: The specified 'from' CRS ('${args.fromCrs.value}') is not yet supported.`);
        }
        const toCrsMaybe = _crs.get(_toCrs.value);
        if (toCrsMaybe == null) {
          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
          throw Error(`Implementation error: The specified 'to' CRS ('${_toCrs.value}') is not yet supported.`);
        }
        let coordinates: number[] = [];
        if (isString(args.content[0]) && isString(args.content[1])) {
          coordinates = [ctx.getNumber(args.content[0]), ctx.getNumber(args.content[1])];
        } else {
          coordinates = [toNumber(args.content[0]), toNumber(args.content[1])];
        }
        return proj(fromCrsMaybe, toCrsMaybe, coordinates);
      },
      key: args.key,
    }),
    { sourceFuncName: "_project" },
  );
}
