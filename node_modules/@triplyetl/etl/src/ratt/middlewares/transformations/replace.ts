import { Key, Middleware } from "../../../generic/index.js";
import { addMwCallSiteToError } from "../../../utils/index.js";
import { StaticString } from "../assertions/term/str.js";
import { add } from "./custom/add.js";

/**
 * Performs a regular expression replacement to the given input string, and
 * stores the result in a new key.
 *
 * @param args.content - A key that contains a string value, or a static
 * string specified with notation `str('...')`.
 *
 * @param args.from - A [JavaScript Regular
 * Expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions).
 *
 * @param args.to - Optionally, a string that replaces potential matches of
 * the Regular Expression (`from`).  Use `$1`, `$2`, etc. to insert matches.
 * If absent, the empty string is used.
 *
 * @param args.key - A new key where the result of the replacement is stored.
 *
 * @example
 * Suppose the source data contains date/time strings, but only the date
 * component is needed:
 *
 * ```json
 * {
 *   'created': '2020-01-02T00:00:00.0Z'
 * }
 * ```
 *
 * It is possible to extract only the date part (everything up to the `T`) in
 * the following way:
 *
 * ```ts
 * replace({
 *   content: 'created',
 *   from: /^([^T]*).*$/,
 *   to: '$1',
 *   key: '_created',
 * }),
 * triple('_creativeWork', dct.created, literal('_created', xsd.date)),
 * ```
 *
 * This results in the following Etl Record:
 *
 * ```json
 * {
 *   'created': '2020-01-02T00:00:00.0Z'.
 *   '_created': '2020-01-02'
 * }
 * ```
 */
export default function <R = unknown>(args: {
  content: StaticString | Key;
  from: string | RegExp;
  to?: string;
  key: string;
}): Middleware<R> {
  return addMwCallSiteToError<R>(
    add({
      value: (context) =>
        context.getString(args.content).replace(args.from instanceof RegExp ? args.from : args.from, args.to ?? ""),
      key: args.key,
    }),
    { sourceFuncName: "_replace" }
  );
}
