import { Key, Middleware } from "../../../generic/index.js";
import { addMwCallSiteToError } from "../../../utils/index.js";
import { StaticString } from "../assertions/term/str.js";
import { add } from "./custom/add.js";

/**
 * Splits a string into an array of strings, and stores that array in a new
 * key.
 *
 * @remarks
 * This transformation removes any trailing whitespace that remains after the
 * strings are split.  This ensures that irregular use of whitespace in the
 * source data is taken care of automatically.
 *
 * @param content - A key that stores a string, or a string specified with
 * {@link str}.
 *
 * @param separator - A string or a regular expression that is used to
 * separate the content.
 *
 * @param key - A new key where the array of splitted strings is stored.
 *
 * @param keepEmptyEntities - An optional boolean to determine whether an empty value should be kept after transformation. By default, empty keys are removed.
 *
 * @example
 * The following snippet splits a source data cell that contains zero or more
 * children of the person who is represented in the record.
 *
 * ```ts
 * fromJson([{ id: 'johndoe', children: 'janedoe, jakedoe' }]),
 * split({
 *   content: 'children',
 *   separator: ',',
 *   key: '_children',
 * }),
 * triple(iri(prefix.person, 'id'), sdo.children, iris(prefix.person, '_children')),
 * ```
 *
 * This results in the following linked data assertions:
 *
 * ```ttl
 * person:johndoe sdo:children person:janedoe, person:jakedoe.
 * ```
 *
 * @example
 * The following snippet uses a regular expression to split a KIX code.
 * (A [KIX code](https://en.wikipedia.org/wiki/RM4SCC) is a standardized
 * format for representing postal addresses in The Netherlands.)
 *
 * ```ts
 * fromJson([{ id: '1', KIX: '1231FZ13Xhs' }]),
 * split({
 *   content: 'KIX',
 *   separator: /^(\d{4}[A-Z]{2})(\d{1,5})(?:X(.{1,6}))/,
 *   key: 'KIX_components',
 * }),
 * triple(iri(prefix.id, 'id), sdo.postalCode, 'KIX_components[1]'),
 * ```
 *
 * This results in the following Etl Record:
 *
 * ```ts
 * {
 *   id: '1',
 *   KIX: '1231FZ13Xhs',
 *   KIX_components: ['', '1231FZ', '13', 'hs', ''],
 * },
 * ```
 *
 * And in the following linked data assertion:
 *
 * ```ttl
 * id:1 sdo:postalCode '1231FZ'.
 * ```
 */
export default function <R = unknown>(args: {
  content: StaticString | Key;
  separator: RegExp | string;
  key: string;
  keepEmptyEntities?: boolean;
}): Middleware<R> {
  return addMwCallSiteToError<R>(
    add({
      value: (context) =>
        context
          .getString(args.content)
          .split(args.separator)
          .map((val) => val.trim())
          .filter((value) => value !== "" || args.keepEmptyEntities),
      key: args.key,
    }),
    { sourceFuncName: "_split" }
  );
}
