import { Middleware } from "../../../generic/index.js";
import { addMwCallSiteToError, iriCharacterCleaner, PossibleIri, randomHash } from "../../../utils/index.js";
import { add } from "./custom/add.js";

/**
 * Creates an IRI based on the specified IRI prefix and a universally unique
 * random identifier.
 *
 * @remarks
 * This middleware is used under the following circumstances:
 *
 * 1. You want to identify something with an IRI.
 * 2. The thing that you want to identify does not have a readily available
 *    identifier.  If an identifier is available, use {@link addIri} instead.
 * 3. The thing that you want to identify does not have unique properties in
 *    the source data, or it is too difficult or too expensive to specify
 *    these properties.  If unique properties are available, use {@link
 *    addHashedIri} instead.
 *
 * This middleware has the advantage that, unlike {@link addHashedIri}, no
 * identifying criteria need to be specified.
 *
 * This middleware has the disadvantage that, unlike {@link addHashedIri},
 * running the same ETL twice over the same source data results in different
 * IRIs.
 *
 * @param args.prefix - An IRI or a key that contains an IRI.
 *
 * @param args.key - A new key where the created IRI is stored.
 *
 * @example
 * The following snippet creates a triple with a subject that that is a random
 * IRI:
 *
 * ```ts
 * addRandomIri({
 *   prefix: prefix.id,
 *   key: 'subject',
 * }),
 * triple('subject', sdo.dateCreated, literal('date', xsd.date)),
 * ```
 *
 * This makes the following assertion in RDF:
 *
 * ```ttl
 * id:acb3ea010fe748bfa73a2ee2b65bef65 sdo:dateCreated '2000-12-30'^^xsd:date.
 * ```
 *
 * @see Use {@link addIri} instead, if a unique identifier can be readily
 * specified.
 *
 * @see Use {@link addHashedIri} instead, if one or more properties that
 * together uniquely identify a thing can be specified.
 *
 * @see Use {@link addSkolemIri} instead, if you want to communicate that the
 * IRI can be replaced with a blank node.
 */
export default function <R = unknown>(args: { prefix: PossibleIri; key: string }): Middleware<R> {
  return addMwCallSiteToError<R>(
    add({
      value: (context) => {
        return iriCharacterCleaner(context.getIri(args.prefix).value + randomHash());
      },
      key: args.key,
    }),
    { sourceFuncName: "_addRandomIri" }
  );
}
