import { Key, Middleware } from "../../../generic/index.js";
import { addMwCallSiteToError } from "../../../utils/index.js";
import { StaticString } from "../assertions/term/str.js";
import { add } from "./custom/add.js";

/**
 * Concatenates an array of strings into one new string.
 *
 * @remarks
 * An optionally specified separator is placed in between every two
 * consecutive string values.
 *
 * @param content - An array of key that contain a string and/or strings
 * specified with {@link str}.
 *
 * @param separator - Optionally, the string that is places between every
 * two consecutive string values.
 *
 * @param key - A new key where the concatenated string is stored.
 *
 * @example
 * The following snippet concatenates the first and last name of a person (in
 * that order), using a space separator.
 *
 * ```ts
 * fromJson([{ id: '1', first: 'John', last: 'Doe' }]),
 * concat({
 *   content: ['first', 'last'],
 *   separator: ' ',
 *   key: '_name',
 * }),
 * triple(iri(prefix.person, 'id'), foaf.name, '_name'),
 * ```
 *
 * This results in the following linked data assertion:
 *
 * ```ttl
 * person:1 foaf:name 'John Doe'.
 * ```
 */
export default function <R = unknown>(args: {
  content: Array<Key | StaticString>;
  separator?: string;
  key: string;
}): Middleware<R> {
  return addMwCallSiteToError<R>(
    add({
      value: (context) => args.content.map((value) => context.getString(value)).join(args.separator ?? ""),
      key: args.key,
    }),
    { sourceFuncName: "_concat" }
  );
}
