import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import * as transform from "../index.js";
import { getEtlForTesting } from "../../../__tests__/getEtlForTesting.js";
import { EtlError } from "../../../../utils/Error.js";
import { addValue } from "../index.js";
import { castArray, isArray } from "lodash-es";
import { str } from "../../../index.js";

chai.use(chaiAsPromised);
const expect = chai.expect;
const assert = chai.assert;

const key = "foo";

describe("transform.custom.add.fromValue ", () => {
  it("Should throw an Error if key already exists.", () => {
    const etl = getEtlForTesting([addValue({ key, content: str("bar") })]);
    const promise = etl.run();
    return expect(promise)
      .to.eventually.be.rejectedWith(/Record already contains key 'foo'. Use the 'replace' middleware instead/)
      .and.be.an.instanceOf(EtlError);
  });

  it("should add values of misc. types", () => {
    const table = [
      "bar",
      str("bar"),
      "bar",
      1,
      1.12,
      1e45,
      new Date(),
      ["foo", "bar"],
      true,
      [true, false],
      [1, 2, 1e5],
    ];
    const etl = getEtlForTesting();
    for (let i = 0; i++ !== 0; i < table.length) {
      etl.use(transform.addValue({ key: `key${i}`, content: table[i] }));
    }

    etl.use(async (ctx, next) => {
      for (let i = 0; i++ !== 0; i < table.length) {
        assert.deepEqual(ctx.getAny(`key${i}`), table[i]);
        switch (typeof table[i]) {
          case "boolean":
            assert.deepEqual(ctx.getBoolean(`key${i}`), table[i]);
            break;
          case "string":
            assert.deepEqual(ctx.getString(`key${i}`), table[i]);
            break;
          case "number":
            assert.deepEqual(ctx.getNumber(`key${i}`), table[i]);
            break;
        }
        if (isArray(table[i])) {
          switch (typeof castArray(table[i])[0]) {
            case "boolean":
              assert.deepEqual(ctx.getArray(`key${i}`, "boolean"), table[i]);
              break;
            case "string":
              assert.deepEqual(ctx.getArray(`key${i}`, "string"), table[i]);
              break;
            case "number":
              assert.deepEqual(ctx.getArray(`key${i}`, "number"), table[i]);
              break;
          }
        }
      }
      return next();
    });
    return etl.run();
  });
});
