import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { addValue, decodeHtml } from "../index.js";
import { str } from "../../../index.js";
import { getEtlForTesting } from "../../../__tests__/getEtlForTesting.js";

chai.use(chaiAsPromised);
const assert = chai.assert;

// We only test some commonly used HTML entities:
const htmlEntities = [
  // Etl throws error on single space strings ...
  ["~ ", "~&nbsp;", "non-breaking space"],
  ["<", "&lt;", "less than"],
  [">", "&gt;", "greater than"],
  ["&", "&amp;", "ampersand"],
  ['"', "&quot;", "double quotation mark"],
  ["'", "&apos;", "single quotation mark (apostrophe)"],
  ["€", "&euro;", "euro"],
  ["©", "&copy;", "copyright"],
  ["®", "&reg;", "registered trademark"],
];

describe("Transform.decodeHTML ", () => {
  describe("using static strings:", () => {
    htmlEntities.forEach((htmlEntity) => {
      it(`should decode ${htmlEntity[2]} (${htmlEntity[1]}) to '${htmlEntity[0]}'`, () =>
        getEtlForTesting([
          decodeHtml({ key: "decoded", content: str(htmlEntity[0]) }),
          async (ctx, next) => {
            assert.equal(ctx.getString("decoded"), htmlEntity[0]);
            return next();
          },
        ]).run());
    });
  });
  describe("using keys:", () => {
    htmlEntities.forEach((htmlEntity) => {
      it(`should decode ${htmlEntity[2]} (${htmlEntity[1]}) to '${htmlEntity[0]}'`, () =>
        getEtlForTesting([
          addValue({ key: "encoded", content: str(htmlEntity[1]) }),
          decodeHtml({ key: "decoded", content: "encoded" }),
          async (ctx, next) => {
            assert.equal(ctx.getString("decoded"), htmlEntity[0]);
            return next();
          },
        ]).run());
    });
  });
});
