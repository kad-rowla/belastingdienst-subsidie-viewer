import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { addValue, translateSome } from "../index.js";
import { str } from "../../../index.js";
import { fromJson } from "../../../../generic/index.js";
import { getEtlForTesting, getEtlForTestingNoExtractor } from "../../../__tests__/getEtlForTesting.js";
import * as vocab from "@triplyetl/vocabularies";
import { getFactory } from "@triplydb/data-factory";

chai.use(chaiAsPromised);
const assert = chai.assert;

const table: { [key: string]: string } = {
  "Frysl��n": "Fryslân",
};

describe("Transform.translateSome ", () => {
  it("should work on static strings", () =>
    getEtlForTesting([
      translateSome({ content: str("Frysl��n"), table, key: "friesland1" }),
      translateSome({ content: str("Fryslân"), table, key: "friesland2" }),
      translateSome({ content: str("Limburg"), table, key: "limburg" }),
      async (ctx, next) => {
        assert.equal("Fryslân", ctx.getString("friesland1"));
        assert.equal("Fryslân", ctx.getString("friesland2"));
        assert.equal("Limburg", ctx.getString("limburg"));
        return next();
      },
    ]).run());

  it("should work for tables stored in keys", () =>
    getEtlForTestingNoExtractor([
      fromJson({ table }),
      translateSome({ content: str("Frysl��n"), table: "table", key: "friesland1" }),
      translateSome({ content: str("Fryslân"), table: "table", key: "friesland2" }),
      translateSome({ content: str("Limburg"), table: "table", key: "limburg" }),
      async (ctx, next) => {
        assert.equal("Fryslân", ctx.getString("friesland1"));
        assert.equal("Fryslân", ctx.getString("friesland2"));
        assert.equal("Limburg", ctx.getString("limburg"));
        return next();
      },
    ]).run());

  it("should work on keys", () =>
    getEtlForTesting([
      addValue({ key: "frieslandKey1", content: str("Frysl��n") }),
      addValue({ key: "frieslandKey2", content: str("Fryslân") }),
      addValue({ key: "limburgKey", content: str("Limburg") }),
      translateSome({ content: "frieslandKey1", table, key: "friesland1" }),
      translateSome({ content: "frieslandKey2", table, key: "friesland2" }),
      translateSome({ content: "limburgKey", table, key: "limburg" }),
      async (ctx, next) => {
        assert.equal("Fryslân", ctx.getString("friesland1"));
        assert.equal("Fryslân", ctx.getString("friesland2"));
        assert.equal("Limburg", ctx.getString("limburg"));
        return next();
      },
    ]).run());

  it("should work with vocabularies", () =>
    getEtlForTestingNoExtractor([
      fromJson({ gemeenteNaam: "Heiloo", type: "City" }),
      translateSome({ content: "gemeenteNaam", table: vocab.owms.gemeente, key: "$gemeente" }),
      translateSome({ content: "type", table: vocab.sdo, key: "$type" }),
      async (ctx, next) => {
        assert.isTrue(ctx.hasKey("$gemeente"));
        assert.isTrue(
          ctx
            .getIri("$gemeente")
            .equals(getFactory().namedNode("http://standaarden.overheid.nl/owms/terms/Heiloo_(gemeente)")),
        );
        assert.isTrue(ctx.hasKey("$type"));
        assert.isTrue(ctx.getIri("$type").equals(vocab.sdo.City));
        return next();
      },
    ]).run());
});
