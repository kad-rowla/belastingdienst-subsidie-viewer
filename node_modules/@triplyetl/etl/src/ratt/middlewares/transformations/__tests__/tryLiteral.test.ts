import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { getEtlForTesting } from "../../../__tests__/getEtlForTesting.js";
import tryLiteral from "../tryLiteral.js";
import { str } from "../../../index.js";
import { xsd } from "@triplyetl/vocabularies";
import addValue from "../addValue.js";

chai.use(chaiAsPromised);
const expect = chai.expect;
const assert = chai.assert;

describe("Transform.tryLiteral", () => {
  it("should coerce a literal to a xsd.date", () => {
    return getEtlForTesting([
      addValue({ content: str("1900-01-02"), key: "date" }),
      tryLiteral({
        content: "date",
        datatypes: [xsd.date, xsd.gYearMonth, xsd.gYear],
        key: "_publicationDate",
      }),
      async (ctx, _) => {
        assert.doesNotThrow(() => ctx.getLiteral("_publicationDate"));
        assert.isTrue(ctx.getLiteral("_publicationDate").datatype.equals(xsd.date));
      },
    ]).run();
  });

  it("should coerce a literal to a xsd.gYear", () => {
    return getEtlForTesting([
      addValue({ content: str("1900"), key: "date" }),
      tryLiteral({
        content: "date",
        datatypes: [xsd.date, xsd.gYearMonth, xsd.gYear],
        key: "_publicationDate",
      }),
      async (ctx, _) => {
        assert.doesNotThrow(() => ctx.getLiteral("_publicationDate"));
        assert.isTrue(ctx.getLiteral("_publicationDate").datatype.equals(xsd.gYear));
      },
    ]).run();
  });

  it("should throw if no datatypes match", () => {
    const etl = getEtlForTesting([
      addValue({ content: str("02-01-1900"), key: "date" }),
      tryLiteral({
        content: "date",
        datatypes: ["https://example.com/someDatatype", "https://example.com/someOtherDatatype", ""],
        key: "_publicationDate",
      }),
    ]);
    return expect(etl.run()).to.eventually.rejected;
  });

  it("should throw if no datatypes match", () => {
    const etl = getEtlForTesting([
      addValue({ content: str("02-01-1900"), key: "date" }),
      tryLiteral({
        content: "date",
        datatypes: [xsd.date, xsd.gYearMonth, xsd.gYear],
        key: "_publicationDate",
      }),
    ]);
    return expect(etl.run()).to.eventually.rejected;
  });
});
