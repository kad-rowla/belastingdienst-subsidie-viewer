import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import * as transform from "../index.js";
import { str } from "../../../index.js";
import { getEtlForTesting } from "../../../__tests__/getEtlForTesting.js";

chai.use(chaiAsPromised);
const expect = chai.expect;
const assert = chai.assert;

const key = "foo";

describe("transform.copy ", () => {
  it("Should throw an Error if key already exists.", async () => {
    await expect(
      getEtlForTesting([
        transform.addValue({ key: "bar", content: str("Bar") }),
        transform.copy({ key, content: "bar" }),
      ]).run()
    ).to.eventually.be.rejectedWith(/^Record already contains key 'foo'. Use the 'replace' middleware$/);
  });

  it("Should throw an Error if a key that needs to be copied does not exist.", async () => {
    await expect(getEtlForTesting([transform.copy({ key, content: "bar" })]).run()).to.eventually.be.rejectedWith(
      /^Could not find key 'bar' in the record$/
    );
  });

  it("Should make an exact copy", () =>
    getEtlForTesting([
      transform.copy({ key: "bar", content: "foo" }),
      async (ctx, next) => {
        assert.deepEqual(ctx.getAny("bar"), ctx.getAny("foo"));
        return next();
      },
    ]).run());
});
