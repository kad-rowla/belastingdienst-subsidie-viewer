import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { addValue } from "../index.js";
import { EtlError } from "../../../../utils/Error.js";
import { str } from "../../../index.js";
import { getEtlForTesting } from "../../../__tests__/getEtlForTesting.js";
import replace from "../replace.js";
chai.use(chaiAsPromised);
const expect = chai.expect;
const assert = chai.assert;

const key = "foo";

describe("replace ", () => {
  it("should throw an Error if key already exists.", () =>
    expect(getEtlForTesting([replace({ key, content: "bar", from: "foo" })]).run())
      .to.eventually.be.rejectedWith(/^Record already contains key 'foo'/)
      .and.be.an.instanceOf(EtlError));

  it("should replace static strings where `to` is undefined", () =>
    getEtlForTesting([
      replace({ key: "replaced1", content: str("bar"), from: "bar" }),
      replace({ key: "replaced2", content: str("FooBar"), from: "Bar" }),
      async (ctx, next) => {
        assert.isTrue(ctx.getAny("replaced1") === "");
        assert.isTrue(ctx.getString("replaced2") === "Foo");
        return next();
      },
    ]).run());

  it("should replace key strings where `to` is undefined", () =>
    getEtlForTesting([
      addValue({ key: "Key1", content: str("FooBar1") }),
      addValue({ key: "Key2", content: str("FooBar2") }),
      replace({ key: "replaced1", content: "Key1", from: "FooBar1" }),
      replace({ key: "replaced2", content: "Key2", from: "Bar" }),
      async (ctx, next) => {
        assert.isTrue(ctx.getAny("replaced1") === "");
        assert.isTrue(ctx.getString("replaced2") === "Foo2");
        return next();
      },
    ]).run());

  it("should replace static strings where `to` is a static string", () =>
    getEtlForTesting([
      replace({ key: "replaced", content: str("bar"), from: "bar", to: "foo" }),
      async (ctx, next) => {
        assert.isTrue(ctx.getString("replaced") === "foo");
        return next();
      },
    ]).run());

  it("should replace static strings where `from` is a RegExp", () =>
    getEtlForTesting([
      replace({ key: "replaced1", content: str("bar"), from: /^b[a-z]r$/, to: "*" }),
      replace({ key: "replaced2", content: str("bar"), from: /^(b)[a-z](r)$/, to: "$1*$2" }),
      async (ctx, next) => {
        assert.isTrue(ctx.getString("replaced1") === "*");
        assert.isTrue(ctx.getString("replaced2") === "b*r");
        return next();
      },
    ]).run());
});
