import { Key, Middleware, MiddlewareList } from "../../../../generic/index.js";
import { NamedNode } from "@triplydb/data-factory/Terms.js";
import { convertMwListToMiddleware } from "../../../../utils/index.js";
import { TermGetter } from "../term/getter.js";
import { StaticString } from "../term/str.js";
import quad, { Triple } from "./rdf/quad.js";

const _triples = (graphName: StaticString | Key | TermGetter<NamedNode>, ...triples: Triple[]): MiddlewareList =>
  triples.map((t) => quad(...t, graphName));

/**
 * Asserts multiple triples that belong to the same graph.
 *
 * @remarks
 * It is common for multiple statements to occur in the same graph.  In such
 * cases, it is suboptimal to repeat the graph name for each assertion using
 * the {@link quad} middleware.  Instead, it is shorter to specify the graph
 * name once up front, and specify each triple directly afterwards.
 *
 * This middleware is conceptually similar to graph notation in TriG, where
 * the graph name is specified up front, and all statements within that graph
 * are specified immediately after that:
 *
 * ```trig
 * graph:flowers {
 *   id:123 a def:Flower.
 * }
 * ```
 *
 * @param graph - A graph name.  This must be an IRI.
 *
 * @param triples - An array with zero or more triples.  Each triple is
 * represented by an array of 3 terms: a subject term, a predicate term, and
 * an object term (in that order).
 *
 * @example
 * Suppose that we want to distinguish between data and metadata assertions.
 * We can do so by asserting them in distinct graphs.
 * The following makes multiple metadata assertions in the metadata graph,
 * followed by multiple data assertions in the data graph.
 *
 * ```ts
 * triples(graph.metadata, [
 *   [iri(prefix.dataset, str('flowers')), a, dcat.Dataset],
 *   ...
 * ]),
 * triples(graph.data, [
 *   [iri(prefix.flower, '_id'), a, def.Flower],
 *   ...
 * ]),
 * ```
 */
export default function triples(
  graphName: StaticString | Key | TermGetter<NamedNode>,
  ...triples: Triple[]
): Middleware {
  return convertMwListToMiddleware(_triples(graphName, ...triples), "_triples");
}
