import { Middleware, MiddlewareList } from "../../../../generic/index.js";
import { convertMwListToMiddleware } from "../../../../utils/index.js";
import quad, { Quad } from "./rdf/quad.js";

const _quads = (...quads: Quad[]): MiddlewareList =>
  quads.map((q) => {
    const [S, P, O, G] = q;
    return quad(S, P, O, G);
  });

/**
 * Assets multiple quadruples or 'quads', i.e. statements that consists of a
 * subject term, a predicate term, an object term, and a graph name.
 *
 * @remarks
 * A quad is a {@link triple} with a graph name as its fourth parameter.
 *
 * @param subject - A subject term.  This must be either an {@link iri} or a
 * {@link literal}.
 *
 * @param predicate - A predicate term.  This must be an {@link iri}.
 *
 * @param object - An object term.  This must be either an {@link iri} or a
 * {@link literal}.
 *
 * @param graph - A graph name.  This must be an {@link iri}.
 *
 * @example
 * An ETL may distinguish between data and metadata assertions.  Both may be
 * placed into distinct graphs.  The following snippet makes assertions in a
 * metadata graph and assertions in a data graph.
 *
 * ```ts
 * quads(
 *   [iri(prefix.dataset, 'flowers'), a, dcat.Dataset, graph.metadata],
 *   ...,
 * ),
 * quads(
 *   [iri(prefix.flower, '_id'), a, def.Flower, graph.data],
 *   ...,
 * ),
 * ```
 *
 * @see {@link quad} for asserting a single quadruple.
 */
export default function quads(...quads: Quad[]): Middleware {
  return convertMwListToMiddleware(_quads(...quads), "_quads");
}
