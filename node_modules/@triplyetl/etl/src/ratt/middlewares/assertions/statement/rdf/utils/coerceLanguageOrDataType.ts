import { isStatic, StaticString } from "../../../term/str.js";
import * as RDF from "rdf-js";
import { getFactory } from "@triplydb/data-factory";
import { LanguageTag, xsd } from "@triplyetl/vocabularies";
import { isNamedNode } from "../../../../../../utils/asserts.js";
import * as TriplyIri from "@triplydb/iri";
import { coerceToLanguageTag } from "./coerceToLanguageTag.js";
import Etl from "../../../../../../generic/Etl.js";
import { once } from "lodash-es";
const DataFactory = once(() => getFactory({ skipValidation: Etl.skipValidation }));

export function coerceLanguageOrDataType(
  languageOrDataType?: RDF.NamedNode | string | StaticString | LanguageTag,
  fallback: string | LanguageTag | StaticString | RDF.NamedNode = xsd.string,
  keyName?: string, //for debugging
): string | RDF.NamedNode {
  if (languageOrDataType === undefined) return coerceLanguageOrDataType(fallback);
  else if (isNamedNode(languageOrDataType)) return languageOrDataType;
  else if (LanguageTag.isLanguageTag(languageOrDataType)) return languageOrDataType.toString();
  else if (isStatic(languageOrDataType) || typeof languageOrDataType === "string") {
    try {
      const iriString = languageOrDataType.toString();
      TriplyIri.validate(iriString);
      return DataFactory().namedNode(iriString);
    } catch (e) {
      return coerceToLanguageTag(languageOrDataType).toString();
    }
  } else {
    throw new Error(
      `Could not coerce source ${keyName} / languageOrDataType '${languageOrDataType.toString()}' of type '${typeof languageOrDataType}' into an Iri or Language Tag`,
    );
  }
}
