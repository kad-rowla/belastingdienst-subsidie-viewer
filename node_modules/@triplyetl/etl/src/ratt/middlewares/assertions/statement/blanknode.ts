import { Middleware } from "../../../../generic/index.js";
import { addMwCallSiteToError } from "../../../../utils/index.js";
import quad, { isSPG, Pair, SPG } from "./rdf/quad.js";

// TODO @DocumentationTeam: add TS doc comment here
function blanknode<R>(subject: SPG, predicate: SPG, ...pairs: Pair[]): Middleware<R>;
function blanknode<R>(graph: SPG, subject: SPG, predicate: SPG, ...pairs: Pair[]): Middleware<R>;
function blanknode<R>(
  graphOrSubject: SPG,
  subjectOrPredicate: SPG,
  predicateOrObject: SPG | Pair,
  ...pairs: Pair[]
): Middleware<R> {
  return addMwCallSiteToError<R>(
    async (ctx, next) => {
      const O = ctx.app.skolemIri;
      let S: SPG, P: SPG, G: SPG | undefined;
      if (isSPG(predicateOrObject)) {
        G = graphOrSubject;
        S = subjectOrPredicate;
        P = predicateOrObject as SPG;
      } else {
        S = graphOrSubject;
        P = subjectOrPredicate;
        pairs = [predicateOrObject as Pair, ...pairs];
      }
      await quad(S, P, O, G)(ctx, () => Promise.resolve());
      for (let i = 0; i < pairs.length; i++) await quad(O, pairs[i][0], pairs[i][1], G)(ctx, () => Promise.resolve());
      return next();
    },
    { sourceFuncName: "_blanknode" },
  );
}
export default blanknode;
