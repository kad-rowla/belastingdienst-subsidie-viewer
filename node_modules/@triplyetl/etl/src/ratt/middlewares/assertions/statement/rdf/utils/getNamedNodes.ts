import { isStatic } from "../../../term/str.js";
import { getFactory } from "@triplydb/data-factory";
import { getValFromTermGetter, TermGetter } from "../../../term/getter.js";
import { Context, Etl, Key } from "../../../../../../generic/index.js";
import { NamedNode } from "@triplydb/data-factory/Terms.js";
import { isKey } from "../../../../../../generic/Context.js";
import * as TriplyIri from "@triplydb/iri";
import { once } from "lodash-es";
const dataFactory = once(() => getFactory({ skipValidation: Etl.skipValidation }));
export const getNamedNodes = (ctx: Context, value: Key | TermGetter<NamedNode>): NamedNode[] => {
  if (isStatic(value)) {
    try {
      TriplyIri.validate(value.toString());
      return [dataFactory().namedNode(value.toString())];
    } catch (e) {
      throw new Error(`Could not make the static string '${value.toString()}' into a valid Iri/NamedNode`);
    }
  } else if (isKey(value)) {
    return [ctx.getIri(value)];
  } else {
    return getValFromTermGetter(ctx, value);
  }
};
