import { isStatic, StaticString } from "../../../term/str.js";
import { castArray, isFunction, once } from "lodash-es";
import { coerceLiteral } from "./coerceLiteral.js";
import { ObjectLiterals } from "../quad.js";
import { getFactory } from "@triplydb/data-factory";
import { getValFromTermGetter, TermGetter } from "../../../term/getter.js";
import { Context, Etl } from "../../../../../../generic/index.js";
import { isNamedNode, isLiteral } from "../../../../../../utils/asserts.js";
import { isKey, Key } from "../../../../../../generic/Context.js";
import { Literal, NamedNode } from "@triplydb/data-factory/Terms.js";

const DataFactory = once(() => getFactory({ skipValidation: Etl.skipValidation }));

export const getObjects = (
  ctx: Context,
  value:
    | Key
    | Key[]
    | StaticString
    | StaticString[]
    | ObjectLiterals
    | ObjectLiterals[]
    | TermGetter<NamedNode | Literal | Key>,
): Array<NamedNode | Literal> => {
  if (isFunction(value)) {
    return getValFromTermGetter(ctx, value);
  } else if (isNamedNode(value) || isLiteral(value)) {
    return [value];
  }
  const objects: Array<NamedNode | Literal> = [];
  castArray(value).forEach((val) => {
    if (isStatic(val)) objects.push(DataFactory().literal(val.toString()));
    // first test for string primitives, they are keys:
    else if (isKey(val)) {
      castArray(ctx.getAny(val)).forEach((v) =>
        objects.push(isNamedNode(v) ? v : coerceLiteral(v, undefined, val.toString())),
      );
    } else {
      objects.push(isNamedNode(val) ? val : coerceLiteral(val));
    }
  });
  return objects;
};
