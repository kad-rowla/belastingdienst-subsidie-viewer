import { Middleware, MiddlewareList } from "../../../../generic/index.js";
import { convertMwListToMiddleware } from "../../../../utils/index.js";
import quad, { isSPG, Pair, SPG } from "./rdf/quad.js";

function _pairs(graphOrSubject: SPG, subjectOrPair: SPG | Pair, ...pairs: Pair[]): MiddlewareList {
  let S: SPG, G: SPG | undefined;
  if (isSPG(subjectOrPair)) {
    G = graphOrSubject;
    S = subjectOrPair;
  } else {
    S = graphOrSubject;
    pairs = [subjectOrPair, ...pairs];
  }
  return pairs.map((pair) => quad(S, pair[0], pair[1], G));
}

/**
 * Asserts multiple triples with the same subject term.
 *
 * @remarks
 * This middleware provides shorthand notation for assertions that can also be
 * made with multiple {@link triple} assertions.  The notational convenience
 * of this middleware is similar to predicate lists in TriG, Turtle, and
 * SPARQL.
 *
 * @param subject - The subject term of the asserted triples.
 *
 * @param pairs - Zero or more pairs.  Each pair is an array with a predicate
 * term and an object term (in that order).  Every distinct element in the
 * `pairs` array results in a distinct triple assertion.
 *
 * @example
 * The following snippet asserts a preferred label and an alternative label
 * for cities:
 *
 * ```ts
 * fromJson([
 *   { name: 'London', alt: 'Home of the Big Ben' },
 *   { name: 'Ney York', alt: 'The Big Apple' },
 * ]),
 * pairs(iri(prefix.city, 'name'),
 *   [skos.prefLabel, literal('name', lang.en)],
 *   [skos.altLabel, literal('alt', lang.en)],
 * ),
 * ```
 *
 * This results in the following 4 linked data assertions:
 *
 * ```ttl
 * city:London
 *   skos:prefLabel 'London'@en;
 *   skos:altLabel 'Home of the Big Ben'@en.
 * city:New York
 *   skos:prefLabel 'New York'@en;
 *   skos:altLabel 'The Big Apple'@en.
 * ```
 */
function pairs(graph: SPG, subject: SPG, ...pairs: Pair[]): Middleware;
function pairs(subject: SPG, ...pairs: Pair[]): Middleware;
function pairs(graphOrSubject: SPG, subjectOrPair: SPG | Pair, ...pairs: Pair[]): Middleware {
  return convertMwListToMiddleware(_pairs(graphOrSubject, subjectOrPair, ...pairs), "_pairs");
}

export default pairs;
