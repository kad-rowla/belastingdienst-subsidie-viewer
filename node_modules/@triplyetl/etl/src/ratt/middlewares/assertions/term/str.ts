/**
 * This module holds the code for typing string primitives as a 'static string'.
 * By this we mean that in almost all cases Etl will use string primitives as
 * a key for a record. But sometimes it is usefull to provide a regular string
 * to a middleware.
 *
 * The name of this function (`str`) is taken from the SPARQL function [`str`](https://www.w3.org/TR/sparql11-query/#func-str)
 */

interface IStaticString {
  static: String;
  key: string;
  regexp: RegExp;
  typeOfStatic: boolean;
}

export class StaticString extends String implements IStaticString {
  type = "StaticString";

  constructor(value: any) {
    super(value);
  }

  public get static(): String {
    return new String(this.toString());
  }

  public get key(): string {
    return this.toString();
  }

  public get regexp(): RegExp {
    return new RegExp(this.toString());
  }

  public get typeOfStatic(): boolean {
    return true;
  }

  /**
   *
   * @returns The first letter in uppercase, the rest in lowercase
   */
  public capitalize(): string {
    return this._capitalize(this.toString());
  }

  private _capitalize(word: string): string {
    if (word === "") return word;
    else return word[0].toUpperCase() + word.slice(1).toLowerCase();
  }

  /**
   * Note: this function will match all whitespace like characters an replaces them with a regual space character:
   * - space character
   * - tab character
   * - carriage return character
   * - new line character
   * - vertical tab character
   * - form feed character
   *
   * @returns The first letter of each word in uppercase, the rest in lowercase
   */
  public capitalizeWords(): string {
    const str = this.toString();
    return str
      .split(/\s/)
      .map((word) => this._capitalize(word))
      .join(" ");
  }
}

export function isStatic(value: any): value is StaticString {
  return (
    typeof value === "object" && Object.prototype.hasOwnProperty.call(value, "type") && value.type === "StaticString"
  );
}

// TODO @DocumentationTeam: add TS doc comment here
export default function str(value: any): StaticString {
  return new StaticString(value);
}
