import { NamedNode } from "@triplydb/data-factory/Terms.js";
import { TermGetter } from "./getter.js";
import { castArray, get } from "lodash-es";
import str, { isStatic, StaticString } from "./str.js";
import { Context, Key } from "../../../../generic/index.js";
import { unknownValToIri } from "../../../../utils/coercions.js";
import { Iri } from "@triplyetl/vocabularies";
import { isIri } from "../../../../utils/asserts.js";

// TODO @DocumentationTeam: add TS doc comment here
export function iris(key: string | Array<string | StaticString>): TermGetter<NamedNode>;
export function iris(prefix: Iri, key?: string | Array<string | StaticString>): TermGetter<NamedNode>;
export function iris(
  keyOrPrefix: Iri | Key | Array<Key | StaticString>,
  possibleKey?: string | Array<string | StaticString>,
): TermGetter<NamedNode> {
  return (ctx: Context) => {
    if (isIri(keyOrPrefix)) {
      const content: Array<string | StaticString> = [];
      castArray(possibleKey).forEach((possibleKey) => {
        if (!isStatic(possibleKey)) {
          if (!ctx.hasKey(possibleKey))
            throw new Error(`The key '${possibleKey}' is missing, unable to get a Iri values.`);
          ctx.getArray(possibleKey, "string").map((val) => content.push(str(val)));
        } else {
          content.push(possibleKey);
        }
      });
      if (content.length === 0) {
        throw Error("Can not create Iri's using a prefix function with no local values.");
      }
      return content.map((key) =>
        unknownValToIri(isStatic(key) ? key.toString() : get(ctx.record, key), isStatic(key) ? `str('${key}')` : key, {
          prefix: keyOrPrefix,
        }),
      );
    } else {
      const content: Array<string | StaticString> = [];
      castArray(keyOrPrefix).forEach((keyOrPrefix) => {
        if (!isStatic(keyOrPrefix)) {
          if (!ctx.hasKey(keyOrPrefix))
            throw new Error(`The key '${keyOrPrefix}' is missing, unable to get a Iri values.`);
          ctx.getArray(keyOrPrefix, "string").map((val) => content.push(str(val)));
        } else {
          content.push(keyOrPrefix);
        }
      });
      if (content.length === 0) {
        throw Error("Can not create Iri's using a prefix function with no local values.");
      }
      return content.map((key) =>
        unknownValToIri(isStatic(key) ? key.toString() : get(ctx.record, key), isStatic(key) ? `str('${key}')` : key),
      );
    }
  };
}

export default iris;
