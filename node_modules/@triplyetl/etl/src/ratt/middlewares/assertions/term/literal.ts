import { Literal, NamedNode } from "@triplydb/data-factory/Terms.js";
import { TermGetter } from "./getter.js";
import { StaticString } from "./str.js";
import literals from "./literals.js";
import { Key } from "../../../../generic/index.js";
import { LanguageTag } from "@triplyetl/vocabularies";

export type LanguageTagOrDataType = string | StaticString | LanguageTag | NamedNode;

/**
 * Creates a literal based on a dynamic lexical form and a static datatype IRI or
 * language tag:
 *
 *   - `literal(literal)`
 *   - `literal(lexicalFormKey)` creates a typed literal with datatype IRI `xsd:string`.
 *   - `literal(lexicalFormKey, datatypeIri)` creates a typed literal.
 *   - `literal(lexicalFormKey, languageTag)` creates a language-tagged string.
 *
 * How to use
 * ----------
 *
 * First determine whether you want to create a language-tagged string or any
 * other kind of literal.
 *
 * For creating a language-tagged string:
 *
 *   1. Determine the language tag (e.g. `lang.nl`) that you want to use.
 *   2. Determine the key (`key.a`) that contains the lexical form.
 *
 * For any other kind of literal:
 *
 *   1. Determine the datatype IRI (e.g. `xsd.integer`) that you want to use.
 *      If you want to use `xsd.string` you do not need to specify a datatype IRI.
 *   2. Determine the key (`key.b`) that contains the lexical form.
 *
 * Examples
 * --------
 *
 * Create a language-tagged string:
 * ```ts
 * import { literal } from '@triplydb/ratt/lib/middlewares'
 * pipeline.use(
 *   triple(node.city, skos.prefLabel, literal(key.a, lang.nl)),
 *   triple(node.city, vocab.inhabitants, literal(key.b, xsd.nonNegativeInteger)),
 *   triple(node.city, dct.identifier, literal(key.c)),
 * )
 * ```
 *
 * This creates the following linked data (made-up example):
 * ```ttl
 * id:amsterdam
 *   skos:prefLabel 'Amsterdam'@nl
 *   vocab:inhabitants '800000'^^xsd:nonNegativeInteger
 *   dct:identifier '0200'.
 * ```
 */
export function literal(
  lexicalFormKey: Key | StaticString,
  languageTagOrDataType: LanguageTagOrDataType,
): TermGetter<Literal> {
  return literals([lexicalFormKey], languageTagOrDataType);
}

export default literal;
