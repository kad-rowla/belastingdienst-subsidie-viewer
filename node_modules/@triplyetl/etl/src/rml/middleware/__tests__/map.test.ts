import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import map from "../map.js";
import { Etl, Middleware, Source, declarePrefix } from "../../../generic/index.js";
import { getFactory } from "@triplydb/data-factory";
import { a } from "@triplyetl/vocabularies";

chai.use(chaiAsPromised);
const assert = chai.assert;

const testMw = (): Middleware => async (ctx, _) => {
  const prefix = declarePrefix("http://myprefix.org/");
  assert.equal(ctx.store.size, 3);
  assert.equal(
    ctx.store.getQuads({ predicate: prefix.concat("hasName"), object: getFactory().literal("Hello World") }).length,
    1,
  );
  assert.equal(
    ctx.store.getQuads({ predicate: prefix.concat("says"), object: getFactory().literal("It worked!") }).length,
    1,
  );
  assert.equal(ctx.store.getQuads({ predicate: a, object: prefix.concat("TestMapping") }).length, 1);
};

describe("RML", async () => {
  it("should work with RocketRML's example using `parseFile`", async () => {
    const etl = new Etl();
    etl.use(map(Source.file("src/__tests__/resources/rml/mapping.ttl")), testMw());
    await etl.run();
  });
  it("should work with RocketRML's example using `parseFileLive`", async () => {
    const etl = new Etl();
    etl.use(
      map(Source.file("src/__tests__/resources/rml/mappingLive.ttl"), {
        "input.json": Source.file("src/__tests__/resources/rml/input.json"),
      }),
      testMw(),
    );
    await etl.run();
  });
});
