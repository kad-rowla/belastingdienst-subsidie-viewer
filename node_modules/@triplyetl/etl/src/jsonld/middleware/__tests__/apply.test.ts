import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { getEtlForTestingNoExtractor } from "../../../ratt/__tests__/getEtlForTesting.js";
import apply from "../apply.js";
import { Etl, Iri, Source, compareGraphs, fromJson } from "../../../generic/index.js";
import { getFactory } from "@triplydb/data-factory";
import { a, sdo, xsd } from "@triplyetl/vocabularies";

chai.use(chaiAsPromised);
const assert = chai.assert;

describe("JSON-LD", async () => {
  describe("Examples from issue #91 using JSON object", async () => {
    // https://git.triply.cc/triply/etl/-/issues/91#example-1
    it("should work with example 1", async () => {
      const etl = getEtlForTestingNoExtractor();
      const vocab = Iri("https://triplydb.com/model/def/");
      const context = { "@context": { "@vocab": vocab.toString() } };
      etl.use(fromJson([{ Name: "John", Age: 31 }]), apply(context), async (ctx, next) => {
        assert.equal(ctx.store.size, 2);
        const Age = ctx.store.getObjects(null, vocab.concat("Age"), null);
        assert.equal(Age.length, 1);
        assert.isTrue(Age[0].equals(getFactory().literal(31, xsd.integer)));
        const Name = ctx.store.getObjects(null, vocab.concat("Name"), null);
        assert.equal(Name.length, 1);
        assert.isTrue(Name[0].equals(getFactory().literal("John")));
        return next();
      });
      await etl.run();
    });

    // https://git.triply.cc/triply/etl/-/issues/91#example-2
    it("should work with example 2", async () => {
      const etl = getEtlForTestingNoExtractor();
      const base = Iri("https://example.com/id/");
      etl.use(
        fromJson([{ id: "123", name: "John Doe", type: "Person" }]),
        apply({
          "@context": {
            "@base": base.toString(),
            "@vocab": sdo.toString(),
            id: "@id",
            name: { "@language": "en" },
            type: "@type",
          },
        }),
        async (ctx, next) => {
          assert.equal(ctx.store.size, 2);
          const q1 = ctx.store.getQuads(base.concat("123"), a, sdo.Person, null);
          assert.equal(q1.length, 1);
          const q2 = ctx.store.getQuads(base.concat("123"), sdo.name, getFactory().literal("John Doe", "en"), null);
          assert.equal(q2.length, 1);
          return next();
        },
      );
      await etl.run();
    });
  });

  describe("Examples from issue #91 using JSON from Source", async () => {
    // https://git.triply.cc/triply/etl/-/issues/91#example-1
    it("should work with example 1", async () => {
      const etl = getEtlForTestingNoExtractor();
      const vocab = Iri("https://triplydb.com/model/def/");
      etl.use(
        fromJson([{ Name: "John", Age: 31 }]),
        apply(Source.file("src/__tests__/resources/json-ld/example1.jsonld")),
        async (ctx, next) => {
          assert.equal(ctx.store.size, 2);
          const Age = ctx.store.getObjects(null, vocab.concat("Age"), null);
          assert.equal(Age.length, 1);
          assert.isTrue(Age[0].equals(getFactory().literal(31, xsd.integer)));
          const Name = ctx.store.getObjects(null, vocab.concat("Name"), null);
          assert.equal(Name.length, 1);
          assert.isTrue(Name[0].equals(getFactory().literal("John")));
          return next();
        },
      );
      await etl.run();
    });

    // https://git.triply.cc/triply/etl/-/issues/91#example-2
    it("should work with example 2", async () => {
      const etl = getEtlForTestingNoExtractor();
      const base = Iri("https://example.com/id/");
      etl.use(
        fromJson([{ id: "123", name: "John Doe", type: "Person" }]),
        apply(Source.file("src/__tests__/resources/json-ld/example2.jsonld")),
        async (ctx, next) => {
          assert.equal(ctx.store.size, 2);
          const q1 = ctx.store.getQuads(base.concat("123"), a, sdo.Person, null);
          assert.equal(q1.length, 1);
          const q2 = ctx.store.getQuads(base.concat("123"), sdo.name, getFactory().literal("John Doe", "en"), null);
          assert.equal(q2.length, 1);
          return next();
        },
      );
      await etl.run();
    });
  });

  describe("should work with examples from https://json-ld.org/playground", () => {
    const doIt = (label: string) => {
      it(label, async () => {
        const etl = new Etl();
        etl.use(
          apply(Source.file(`src/__tests__/resources/json-ld/${label}.jsonld`)),
          compareGraphs(Source.file(`src/__tests__/resources/json-ld/${label}.nt`)),
        );
        await etl.run();
      });
    };
    doIt("Person");
    doIt("Event");
    doIt("Place");
    doIt("Product");
    doIt("Recipe");
    doIt("Library");
    doIt("Activity");
  });
});
