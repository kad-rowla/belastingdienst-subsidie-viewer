import { assert } from "chai";
import { unknownValToIri } from "../coercions.js";
import { getFactory } from "@triplydb/data-factory";

const DataFactory = getFactory();
describe("Coercions", function () {
  describe("With illegal IRIs", function () {
    it("Unknown value to IRI when string", async function () {
      assert.throw(
        () => unknownValToIri("https://en.wiktionary ^\\.org/wiki/Ρόδος"),
        /The IRI includes the invalid character/,
      );
      // const stringValue = unknownValToIri("https://en.wiktionary ^\\.org/wiki/Ρόδος").value;
      // expect(stringValue).to.equal("https://en.wiktionary%20%5E%5C.org/wiki/Ρόδος");
    });
    it("Unknown value to IRI when namedNode", async function () {
      assert.throw(
        () => unknownValToIri(DataFactory.namedNode("https://en.wiktionary ^\n.org/wiki/Ρόδος")),
        /The IRI includes the invalid character/,
      );
      // // The test here makes sense to still use 'n3' as Triply Datafactory will not create a 'NamedNode' with illegal characters
      // const example = unknownValToIri(DataFactory.namedNode("https://en.wiktionary ^\n.org/wiki/Ρόδος"));
      // expect(example.value).to.equal("https://en.wiktionary%20%5E%0A.org/wiki/Ρόδος");
    });
  });
});
