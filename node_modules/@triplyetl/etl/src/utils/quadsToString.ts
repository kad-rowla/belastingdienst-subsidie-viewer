import { NamedNode, Quad } from "@triplydb/data-factory/Terms.js";
import { Iri } from "@triplyetl/vocabularies";
import { MimeFormat, Prefixes, Writer, WriterOptions as N3WriterOptions } from "n3";

export interface WriterOptions extends N3WriterOptions {
  format?: MimeFormat;
  prefixes?: Prefixes<NamedNode | string> | undefined;
  iris?: { [key: string]: Iri };
}

// TODO @DocumentationTeam: add TS doc comment here
export default (quads: Quad[], options?: WriterOptions): string => {
  const prefixes: Prefixes<NamedNode | string> = {
    rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    rdfs: "http://www.w3.org/2000/01/rdf-schema#",
    sdo: "https://schema.org/",
  };

  if (options?.prefixes) {
    for (const key in options.prefixes) {
      prefixes[key] = options.prefixes[key];
    }
  }

  if (options?.iris) {
    for (const key in options.iris) {
      prefixes[key] = options.iris[key];
    }
  }

  const writerOptions: N3WriterOptions = {
    format: options?.format ?? "Turtle",
    prefixes,
  };

  const writer = new Writer(writerOptions);
  writer.addQuads(quads);
  let resultString = "";
  writer.end((_, result: string) => {
    resultString = result;
  });
  return resultString;
};
