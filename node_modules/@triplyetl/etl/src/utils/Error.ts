import { TriplyDbJsError } from "@triply/triplydb/utils/Error.js";
import { Literal, NamedNode, Quad } from "@triplydb/data-factory/Terms.js";
import { Location } from "get-current-line";
import { Change } from "diff";
import { Record } from "../generic/Record.js";
import path from "path";
import { TermGetter } from "../ratt/middlewares/assertions/term/getter.js";
export interface TraceInfo {
  recordDiff: Change[];
  quadsDiff: Change[];
  recordAtStart: any;
  quadsAtStart: string;
  fromMwIndex: Array<number>;
  isTraceDebug: boolean; // refers to the trace middleware
  isTraceError: boolean; // referes to tracing after an error
}
export type SerializedTraceInfo = Omit<TraceInfo, "recordDiff" | "quadsDiff">;
export class EtlError extends Error {
  constructor(e?: Error | TriplyDbJsError) {
    super(e?.message);
    if (e) this.setRootCause(e);
  }
  public mw: any;
  private rootCause?: Error | TriplyDbJsError;
  public stoppedAtHead = false;
  public timedout = false;
  public recordId?: number;
  public record?: Record;
  public quads?: Quad[];
  public trace?: TraceInfo;
  public callSite?: Location;
  public addQuad?: [
    TermGetter<NamedNode | Literal>,
    TermGetter<NamedNode | Literal>,
    TermGetter<NamedNode | Literal>,
    TermGetter<NamedNode | Literal>,
  ];

  public setMessage(msg: string) {
    this.message = msg;
    return this;
  }
  public setRecord(record: Record) {
    this.record = record;
    return this;
  }
  public setRootCause(e: Error | TriplyDbJsError) {
    this.rootCause = e;

    return this;
  }

  public setTraceInfo(traceInfo: TraceInfo) {
    this.trace = traceInfo;
    return this;
  }
  public setRecordId(recordId: number) {
    this.recordId = recordId;
    return this;
  }
  public setStoppedAtHead() {
    this.stoppedAtHead = true;
    return this;
  }
  public setTimedout() {
    this.timedout = true;
    return this;
  }

  public getTriplyDbJsErrorInfo() {
    if (this.rootCause instanceof TriplyDbJsError) {
      return { statusCode: this.rootCause.statusCode, context: this.rootCause.context };
    }
  }

  public setCallSite(callSite?: Location) {
    this.callSite = callSite;
    if (this.callSite?.file) {
      this.callSite.file = path.relative(process.cwd(), this.callSite.file);
    }
    return this;
  }
  public getErrForStacktrace() {
    // When printing this error, use the one at the lowest level to avoid stacktraces
    // where we recreate an error object and then rethrow
    return this.rootCause || this;
  }
}

export function getErr(e?: Error | EtlError | TriplyDbJsError): EtlError {
  if (e && e instanceof EtlError) {
    return e;
  }
  const err = new EtlError(e);
  // CaptureStackTrace is node-specific, so lets check if the function exists
  Error.captureStackTrace?.(err, getErr);
  return err;
}
