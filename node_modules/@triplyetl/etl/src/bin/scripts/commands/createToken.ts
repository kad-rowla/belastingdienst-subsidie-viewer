import { CommandModule } from "yargs";
import axios from "axios";
import inquirer, { Answers, QuestionCollection } from "inquirer";
import { packageJson, tokenFileExists, writeToTokenFile } from "../utils.js";
import chalk from "chalk";
import Etl from "../../../generic/Etl.js";

const defaultTokeName = packageJson("name") ?? "TriplyETL CLI";
interface IArguments {
  hostname: string;
  nameToken: string;
  accountName?: string;
}

interface ICredentials {
  email: string;
  password: string;
}

const questions: QuestionCollection = [
  {
    name: "hostname",
    type: "input",
    message: "The hostname of the TriplyDB instance",
    default: "triplydb.com",
    when: true,
  },
  { name: "nameToken", type: "input", message: "The name of the token", default: defaultTokeName, when: true },
  { name: "email", type: "input", message: "Your TriplyDB account e-mail", when: true },
  { name: "password", type: "password", message: "Your TriplyDB account password", when: true },
];

// eslint-disable-next-line @typescript-eslint/no-extraneous-class
class Arguments {
  private static args: ICredentials & IArguments & { [key: string]: any };

  constructor(answers: Answers) {
    Arguments.args = {
      hostname: answers.hostname,
      nameToken: answers.nameToken,
      email: answers.email,
      password: answers.password,
    };
  }

  public static getArgs(): ICredentials & IArguments {
    return Arguments.args;
  }

  public static setArg(key: string, value: any): ICredentials & IArguments {
    Arguments.args[key] = value;
    return Arguments.args;
  }

  public static getArg(key: string, defaultValue: string = ""): string {
    return Arguments.args[key] ?? defaultValue;
  }

  public static getUrl(): URL {
    const url = new URL(`https://${Arguments.args.hostname}`);
    if (url === undefined) {
      throw new Error(`Invalid hostname '${Arguments.args.hostname}'`);
    }
    return url;
  }
}

const cmd: CommandModule = {
  command: "create-token",
  describe: "Create a new TriplyDB API Token",
  builder: {
    hostname: {
      alias: "h",
      type: "string",
      // default: 'triplydb.com',
      describe: "TriplyDB instance hostname",
      requiresArg: true,
    },
    email: {
      alias: "e",
      type: "string",
      describe: "Your e-mailadres",
      requiresArg: true,
    },
  },
  handler: async (argv) => {
    if (Etl.token) {
      console.warn(chalk.blue("A token already exists, no need to generate one now."));
      process.exit(0);
    }
    if (tokenFileExists()) {
      console.warn(chalk.bgBlue("A `.env` file already exists, not writing token to file but to STDOUT"));
    }
    const initialAnswers = { email: argv.email, hostname: argv.hostname };
    inquirer
      .prompt(questions, initialAnswers)
      .then(async (answers) => {
        void new Arguments(answers);
        const credentials: ICredentials = { email: answers.email, password: answers.password };
        return login(answers.hostname, credentials);
      })
      .then(async (cookie) => createToken(cookie))
      .then((token) => {
        if (tokenFileExists()) {
          console.info(chalk.green(`TRIPLYDB_TOKEN=${token}`));
        } else {
          writeToTokenFile(`TRIPLYDB_TOKEN=${token}\n`);
          console.info(chalk.green("Your token is generated and stored in `./.env"));
        }
      })
      .catch((e) => console.error(e.message));
  },
};
export default cmd;

async function login(_hostname: string, credentials: ICredentials): Promise<string[] | undefined> {
  return new Promise((resolve, reject) => {
    const url = Arguments.getUrl();
    url.pathname = "/_api/web/auth/local/login";
    axios
      .post(url.toString(), credentials)
      .then((res) => {
        Arguments.setArg("accountName", res.data.accountName);
        resolve(res.headers["set-cookie"]);
      })
      .catch((e) => reject(e));
  });
}

async function createToken(Cookie: string[] | undefined): Promise<string> {
  return new Promise((resolve, reject) => {
    if (Cookie === undefined) {
      reject(new Error("A JWT token is needed at this moment."));
    }
    const url = Arguments.getUrl();
    const data = {
      description: Arguments.getArgs().nameToken,
      scopes: { ds: ["a"] },
    };
    url.pathname = `/_api/accounts/${Arguments.getArg("accountName")}/tokens`;
    axios
      .post(url.toString(), data, { headers: { Cookie, "Content-Type": "application/json" } })
      .then((res) => resolve(res.data.token))
      .catch((e) => reject(e));
  });
}
