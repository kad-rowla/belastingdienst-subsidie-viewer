import App from "@triply/triplydb/App.js";
import chalk from "chalk";
import inquirer, { QuestionCollection } from "inquirer";
import { CommandModule } from "yargs";
import { Etl } from "../../../generic/index.js";

const cmd: CommandModule = {
  command: "delete-queries",
  describe: "Bulk deleting of Queries",
  builder: {},
  handler: async (_argv) => {
    if (!Etl.token) {
      console.warn(chalk.bgRed("No TriplyDB Token found, create one with the `create-token` command"));
      process.exit(1);
    }
    const app = App.get(Etl.token);
    const accounts: Array<{ name: string; value: string }> = [];
    for await (const account of app.getAccounts()) {
      const info = await account.getInfo();
      accounts.push({
        name: `${info.name ?? info.accountName} ${info.type === "org" ? "(org)" : ""}`,
        value: info.accountName,
      });
    }
    const questionsAccount: QuestionCollection = [
      {
        name: "accountName",
        message: "Choose the account containing the queries you want to delete",
        type: "list",
        choices: accounts,
      },
    ];
    let defaultAnswerAccounts;
    if (accounts.length === 1) {
      defaultAnswerAccounts = { dataset: accounts[0].value };
    }
    const accountName: string = (await inquirer.prompt(questionsAccount, defaultAnswerAccounts)).accountName;

    const account = await app.getAccount(accountName);
    const foundQueries: Array<{ name: string; value: string }> = [];
    for await (const query of account.getQueries()) {
      const info = await query.getInfo();
      foundQueries.push({
        value: info.name,
        name: `${info.description === "" ? info.name : info.description} â€¢ ${info.numberOfVersions} version(s)`,
      });
    }
    if (foundQueries.length === 0) {
      console.warn(chalk.bgMagenta("No queries found"));
      process.exit(0);
    }
    const questions: QuestionCollection = [
      {
        name: "queries",
        message: "Choose the queries you want to delete",
        type: "checkbox",
        choices: foundQueries,
      },
    ];
    inquirer
      .prompt(questions)
      .then((answers) => {
        const queries: string[] = answers.queries;
        queries.forEach((name) => {
          account
            .getQuery(name)
            .then(async (query) => query.delete())
            .then((_) => console.info(chalk.green(`query '${name}' deleted`)))
            .catch((e) => console.error(e.message.bgRed));
        });
      })
      .catch((e) => console.error(e.message.bgRed));
  },
};
export default cmd;
