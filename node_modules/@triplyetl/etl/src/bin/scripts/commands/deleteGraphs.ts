import App from "@triply/triplydb/App.js";
import chalk from "chalk";
import inquirer, { QuestionCollection } from "inquirer";
import { CommandModule } from "yargs";
import { Etl } from "../../../generic/index.js";

const cmd: CommandModule = {
  command: "delete-graphs",
  describe: "Bulk deleting of Graphs",
  builder: {
    accountName: {
      alias: "a",
      type: "string",
      describe: "A TriplyDB accountname",
      requiresArg: true,
    },
  },
  handler: async (argv) => {
    if (!Etl.token) {
      console.warn(chalk.bgRed("No TriplyDB Token found, create one with the `create-token` command"));
      process.exit(1);
    }
    const app = App.get(Etl.token);
    let accountName: string;
    if (argv.accountName === undefined) {
      const accounts: Array<{ name: string; value: string }> = [];
      for await (const account of app.getAccounts()) {
        const info = await account.getInfo();
        accounts.push({
          name: `${info.name ?? info.accountName} ${info.type === "org" ? "(org)" : ""}`,
          value: info.accountName,
        });
      }
      const questionsAccount: QuestionCollection = [
        {
          name: "accountName",
          message: "Choose the account containing the datasets with the graphs you want to delete",
          type: "list",
          choices: accounts,
        },
      ];
      let defaultAnswerAccounts;
      if (accounts.length === 1) {
        defaultAnswerAccounts = { dataset: accounts[0].value };
      }
      accountName = (await inquirer.prompt(questionsAccount, defaultAnswerAccounts)).accountName;
    } else {
      accountName = argv.accountName as unknown as string;
    }

    const account = await app.getAccount(accountName);
    const foundDatasets: Array<{ name: string; value: string }> = [];
    for await (const dataset of account.getDatasets()) {
      const info = await dataset.getInfo();
      foundDatasets.push({ value: info.name, name: info.displayName });
    }
    if (foundDatasets.length === 0) {
      console.warn(chalk.bgMagenta("No datasets found"));
      process.exit(0);
    }
    const questions: QuestionCollection = [
      {
        name: "dataset",
        message: `Choose the dataset of account '${accountName}' containing the graphs you want to delete`,
        type: "list",
        choices: foundDatasets,
      },
    ];
    let defaultAnswer;
    if (foundDatasets.length === 1) {
      defaultAnswer = { dataset: foundDatasets[0].value };
    }
    inquirer
      .prompt(questions, defaultAnswer)
      .then((answers) => {
        const dataset: string = answers.dataset;
        account
          .getDataset(dataset)
          .then(async (ds) => {
            const foundGraphs: Array<{ name: string; value: string }> = [];
            for await (const graph of ds.getGraphs()) {
              const info = await graph.getInfo();
              foundGraphs.push({
                value: info.graphName,
                name: `${info.graphName}, ${info.numberOfStatements} statements`,
              });
            }
            return foundGraphs;
          })
          .then((choices) => {
            if (choices.length === 0) {
              console.warn(chalk.bgMagenta("No graphs found"));
              process.exit(0);
            }
            const questions: QuestionCollection = [
              {
                name: "graphs",
                message: "Choose the graphs you want to delete",
                type: "checkbox",
                choices,
              },
              { name: "dataset", type: "input" },
            ];
            return inquirer.prompt(questions, { dataset });
          })
          .then((answers) => {
            account
              .getDataset(answers.dataset as string)
              .then((ds) => {
                const graphs: string[] = answers.graphs;
                graphs.forEach((graph) => {
                  ds.getGraph(graph)
                    .then(async (graph) => graph.delete())
                    .then((_) =>
                      console.info(
                        chalk.green(`graph '${graph}' of dataset '${accountName}/${answers.dataset as string}' deleted`)
                      )
                    )
                    .catch((e) => console.error(e.message.bgRed));
                });
              })
              .catch((e) => console.error(e.message.bgRed));
          })
          .catch((e) => console.error(e.message.bgRed));
      })
      .catch((e) => console.error(e.message.bgRed));
  },
};
export default cmd;
