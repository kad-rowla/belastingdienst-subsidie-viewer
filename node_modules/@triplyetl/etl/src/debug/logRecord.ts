import path, { dirname } from "path";
import { Key, Middleware } from "../generic/index.js";
import { addMwCallSiteToError, safeStringify } from "../utils/index.js";
import { getErr } from "../utils/Error.js";
import * as fs from "fs";

// TODO @DocumentationTeam: add TS doc comment here
export default function logRecord(opts?: { key?: Key; stop?: boolean; destination?: string }): Middleware {
  return addMwCallSiteToError(
    async function _logRecord(ctx, next) {
      const record = safeStringify(opts?.key ? ctx.getAny(opts.key) : ctx.record);
      if (opts?.destination) {
        if (path.extname(opts.destination).toLowerCase() === ".json") {
          fs.mkdirSync(dirname(opts.destination), { recursive: true });
          fs.writeFileSync(opts.destination, record);
        } else {
          throw new Error(
            'Please provide a valid file name for destination with JSON extension (e.g. "logRecord.json", "./data/logRecord.json")',
          );
        }
      } else {
        console.info(record);
      }
      if (opts?.stop) throw getErr().setStoppedAtHead();
      return next();
    },
    { sourceFuncName: "_logRecord" },
  );
}
