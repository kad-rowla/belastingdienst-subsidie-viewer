import chalk from "chalk";
import { Etl } from "../../../generic/index.js";
import App from "@triply/triplydb/App.js";
import { millify } from "millify";
import fs from "fs";
import inquirer from "inquirer";
const CONTENT = {
    intro: "",
    toc: "",
    body: "",
    argv: {},
};
const addContent = (content, section = "body") => {
    const headers = content?.match(/\.H[1-6]/);
    if (headers !== null && headers?.length) {
        headers.forEach((header) => {
            const l = parseInt(header.replace(".H", ""));
            let hash = "";
            // TOC's suck in MD, skipping it for now
            // if (!skip(CONTENT.argv, 'toc')) {
            //   const tocLine = content?.replace(header,'').replace(/<img .+\/>/, '').trim()
            //   const hash = ` {h${l}-${tocLine.trim().replace(/[\W]/g, '-').toLowerCase()}-${Math.floor(Math.random() * 100)}}`
            //   CONTENT.toc += `${' '.repeat(2 * (l -1))}- [${tocLine}](#${hash})\n`
            // }
            content = content?.replace(header, "#".repeat(l)).trim() + `${hash}\n`;
        });
    }
    CONTENT[section] += `${content}\n`;
};
const writeOutput = (filename) => {
    const fd = fs.createWriteStream(filename, { encoding: "utf-8" });
    if (skip(CONTENT.argv, "toc")) {
        CONTENT.toc = "";
    }
    fd.write([CONTENT.intro, CONTENT.toc, CONTENT.body].join("\n"));
    fd.close();
};
export const skip = (argv, key) => argv[`skip-${key}`] !== undefined || argv[`skip-${key}`] === true;
const avatar = (avatarUrl, height = 64) => avatarUrl ? `<img src="${avatarUrl}" height="${height}"/> ` : "";
const cmd = {
    command: "report",
    describe: "Generate a report file that describes the content of the currently configured TriplyDB instance, if any",
    builder: {
        out: {
            alias: "o",
            demandOption: true,
            type: "string",
            describe: "Output file",
            requiresArg: true,
        },
        account: {
            alias: "a",
            type: "string",
            describe: "Limit stats to this account",
            requiresArg: true,
        },
        "skip-prefixes": {
            type: "boolean",
            describe: "Do not list prefixes used",
        },
        "skip-intro": {
            type: "boolean",
            describe: "Do start with generic info on the instance",
        },
        "skip-queries": {
            type: "boolean",
            describe: "Do not list queries",
        },
        "skip-stories": {
            type: "boolean",
            describe: "Do not list stories",
        },
        "skip-datasets": {
            type: "boolean",
            describe: "Do not list dataset",
        },
        "skip-graphs": {
            type: "boolean",
            describe: "Do not list graphs",
        },
        "skip-assets": {
            type: "boolean",
            describe: "Do not list assets",
        },
        "skip-services": {
            type: "boolean",
            describe: "Do not list services",
        },
        "skip-organisations": {
            type: "boolean",
            describe: "Do not list organisations",
        },
        "skip-users": {
            type: "boolean",
            describe: "Do not list users",
        },
        interactive: {
            type: "boolean",
            alias: "i",
            describe: "Enter interactive mode",
        },
        // "skip-toc": {
        //   type: "boolean",
        //   describe: "Do not generate a Table of Content",
        // },
    },
    handler: async (_argv) => {
        if (!Etl.token) {
            console.error(chalk.yellow("No token found, you might want to create one with the 'create-token' command."));
            process.exit(2);
        }
        if (_argv.interactive) {
            const choices = [
                { checked: true, value: "prefixes", name: "Prefixes (global and per dataset)" },
                { checked: true, value: "intro", name: "Description for instance" },
                { checked: true, value: "queries", name: "Stored SPARQL Queries" },
                { checked: true, value: "datasets", name: "Datasets" },
                { checked: true, value: "assets", name: "Assets (only when Datasets are included)" },
                { checked: true, value: "stories", name: "Stories (only when Datasets are included)" },
                { checked: true, value: "graphs", name: "Graphs (only when Datasets are included)" },
                { checked: true, value: "services", name: "Services (only when Datasets are included)" },
                { checked: true, value: "users", name: "Users" },
                { checked: true, value: "organisations", name: "Organisations" },
            ];
            const answers = await inquirer.prompt({
                name: "report",
                type: "checkbox",
                message: "Select the options for your report:",
                choices,
            });
            for (const choice of choices) {
                if (!answers.report.includes(choice.value)) {
                    _argv[`skip-${choice.value}`] = true;
                }
            }
        }
        CONTENT.argv = _argv;
        const app = App.get(Etl.token);
        const info = await app.getInfo();
        addContent(`.H1 ${avatar(info.branding.logo)}${info.branding.tagline}\n\n`, "intro");
        if (!skip(_argv, "intro"))
            addContent(`${info.branding.welcomeMessage.replace(/^\#+/, "").trim()}`);
        const consoleUrl = info.consoleUrl ?? "https://triplydb.com/";
        if (!skip(_argv, "intro")) {
            addContent("\n.H2 Description", "intro");
            addContent(`${info.branding.description}`);
        }
        addContent(`\n.H2 TriplyDB instance Information`);
        addContent(`| Property     | Value |\n|--------------|-------|`);
        addContent(`| Name | ${info.branding.name} |`);
        addContent(`| Contact Email | ${info.contactEmail} |`);
        addContent(`| Console URL | ${info.consoleUrl} |`);
        addContent(`| API URL | ${info.apiUrl} |`);
        addContent(`| Version | ${info.version} |`);
        addContent(`| Build Date | ${info.buildDate} |`);
        addContent(`| Enabled Services | ${info.enabledServices.join(", ")} |`);
        if (!skip(_argv, "prefixes")) {
            addContent(`\n.H3 Global prefixes`);
            addContent(`| Namespace | Iri |\n| - | - |`);
            for (const prefix of info.prefixes) {
                addContent(`| ${prefix.prefixLabel} | ${prefix.iri} |`);
            }
        }
        if (info.counts) {
            addContent(`\n.H3 Usage`);
            addContent(`| Type | Count |\n| - | -: |`);
            addContent(`| # Datasets | ${info.counts.datasets} |`);
            addContent(`| # Queries | ${info.counts.queries} |`);
            addContent(`| # Stories | ${info.counts.stories} |`);
        }
        if (_argv.account) {
            if (_argv.account === "me") {
                _argv.account = (await (await app.getAccount()).getInfo()).accountName;
            }
            app
                .getAccount(_argv.account)
                .then(async (account) => {
                await stats(account, consoleUrl, _argv, 2);
            })
                .then((_) => writeOutput(_argv.out))
                .catch((e) => {
                console.error(chalk.yellow(e.message));
            });
        }
        else {
            app
                .getAccount()
                .then((_) => app.getAccounts())
                .then(async (accounts) => {
                const users = [];
                const orgs = [];
                for await (const account of accounts) {
                    const info = await account.getInfo();
                    if ((_argv.account && _argv.account === info.accountName) || !_argv.account) {
                        if (info.type === "org" && !skip(_argv, "organisations")) {
                            orgs.push(await app.getOrganization(info.accountName));
                        }
                        else if (!skip(_argv, "users")) {
                            users.push(await app.getUser(info.accountName));
                        }
                    }
                }
                if (orgs.length > 0) {
                    addContent(`.H2 Organisations`);
                    for (const org of orgs) {
                        await stats(org, consoleUrl, _argv);
                    }
                }
                if (users.length > 0) {
                    addContent(`.H2 Users`);
                    for (const user of users) {
                        await stats(user, consoleUrl, _argv);
                    }
                }
            })
                .then((_) => writeOutput(_argv.out))
                .catch((e) => {
                console.error(chalk.yellow(e.message));
            });
        }
    },
};
export default cmd;
const stats = async (account, consoleUrl, _argv, startLevel = 3) => {
    const info = await account.getInfo();
    addContent(`.H${startLevel} ${avatar(info.avatarUrl)}${info.name ?? info.accountName}`);
    const accountName = info.accountName;
    addContent(`| Property     | Value |\n|--------------|-------|`);
    addContent(`| Accountname | [${info.accountName}](${consoleUrl}/${info.accountName}) |`);
    addContent(`| Name | ${info.name ?? "-"} |`);
    addContent(`| Created | ${info.createdAt} |`);
    addContent(`| # Datasets | ${millify(info.datasetCount ?? 0)} |`);
    addContent(`| # Queries | ${millify(info.queryCount ?? 0)} |`);
    addContent(`| # Stories | ${millify(info.storyCount ?? 0)} |`);
    if (info.type === "user") {
        addContent(`| Role | \`${info.role}\` |`);
        if (info.orgs?.length) {
            addContent(`\n.H${startLevel + 1} Member of organization`);
            addContent(`| Accountname | Name | &nbsp;| \n|--------------|-------|-------|`);
            for (const org of info.orgs) {
                addContent(`| [${org.accountName}](${consoleUrl}/${org.accountName}) | ${org.name} | ${avatar(org.avatarUrl, 32)} |`);
            }
        }
    }
    if (!skip(_argv, "datasets")) {
        const datasets = account.getDatasets();
        let iD = 0;
        for await (const dataset of datasets) {
            if (iD === 0)
                addContent(`.H${startLevel + 1} Datasets`);
            iD++;
            const info = await dataset.getInfo();
            addContent(`.H${startLevel + 2} ${avatar(info.avatarUrl)}${info.displayName.trim() ? info.displayName : info.name}`);
            addContent(info.description ?? "");
            addContent(`| Property     | Value |\n|--------------|-------|`);
            addContent(`| Name | [${info.name}](${consoleUrl}/${accountName}/${info.name}) |`);
            addContent(`| Displayname | ${info.displayName ?? "-"} |`);
            addContent(`| Access Level | ${info.accessLevel} |`);
            addContent(`| Created | ${info.createdAt} |`);
            addContent(`| Updated | ${info.updatedAt} |`);
            addContent(`| License | ${info.license} |`);
            addContent(`| Last graph update | ${info.lastGraphsUpdateTime} |`);
            addContent(`| # Graphs | ${info.graphCount} |`);
            addContent(`| # Statements | ${millify(info.statements)} |`);
            addContent(`| # Services | ${info.serviceCount} |`);
            addContent(`| # Assets| ${millify(info.assetCount)} |`);
            if (info.topics.length)
                addContent(`| Topics | ${info.topics.map((t) => `- ${t}`).join("<br>")} |`);
            else
                addContent(`| Topics | - |`);
            if (info.exampleResources.length)
                addContent(`| Examples | ${info.exampleResources.map((ex) => `- ${ex}`).join("<br>")} |`);
            else
                addContent(`| Examples | - |`);
            if (!skip(_argv, "prefixes")) {
                if (info.prefixes.length) {
                    addContent(`\n.H${startLevel + 3} Prefixes`);
                    addContent(`| Namespace | Iri |\n| - | - |`);
                    for (const prefix of info.prefixes) {
                        addContent(`| ${prefix.prefixLabel} | ${prefix.iri} |`);
                    }
                }
            }
            if (!skip(_argv, "graphs")) {
                const graphs = dataset.getGraphs();
                let iG = 0;
                for await (const graph of graphs) {
                    if (iG === 0) {
                        addContent(`\n.H${startLevel + 3} Graphs`);
                        addContent(`| Graph | Uploaded | # Statements|\n| - | - | -: |`);
                    }
                    iG++;
                    const info = await graph.getInfo();
                    addContent(`| ${info.graphName} | ${info.uploadedAt ?? "-"} | ${millify(info.numberOfStatements)} |`);
                }
            }
            if (!skip(_argv, "assets")) {
                const assets = dataset.getAssets();
                let iA = 0;
                for await (const asset of assets) {
                    if (iA === 0) {
                        addContent(`\n.H${startLevel + 3} Assets`);
                        addContent(`| Name | Created | Filesize| Versions | \n| - | - | -: | -: | `);
                    }
                    iA++;
                    const info = asset.getInfo();
                    addContent(`| ${info.assetName} | ${info.createdAt} | ${info.fileSize} | ${info.versions} |`);
                }
            }
            if (!skip(_argv, "services")) {
                const services = dataset.getServices();
                let iSe = 0;
                for await (const service of services) {
                    if (iSe === 0) {
                        addContent(`\n.H${startLevel + 3} Assets`);
                        addContent(`| Name | Created | Loaded | # Statements | # Graphs | Status | In sync | \n| - | - | - | -: | -: | - | - |`);
                    }
                    iSe++;
                    const info = await service.getInfo();
                    addContent(`| [${info.name}](${consoleUrl}/${accountName}/services) | ${info.createdAt} | ${info.loadedAt} | ${millify(info.numberOfLoadedStatements ?? 0)} | ${millify(info.numberOfGraphs ?? 0)} | ${info.status} | ${info.outOfSync ?? false ? "✅" : "❌"}`);
                }
            }
        }
    }
    const pinnedItems = await account.getPinnedItems();
    let iP = 0;
    for await (const pinnedItem of pinnedItems) {
        if (iP === 0)
            addContent(`\n.H${startLevel + 3} Pinned Items`);
        iP++;
        const info = await pinnedItem.getInfo();
        addContent(`- [${info.displayName?.trim() ? info.displayName : info.name}](${consoleUrl}/${accountName}/${info.name})`);
    }
    if (!skip(_argv, "queries")) {
        const queries = account.getQueries();
        let iQ = 0;
        for await (const query of queries) {
            if (iQ === 0)
                addContent(`.H${startLevel + 1} Queries`);
            iQ++;
            const info = await query.getInfo();
            addContent(`.H${startLevel + 2} ${info.displayName?.trim() ? info.displayName : info.name}`);
            addContent(info.description ?? "");
            addContent(`| Property     | Value |\n|--------------|-------|`);
            addContent(`| Name | [${info.name}]((${consoleUrl}/${accountName}/-/queries/${info.name})) |`);
            addContent(`| Displayname | ${info.displayName ?? "-"} |`);
            addContent(`| Access Level | ${info.accessLevel} |`);
            addContent(`| Created | ${info.createdAt} |`);
            addContent(`| Updated | ${info.updatedAt} |`);
            addContent(`| Service | ${info.service} |`);
            addContent(`| Versions | ${info.numberOfVersions}`);
            addContent(`| Render | \`${info.renderConfig?.output}\` |`);
            if (info.variables?.length) {
                addContent(`.H${startLevel + 3} Variables`);
                addContent(`| Name | Type | Required | Default |\n| - | - | - | - |`);
                info.variables.forEach((v) => addContent(`| ${v.name} | ${v.termType} | ${v.required ? "yes" : "no"} | ${v.defaultValue ? (v.termType === "Literal" ? `*${v.defaultValue}*` : `[${v.defaultValue}](iri)`) : "-"} |`));
            }
        }
    }
    if (!skip(_argv, "stories")) {
        const stories = account.getStories();
        let iS = 0;
        for await (const story of stories) {
            if (iS === 0)
                addContent(`.H${startLevel + 1} Stories`);
            iS++;
            const info = await story.getInfo();
            let p = 0;
            let w = 0;
            let q = 0;
            const queries = [];
            info.content.forEach((content) => {
                if (content.type === "paragraph") {
                    p++;
                    w += content.paragraph?.split(/^w+/)?.length ?? 0;
                }
                else {
                    q++;
                    queries.push(`[${content.query?.name}](${content.query?.link})`);
                }
            });
            addContent(`.H${startLevel + 2} ${info.displayName?.trim() ? info.displayName : info.name}`);
            addContent(`| Property     | Value |\n|--------------|-------|`);
            addContent(`| Displayname | ${info.displayName ?? "-"} |`);
            addContent(`| Access Level | ${info.accessLevel} |`);
            addContent(`| Created | ${info.createdAt} |`);
            addContent(`| Updated | ${info.updatedAt} |`);
            addContent(`| # Paragraphs | ${millify(p)} |`);
            addContent(`| # Words | ${millify(w)} |`);
            addContent(`| # Queries | ${millify(q)} |`);
            if (q > 0) {
                addContent(`| Queries | ${queries.join(", ")} |`);
            }
        }
    }
};
//# sourceMappingURL=report.js.map