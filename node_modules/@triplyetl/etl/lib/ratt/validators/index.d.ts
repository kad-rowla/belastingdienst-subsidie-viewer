import { type AlphanumericLocale } from "validator/lib/isAlphanumeric.js";
import { type IsIBANOptions } from "validator/lib/isIBAN.js";
import { type IsCurrencyOptions } from "validator/lib/isCurrency.js";
import { type IsFQDNOptions } from "validator/lib/isFQDN.js";
import { type PostalCodeLocale } from "validator/lib/isPostalCode.js";
import { type IsURLOptions } from "validator/lib/isURL.js";
export declare function validate(literal: string, validators?: Validator | Validator[]): void;
export type ValidationResult = {
    isValid: boolean;
    message: string;
};
export type Validator = (literal: string) => boolean | ValidationResult;
export declare function isEmail(): Validator;
/**
 * Check if the string contains the seed.
 *
 * @param seed - Seed
 * @param options.minOccurrences indicates the number of times the seed must occur (defaults to 1)
 * @param options.ignoreCase indicates if the seed must be compared to String while ignoring the case of both
 */
export declare function contains(options: {
    seed: string;
    minOccurrences?: number;
    ignoreCase?: boolean;
}): Validator;
/**
 * Check if the string matches the comparison.
 *
 * @param comparison - String to compare
 */
export declare function equals(options: {
    compare: string;
}): Validator;
/**
 * Check if the string is a date that's after the specified date.
 *
 * @param [date] - Date string (defaults to now)
 */
export declare function isAfter(options?: {
    date?: string;
}): Validator;
/**
 * Check if the string contains only letters and numbers.
 *
 * @param [locale] - AlphanumericLocale
 * @param [options] - IsAlphanumericOptions
 */
export declare function isAlpha(options?: {
    locale?: AlphanumericLocale;
    ignore?: string | RegExp;
}): Validator;
/**
 * Check if the string contains only letters and numbers.
 *
 * @param [locale] - AlphanumericLocale
 * @param [options] - IsAlphanumericOptions
 */
export declare function isAlphanumeric(options?: {
    locale?: AlphanumericLocale;
    ignore?: string | RegExp;
}): Validator;
/**
 * Check if the string contains ASCII chars only.
 */
export declare function isAscii(): Validator;
/**
 * Check if a string is base32 encoded.
 */
export declare function isBase32(): Validator;
/**
 * check if a string is base58 encoded
 */
export declare function isBase58(): Validator;
/**
 * check if a string is base64 encoded
 */
export declare function isBase64(options?: {
    urlSafe?: boolean;
}): Validator;
/**
 * Check if the string is a date that's before the specified date.
 *
 * @param [date] - Date string (defaults to now)
 */
export declare function isBefore(options?: {
    date?: string;
}): Validator;
/**
 * Check if a string is a IBAN (International Bank Account Number).
 */
export declare function isIBAN(options?: IsIBANOptions): Validator;
/**
 * Check if a string is a BIC (Bank Identification Code) or SWIFT code.
 */
export declare function isBIC(): Validator;
/**
 * Check if a string is a boolean.
 *
 * @param loose: boolean (default = false)
 *  If loose is is set to false, the validator will strictly match ['true', 'false', '0', '1'].
 *  If loose is set to true, the validator will also match 'yes', 'no', and will match a valid boolean string of any case. (eg: ['true', 'True', 'TRUE']).
 */
export declare function isBoolean(options?: {
    loose: boolean;
}): Validator;
/**
 * Check if the string's length (in UTF-8 bytes) falls in a range.
 *
 * @param [options] - Options
 */
export declare function isByteLength(options: {
    min: number;
    max?: number;
}): Validator;
/**
 * Check if the string is a credit card.
 *
 * @params provider
 */
export declare function isCreditCard(options?: {
    provider?: "amex" | "dinersclub" | "discover" | "jcb" | "mastercard" | "unionpay" | "visa" | "";
}): Validator;
export declare function isCurrency(options?: IsCurrencyOptions): Validator;
/**
 * Check if the string is a [data uri format](https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs).
 */
export declare function isDataURI(): Validator;
/**
 * Check if the string is a valid date.
 *
 * @params options.format?: string
 * @params options.strictMode?: boolean
 *   If strictMode is set to true, the validator will reject inputs different from format.
 * @params options.delimiters?: string[] an array of allowed date delimiters
 */
export declare function isDate(options?: {
    format?: string;
    strictMode?: boolean;
    delimiters?: string[];
}): Validator;
type FloatLocale = "en-US" | "ar" | "en-AU" | "en-GB" | "en-HK" | "en-IN" | "en-NZ" | "en-ZA" | "en-ZM" | "ar-AE" | "ar-BH" | "ar-DZ" | "ar-EG" | "ar-IQ" | "ar-JO" | "ar-KW" | "ar-LB" | "ar-LY" | "ar-MA" | "ar-QM" | "ar-QA" | "ar-SA" | "ar-SD" | "ar-SY" | "ar-TN" | "ar-YE" | "bg-BG" | "cs-CZ" | "da-DK" | "de-DE" | "el-GR" | "es-ES" | "fr-FR" | "it-IT" | "ku-IQ" | "hu-HU" | "nb-NO" | "nn-NO" | "nl-NL" | "pl-PL" | "pt-PT" | "ru-RU" | "sl-SI" | "sr-RS@latin" | "sr-RS" | "sv-SE" | "tr-TR" | "uk-UA" | "pt-BR" | "pl-Pl";
interface IsDecimalOptions {
    /**
     * @default false
     */
    force_decimal?: boolean;
    /**
     * `decimal_digits` is given as a range like `'1,3'`,
     * a specific value like `'3'` or min like `'1,'`
     *
     * @default '1,'
     */
    decimal_digits?: string;
    /**
     * DecimalLocale
     *
     * @default 'en-US'
     */
    locale?: FloatLocale;
}
/**
 * Check if the string represents a decimal number,
 * such as `0.1`, `.3`, `1.1`, `1.00003`, `4.0` etc.
 *
 * @param [options] - Options
 */
export declare function isDecimal(options?: IsDecimalOptions): Validator;
interface IsFloatOptions {
    /**
     * less or equal
     */
    min?: number;
    /**
     * greater or equal
     */
    max?: number;
    /**
     * greater than
     */
    gt?: number;
    /**
     * less than
     */
    lt?: number;
    /**
     * FloatLocale
     */
    locale?: FloatLocale;
}
/**
 * Check if the string is a float.
 *
 * @param [options] - IsFloatOptions
 */
export declare function isFloat(options?: IsFloatOptions): Validator;
/**
 * Check if the string is a fully qualified domain name (e.g. `domain.com`).
 *
 * @param [options] - Options
 */
export declare function isFQDN(options?: IsFQDNOptions): Validator;
/**
 * Check if the string contains any full-width chars.
 */
export declare function isFullWidth(): Validator;
/**
 * Check if the string contains any full-width chars.
 */
export declare function isHalfWidth(): Validator;
type HashAlgorithm = "md4" | "md5" | "sha1" | "sha256" | "sha384" | "sha512" | "ripemd128" | "ripemd160" | "tiger128" | "tiger160" | "tiger192" | "crc32" | "crc32b";
/**
 * Check if the string is a hash of type algorithm.
 *
 * @param otions.algorithm - HashAlgorithm (defaulkt = md5)
 */
export declare function isHash(options?: {
    algorithm?: HashAlgorithm;
}): Validator;
export declare const isMD4: () => Validator;
export declare const isMD5: () => Validator;
export declare const isSHA1: () => Validator;
export declare const isSHA256: () => Validator;
export declare const isSHA384: () => Validator;
export declare const isSHA512: () => Validator;
/**
 * Check if the string is a hexadecimal number.
 */
export declare function isHexadecimal(): Validator;
/**
 * Check if the string is a hexadecimal color.
 */
export declare function isHexColor(): Validator;
/**
 * Check if the string is an HSL (hue, saturation, lightness, optional alpha) color based on CSS Colors Level 4 specification.
 * Comma-separated format supported. Space-separated format supported with the exception of a few edge cases (ex: hsl(200grad+.1%62%/1)).
 */
export declare function isHSL(): Validator;
/**
 * Check if the string is a rgb or rgba color.
 *
 * @param [includePercentValues=true] - If you don't want to allow to set rgb or rgba values with percents, like rgb(5%,5%,5%), or rgba(90%,90%,90%,.3), then set it to false. (defaults to true)
 */
export declare function isRgbColor(options?: {
    includePercentValues?: boolean;
}): Validator;
/**
 * Check if the string is a valid IMEI.
 * Non-hyphenated (`###############`) only is supported by default.
 * Use the `options` param to enable hyphenated (`##-######-######-#`) support.
 *
 * @param options.allow_hyphens?: boolean
 */
export declare function isIMEI(options?: {
    allow_hyphens: boolean;
}): Validator;
/**
 * Check if the string is in a array of allowed values.
 *
 * @param options.values string[]
 */
export declare function isIn(options: {
    values: string[];
}): Validator;
interface IsIntOptions {
    /**
     * to check the integer min boundary
     */
    min?: number | undefined;
    /**
     * to check the integer max boundary
     */
    max?: number | undefined;
    /**
     * if `false`, will disallow integer values with leading zeroes
     * @default true
     */
    allow_leading_zeroes?: boolean | undefined;
    /**
     * enforce integers being greater than the value provided
     */
    lt?: number | undefined;
    /**
     * enforce integers being less than the value provided
     */
    gt?: number | undefined;
}
/**
 * Check if the string is an integer.
 *
 * @param options - IsIntOptions
 */
export declare function isInt(options?: IsIntOptions): Validator;
export declare const isInteger: typeof isInt;
/**
 * Check if the string is an IP (version 4 or 6).
 *
 * @param options.version - IP Version
 */
export declare function isIP(options?: {
    version?: "4" | "6" | 4 | 6;
}): Validator;
/**
 * Check if the string is an IPv4.
 */
export declare const isIPv4: () => Validator;
/**
 * Check if the string is an IPv6.
 */
export declare const isIPv6: () => Validator;
/**
 * Check if the string is an IP (version 4 or 6).
 *
 * @param options.version - IP Version
 */
export declare function isIPRange(options?: {
    version?: "4" | "6" | 4 | 6;
}): Validator;
/**
 * Check if the string is an IPv4 range.
 */
export declare const isIPv4Range: () => Validator;
/**
 * Check if the string is an IPv6 range.
 */
export declare const isIPv6Range: () => Validator;
/**
 * Check if the string is an ISBN (version 10 or 13).
 *
 * @param options.version - IP Version
 */
export declare function isISBN(options?: {
    version?: "10" | "13" | 10 | 13;
}): Validator;
/**
 * Check if the string is an IPv4 range.
 */
export declare const isISBNv13: () => Validator;
/**
 * Check if the string is an IPv6 range.
 */
export declare const isISBNv10: () => Validator;
/**
 * Check if the string is an EAN (European Article Number).
 */
export declare function isEAN(): Validator;
/**
 * Check if the string is an [ISIN](https://en.wikipedia.org/wiki/International_Securities_Identification_Number) (stock/security identifier).
 */
export declare function isISIN(): Validator;
/**
 * Check if the string is a valid [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) officially assigned country code.
 */
export declare function isISO31661Alpha2(): Validator;
/**
 * Check if the string is a valid [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) officially assigned country code.
 */
export declare function isISO31661Alpha3(): Validator;
/**
 * Check if the string is a valid [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346) shipping container identification.
 */
export declare function isISO6346(): Validator;
/**
 * Alias for [isISO6346]
 */
export declare const isFreightContainerID: typeof isISO6346;
/**
 * Check if the string is a valid [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) officially assigned language code.
 */
export declare function isISO6391(): Validator;
/**
 * Check if the string is a valid [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date.
 *
 * @param options.strict if true performs additional checks for valid dates, e.g. invalidates dates like `2009-02-29`
 * @param options.strictSeparator if true, date strings with date and time separated by anything other than a T will be invalid
 */
export declare function isISO8601(options?: {
    strict?: boolean;
    strictSeparator?: boolean;
}): Validator;
/**
 * Check if the string is an [ISSN](https://en.wikipedia.org/wiki/International_Standard_Serial_Number).
 *
 * @param options.case_sensitive if true ISSNs with a lowercase `x` as the check digit are rejected
 * @param options.require_hyphen
 */
export declare function isISSN(options?: {
    case_sensitive?: boolean;
    require_hyphen?: boolean;
}): Validator;
/**
 * Check if the string is a valid [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) officially assigned currency code.
 */
export declare function isISO4217(): Validator;
/**
 * Check if the string is a [ISRC](https://en.wikipedia.org/wiki/International_Standard_Recording_Code).
 */
export declare function isISRC(): Validator;
/**
 * Check if the string is a valid [RFC 3339](https://tools.ietf.org/html/rfc3339) date.
 */
export declare function isRFC3339(): Validator;
/**
 * Check if the string is valid JSON (note: uses `JSON.parse`).
 */
export declare function isJSON(): Validator;
/**
 * Check if the string is valid JWT token.
 */
export declare function isJWT(): Validator;
/**
 * Check if the string is a valid latitude-longitude coordinate in the format:
 *
 * `lat,long` or `lat, long`.
 */
export declare function isLatLong(): Validator;
/**
 * Check if the string's length falls in a range.
 *
 * Note: this function takes into account surrogate pairs.
 *
 * @param options.min
 * @param options.max
 */
export declare function isLength(options?: {
    min?: number;
    max?: number;
}): Validator;
/**
 * Check if the string is a locale.
 */
export declare function isLocale(): Validator;
/**
 * Check if the string is lowercase.
 */
export declare function isLowercase(): Validator;
/**
 * Check if the string is uppercase.
 */
export declare function isUppercase(): Validator;
/**
 * Check if the string matches to a valid [MIME type](https://en.wikipedia.org/wiki/Media_type) format.
 */
export declare function isMimeType(): Validator;
type MobilePhoneLocale = PhoneLocale | PhoneLocaleAlias;
type PhoneLocale = "am-AM" | "ar-AE" | "ar-BH" | "ar-DZ" | "ar-LB" | "ar-EG" | "ar-IQ" | "ar-JO" | "ar-KW" | "ar-LY" | "ar-MA" | "ar-OM" | "ar-SA" | "ar-SY" | "ar-TN" | "az-AZ" | "bs-BA" | "be-BY" | "bg-BG" | "bn-BD" | "ca-AD" | "cs-CZ" | "da-DK" | "de-DE" | "de-AT" | "de-CH" | "de-LU" | "el-GR" | "en-AU" | "en-GB" | "en-GG" | "en-GH" | "en-HK" | "en-MO" | "en-IE" | "en-IN" | "en-KE" | "en-MT" | "en-MU" | "en-NG" | "en-NZ" | "en-PK" | "en-PH" | "en-RW" | "en-SG" | "en-SL" | "en-TZ" | "en-UG" | "en-US" | "en-ZA" | "en-ZM" | "en-ZW" | "es-AR" | "es-BO" | "es-CO" | "es-CL" | "es-CR" | "es-DO" | "es-HN" | "es-EC" | "es-ES" | "es-PE" | "es-MX" | "es-PA" | "es-PY" | "es-UY" | "es-VE" | "et-EE" | "fa-IR" | "fi-FI" | "fj-FJ" | "fo-FO" | "fr-FR" | "fr-GF" | "fr-GP" | "fr-MQ" | "fr-RE" | "he-IL" | "hu-HU" | "id-ID" | "it-IT" | "it-SM" | "ja-JP" | "ka-GE" | "kk-KZ" | "kl-GL" | "ko-KR" | "lt-LT" | "lv-LV" | "ms-MY" | "mz-MZ" | "nb-NO" | "ne-NP" | "nl-BE" | "nl-NL" | "nn-NO" | "pl-PL" | "pt-BR" | "pt-PT" | "pt-AO" | "ro-RO" | "ru-RU" | "si-LK" | "sl-SI" | "sk-SK" | "sq-AL" | "sr-RS" | "sv-SE" | "th-TH" | "tr-TR" | "uk-UA" | "uz-UZ" | "vi-VN" | "zh-CN" | "zh-TW";
type PhoneLocaleAlias = "en-CA" | "fr-CA" | "fr-BE" | "zh-HK" | "zh-MO" | "ga-IE" | "fr-CH" | "it-CH";
/**
 *
 * @param options.strictmode If this is set to `true`, the mobile phone number must be supplied with the country code and therefore must start with `+`.
 * @param options.locale locale of the Mobile Phone
 */
export declare function isMobilePhone(options?: {
    locale?: "any" | MobilePhoneLocale | MobilePhoneLocale[];
    strictmode?: boolean;
}): Validator;
/**
 * Check if the string is a valid hex-encoded representation of a [MongoDB ObjectId](http://docs.mongodb.org/manual/reference/object-id/).
 */
export declare function isMongoId(): Validator;
/**
 * Check if the string contains one or more multibyte chars.
 */
export declare function isMultibyte(): Validator;
/**
 * Check if the string contains only numbers.
 *
 * @param options.no_symbols if true the validator will reject numeric strings that feature a symbol (e.g. `+`, `-`, or `.`).
 * @param options.locale string
 */
export declare function isNumeric(options?: {
    no_symbols?: boolean;
    locale?: AlphanumericLocale;
}): Validator;
/**
 * Check if the string is a valid octal number.
 */
export declare function isOctal(): Validator;
type CountryCodes = "AM" | "AR" | "AT" | "AU" | "AZ" | "BE" | "BG" | "BR" | "BY" | "CA" | "CH" | "CN" | "CY" | "CZ" | "DE" | "DK" | "DZ" | "EE" | "ES" | "FI" | "FR" | "GB" | "GR" | "HR" | "HU" | "IE" | "IN" | "ID" | "IR" | "IS" | "IT" | "JM" | "JP" | "KR" | "KZ" | "LI" | "LT" | "LU" | "LV" | "LY" | "MT" | "MZ" | "MY" | "MX" | "NL" | "NZ" | "PH" | "PK" | "PL" | "PT" | "RO" | "RU" | "SE" | "SL" | "SK" | "TH" | "TR" | "UA" | "US";
/**
 * Check if the string is a valid passport number relative to a specific country code.
 *
 * @param [countryCode] - Country code
 */
export declare function isPassportNumber(options: {
    countryCode: CountryCodes;
}): Validator;
/**
 * Check if the string is a valid port number.
 */
export declare function isPort(): Validator;
/**
 * Check if the string is a postal code
 *
 * @param locale - PostalCodeLocale
 */
export declare function isPostalCode(options?: {
    locale?: PostalCodeLocale;
}): Validator;
/**
 * Check if the string is a Semantic Versioning Specification (SemVer).
 */
export declare function isSemVer(): Validator;
interface StrongPasswordOptions {
    minLength?: number | undefined;
    minLowercase?: number | undefined;
    minUppercase?: number | undefined;
    minNumbers?: number | undefined;
    minSymbols?: number | undefined;
    returnScore?: boolean | undefined;
    pointsPerUnique?: number | undefined;
    pointsPerRepeat?: number | undefined;
    pointsForContainingLower?: number | undefined;
    pointsForContainingUpper?: number | undefined;
    pointsForContainingNumber?: number | undefined;
    pointsForContainingSymbol?: number | undefined;
}
/**
 * Check if string is considered a strong password.
 */
export declare function isStrongPassword(options?: StrongPasswordOptions): Validator;
/**
 * Check if the string contains any surrogate pairs chars.
 */
export declare function isSurrogatePair(): Validator;
/**
 * Check if the string is a valid time.
 *
 * @param options.hourFormat 'hour24' will validate hours in 24 format and 'hour12' will validate hours in 12 format.
 * @param options.mode 'default' will validate HH:MM format, 'withSeconds' will validate the HH:MM:SS format
 */
export declare function isTime(options?: {
    hourFormat?: "hour12";
    withSeconds?: boolean;
}): Validator;
/**
 * Check if the string is an URL.
 *
 * @param [options] - Options
 */
export declare function isURL(options?: IsURLOptions): Validator;
/**
 * Return true if the passed string is a valid tax identification number
 * for the specified locale.
 */
export declare function isTaxID(options?: {
    locale: string;
}): Validator;
type UUIDVersion = "1" | "2" | "3" | "4" | "5" | "all" | 1 | 2 | 3 | 4 | 5;
/**
 * Check if the string is a UUID (version 1, 2, 3, 4 or 5).
 *
 * @param [version="all"] - UUID version
 */
export declare function isUUID(options?: {
    version: UUIDVersion;
}): Validator;
export declare const isUUIDv1: () => Validator;
export declare const isUUIDv2: () => Validator;
export declare const isUUIDv3: () => Validator;
export declare const isUUIDv4: () => Validator;
export declare const isUUIDv5: () => Validator;
/**
 * Check if the string contains a mixture of full and half-width chars.
 */
export declare function isVariableWidth(): Validator;
/**
 * Checks that the string is a valid VAT number
 */
export declare function isVAT(options: {
    countryCode: string;
}): Validator;
/**
 * Checks characters if they appear in the whitelist.
 *
 * @param chars - whitelist
 */
export declare function isWhitelisted(options: {
    chars: string | string[];
}): Validator;
/**
 * Check if string matches the pattern.
 *
 * @param options.pattern - `/foo/i`
 */
export declare function matches(options: {
    pattern: RegExp;
}): Validator;
/**
 * Check if the string is of type slug.
 */
export declare function isSlug(): Validator;
export {};
//# sourceMappingURL=index.d.ts.map