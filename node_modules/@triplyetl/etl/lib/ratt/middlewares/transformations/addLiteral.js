import { Etl } from "../../../generic/index.js";
import { addMwCallSiteToError } from "../../../utils/index.js";
import { add } from "./custom/add.js";
import { LanguageTag, xsd } from "@triplyetl/vocabularies";
import { isStatic } from "../assertions/term/str.js";
import { getFactory } from "@triplydb/data-factory";
import { coerceToLanguageTag } from "../assertions/statement/rdf/utils/coerceToLanguageTag.js";
import { once } from "lodash-es";
import { validate } from "../../validators/index.js";
const dataFactory = once(() => getFactory({ skipValidation: Etl.skipValidation }));
function addLiteral(args) {
    return addMwCallSiteToError(add({
        value: (ctx) => {
            let languageOrDatatype = xsd.string;
            if (args.language !== undefined) {
                languageOrDatatype = coerceToLanguageTag(!LanguageTag.isLanguageTag(args.language) && !isStatic(args.language)
                    ? ctx.getAny(args.language)
                    : args.language)
                    .toString()
                    .toLowerCase();
            }
            else if (args.datatype !== undefined)
                languageOrDatatype = ctx.getIri(args.datatype);
            const literal = ctx.getString(args.content);
            validate(literal, args.validate);
            return dataFactory().literal(literal, languageOrDatatype);
        },
        key: args.key,
    }), { sourceFuncName: "_addLiteral" });
}
export default addLiteral;
//# sourceMappingURL=addLiteral.js.map