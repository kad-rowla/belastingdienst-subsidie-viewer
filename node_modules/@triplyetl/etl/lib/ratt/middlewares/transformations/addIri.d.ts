import { Key, Middleware } from "../../../generic/index.js";
import { PossibleIri } from "../../../utils/index.js";
import { StaticString } from "../assertions/term/str.js";
/**
 * Creates an IRI based on the specified parameters:
 * - By using an IRI prefix and a local name, or
 * - By using a full absolute IRI.
 *
 * @remarks
 * If the created IRI is used exactly once, it is often better to use the
 * inline term assertion {@link iri} instead.
 *
 * @param args.prefix
 * Optionally, an IRI or a key that contains an IRI.
 * If specified, this is the IRI prefix that will appear before the local name
 * that is specified by the `content` argument.
 * If this parameter is absent, `content` is assumed to contain a full absolute
 * IRI.
 *
 * @param args.content
 * A string, or a key that contains a string.
 * If the `prefix` parameter is specified, `content` specifies the IRI local
 * name that appears after the IRI prefix.
 * If the `prefix` argument is not specified, `content` is assumed to encode a
 * full absolute IRI.
 *
 * @param args.key
 * A new key where the created IRI is stored.
 *
 * @example
 * The following snippet creates an IRI based on the specified IRI prefix and
 * local name:
 *
 * ```ts
 * addIri({
 *   prefix: prefix.person,
 *   content: 'username',
 *   key: '_person',
 * }),
 * triple('_person', a, sdo.Person),
 * ```
 *
 * This results in the following RDF:
 *
 * ```turtle
 * person:johndoe a sdo:Person.
 * ```
 *
 * If the key `'_person'` is used exactly once in the Etl Script, then it is
 * better to use the inline term assertion {@link iri} instead:
 *
 * ```ts
 * triple(iri(prefix.person, 'username'), a, sdo.Person),
 * ```
 *
 * @example
 * The following snippet creates the same IRI, but does not use a predefined
 * prefix IRI:
 *
 * ```ts
 * addIri({
 *   content: 'https://example.com/id/person/johndoe',
 *   key: '_person',
 * }),
 * triple('_person', a, sdo.Person),
 * ```
 *
 * If the key `'_person'` is used exactly once in the Etl Script, then it is
 * better to use the inline term assertion {@link iri} instead:
 *
 * ```ts
 * triple(iri('https://example.com/id/person/johndoe'), a, sdo.Person),
 * ```
 */
export default function <R = unknown>(args: {
    prefix?: PossibleIri;
    content: Key | StaticString;
    key: string;
}): Middleware<R>;
//# sourceMappingURL=addIri.d.ts.map