import { Middleware } from "../../../generic/index.js";
import { PossibleIri } from "../../../utils/index.js";
/**
 * Creates a globally unique IRI that is intended to be used as a blank node
 * identifier.
 *
 * @remarks
 * Blank nodes are nodes without identification.  It relatively difficult to
 * work which such nodes in graph data, since they cannot be identified or
 * dereferenced online.  For this reason Etl uses Skolem IRIs to denote blank
 * nodes.  This allows blank nodes to be identified and dereferenced.  This
 * approach is in line with
 * {@link https://www.w3.org/TR/rdf11-concepts/#section-skolemization |
 * the RDF 1.1 standard}.
 *
 * Skolem IRIs are {@link addRandomIri | random IRIs} whose root path starts
 * with `.well-known/genid/`.  This makes it easy to distinguish them from
 * other random IRIs that are not used to denote blank nodes.
 *
 * @param prefix - A IRI or a key that contains an IRI whose path starts with
 * `.well-known/genid/`.
 *
 * @param key - A new key where the created IRI is stored.
 *
 * @see https://www.w3.org/TR/rdf11-concepts/#section-skolemization
 *
 * @example
 * The following snippet uses a {@link addHashedIri | hashed IRI} to create
 * a predictable identifier for a geospatial feature, and a Skolem IRI to
 * create an unpredictable identifier for the geometry.
 *
 * The snippet includes the prefix declarations to illustrate that the path of
 * the Skolem IRI must start with `.well-known/genid.`.
 *
 * ```ts
 * const prefix_base = Iri('https://example.com/')
 * const prefix = {
 *   feature: prefix_base.concat('id/feature/'),
 *   geometry: prefix_base.concat('.well-known/genid/'),
 * }
 *
 * ...
 *
 * fromJson([{ point: 'Point(1.1 2.2)' }]),
 * addHashedIri({
 *   prefix: prefix.feature,
 *   content: 'point',
 *   key: '_feature',
 * }),
 * addSkolemIri({
 *   prefix: prefix.skolem,
 *   key: '_geometry',
 * }),
 * triple('_feature', geo.hasGeometry, '_geometry'),
 * triple('_geometry', geo.asWKT, literal('point', geo.wktLiteral)),
 * ```
 *
 * This results in the following linked data assertions:
 *
 * ```ts
 * feature:22238008e490f725979118f8f2dd9b5a geo:hasGeometry skolem:0cf4b63252a0476a8afc20735aa03da6.
 * skolem:0cf4b63252a0476a8afc20735aa03da6 geo:asWKT 'Point(1.1 2.2)'^^geo:wktLiteral.
 * ```
 *
 * Notice that the feature IRI will be the same across ELT runs if the source
 * data stays the same, but the Skolem will always be different.
 *
 * Since the Skolem IRIs can be identified by the start of their path
 * (`.well-known/genid/`), the same linked data assertions can be displayed as
 * follows:
 *
 * ```ttl
 * feature:22238008e490f725979118f8f2dd9b5a geo:hasGeometry
 *   [ geo:asWKT 'Point(1.1 2.2)'^^geo:wktLiteral ].
 * ```
 */
export default function <R = unknown>(args: {
    prefix?: PossibleIri;
    key: string;
}): Middleware<R>;
//# sourceMappingURL=addSkolemIri.d.ts.map