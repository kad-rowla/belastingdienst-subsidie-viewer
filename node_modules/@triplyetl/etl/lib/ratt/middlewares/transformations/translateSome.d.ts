import { Vocabulary } from "@triplyetl/vocabularies";
import { Middleware, Key } from "../../../generic/index.js";
import { StaticString } from "../assertions/term/str.js";
/**
 * Translates some strings, according to the specified translation table, to
 * other strings.  Strings that are not translated according to the
 * translation table are copied over as-is.
 *
 * @remarks
 * Source data often contains some strings that are correct and some that are
 * incorrect.  For example, if source data contains a key with city names,
 * some of the names may be misspelled.  In such cases, `translateSome()` can
 * be used to translate the incorrect strings into correct ones.
 *
 * A `translateSome()` transformation is often performed directly before a
 * `translateAll()` transformation.  The former ensures that all string values
 * are correct (e.g. fixing typo's in city names); the latter ensures that
 * all strings are mapped onto IRIs (e.g. city names mapped onto
 * city-denoting IRIs).
 *
 * @param args.content - A key that contains a string value.
 *
 * @param args.table - A translation table that specifies translations from
 * strings to strings.
 *
 * @param args.key - A new key where the translated strings are stored.
 *
 * @example
 * The following example fixes an encoding issue that occurs in the source
 * data:
 *
 * ```ts
 * transform.translateSome({
 *   content: 'name',
 *   table: {
 *     'Frysl��n': 'Fryslân',
 *     // Other entries for typographic fixes go here.
 *     ...,
 *   },
 *   key: '_name',
 * }),
 * ```
 */
export default function <To, R = unknown>(args: {
    content: StaticString | Key;
    table: {
        [key: string]: To;
    } | string | Vocabulary;
    key: string;
}): Middleware<R>;
//# sourceMappingURL=translateSome.d.ts.map