import { Middleware } from "../../../generic/index.js";
import { PossibleIri } from "../../../utils/index.js";
/**
 * Transforms GeoJSON objects to their corresponding Well-Known Text (WKT)
 * serialization strings.
 *
 * @param content - A key that stores a GeoJSON object.
 *
 * @param crs - Optionally, an IRI that denotes a Coordinate Reference System
 * (CRS).  You can use IRIs from the {@link epsg} object.  If absent, uses
 * {@link https://epsg.io/4326 | EPSG:4326/WGS84} as the CRS.
 *
 * @param key - A new key where the WKT serialization string is stored
 *
 * @remarks
 * According to the {@link https://www.rfc-editor.org/rfc/rfc7946 | GeoJSON
 * standard}, the only Coordinate Reference System (CRS) that is allowed to be
 * used is EPSG:4326/WGS84.  In practice, source data sometimes (incorrectly)
 * stores GeoJSON formatted data in other CRSes.
 * An example of this is the
 * {@link https://ec.europa.eu/eurostat/web/gisco/geodata | GISCO} dataset of
 * the European Union, which uses the {@link https://epsg.io/3857 | EPSG:3857}
 * CRS. For cases like these, the optional `crs` parameter comes in handy.
 *
 * @example
 * The following snippet converts GeoJSON objects that denote traffic light
 * locations to their GeoSPARQL representation.
 *
 * ```ts
 * fromJson([
 *   {
 *     id: '123',
 *     geometry: {
 *       type: 'Point',
 *       coordinates: [6.256, 48.480],
 *     },
 *   },
 * ]),
 * addIri({
 *   prefix: prefix.feature,
 *   content: 'id',
 *   key: '_feature',
 * }),
 * geojsonToWkt({
 *   content: 'geometry',
 *   crs: epsg[3857],
 *   key: '_wkt',
 * }),
 * addHashedIri({
 *   prefix: prefix.geometry,
 *   content: '_wkt',
 *   key: '_geometry'
 * }),
 * pairs('_feature',
 *   [a, def.TrafficLight],
 *   [geo.hasGeometry, '_geometry'],
 * ),
 * pairs('_geometry',
 *   [a, geo.Geometry],
 *   [geo.asWKT, literal('_wkt', geo.wktLiteral)],
 * ),
 * ```
 *
 * This results in the following linked data assertions:
 *
 * ```ttl
 * feature:123
 *   a def:TrafficLight;
 *   geo:hasGeometry geometry:197e6376c2bd8192c24911f88c330606.
 * geometry:197e6376c2bd8192c24911f88c330606
 *   a geo:Geometry;
 *   geo:asWKT 'Point(6.256 48.480)'^^geo:wktLiteral.
 * ```
 *
 * @see The GeoJSON format is standardized in
 * {@link https://www.rfc-editor.org/rfc/rfc7946 | RFC 7946}.
 *
 * @see The
 * {@link https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry |
 * Well-Known Text (WKT)}  serialization format is standardized as part of
 * {@link https://www.iso.org/standard/60343.html | ISO/IEC 13249-3:2016
 * standard}.
 */
export default function _geojsonToWkt<R = unknown>(args: {
    content: any;
    crs?: PossibleIri;
    key: string;
}): Middleware<R>;
//# sourceMappingURL=geojsonToWkt.d.ts.map