import { Key, Middleware } from "../../../generic/index.js";
import { StaticString } from "../assertions/term/str.js";
/**
 * Translates a string value to its lowercase variant.
 *
 * @remarks
 * This middleware can lowercase strings in any language; the Unicode Default
 * Case Conversion algorithm is used.
 *
 * Older data formats sometimes use uppercase letters for header names or
 * codes.  The `lowercase` transformation middleware may be used to change
 * such string values to lowercase.
 *
 * @param args.content - A key that contains a string value.
 *
 * @param args.key - A new key where the lowercase variant is stored.
 *
 * @example
 * The following snppet starts out with header values that use uppercase
 * characters exclusively.  The `lowerCase` transformation is used to create
 * lowercase names that can be used to create property IRIs.
 *
 * ```ts
 * fromJson([
 *   { from: '1', rel: 'PARENT', to: '2' },
 *   { from: '2', rel: 'CHILD', to: '1' },
 * ]),
 * lowercase({
 *   content: 'rel',
 *   key: '_relationship',
 * }),
 * triple(
 *   iri(prefix.id, 'from'),
 *   iri(prefix.def, '_relationship'),
 *   iri(prefix.id, 'to'),
 * ),
 * ```
 *
 * This results in the following linked data assertions:
 *
 * ```ttl
 * id:1 def:parent id:2.
 * id:2 def:child id:1.
 * ```
 */
export default function <R = unknown>(args: {
    content: StaticString | Key;
    key: string;
}): Middleware<R>;
//# sourceMappingURL=lowercase.d.ts.map