import { StaticString } from "../assertions/term/str.js";
import { Key, Middleware } from "../../../generic/index.js";
import { LanguageTag } from "@triplyetl/vocabularies";
/**
 * This middleware creates a language tag based on a given string value.
 *
 * @param args.content - A string value that encodes a language tag according
 * to the .
 *
 * @param args.key - A new key where the language tag will be stored.
 *
 * @throws An error if the given string value does not follow the language tag
 * format, or denotes a language tag that is not currently registered.
 *
 * @see The language tag format is defined in the
 * {@link IETF BCP 47 standard (RFC 5646) | https://www.rfc-editor.org/rfc/rfc5646.html}.
 *
 * @see Language tags are registered in the
 * {@link IANA language subtag registry | https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry}.
 *
 * @example
 * The following snippet created a language tag for the Dutch language as
 * spoken in The Netherlands, and uses it to assert a language-tagged string:
 *
 * ```ts
 * fromJson([{ label: 'Amsterdam' }]),
 * addTag({
 *   content: 'nl-nl',
 *   key: 'lang',
 * }),
 * triple(iri(prefix.city, 'label'), rdfs.label, literal('label', 'lang')),
 * ```
 */
export default function <R = unknown>(args: {
    content: Key | StaticString | LanguageTag;
    key: string;
}): Middleware<R>;
//# sourceMappingURL=addTag.d.ts.map