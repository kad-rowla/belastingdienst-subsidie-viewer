import { castArray, has, set as lodashSet } from "lodash-es";
import { getTypedValFromRecord } from "../../../../generic/Context.js";
import { addMwCallSiteToError } from "../../../../utils/index.js";
export function change(opts) {
    return async (ctx, next) => {
        const keys = castArray(opts.key);
        const keysThatDoNotExist = keys.filter((k) => !has(ctx.record, k));
        if (keysThatDoNotExist.length === 1) {
            throw new Error(`Could not find key '${keysThatDoNotExist[0]}' in the record`);
        }
        else if (keysThatDoNotExist.length) {
            throw new Error(`Could not find the following keys in the record: '${keysThatDoNotExist.join(", ")}'`);
        }
        await Promise.all(keys.map(async (key) => {
            lodashSet(ctx.record, key, await opts.change(getTypedValFromRecord(ctx, key, opts.type)));
        }));
        return next();
    };
}
export default (opts) => addMwCallSiteToError(change(opts), { sourceFuncName: "_change" });
//# sourceMappingURL=change.js.map