import { has, set as lodashSet } from "lodash-es";
import { getTypedValFromRecord } from "../../../../generic/Context.js";
import { addMwCallSiteToError } from "../../../../utils/index.js";
export function copy(opts) {
    return async (ctx, next) => {
        if (opts.fromKey === opts.toKey)
            throw new Error(`"fromKey" and "toKey" are both '${opts.fromKey}'. Use the 'change' middleware`);
        if (!has(ctx.record, opts.fromKey))
            throw new Error(`Could not find key '${opts.fromKey}' in the record`);
        if (ctx.isNotEmpty(opts.toKey))
            throw new Error(`Record already contains key '${opts.toKey}'. Use the 'replace' middleware`);
        const val = getTypedValFromRecord(ctx, opts.fromKey, opts.type);
        if (opts.change) {
            lodashSet(ctx.record, opts.toKey, await opts.change(val));
        }
        else {
            lodashSet(ctx.record, opts.toKey, val);
        }
        return next();
    };
}
export default (opts) => addMwCallSiteToError(copy(opts), { sourceFuncName: "_copy" });
//# sourceMappingURL=copy.js.map