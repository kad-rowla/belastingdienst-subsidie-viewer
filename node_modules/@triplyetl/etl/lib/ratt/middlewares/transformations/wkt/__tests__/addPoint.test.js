import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import * as transform from "../../index.js";
import { str } from "../../../../index.js";
import { Iri } from "../../../../../generic/index.js";
import { getEtlForTesting } from "../../../../__tests__/getEtlForTesting.js";
chai.config.truncateThreshold = 0;
chai.use(chaiAsPromised);
const key = "point";
const expect = chai.expect;
describe("Transform.wkt.addPoint ", () => {
    it("should work with static lon/lat", () => {
        return getEtlForTesting([
            transform.wkt.addPoint({ key, longitude: str("2"), latitude: str("1") }),
            async (ctx, next) => {
                chai.assert.doesNotThrow(() => ctx.getLiteral(key));
                chai.assert.equal("Point (2 1)", ctx.getLiteral(key).value);
                return next();
            },
        ]).run();
    });
    it("should work with static lon/lat, with static crs", () => {
        const crs = str("http://www.opengis.net/def/crs/OGC/1.3/CRS84");
        return getEtlForTesting([
            transform.wkt.addPoint({ key, latitude: str("1"), longitude: str("2"), crs }),
            async (ctx, next) => {
                chai.assert.doesNotThrow(() => ctx.getLiteral(key));
                chai.assert.equal(`Point (2 1)`, ctx.getLiteral(key).value);
                return next();
            },
        ]).run();
    });
    it("should throw on invalid CRS static string", () => {
        const invalidCrs = str("http://ex.com/");
        return expect(getEtlForTesting([
            transform.wkt.addPoint({ key, latitude: str("1"), longitude: str("2"), crs: invalidCrs }),
        ]).run()).to.eventually.rejectedWith('Unsupported CRS: "http://ex.com/"');
    });
    it("should work with a static lon/lat, with Etl.Prefix crs", () => {
        const crs = Iri("http://www.opengis.net/def/crs/OGC/1.3/CRS84");
        return getEtlForTesting([
            transform.wkt.addPoint({ key, latitude: str("1"), longitude: str("2"), crs }),
            async (ctx, next) => {
                chai.assert.doesNotThrow(() => ctx.getLiteral(key));
                chai.assert.equal(`Point (2 1)`, ctx.getLiteral(key).value);
                return next();
            },
        ]).run();
    });
    it("should work with lon/lat from keys", () => {
        return getEtlForTesting([
            transform.addValue({ key: "latitude", content: str("1") }),
            transform.addValue({ key: "longitude", content: str("2") }),
            transform.wkt.addPoint({ key, latitude: "latitude", longitude: "longitude" }),
            async (ctx, next) => {
                chai.assert.doesNotThrow(() => ctx.getLiteral(key));
                chai.assert.equal("Point (2 1)", ctx.getLiteral(key).value);
                return next();
            },
        ]).run();
    });
    it("should work with lon/lat & crs from keys", () => {
        const crs = str("http://www.opengis.net/def/crs/OGC/1.3/CRS84");
        return getEtlForTesting([
            transform.addValue({ key: "crs", content: crs }),
            transform.addValue({ key: "longitude", content: str("2") }),
            transform.addValue({ key: "latitude", content: str("1") }),
            transform.wkt.addPoint({ key, latitude: "latitude", longitude: "longitude", crs: "crs" }),
            async (ctx, next) => {
                chai.assert.doesNotThrow(() => ctx.getLiteral(key));
                chai.assert.equal(`Point (2 1)`, ctx.getLiteral(key).value);
                return next();
            },
        ]).run();
    });
});
//# sourceMappingURL=addPoint.test.js.map