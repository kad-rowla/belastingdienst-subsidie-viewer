import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import * as transform from "../../index.js";
import str from "../../../assertions/term/str.js";
import { getEtlForTesting } from "../../../../__tests__/getEtlForTesting.js";
import { epsg } from "@triplyetl/vocabularies";
chai.use(chaiAsPromised);
const LangeJanAmersfoort = {
    rds: { x: 155000, y: 463000 },
    latlng: { lat: 5.389495109, lng: 52.15578839 },
};
describe("Transform.wkt.project ", () => {
    it("should work with static RDS x/y", () => {
        return getEtlForTesting([
            transform.wkt.project({
                key: "LatLng",
                content: [str(LangeJanAmersfoort.rds.x.toString()), str(LangeJanAmersfoort.rds.y.toString())],
                fromCrs: epsg[28992],
            }),
            async (ctx, next) => {
                chai.assert.doesNotThrow(() => ctx.getArray("LatLng", "number"));
                const LatLng = ctx.getArray("LatLng", "number");
                chai.assert.equal(LatLng[0].toPrecision(10), LangeJanAmersfoort.latlng.lat.toString());
                chai.assert.equal(LatLng[1].toPrecision(10), LangeJanAmersfoort.latlng.lng.toString());
                return next();
            },
        ]).run();
    });
    it("should work with RDS x/y from keys", () => {
        return getEtlForTesting([
            transform.addValue({ key: "x", content: str(LangeJanAmersfoort.rds.x.toString()) }),
            transform.addValue({ key: "y", content: str(LangeJanAmersfoort.rds.y.toString()) }),
            transform.wkt.project({ key: "LatLng", content: ["x", "y"], fromCrs: epsg[28992] }),
            async (ctx, next) => {
                chai.assert.doesNotThrow(() => ctx.getArray("LatLng", "number"));
                const LatLng = ctx.getArray("LatLng", "number");
                chai.assert.equal(LatLng[0].toPrecision(10), LangeJanAmersfoort.latlng.lat.toString());
                chai.assert.equal(LatLng[1].toPrecision(10), LangeJanAmersfoort.latlng.lng.toString());
                return next();
            },
        ]).run();
    });
});
//# sourceMappingURL=project.test.js.map