import { Etl } from "../../../../generic/index.js";
import { addMwCallSiteToError } from "../../../../utils/index.js";
import { add } from "../custom/add.js";
import { getFactory } from "@triplydb/data-factory";
import { once } from "lodash-es";
import { isSupportedCrs } from "@triplydb/utils/Crs.js";
import { geoProject } from "@triplydb/utils/GeoProject.js";
import { lexicalToValue, valueToCanonical } from "@triplydb/recognized-datatypes";
const dataFactory = once(() => getFactory({ skipValidation: Etl.skipValidation }));
/**
 * Adds the Well-Known Text representation of the geospatial point
 * represented by the dynamic latitude and longitude values.
 * Optionally, a dynamic or static CRS can also be specified.
 */
export default function (args) {
    return addMwCallSiteToError(add({
        value: (context) => {
            if (args.crs == "crs")
                args.crs = context.getString(args.crs);
            const lexicalString = `${args.crs ? `<${args.crs}> ` : "<http://www.opengis.net/def/crs/OGC/1.3/CRS84> "}Point (${context.getString(args.longitude)} ${context.getString(args.latitude)})`;
            const geometry = lexicalToValue(lexicalString, "http://www.opengis.net/ont/geosparql#wktLiteral");
            if (isSupportedCrs(geometry.crs)) {
                const newGeometry = geoProject(geometry, "http://www.opengis.net/def/crs/OGC/1.3/CRS84");
                const newWkt = valueToCanonical(newGeometry, "http://www.opengis.net/ont/geosparql#wktLiteral");
                const literal = dataFactory().literal(newWkt);
                return literal;
            }
            else {
                throw new Error(`Unsupported CRS: "${geometry.crs}"`);
            }
        },
        key: args.key,
    }), { sourceFuncName: "_addPoint" });
}
//# sourceMappingURL=addPoint.js.map