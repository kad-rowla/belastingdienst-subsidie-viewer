import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { padEnd, padStart } from "../index.js";
import { str } from "../../../index.js";
import { getEtlForTesting } from "../../../__tests__/getEtlForTesting.js";
chai.use(chaiAsPromised);
const assert = chai.assert;
describe("Transform.padEnd & Transform.padStart", () => {
    it("should padd to start of strings", () => {
        const etl = getEtlForTesting();
        etl.use([
            padStart({ content: str(1), key: "padStartSPACE", targetLength: 10 }),
            padStart({ content: str(1), key: "padStartZERO", targetLength: 10, padString: "0" }),
            padStart({ content: str(1), key: "padStartZERO-ONE", targetLength: 10, padString: "01" }),
            padStart({ content: str(1), key: "padStartDASH", targetLength: 10, padString: "--" }),
            async (ctx, next) => {
                assert.equal(ctx.getString("padStartSPACE"), "         1");
                assert.equal(ctx.getString("padStartZERO"), "0000000001");
                assert.equal(ctx.getString("padStartZERO-ONE"), "0101010101");
                assert.equal(ctx.getString("padStartDASH"), "---------1");
                return next();
            },
        ]);
        return etl.run();
    });
    it("should padd to end of strings", () => {
        const etl = getEtlForTesting();
        etl.use([
            padEnd({ content: str(1), key: "padEndSPACE", targetLength: 10 }),
            padEnd({ content: str(1), key: "padEndZERO", targetLength: 10, padString: "0" }),
            padEnd({ content: str(1), key: "padEndZERO-ONE", targetLength: 10, padString: "01" }),
            padEnd({ content: str(1), key: "padEndDASH", targetLength: 10, padString: "--" }),
            async (ctx, next) => {
                assert.equal(ctx.getString("padEndSPACE"), "1         ");
                assert.equal(ctx.getString("padEndZERO"), "1000000000");
                assert.equal(ctx.getString("padEndZERO-ONE"), "1010101010");
                assert.equal(ctx.getString("padEndDASH"), "1---------");
                return next();
            },
        ]);
        return etl.run();
    });
});
//# sourceMappingURL=pad.test.js.map