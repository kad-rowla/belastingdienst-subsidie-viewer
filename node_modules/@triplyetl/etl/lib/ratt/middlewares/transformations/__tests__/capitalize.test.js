import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { addValue, capitalize } from "../index.js";
import { str } from "../../../index.js";
import { getEtlForTesting } from "../../../__tests__/getEtlForTesting.js";
chai.use(chaiAsPromised);
const assert = chai.assert;
// Note that this tests the middleware itself, the capialization is tested in the `str()` unitests.
describe("Transform.capitalize ", () => {
    it("should work on static strings", () => {
        const strings = ["String", "string", "StrinG", "STRING", "€", "&hellip;", "ë"].map((val) => str(val));
        const etl = getEtlForTesting();
        strings.forEach((val, ix) => etl.use(capitalize({ key: `key${ix}`, content: val })));
        etl.use([
            async (ctx, next) => {
                strings.forEach((val, ix) => {
                    assert.equal(ctx.getString(`key${ix}`), val.capitalize(), `expected '${ctx.getString(`key${ix}`)}', got '${val.capitalize()}'`);
                });
                return next();
            },
        ]);
        return etl.run();
    });
    it("should work on keys", () => {
        const strings = ["String", "string", "StrinG", "STRING", "€", "&hellip;", "ë"].map((val) => str(val));
        const etl = getEtlForTesting();
        strings.forEach((val, ix) => {
            etl.use(addValue({ key: `key${ix}`, content: val }));
            etl.use(capitalize({ key: `key${ix}_capitalized`, content: `key${ix}` }));
        });
        etl.use([
            async (ctx, next) => {
                strings.forEach((content, ix) => {
                    assert.equal(ctx.getString(`key${ix}`), content.toString());
                    assert.equal(ctx.getString(`key${ix}_capitalized`), content.capitalize());
                });
                return next();
            },
        ]);
        return etl.run();
    });
});
//# sourceMappingURL=capitalize.test.js.map