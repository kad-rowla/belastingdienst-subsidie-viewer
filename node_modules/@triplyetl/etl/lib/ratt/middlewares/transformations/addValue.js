import { set } from "lodash-es";
import { addMwCallSiteToError } from "../../../utils/index.js";
import { isStatic } from "../assertions/term/str.js";
/**
 * This middleware allows any value to be added to the Etl Record.
 *
 * @remarks
 * This middleware is useful for data that is not present in the source data
 * record, but must be used in one or more assertions.
 *
 * @param args.content - Any value that can be represented in TypeScript.
 *
 * @param args.key - A new key where the value is stored.
 *
 * @example
 * The following snippet starts out with an empty source record (`{}`), and
 * adds a new `data` key to it.  The added value is an array that contains
 * a string and a number (in that order).
 *
 * This new value is used in the triple assertion, where `'data[0]'`
 * extracts the string element and `'data[1]'` extracts the number elements.
 *
 * ```ts
 * fromJson([{}]),
 * addValue({
 *   content: ['johndoe', 22],
 *   key: 'data',
 * }),
 * triple(iri(prefix.person, 'data[0]'), foaf.age, 'data[1]'),
 * ```
 *
 * This results in the following linked data assertion:
 *
 * ```ttl
 * person:johndoe foaf:age 22.
 * ```
 *
 * @example
 * The following snippet adds a key called `_startDate` that either contains
 * the start date as specified in the data source record, or the value
 * `'unknown'`:
 *
 * ```ts
 * fromJson([
 *   { id: '123', start: '2022-02-12' },
 *   { id: '456' },
 * ]),
 * ifElse({
 *   if: 'start',
 *   then: addLiteral({
 *     content: 'start',
 *     datatype: xsd.date,
 *     key: '_start',
 *   }),
 * }, {
 *   else: addValue({
 *     content: 'unknown',
 *     key: '_start',
 *   }),
 * }),
 * triple(iri(prefix.event, 'id'), sdo.startDate, '_start'),
 * ```
 *
 * This results in the following linked data assertions:
 *
 * ```ttl
 * event:123 sdo:startDate '2022-02-12'^^xsd:date.
 * event:456 sdo:startDate 'unknown'.
 * ```
 */
export default function (args) {
    return addMwCallSiteToError(async function (ctx, next) {
        if (ctx.isNotEmpty(args.key)) {
            throw new Error(`addValue: Record already contains key '${args.key}'. Use the 'replace' middleware instead`);
        }
        if (args.content === undefined || args.content === null) {
            throw new Error(`addValue: Can not add undefined or null for key '${args.key}'.`);
        }
        set(ctx.record, args.key, isStatic(args.content) ? args.content.toString() : args.content);
        return next();
    }, { sourceFuncName: "_addValue" });
}
//# sourceMappingURL=addValue.js.map