import { addMwCallSiteToError } from "../../../utils/index.js";
import str from "../assertions/term/str.js";
import { add } from "./custom/add.js";
/**
 * Transforms a string value to its capitalized variant.
 *
 * @remarks
 * If the first character of a string has an uppercase variant, then that
 * variant is used.  If the first character does not have an uppercase variant
 * -- because the character is already uppercase or is a punctuation character
 * --  then the string remains unchanged.
 *
 * This middleware can uppercase the first character in any language; the
 * Unicode Default Case Conversion algorithm is used.
 *
 * Capitalized strings are specifically useful if we want to create class
 * IRIs.  According to convention, class names often start with a capital
 * letter.
 *
 * @param args.content - A key that contains a string value.
 *
 * @param args.key - A new key where the capitalized result is stored.
 *
 * @example
 * The following snippet capitalizes the values of the `type` keys, and uses
 * them to create class IRIs.
 *
 * ```ts
 * fromJson([
 *   { id: '1', type: 'location' },
 *   { id: '2', type: 'person' },
 * ]),
 * capitalize({
 *   content: 'type',
 *   key: '_type',
 * }),
 * triple(iri(prefix.id, 'id'), a, iri(prefix.def, '_type')),
 * ```
 *
 * This results in the linked data assertions:
 *
 * ```ttl
 * id:1 a def:Location.
 * id:2 a def:Person.
 * ```
 */
export default function (args) {
    return addMwCallSiteToError(add({
        value: (context) => str(context.getString(args.content)).capitalize(),
        key: args.key,
    }), { sourceFuncName: "_capitalize" });
}
//# sourceMappingURL=capitalize.js.map