import { Key, Middleware } from "../../../generic/index.js";
import { StaticString } from "../assertions/term/str.js";
/**
 * Adds a given padding string zero or more times in front of a string value,
 * until the resulting string value is exactly a given number of characters
 * long.
 *
 * @remarks
 * This transformation is useful for identifiers that must have fixed length
 * and that may be prepended by zero's.
 *
 * The string value is copied over as-is when `targetLength` is smaller than
 * or equal to the length of the string value in key `content`.  This includes
 * cases where `targetLength` is negative or zero.
 *
 * If key `content` contains a numeric value, then that value is first cast to
 * string.
 *
 * @param args.content - A key that contains a string value.
 *
 * @param args.padString - The string that is added in front of the string
 * value in key `content`, until the result string has exactly `targetLength`
 * characters.
 *
 * @param args.targetLength - The exact number of characters that the
 * resulting string should have.
 *
 * @param args.key - A new key where the lowercased string is stored.
 *
 * @example
 * The following snippet processes identifiers of varying length, and ensures
 * that they have the same length after prefixing `'0'` characters.
 *
 * ```ts
 * fromJson([
 *   { id: '16784' },
 *   { id: '129' },
 * ]),
 * padStart({
 *   content: 'id',
 *   padString: '0',
 *   targetLength: 6,
 *   key: '_id',
 * }),
 * ```
 *
 * This results in the following two Etl Records:
 *
 * ```json
 * [
 *   {
 *     id: '16784',
 *     '_id': '016784'
 *   },
 *   {
 *     id: '129',
 *     '_id': '000129'
 *   }
 * ]
 * ```
 */
export default function <R = unknown>(args: {
    content: StaticString | Key;
    key: string;
    targetLength: number;
    padString?: string;
}): Middleware<R>;
//# sourceMappingURL=padStart.d.ts.map