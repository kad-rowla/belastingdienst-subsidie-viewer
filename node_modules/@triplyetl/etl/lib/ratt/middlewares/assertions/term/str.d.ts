/**
 * This module holds the code for typing string primitives as a 'static string'.
 * By this we mean that in almost all cases Etl will use string primitives as
 * a key for a record. But sometimes it is usefull to provide a regular string
 * to a middleware.
 *
 * The name of this function (`str`) is taken from the SPARQL function [`str`](https://www.w3.org/TR/sparql11-query/#func-str)
 */
interface IStaticString {
    static: String;
    key: string;
    regexp: RegExp;
    typeOfStatic: boolean;
}
export declare class StaticString extends String implements IStaticString {
    type: string;
    constructor(value: any);
    get static(): String;
    get key(): string;
    get regexp(): RegExp;
    get typeOfStatic(): boolean;
    /**
     *
     * @returns The first letter in uppercase, the rest in lowercase
     */
    capitalize(): string;
    private _capitalize;
    /**
     * Note: this function will match all whitespace like characters an replaces them with a regual space character:
     * - space character
     * - tab character
     * - carriage return character
     * - new line character
     * - vertical tab character
     * - form feed character
     *
     * @returns The first letter of each word in uppercase, the rest in lowercase
     */
    capitalizeWords(): string;
}
export declare function isStatic(value: any): value is StaticString;
export default function str(value: any): StaticString;
export {};
//# sourceMappingURL=str.d.ts.map