import { get } from "lodash-es";
import { isStatic } from "./str.js";
import { assertIsString, isIri } from "../../../../utils/asserts.js";
import { unknownValToIri } from "../../../../utils/coercions.js";
export function iri(keyOrPrefix, possibleKey) {
    const prefix = isIri(keyOrPrefix) ? keyOrPrefix : undefined;
    const key = typeof keyOrPrefix === "string" ? keyOrPrefix : possibleKey;
    return function _toIri(ctx) {
        let iri;
        if (possibleKey === undefined) {
            if (isIri(keyOrPrefix)) {
                return [keyOrPrefix];
            }
            // Using try/catch here as the Error message I was getting didn't fit the context of this function
            try {
                iri = ctx.getIri(keyOrPrefix);
            }
            catch (error) {
                let iriAny = ctx.getAny(keyOrPrefix);
                if (typeof iriAny === "boolean")
                    iriAny = `${iriAny ? "TRUE" : "False"} [type: boolean]`;
                else if (typeof iriAny === "object") {
                    try {
                        iriAny = JSON.stringify(iriAny);
                    }
                    catch (e) {
                        iriAny = `[${e.message}]`;
                    }
                }
                else
                    iriAny = `${iriAny.toString()} [type: ${typeof iriAny}]`;
                throw new Error(`Invalid Iri: '${iriAny}' at key: '${keyOrPrefix}' `);
            }
            return [iri];
        }
        if (!key && prefix) {
            iri = prefix;
            return [iri];
        }
        if (!isStatic(key)) {
            assertIsString(key, "Expected key to be a string");
            if (!ctx.hasKey(key))
                throw Error(`Record does not have key '${key}'`);
        }
        iri = unknownValToIri(isStatic(key) ? key.toString() : get(ctx.record, key), isStatic(key) ? `str('${key}')` : key, {
            prefix,
        });
        return [iri];
    };
}
export default iri;
//# sourceMappingURL=iri.js.map