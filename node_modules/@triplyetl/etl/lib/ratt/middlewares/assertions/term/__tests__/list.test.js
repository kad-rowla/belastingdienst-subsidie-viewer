import path from "path";
import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import fs from "fs-extra";
import { Etl, toRdf, fromJson, Destination, Iri } from "../../../../../generic/index.js";
import { triple } from "../../statement/index.js";
import iri from "../iri.js";
import list from "../list.js";
import literals from "../literals.js";
import { xsd } from "@triplyetl/vocabularies";
import literal from "../literal.js";
import jpath from "../jpath.js";
import str from "../str.js";
chai.use(chaiAsPromised);
const expect = chai.expect;
const testDestinationPath = path.resolve("tmp/out.nt");
const testDestinationPath2 = path.resolve("tmp/out2.nt");
const testDestination = Destination.file(testDestinationPath);
const testDestination2 = Destination.file(testDestinationPath2);
describe("toList", () => {
    it("Create list from source", async function () {
        const app = new Etl({
            defaultGraph: "https://default.com/",
            prefixes: { basket: Iri("https://www.triply.cc/fruitbasket/") },
        });
        app.use(fromJson([{ id: "basket", contains: ["Banana", "Blueberry", "Strawberry"] }]));
        app.use(triple(iri(app.prefix.basket, "id"), app.prefix.basket.concat("contains"), list(app.prefix.basket, literals("contains", xsd.string))));
        app.use(toRdf(testDestination));
        await app.run();
        expect(app["_runtimeStats"]["#Statements"]).to.equal(7);
    });
    it("Create list from mixed RecordGetters", async function () {
        const app = new Etl({
            defaultGraph: "https://default.com/",
            prefixes: { basket: Iri("https://www.triply.cc/fruitbasket/") },
        });
        app.use(fromJson([
            {
                id: "basket",
                contains: ["Banana", "Blueberry", "Strawberry"],
                secretCompartment: ["wine", "tequila"],
                badForYou: "cigarettes",
            },
        ]));
        app.use(triple(iri(app.prefix.basket, "id"), app.prefix.basket.concat("contains"), list(app.prefix.basket, [
            literal("contains[0]", xsd.string),
            iri(app.prefix.basket, "contains[1]"),
            iri(app.prefix.basket, "contains[2]"),
            "badForYou",
            jpath("secretCompartment[0]"),
            str("IamJustAString"), // staticString
        ])));
        app.use(toRdf(testDestination));
        await app.run();
        expect(app["_runtimeStats"]["#Statements"]).to.equal(13);
        expect((await fs.readFile(testDestinationPath)).toString().trim()).to.equal(`<https://www.triply.cc/fruitbasket/f6606e7783ab678c09e6898e8e63c461> <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> "Banana" .
<https://www.triply.cc/fruitbasket/f6606e7783ab678c09e6898e8e63c461> <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <https://www.triply.cc/fruitbasket/0a8c59422179edbe60d509b4f9962f8a> .
<https://www.triply.cc/fruitbasket/0a8c59422179edbe60d509b4f9962f8a> <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> <https://www.triply.cc/fruitbasket/Blueberry> .
<https://www.triply.cc/fruitbasket/0a8c59422179edbe60d509b4f9962f8a> <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <https://www.triply.cc/fruitbasket/1d88b9a98f45f38d67edc918a901c556> .
<https://www.triply.cc/fruitbasket/1d88b9a98f45f38d67edc918a901c556> <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> <https://www.triply.cc/fruitbasket/Strawberry> .
<https://www.triply.cc/fruitbasket/1d88b9a98f45f38d67edc918a901c556> <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <https://www.triply.cc/fruitbasket/c1b3010f066039c123d43b7ae044a229> .
<https://www.triply.cc/fruitbasket/c1b3010f066039c123d43b7ae044a229> <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> "cigarettes" .
<https://www.triply.cc/fruitbasket/c1b3010f066039c123d43b7ae044a229> <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <https://www.triply.cc/fruitbasket/51f863aae4e50395a2a45c52c106f920> .
<https://www.triply.cc/fruitbasket/51f863aae4e50395a2a45c52c106f920> <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> "wine" .
<https://www.triply.cc/fruitbasket/51f863aae4e50395a2a45c52c106f920> <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <https://www.triply.cc/fruitbasket/6e6557f6fe63f619ce38cbe61299bd71> .
<https://www.triply.cc/fruitbasket/6e6557f6fe63f619ce38cbe61299bd71> <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> "IamJustAString" .
<https://www.triply.cc/fruitbasket/6e6557f6fe63f619ce38cbe61299bd71> <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <http://www.w3.org/1999/02/22-rdf-syntax-ns#nil> .
<https://www.triply.cc/fruitbasket/basket> <https://www.triply.cc/fruitbasket/contains> <https://www.triply.cc/fruitbasket/f6606e7783ab678c09e6898e8e63c461> .`);
    });
    it("Able to specify a baseIri for List", async function () {
        const app = new Etl({
            defaultGraph: "https://default.com/",
            prefixes: { basket: Iri("https://www.triply.cc/fruitbasket/") },
        });
        app.use(fromJson([{ id: "basket", contains: ["Banana", "Blueberry", "Strawberry"] }]));
        app.use(triple(iri(app.prefix.basket, "id"), app.prefix.basket.concat("contains"), list(app.prefix.basket, literals("contains", xsd.string))));
        app.use(toRdf(testDestination2));
        await app.run();
        expect(app["_runtimeStats"]["#Statements"]).to.equal(7);
        expect((await fs.readFile(testDestinationPath2)).toString().trim()).to.equal(`<https://www.triply.cc/fruitbasket/00728b79289565b0cc4a74641b3b2dc7> <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> "Banana" .
<https://www.triply.cc/fruitbasket/00728b79289565b0cc4a74641b3b2dc7> <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <https://www.triply.cc/fruitbasket/023b7d3059ef0791f78f15826ba36e0c> .
<https://www.triply.cc/fruitbasket/023b7d3059ef0791f78f15826ba36e0c> <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> "Blueberry" .
<https://www.triply.cc/fruitbasket/023b7d3059ef0791f78f15826ba36e0c> <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <https://www.triply.cc/fruitbasket/80733c469d8b5d926fdeee409cfb9028> .
<https://www.triply.cc/fruitbasket/80733c469d8b5d926fdeee409cfb9028> <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> "Strawberry" .
<https://www.triply.cc/fruitbasket/80733c469d8b5d926fdeee409cfb9028> <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <http://www.w3.org/1999/02/22-rdf-syntax-ns#nil> .
<https://www.triply.cc/fruitbasket/basket> <https://www.triply.cc/fruitbasket/contains> <https://www.triply.cc/fruitbasket/00728b79289565b0cc4a74641b3b2dc7> .`);
    });
    it("Should skip with non-existent key", async function () {
        const app = new Etl({
            defaultGraph: "https://default.com/",
            prefixes: { basket: Iri("https://www.triply.cc/fruitbasket/") },
        });
        app.use(fromJson([{ id: "basket", contains: ["Banana", "Blueberry", "Strawberry"] }]));
        // app.use(triple(iri("id"), namedNode("contains"), list(app.prefix.basket, literal.forEach("test"))));
        app.use(toRdf(testDestination));
        app.use((ctx, next) => {
            expect(ctx.store.size).equal(0);
            return next();
        });
        await app.run();
    });
    it("Should skip if an empty getter is used", async function () {
        const app = new Etl({
            defaultGraph: "https://default.com/",
            prefixes: { basket: Iri("https://www.triply.cc/fruitbasket/") },
        });
        app.use(fromJson([{ id: "basket", contains: ["Banana", "Blueberry", "Strawberry"] }]));
        app
            .use();
        app.use(toRdf(testDestination));
        app.use((ctx, next) => {
            expect(ctx.store.size).equal(0);
            return next();
        });
        await app.run();
    });
    it("Should skip if empty array is given", async function () {
        const app = new Etl({
            defaultGraph: "https://default.com/",
            prefixes: { basket: Iri("https://www.triply.cc/fruitbasket/") },
        });
        app.use(fromJson([{ id: "basket", contains: ["Banana", "Blueberry", "Strawberry"] }]));
        // app.use(triple(iri("id"), namedNode("contains"), list(app.prefix.basket, [])));
        app.use(toRdf(testDestination));
        app.use((ctx, next) => {
            expect(ctx.store.size).equal(0);
            return next();
        });
        await app.run();
    });
});
//# sourceMappingURL=list.test.js.map