import { castArray } from "lodash-es";
import { assertIsNonEmptyArray } from "../../../../utils/asserts.js";
import { md5OfArray } from "../../../../utils/index.js";
import { getObjects } from "../statement/rdf/utils/getObjects.js";
import { rdf } from "@triplyetl/vocabularies";
// TODO @DocumentationTeam: add TS doc comment here
function list(prefix, listOrReference) {
    return function _list(ctx) {
        const list = castArray(listOrReference).flatMap((item) => {
            return getObjects(ctx, item);
        });
        assertIsNonEmptyArray(list, `Referenced value is an empty array`);
        const workingList = [...list];
        let listId;
        let previousItemId;
        // This solution assumes there is at least one list element, which
        // is guaranteed by the above assert
        // we skip the #Statement incrementation, since it would produce list.length! number of statements, instead of the actual number of statements
        while (workingList.length > 0) {
            const currentTerm = workingList[0];
            const currentItemId = prefix.concat(md5OfArray(workingList.map((term) => JSON.stringify(term))));
            ctx.store.addQuad(currentItemId, rdf.first, currentTerm, undefined, undefined);
            if (previousItemId) {
                ctx.store.addQuad(previousItemId, rdf.rest, currentItemId, undefined, undefined);
            }
            else {
                listId = currentItemId;
            }
            workingList.shift();
            previousItemId = currentItemId;
        }
        ctx.store.addQuad(previousItemId, rdf.rest, rdf.nil, undefined, undefined);
        return [listId];
    };
}
export default list;
//# sourceMappingURL=list.js.map