import { NamedNode } from "@triplydb/data-factory/Terms.js";
import { TermGetter } from "./getter.js";
import { StaticString } from "./str.js";
import { Key } from "../../../../generic/index.js";
import { Iri } from "@triplyetl/vocabularies";
/**
 * Creates an IRI based on a dynamic key:
 * - `iri(KEY)` if key has a IRI value.
 * - `iri(PREFIX, KEY)` if key has a string value that acts as the local name
 *   of an IRI.
 *
 * How to use
 * ----------
 *
 * To create an IRI from a prefix and a key that has a string:
 *
 *   1. Choose the `PREFIX` for the IRI that you want to create.
 *   2. Choose the `KEY` that contains the local name (i.e., the part of an
 *      IRI that occurs after the last forward slash).
 *   3. Make the following call: `iri(PREFIX, KEY)`
 *
 * To create an IRI from a key that has an IRI:
 *
 *   1. Make the following call: `iri(KEY)`
 *
 * Examples
 * --------
 *
 * To create an IRI from `prefix.a` and `someKey`:
 *
 * ```ts
 * triple(iri(prefix.a, 'someKey'), a, owl.NamedIndividual),
 * ```
 *
 * To use an IRI stored in `someKey`:
 *
 * ```ts
 * triple(iri('someKey'), a, owl.NamedIndividual),
 * ```
 */
export declare function iri(key: Key | StaticString): TermGetter<NamedNode>;
export declare function iri(prefix: Iri, key?: Key | StaticString): TermGetter<NamedNode>;
export default iri;
//# sourceMappingURL=iri.d.ts.map