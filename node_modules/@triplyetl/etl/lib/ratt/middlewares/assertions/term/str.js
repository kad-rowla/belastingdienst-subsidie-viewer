/**
 * This module holds the code for typing string primitives as a 'static string'.
 * By this we mean that in almost all cases Etl will use string primitives as
 * a key for a record. But sometimes it is usefull to provide a regular string
 * to a middleware.
 *
 * The name of this function (`str`) is taken from the SPARQL function [`str`](https://www.w3.org/TR/sparql11-query/#func-str)
 */
export class StaticString extends String {
    constructor(value) {
        super(value);
        this.type = "StaticString";
    }
    get static() {
        return new String(this.toString());
    }
    get key() {
        return this.toString();
    }
    get regexp() {
        return new RegExp(this.toString());
    }
    get typeOfStatic() {
        return true;
    }
    /**
     *
     * @returns The first letter in uppercase, the rest in lowercase
     */
    capitalize() {
        return this._capitalize(this.toString());
    }
    _capitalize(word) {
        if (word === "")
            return word;
        else
            return word[0].toUpperCase() + word.slice(1).toLowerCase();
    }
    /**
     * Note: this function will match all whitespace like characters an replaces them with a regual space character:
     * - space character
     * - tab character
     * - carriage return character
     * - new line character
     * - vertical tab character
     * - form feed character
     *
     * @returns The first letter of each word in uppercase, the rest in lowercase
     */
    capitalizeWords() {
        const str = this.toString();
        return str
            .split(/\s/)
            .map((word) => this._capitalize(word))
            .join(" ");
    }
}
export function isStatic(value) {
    return (typeof value === "object" && Object.prototype.hasOwnProperty.call(value, "type") && value.type === "StaticString");
}
// TODO @DocumentationTeam: add TS doc comment here
export default function str(value) {
    return new StaticString(value);
}
//# sourceMappingURL=str.js.map