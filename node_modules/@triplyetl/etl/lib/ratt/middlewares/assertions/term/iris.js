import { castArray, get } from "lodash-es";
import str, { isStatic } from "./str.js";
import { unknownValToIri } from "../../../../utils/coercions.js";
import { isIri } from "../../../../utils/asserts.js";
export function iris(keyOrPrefix, possibleKey) {
    return (ctx) => {
        if (isIri(keyOrPrefix)) {
            const content = [];
            castArray(possibleKey).forEach((possibleKey) => {
                if (!isStatic(possibleKey)) {
                    if (!ctx.hasKey(possibleKey))
                        throw new Error(`The key '${possibleKey}' is missing, unable to get a Iri values.`);
                    ctx.getArray(possibleKey, "string").map((val) => content.push(str(val)));
                }
                else {
                    content.push(possibleKey);
                }
            });
            if (content.length === 0) {
                throw Error("Can not create Iri's using a prefix function with no local values.");
            }
            return content.map((key) => unknownValToIri(isStatic(key) ? key.toString() : get(ctx.record, key), isStatic(key) ? `str('${key}')` : key, {
                prefix: keyOrPrefix,
            }));
        }
        else {
            const content = [];
            castArray(keyOrPrefix).forEach((keyOrPrefix) => {
                if (!isStatic(keyOrPrefix)) {
                    if (!ctx.hasKey(keyOrPrefix))
                        throw new Error(`The key '${keyOrPrefix}' is missing, unable to get a Iri values.`);
                    ctx.getArray(keyOrPrefix, "string").map((val) => content.push(str(val)));
                }
                else {
                    content.push(keyOrPrefix);
                }
            });
            if (content.length === 0) {
                throw Error("Can not create Iri's using a prefix function with no local values.");
            }
            return content.map((key) => unknownValToIri(isStatic(key) ? key.toString() : get(ctx.record, key), isStatic(key) ? `str('${key}')` : key));
        }
    };
}
export default iris;
//# sourceMappingURL=iris.js.map