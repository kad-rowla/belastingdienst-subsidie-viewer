import { isStatic } from "../../../term/str.js";
import { castArray, isFunction, once } from "lodash-es";
import { coerceLiteral } from "./coerceLiteral.js";
import { getFactory } from "@triplydb/data-factory";
import { getValFromTermGetter } from "../../../term/getter.js";
import { Etl } from "../../../../../../generic/index.js";
import { isNamedNode, isLiteral } from "../../../../../../utils/asserts.js";
import { isKey } from "../../../../../../generic/Context.js";
const DataFactory = once(() => getFactory({ skipValidation: Etl.skipValidation }));
export const getObjects = (ctx, value) => {
    if (isFunction(value)) {
        return getValFromTermGetter(ctx, value);
    }
    else if (isNamedNode(value) || isLiteral(value)) {
        return [value];
    }
    const objects = [];
    castArray(value).forEach((val) => {
        if (isStatic(val))
            objects.push(DataFactory().literal(val.toString()));
        // first test for string primitives, they are keys:
        else if (isKey(val)) {
            castArray(ctx.getAny(val)).forEach((v) => objects.push(isNamedNode(v) ? v : coerceLiteral(v, undefined, val.toString())));
        }
        else {
            objects.push(isNamedNode(val) ? val : coerceLiteral(val));
        }
    });
    return objects;
};
//# sourceMappingURL=getObjects.js.map