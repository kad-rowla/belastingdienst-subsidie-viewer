import { Middleware } from "../../../../generic/index.js";
import { O, SPG } from "./rdf/quad.js";
/**
 * Assets a triple, i.e. a statement that consists of a subject term, a
 * predicate term, and an object term.
 *
 * @remarks
 * A triple is a sequence of three terms: subject, predicate, and object.
 * A triple assets a factual statements, claiming that the thing denoted by
 * the subject term and the thing denotes by the object term are related to
 * one another according to the relationship denoted by the predicate term.
 * A triple is the smallest unit of meaning in linked data.
 *
 * @param subject - A subject term.  This must be either an {@link iri} or a
 * {@link literal}.
 *
 * @param predicate - A predicate term.  This must be an {@link iri}.
 *
 * @param object - An object term.  This must be either an {@link iri} or a
 * {@link literal}.
 *
 * @example
 * The following triple asserts that something is a person.  Notice that:
 * - the subject term is an IRI that is constructed out of an IRI
 * prefix (`prefix.person`) and a key that contains the IRI local name
 * (`'id'`),
 * - and the predicate and object terms are IRIs that are imported from
 * the vocabulary module.
 *
 * ```ts
 * triple(iri(prefix.person, 'id'), a, foaf.Person),
 * ```
 *
 * @example
 * The following triple asserts that something has an age that is derived from
 * the `'age'` key in the Etl Records.  Notice that:
 * - the subject term is an IRI that is stored in the `'_person'` key of the
 * Etl Record (possibly created with the {@link addIri} transformation),
 * - the predicate term is an IRI that is imported from the vocabulary module,
 * - and the object term is a typed literal with a datatype IRI that is
 * imported from the vocabulary module.
 *
 * ```ts
 * triple('_person', sdo.numChildren, literal('age', xsd.nonNegativeInteger)),
 * ```
 */
declare const _default: (subject: SPG, predicate: SPG, object: O) => Middleware;
export default _default;
//# sourceMappingURL=triple.d.ts.map