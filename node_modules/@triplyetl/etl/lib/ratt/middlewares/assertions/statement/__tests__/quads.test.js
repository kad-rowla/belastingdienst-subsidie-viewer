import chai from "chai";
import { addIri, addLiteral, addValue } from "../../../transformations/index.js";
import { getEtlForTesting } from "../../../../__tests__/getEtlForTesting.js";
import quads from "../quads.js";
import * as vocab from "@triplyetl/vocabularies";
import { str, literal } from "../../term/index.js";
import { getFactory } from "@triplydb/data-factory";
const dataFactory = getFactory();
const assert = chai.assert;
const graph = dataFactory.namedNode("http://ex.com/graph");
const anotherGraph = dataFactory.namedNode("http://ex.com/anotherGraph");
describe("writing.quads", () => {
    it("should create 5 triples in 2 quads", () => {
        return getEtlForTesting([
            addLiteral({ content: str("Heineken"), language: vocab.languageTag("nl"), key: "naam" }),
            addValue({ content: str("Heineken"), key: "naamPrimitive" }),
            addIri({ content: str("http://ex.com/Brewery"), key: "subject" }),
            addIri({ content: str("http://ex.com/name"), key: "predicate" }),
            addIri({ content: str("http://ex.com/Heineken"), key: "objectIri" }),
            quads([vocab.sdo.Brewery, vocab.rdf.type, vocab.sdo.FoodEstablishment, graph], [vocab.sdo.Brewery, vocab.sdo.name, literal(str("Naam"), vocab.languageTag("nl")), graph], [vocab.sdo.Brewery, vocab.sdo.name, "objectIri", graph], [vocab.sdo.Brewery, vocab.sdo.name, "naam", anotherGraph], [vocab.sdo.Brewery, vocab.sdo.name, str("Heineken Brouwerij"), anotherGraph], [vocab.sdo.Brewery, vocab.sdo.name, "naamPrimitive", anotherGraph]),
            async (ctx, next) => {
                assert.equal(6, ctx.store.getQuads({}).length);
                assert.equal(3, ctx.store.getQuads({ graph }).length, "Incorrect quads count for 1st graph");
                assert.equal(3, ctx.store.getQuads({ graph: anotherGraph }).length, "Incorrect quads count for 2nd graph");
                return next();
            },
        ]).run();
    });
});
//# sourceMappingURL=quads.test.js.map