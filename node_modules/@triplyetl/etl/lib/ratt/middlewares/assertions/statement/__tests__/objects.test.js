import chai from "chai";
import * as vocab from "@triplyetl/vocabularies";
import { getEtlForTesting } from "../../../../__tests__/getEtlForTesting.js";
import { addValue, addLiteral } from "../../../transformations/index.js";
import { str, literal } from "../../term/index.js";
import objects from "../objects.js";
import { getFactory } from "@triplydb/data-factory";
const dataFactory = getFactory();
const assert = chai.assert;
describe("writing.objects", () => {
    it("should create 2 triples from static strings", () => {
        const etl = getEtlForTesting([
            objects(str("http://ex.com/hei"), vocab.sdo.name, literal(str("Heineken"), vocab.languageTag("nl")), str("Heineken")),
            async (ctx, next) => {
                assert.equal(2, ctx.store.getQuads({}).length);
                assert.equal(1, ctx.store.getQuads({ object: dataFactory.literal("Heineken", "nl") }).length);
                assert.equal(1, ctx.store.getQuads({ object: dataFactory.literal("Heineken") }).length);
                return next();
            },
        ]);
        return chai.expect(etl.run()).to.eventually.be.fulfilled;
    });
    it("should create 2 triples from keys", () => {
        const etl = getEtlForTesting([
            addValue({ key: "object1", content: str("Heineken") }),
            addLiteral({ key: "object2", content: str("Heineken"), language: vocab.languageTag("nl") }),
            objects(str("http://ex.com/hei"), vocab.sdo.name, "object1", "object2"),
            async (ctx, next) => {
                assert.equal(2, ctx.store.getQuads({}).length);
                assert.equal(1, ctx.store.getQuads({ object: dataFactory.literal("Heineken", "nl") }).length);
                assert.equal(1, ctx.store.getQuads({ object: dataFactory.literal("Heineken") }).length);
                return next();
            },
        ]);
        return chai.expect(etl.run()).to.eventually.be.fulfilled;
    });
});
//# sourceMappingURL=objects.test.js.map