import { convertMwListToMiddleware } from "../../../../utils/index.js";
import triple from "./triple.js";
const _objects = (subject, predicate, ...objects) => objects.map((object) => triple(subject, predicate, object));
/**
 * Asserts multiple triples with the same subject term and predicate term.
 *
 * @remarks
 * This middleware provides shorthand notation for assertions that can also
 * be made with multiple {@link triple} invocations.  The notational
 * convenience of this middleware is similar to predicate-object lists in
 * TriG, Turtle, and SPARQL.
 *
 * @param subject - A subject term.  This must be either an {@link iri} or a
 * {@link literal}.
 *
 * @param predicate - A predicate term.  This must be an {@link iri}.
 *
 * @param objects - An array of object terms.  This must be either an
 * {@link iri} or a {@link literal}.  Every distinct object term in the array
 * results in a distinct triple assertion.
 *
 * @example
 * The following snippet asserts a preferred label and multiple alternative
 * labels for cities:
 *
 * ```ts
 * fromJson([{
 *    name: 'Ney York',
 *    alt1: 'The Big Apple',
 *    alt2: 'The Capital of the World',
 *    alt3: 'The City of Dreams',
 *    alt4:  'The City That Never Sleeps',
 * }]),
 * objects(iri(prefix.city, 'name'), skos.altLabel, [
 *   'alt1',
 *   'alt2',
 *   'alt3',
 *   'alt4',
 * ]),
 * ```
 *
 * This results in the following 4 linked data assertions:
 *
 * ```ttl
 * city:New York
 *   skos:altLabel
 *     'The Big Apple'@en.
 *     'The Capital of the World'@en,
 *     'The City of Dreams'@en,
 *     'The City That Never Sleeps'@en.
 * ```
 */
export default function objects(subject, predicate, ...objects) {
    return convertMwListToMiddleware(_objects(subject, predicate, ...objects), "_objects");
}
//# sourceMappingURL=objects.js.map