import { isStatic } from "../../../term/str.js";
import { has, isDate, once, set } from "lodash-es";
import { getFactory } from "@triplydb/data-factory";
import { coerceLanguageOrDataType } from "./coerceLanguageOrDataType.js";
import { isLiteral } from "../../../../../../utils/asserts.js";
import { xsd } from "@triplyetl/vocabularies";
import Etl from "../../../../../../generic/Etl.js";
const DataFactory = once(() => getFactory({ skipValidation: Etl.skipValidation }));
export function coerceLiteral(value, languageOrDataType, keyName, //for debugging
keyNameLanguageOrDataType) {
    if (isLiteral(value)) {
        const newLanguageOrDataType = languageOrDataType === undefined
            ? coerceLanguageOrDataType(value.language || value.datatype || xsd.string)
            : coerceLanguageOrDataType(languageOrDataType, value.language || value.datatype || xsd.string);
        const literal = DataFactory().literal(value.value, newLanguageOrDataType);
        Object.entries(value).forEach(([k, v]) => {
            if (!has(literal, k))
                set(literal, k, v);
        });
        return literal;
    }
    else if (typeof value === "string" || isStatic(value)) {
        if (value.toString() === "") {
            throw new Error(`Could not coerce ${keyName ? `key '${keyName}'` : "[unkown key]"} into a Literal because it's value is empty`);
        }
        return DataFactory().literal(value.toString(), coerceLanguageOrDataType(languageOrDataType, xsd.string, keyNameLanguageOrDataType));
    }
    else if (isDate(value))
        return DataFactory().literal(value.toISOString(), coerceLanguageOrDataType(languageOrDataType, xsd.dateTime, keyNameLanguageOrDataType));
    else if (typeof value === "boolean")
        return DataFactory().literal(value, coerceLanguageOrDataType(languageOrDataType, xsd.boolean, keyNameLanguageOrDataType));
    else if (typeof value === "bigint")
        return DataFactory().literal(value.toString(), coerceLanguageOrDataType(languageOrDataType, xsd.double, keyNameLanguageOrDataType));
    else if (typeof value === "number") {
        const datatype = value < 0 && Number.isInteger(value) ? xsd.negativeInteger : Number.isInteger(value) ? xsd.integer : xsd.float;
        return DataFactory().literal(value, coerceLanguageOrDataType(languageOrDataType, datatype, keyNameLanguageOrDataType));
    }
    else
        throw new Error(`Could not coerce ${keyName ? `key '${keyName}'` : "[unkown key]"} with value '${value}' into a Literal`);
}
//# sourceMappingURL=coerceLiteral.js.map