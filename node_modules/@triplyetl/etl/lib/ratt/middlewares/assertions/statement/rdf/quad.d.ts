import { Literal, NamedNode } from "@triplydb/data-factory/Terms.js";
import { Middleware } from "../../../../../generic/index.js";
import { Key } from "../../../../../generic/Context.js";
import { TermGetter } from "../../term/getter.js";
import { StaticString } from "../../term/str.js";
export type SPG = StaticString | Key | TermGetter<NamedNode>;
export type O = Key | StaticString | ObjectLiterals | ObjectLiterals[] | TermGetter<NamedNode | Literal>;
export type ObjectLiterals = boolean | Key | number | bigint | Date;
export type Pair = [SPG, O];
export type Triple = [SPG, SPG, O];
export type Quad = [SPG, SPG, O, SPG];
export declare const isSPG: (value: any) => value is SPG;
export declare const isO: (value: any) => value is O;
export declare const isOs: (value: any) => value is O;
export declare const isObjectLiteral: (value: any) => value is ObjectLiterals;
export declare const isObjectLiterals: (value: any[]) => value is ObjectLiterals[];
export declare const isPair: (value: any) => value is Pair;
export declare const isPairs: (value: any) => value is Pair[];
export declare const isTriple: (value: any) => value is Triple;
export declare const isQuad: (value: any) => value is Quad;
export declare const isTermGetterForNamednode: (value: any) => value is TermGetter<NamedNode<string>>;
export declare const isTermGetterForLiteral: (value: any) => value is TermGetter<Literal<string>>;
export default function _quad(subject: SPG, predicate: SPG, object: O, graph?: SPG): Middleware;
//# sourceMappingURL=quad.d.ts.map