//external dependencies
import { dataFactory } from "@triplydb/engine/constants.js";
import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { Source } from "../../../generic/index.js";
import Etl from "../../../generic/Etl.js";
import { quad, triple } from "../../../ratt/middlewares/assertions/statement/index.js";
import construct from "../construct.js";
import { expectNoBlankNodesMw } from "../../../__tests__/util.js";
import logQuads from "../../../debug/logQuads.js";
chai.use(chaiAsPromised);
const expect = chai.expect;
const pref = dataFactory.prefixer("https://example.org/");
function countQuadsMw(counter) {
    return async function (ctx, next) {
        const stream = ctx.store.match();
        while (stream.read() !== null) {
            counter.count++;
        }
        return next();
    };
}
describe("SparqlConstruct", function () {
    it("with blank nodes in query", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(triple(pref("a"), pref("b"), pref("c")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s ?p [] .
        } WHERE {
          graph ?g {
            ?s ?p ?o .
          }
        }
      `));
        app.use(expectNoBlankNodesMw);
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(2);
    });
    it("with graph in query", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(triple(pref("a"), pref("b"), pref("c")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s ?p pref:d .
        } WHERE {
          graph ?g {
            ?s ?p ?o .
          }
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(2);
    });
    it("with a getter", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(triple(pref("a"), pref("b"), pref("c")));
        app.use(construct(() => `
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s ?p pref:d .
        } WHERE {
          graph ?g {
            ?s ?p ?o .
          }
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(2);
    });
    it("with named graph in query", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("a"), pref("b"), pref("f"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s ?p pref:d .
        } WHERE {
          graph pref:g {
            ?s ?p ?o .
          }
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(3);
    });
    it("with two differently named graphs", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("c"), pref("d"), pref("e"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s pref:f ?o.
        } WHERE {
          ?s pref:b/pref:d ?o .
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(3);
    });
    it("with FILTER NOT EXISTS", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("c"), pref("d"), pref("e"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
           pref:f pref:f pref:f .
        } WHERE {
          FILTER NOT EXISTS {
            pref:a pref:b pref:c .
            pref:c pref:d pref:e .
          }
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(2);
    });
    it("with NegatedPropertySet 1 with Speedy engine", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("a"), pref("d"), pref("e"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
           ?s pref:f ?o .
        } WHERE {
          ?s !pref:b ?o .
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(3);
    });
    it("with NegatedPropertySet 2 with Speedy engine", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("a"), pref("d"), pref("e"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s pref:f ?o .
        } WHERE {
          ?s !(pref:b|pref:d) ?o.
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(2);
    });
    it("with NegatedPropertySet 3 with Speedy engine", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("a"), pref("d"), pref("e"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s pref:f pref:f .
        } WHERE {
          ?s !(pref:nonexistant) pref:c, pref:e .
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(3);
    });
    it("with NegatedPropertySet 4 with Speedy engine", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("c"), pref("b"), pref("a"), pref("g")));
        app.use(quad(pref("e"), pref("d"), pref("a"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s pref:f pref:f .
        } WHERE {
          ?s !(^pref:nonexistant) pref:c, pref:e .
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(3);
    });
    it("with NegatedPropertySet 5 with Speedy engine", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("c"), pref("b"), pref("a"), pref("g")));
        app.use(quad(pref("e"), pref("d"), pref("a"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s pref:f pref:f .
        } WHERE {
          ?s !(^pref:b|^pref:d) pref:c, pref:e .
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(2);
    });
    it("with NegatedPropertySet in a GRAPH statement 1 with Speedy engine", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("c"), pref("b"), pref("a"), pref("g")));
        app.use(quad(pref("e"), pref("d"), pref("a"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s pref:f pref:f .
        } WHERE {
          GRAPH ?g {
            ?s !(^pref:nonexistant) pref:c, pref:e .
          }
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(2);
    });
    it("with NegatedPropertySet in a GRAPH statement 2 with Speedy engine", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("a"), pref("d"), pref("e"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s pref:f pref:f .
        } WHERE {
          GRAPH pref:doesnotexist {
            ?s !(pref:nonexistant) pref:c, pref:e .
          }
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(2);
    });
    it("with OneOrMorePath", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("c"), pref("b"), pref("e"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          pref:f pref:f pref:f .
        } WHERE {
          pref:a pref:b+ pref:e .
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(3);
    });
    /** known limitation */
    it("with long OneOrMorePath", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("c"), pref("b"), pref("d"), pref("g")));
        app.use(quad(pref("d"), pref("b"), pref("e"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          pref:f pref:f pref:f .
        } WHERE {
          pref:a pref:b+ pref:e .
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(4);
    });
    /** known limitation */
    it("with ZeroOrMorePath", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("c"), pref("b"), pref("e"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          pref:f pref:f pref:f .
        } WHERE {
          pref:a pref:b* pref:e .
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(3);
    });
    it("with SequencePath", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("e"), pref("d"), pref("c"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s pref:f ?o.
        } WHERE {
          ?s pref:b/^pref:d ?o .
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(3);
    });
    it("with AlternativePath", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("a"), pref("d"), pref("e"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s pref:f pref:f .
        } WHERE {
          ?s (pref:b|pref:d) pref:c, pref:e .
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(3);
    });
    it("with AlternativePath in a GRAPH statement", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("a"), pref("d"), pref("e"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s pref:f pref:f .
        } WHERE {
          GRAPH ?g {
            ?s (pref:b|pref:d) pref:c, pref:e .
          }
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(2);
    });
    it.skip("with FILTER NOT EXISTS that follows the scope of GRAPH", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("c"), pref("d"), pref("e"), pref("k")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s pref:f ?o.
        } WHERE {
          ?s ?p ?o .
          # The GRAPH statement does influence the results of the FILTER NOT EXISTS
          GRAPH pref:nonexistant {
            FILTER NOT EXISTS {
              ?s ?p ?o .
            }
          }
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        app.use(logQuads());
        await app.run();
        expect(counter.count).to.equal(4);
    });
    it("with one named graph", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(quad(pref("a"), pref("b"), pref("c"), pref("g")));
        app.use(quad(pref("c"), pref("d"), pref("e"), pref("g")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s pref:f ?o.
        } WHERE {
          ?s pref:b/pref:d ?o .
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(3);
    });
    it("Using invalid query", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(triple(pref("a"), pref("b"), pref("c")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s ?
      `));
        await expect(app.run()).eventually.rejectedWith(/Failed to parse query: Parse error on line 4/);
    });
    it("without graph in query", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(triple(pref("a"), pref("b"), pref("c")));
        app.use(construct(`
        PREFIX pref: <${pref("").value}>
        CONSTRUCT {
          ?s ?p pref:d .
        } WHERE {
          ?s ?p ?o .
        }
      `));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(2);
    });
    it("Using a saved query", async function () {
        const app = new Etl({ defaultGraph: "https://default.com/" });
        app.use(triple(pref("a"), pref("b"), pref("c")));
        app.use(
        // This query should construct a new triple for every existing one.
        construct(Source.TriplyDb.query("triply", "ratt-construct-query-test", {
            triplyDb: { url: "https://api.nightly.triplydb.com" },
            variables: { fake: "nothing" },
        })));
        const counter = { count: 0 };
        app.use(countQuadsMw(counter));
        await app.run();
        expect(counter.count).to.equal(2);
    });
});
//# sourceMappingURL=construct.test.js.map