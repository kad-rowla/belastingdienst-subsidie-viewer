import * as fs from "fs";
import { registerSource } from "./file.js";
/**
 * Prints the resulting RDF (n-triples) to STDOUT or STDERR
 *
 * This output can be used to pipe RDF to other tools like Jena scripts:
 *  `npx etl lib/etl.js 1>/dev/null 2>rdfxml --out=rdfxml | tee /tmp/data.rdf`
 *
 * Note: the default behaviour is to print to STDERR, since the Etl cli scripts
 * already outputs information to STDOUT.
 *
 * @param streamName
 * @returns
 */
export default function (streamName = "stderr", extension = "nt") {
    return {
        type: "terminal",
        fingerprint: `terminal://${streamName}`,
        fileInfo: { extension, compression: undefined },
        registerSource,
        init: async (_) => { },
        postProcess: async (_app, filesWithMetaData) => {
            filesWithMetaData.forEach((f) => fs.createReadStream(f.filename).pipe(process[streamName]));
        },
    };
}
//# sourceMappingURL=terminal.js.map