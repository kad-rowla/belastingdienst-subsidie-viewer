import TriplyDb, { AppConfig as TriplyDbConfig } from "@triply/triplydb/App.js";
import { Destination } from "./index.js";
import { UpdateDataset as UpdateDatasetCore } from "@triply/utils/Models.js";
import { NamedNodeCompatibleType } from "../../../utils/index.js";
export interface AllOptions {
    /**
     * Remove all pre-existing graphs from the dataset  (default: false)
     */
    truncateGraphs: boolean;
    /**
     * Overwrite graphs. By default, it will rename graphs if they already exist
     * Currently, this is only supported when using named graphs. Overwriting default graphs is not supported.
     */
    overwrite: boolean;
    mergeGraphs: boolean;
    /**
     * After a successful upload, automatically synchronizes out-of-date services for the dataset. If a service
     * is being stopped or removed, then it will be skipped from synchronization. If a service has raised an
     * error, then the synchronization will fail.  (default: false)
     */
    synchronizeServices: boolean | string | string[];
    triplyDb?: TriplyDb | TriplyDbConfig;
    /**
     * Default graph. By default, the default graph from the Etl app is used
     */
    defaultGraph?: NamedNodeCompatibleType;
    /**
     * Register this dataset with the [NDE Dataset register](https://datasetregister.netwerkdigitaalerfgoed.nl/)
     */
    submitToNDEDatasetRegister?: boolean;
    /**
     * When using metadata to change existing Datasets, this value specifies if that metadata should be merged, replaced or kept.
     * To prevend overwriting metadata provided in the UI/website, the default value is 'keep'. When 'merge' is used, only empty values will be replaced.
     * For new datasets this value is ignored and the metadata is always used.
     */
    existingMetadata?: "merge" | "replace" | "keep";
}
interface DefaultOptions extends AllOptions {
    overwrite: true;
    mergeGraphs: false;
}
interface MergeOptions extends AllOptions {
    overwrite: false;
    truncateGraphs: false;
    mergeGraphs: true;
}
export type DatasetMetadata = Partial<Omit<UpdateDatasetCore, "topics">> & {
    name: string;
};
export type Options = MergeOptions | DefaultOptions;
export default function rdf(datasetName: string | Partial<DatasetMetadata>, options?: Partial<Options>): Destination;
export default function rdf(accountName: string, datasetName: string | Partial<DatasetMetadata>, options?: Partial<Options>): Destination;
export {};
//# sourceMappingURL=rdf.d.ts.map