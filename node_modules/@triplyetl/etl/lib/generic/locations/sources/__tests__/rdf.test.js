//external dependencies
import path from "path";
import fs from "fs-extra";
import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { uniq } from "lodash-es";
import { Etl, loadRdf, Source } from "../../../index.js";
chai.use(chaiAsPromised);
const expect = chai.expect;
const tmpDir = path.resolve("tmp");
describe("Read TriplyDB RDF graphs", function () {
    this.timeout(4000);
    before(async () => {
        await fs.emptyDir(tmpDir);
    });
    it("with dataset from nightly", async function () {
        const app = new Etl({
            defaultGraph: "https://default.com/",
            sources: {
                in: Source.TriplyDb.rdf("triply", "triply-pets", {
                    triplyDb: { url: "https://api.nightly.triplydb.com" },
                }),
            },
        });
        app.use(loadRdf(app.sources.in));
        let statementCount = 0;
        app.use(async (ctx) => {
            statementCount += ctx.store.getQuads(null, null, null, null).length;
        });
        await app.run();
        expect(statementCount).to.be.greaterThan(0);
    });
    it("with single graph from nightly", async function () {
        const graph = "https://console.nightly.triply.cc/triply/Triply-Pets/graphs/Pinot";
        const app = new Etl({
            defaultGraph: "https://default.com/",
            sources: {
                in: Source.TriplyDb.rdf("triply", "triply-pets", {
                    graphs: [graph],
                    triplyDb: { url: "https://api.nightly.triplydb.com" },
                }),
            },
        });
        app.use(loadRdf(app.sources.in));
        let statementCount = 0;
        app.use(async (ctx) => {
            const quads = ctx.store.getQuads(null, null, null, null);
            statementCount += quads.length;
            expect(quads[0].graph.value).to.equal(graph);
        });
        await app.run();
        expect(statementCount).to.equal(35);
    });
    it("with multiple graphs from nightly", async function () {
        const graphs = [
            "https://console.nightly.triply.cc/triply/Triply-Pets/graphs/Pinot",
            "https://console.nightly.triply.cc/triply/Triply-Pets/graphs/Merlot",
        ];
        const app = new Etl({
            defaultGraph: "https://default.com/",
            sources: {
                in: Source.TriplyDb.rdf("triply", "triply-pets", {
                    graphs,
                    triplyDb: { url: "https://api.nightly.triplydb.com" },
                }),
            },
        });
        app.use(loadRdf(app.sources.in));
        let statementCount = 0;
        let foundGraphs = [];
        app.use(async (ctx) => {
            const quads = ctx.store.getQuads(null, null, null, null);
            statementCount += quads.length;
            foundGraphs = uniq(quads.map((q) => q.graph.value));
        });
        await app.run();
        expect(statementCount).to.equal(70);
        expect(foundGraphs).to.deep.equal(graphs);
    });
});
//# sourceMappingURL=rdf.test.js.map