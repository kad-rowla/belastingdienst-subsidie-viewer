import TriplyDb, { AppConfig as TriplyDbConfig } from "@triply/triplydb/App.js";
import { ContentType, FileSourceInfo, IterableSourceInfo, BooleanSourceInfo, SourceGetter, StringSourceInfo } from "./index.js";
import { Models } from "@triply/utils";
import Query, { Binding, VariableValues } from "@triply/triplydb/Query.js";
import Etl from "../../Etl.js";
export interface SavedQueryOptions {
    triplyDb?: TriplyDb | TriplyDbConfig;
    variables?: VariableValues;
    version?: number;
}
export interface QueryInfo {
    triplyDb: TriplyDb;
    query: Query;
    info: Models.Query;
    account: User | Org;
    cacheDir: string;
    opts?: SavedQueryOptions;
    accountName?: string;
    queryName: string;
}
type QuerySourceInfo<C extends ContentType> = C extends "statements" ? StringSourceInfo & FileSourceInfo : C extends "string" ? StringSourceInfo & FileSourceInfo : C extends "records" ? IterableSourceInfo<Binding> : C extends "boolean" ? BooleanSourceInfo : never;
export declare const isQuerySourceGetter: (val: any) => val is QuerySourceGetter;
export type QuerySourceGetter = SourceGetter<"statements", QuerySourceInfo<"statements">> & SourceGetter<"string", QuerySourceInfo<"string">> & SourceGetter<"records", QuerySourceInfo<"records">> & SourceGetter<"boolean", BooleanSourceInfo> & {
    $id: string;
    getQueryInfo: (app: Etl) => Promise<QueryInfo>;
};
export default function (queryName: string, opts?: SavedQueryOptions): QuerySourceGetter;
export default function (accountName: string, queryName: string, opts?: SavedQueryOptions): QuerySourceGetter;
import Org from "@triply/triplydb/Org.js";
import User from "@triply/triplydb/User.js";
export {};
//# sourceMappingURL=savedQuery.d.ts.map