import { Etl, fromJson, toTriplyDb } from "../../../index.js";
import { expect } from "chai";
import { triple, iri, str } from "../../../../ratt/index.js";
import { a, sdo } from "@triplyetl/vocabularies";
import dotenv from "dotenv";
import { randomHash } from "../../../../utils/index.js";
dotenv.config();
const onlyWhenToken = process.env.TRIPLYDB_TOKEN ? describe : describe.skip;
function getDataset() {
    const name = randomHash();
    return {
        name,
        displayName: `Dataset ${name}`,
        accessLevel: "internal",
        description: `Testing this feature ...`,
        license: "CC BY-NC",
        exampleResources: [`https://ex.com/${name}`],
    };
}
onlyWhenToken("toTriplyDB middleware", () => {
    it("should work with a dataset object", async () => {
        const dataset = getDataset();
        const etl = new Etl({ baseIri: "http://ex.com/" });
        Etl.silent = true;
        etl.use(fromJson({}), triple(iri(etl.standardPrefixes.id, str(dataset.name)), a, sdo.Thing), toTriplyDb({ dataset, opts: { existingMetadata: "merge" } }));
        etl.after(async (_) => {
            await etl.triplyDb
                .getAccount()
                .then((me) => me.getDataset(dataset.name))
                .then(async (ds) => {
                const info = ds.getInfo();
                await ds.delete();
                return info;
            })
                .then((info) => {
                expect(info.displayName).equal(dataset.displayName);
                expect(info.accessLevel).equal(dataset.accessLevel);
                expect(info.description).equal(dataset.description);
                expect(info.license).equal(dataset.license);
                // example resources can not be uploaded for new datasets:
                expect(info.exampleResources).deep.equal([]);
            });
        });
        await etl.run();
        Etl.silent = false;
    });
});
//# sourceMappingURL=toTriplyDb.test.js.map