export class SparqlResultsXmlIterator {
    constructor(app, query) {
        this.app = app;
        this.query = query;
        this.runs = 0;
    }
    async queryInfo() {
        if (!this.$queryInfo) {
            const queryInfo = await this.query.getQueryInfo(this.app);
            const headers = {};
            if (queryInfo.triplyDb.getConfig().token) {
                headers.Authorization = `Bearer ${queryInfo.triplyDb.getConfig().token}`;
            }
            if (queryInfo.triplyDb.getConfig().httpProxy)
                global.GLOBAL_AGENT.HTTP_PROXY = queryInfo.triplyDb.getConfig().httpProxy;
            if (queryInfo.triplyDb.getConfig().httpsProxy)
                global.GLOBAL_AGENT.HTTPS_PROXY = queryInfo.triplyDb.getConfig().httpsProxy;
            this.$queryInfo = { ...queryInfo, headers };
            this.firstLink = `${await this.$queryInfo.query.getRunLink()}.srx`;
        }
        return this.$queryInfo;
    }
    async fetch() {
        const info = await this.queryInfo();
        const url = this.nextLink ?? this.firstLink;
        return fetch(url, { headers: info.headers }).then(async (response) => {
            this.runs++;
            return { xml: await response.text(), headers: response.headers };
        });
    }
    async next() {
        return this.fetch().then((response) => {
            const done = this.nextLink === undefined && this.runs > 1;
            this.parseLink(response.headers);
            return {
                value: response.xml,
                done,
            };
        });
    }
    [Symbol.asyncIterator]() {
        return this;
    }
    parseLink(headers) {
        this.nextLink = undefined;
        if (!headers.get("link"))
            return;
        headers
            .get("link")
            ?.split(",")
            .map((link) => {
            const parts = link.split(";").map((p) => p
                .trim()
                .replace(/rel="(first|next|previous)"/, "$1")
                .replace(/^</, "")
                .replace(/>$/, ""));
            switch (parts[1]) {
                case "next":
                    this.nextLink = parts[0];
            }
        });
    }
}
//# sourceMappingURL=SparqlResultsXmlIterator.js.map