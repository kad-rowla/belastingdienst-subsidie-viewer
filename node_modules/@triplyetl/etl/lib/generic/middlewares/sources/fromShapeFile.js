import { castArray } from "lodash-es";
import { Etl } from "../../index.js";
import { addMwCallSiteToError, assertOneExtractorPerETL } from "../../../utils/index.js";
import * as shapefile from "@triplyetl/shapefile";
import trimRecordFromSource from "./util/trimRecordFromSource.js";
// TODO @DocumentationTeam: add TS doc comment here
export default function fromShapeFile(oneOrMoreSources, opts) {
    return addMwCallSiteToError(async function _fromShapeFile(ctx, next) {
        assertOneExtractorPerETL(ctx.app, "fromShapeFile");
        const sources = await ctx["_registerSources"](castArray(oneOrMoreSources), "records", {
            registerTotalProgress: true,
        });
        for (const source of sources) {
            ctx.source = source;
            let stream;
            try {
                stream = await shapefile.open(await source.getLocalPath());
            }
            catch (e) {
                if (e instanceof Error) {
                    e.message = `Failed to read shapefile ${source.name}: ${e.message}`;
                }
                throw e;
            }
            while (true) {
                let row;
                try {
                    row = await stream.read();
                    if (!opts?.skipEnrich) {
                        row.value = {
                            $recordId: ctx.recordId + 1,
                            $environment: Etl.environment,
                            $fileName: source.name,
                            ...row.value,
                        };
                    }
                }
                catch (e) {
                    if (e instanceof Error) {
                        e.message = `Failed to parse shapefile ${source.name}: ${e.message}`;
                    }
                    throw e;
                }
                if (row.done === true)
                    break;
                await next(opts?.skipTrim ? row.value : trimRecordFromSource(row.value), ctx.app.getNewStore());
            }
        }
    }, { sourceFuncName: "_fromShapeFile" });
}
//# sourceMappingURL=fromShapeFile.js.map