import { Context, Middleware } from "../../index.js";
import { Quad } from "@triplydb/data-factory/Terms.js";
import { FileSourceInfo, SourceGetter, StringSourceInfo } from "../../locations/sources/index.js";
import { NamedNodeCompatibleType } from "../../../utils/index.js";
export interface LoadRdfOptionsWithSEF {
    /**
     * The default graph to use for this import
     * @default The default graph of Etl
     */
    defaultGraph?: NamedNodeCompatibleType;
    stylesheet?: SourceGetter<"statements", FileSourceInfo>;
    contentType?: "application/xhtml+xml" | "application/xml" | "text/xml" | "image/svg+xml" | "application/rdf+xml";
}
export interface LoadRdfOptions {
    /**
     * The default graph to use for this import
     * @default The default graph of Etl
     */
    defaultGraph?: NamedNodeCompatibleType;
    stylesheet?: never;
    contentType?: "application/ld+json" | "application/json" | "text/html" | "application/n-quads" | "application/trig" | "application/n-triples" | "text/turtle" | "text/n3";
}
export declare function getQuads(ctx: Context, oneOrMoreSources: SourceGetter<"statements", StringSourceInfo> | SourceGetter<"statements", StringSourceInfo>[], opts?: LoadRdfOptions): Promise<Quad[]>;
export default function loadRdf(oneOrMoreSources: SourceGetter<"statements", StringSourceInfo> | SourceGetter<"statements", StringSourceInfo>[], opts?: LoadRdfOptions | LoadRdfOptionsWithSEF): Middleware;
//# sourceMappingURL=loadRdf.d.ts.map