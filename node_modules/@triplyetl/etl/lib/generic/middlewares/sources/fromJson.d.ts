import { Record } from "../../Record.js";
import { SourceGetter, SourceInfo } from "../../locations/sources/index.js";
import { OaiRecord } from "./fromOai.js";
import { Middleware } from "../../index.js";
export interface Options {
    /**
     *  Transform json read from a source before using it for records
     */
    toRecords?: (json: unknown) => Array<Record>;
    skipTrim?: boolean;
    skipEnrich?: boolean;
    /**
     * Choose what keys we want to get the records for.
     * Each match will produce a new record.
     * Nested keys should use dot notation:
     *
     * eg: { selectors: "header.subHeader.anotherSubheader" }
     * returns { header: { subHeader: { anotherSubheader: { key: value }}}}
     */
    selectors?: string | string[];
}
export default function fromJson(oneOrMoreInputs: Array<any> | Array<SourceGetter<"records", SourceInfo<Record>>> | {} | SourceGetter<"records", SourceInfo<Record>>, opts?: Options): Middleware;
export declare function matchFromRecord(record: Record | OaiRecord, selector: string): Record | undefined;
//# sourceMappingURL=fromJson.d.ts.map