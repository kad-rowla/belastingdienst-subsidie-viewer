import { Middleware } from "../../index.js";
import { FileSourceInfo, SourceGetter } from "../../locations/sources/index.js";
import { QuerySourceGetter } from "../../locations/sources/savedQuery.js";
export type JsonXmlNode = {
    [key: string]: JsonXmlNode[] | string;
} & {
    $text?: string;
};
/**
 * We check to make sure none of the selector paths match
 * @param paths array of selector paths
 */
export declare function validatePaths(paths: Array<string>): void;
export type Options = {
    /**
     * Choose what keys we want to get the records for.
     * Each match will produce a new record.
     * Nested keys should use dot notation:
     *
     * eg: { selectors: "header.subHeader.anotherSubheader" }
     * returns { header: { subHeader: { anotherSubheader: { key: value }}}}
     */
    selectors: string | string[];
    trim?: boolean;
    skipEnrich?: boolean;
    stylesheet?: SourceGetter<"records", FileSourceInfo>;
};
/**
 * Read from an XML file and convert elements at paths matching a `selector` to JSON.
 * `selectors` is an array of string-arrays indicating which XML paths should be stored as a record.
 *  Example [ [ 'root', 'a' ], [ 'root', 'x', 'y' ] ] matches the `y` and `a` tag in
 *  <root><a>...</a><x><y>...</y></x></root>
 */
export default function fromXml(oneOrMoreSources: string | SourceGetter<"records", FileSourceInfo> | SourceGetter<"records", FileSourceInfo>[] | QuerySourceGetter | QuerySourceGetter[], opts: Options): Middleware;
//# sourceMappingURL=fromXml.d.ts.map