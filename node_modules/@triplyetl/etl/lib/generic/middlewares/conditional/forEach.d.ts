import { Key, Middleware, MiddlewareList } from "../../index.js";
/**
 * Runs the same middlewares for each object in a list of objects.
 *
 * @remarks
 * Notice that this middleware can only loop over *objects*.  It cannot loop
 * over other types like strings or numbers.
 *
 * @param key - A key that stores a list of objects.
 *
 * @param middleware - One or more middlewares that are run for each object.
 *
 * @throws An error if `key` does not exist in the current Etl Record.
 *
 * @example
 * The following example iterates over a list of objects that represent names:
 *
 * ```ts
 * fromJson([
 *   {
 *     id: '123',
 *     names: [
 *       { first: 'John', last: 'Doe' },
 *       { first: 'J.', last: 'Doe' },
 *     ]
 *   },
 * ]),
 * forEach('names', [
 *   concat({
 *     content: ['first', 'last'],
 *     separator: ' ',
 *     key:' '_name',
 *   }),
 *   triple(iri(prefix.person, $parent.id), foaf.name, '_name'),
 * ]),
 * ```
 *
 * This results in the following linked data assertions:
 *
 * ```turtle
 * id:123 foaf:name 'John Doe', 'J. Doe'.
 * ```
 *
 * @see If you want to loop over primitive types like strings or numbers, use
 * {@link iri} and {@link literal} instead.
 */
export default function <R = unknown>(key: Key, ...middlewaresArray: MiddlewareList<R>): Middleware<R>;
//# sourceMappingURL=forEach.d.ts.map