import { Context, Key, Middleware, MiddlewareList } from "../../index.js";
export interface IfThen {
    if: Key | ((context: Context) => boolean);
    then: Middleware | MiddlewareList;
    else?: never;
}
export interface Else {
    if?: never;
    then?: never;
    else: Middleware | MiddlewareList;
}
export declare const ifElseErrorMessages: {
    multipleElse: string;
    wrongElsePosition: string;
};
/**
 * This middleware determines which other middlewares are run based on one or
 * more specified conditions.
 * Every condition is specified with an `if` key.  In case the condition is
 * true, the middlewares specified in the `then` key are run.
 * If none of the `if` conditions is true, the middlewares specified in an
 * `else` key, if present, are run.
 *
 * @param first - The first parameter must be an `{ if: ..., then: ... }`
 * object.
 *
 * @param rest - The non-first parameters are either additional
 * `{ if: ..., then: ... }` objects or a final `{ else: ... }` object.
 *
 * @remarks
 * Each `if` key specifies a condition that is either true or false.
 * Conditions are either a key name or a function that takes the Etl Context
 * and returns a Boolean value.
 * Specifying a key name is identical to specifying the following function:
 * `ctx => ctx.getString('KEY')`
 *
 * The `then` and `else` keys take either one middleware, or an array of zero
 * or more middlewares.
 *
 * @example
 * The following snippet uses different conditions to determine the age
 * category that a person belongs to:
 *
 * ```ts
 * fromJson([
 *   { id: 'johndoe', age: 12 },
 *   { id: 'janedoe', age: 32 },
 *   ...
 * ]),
 * addIri({
 *   prefix: prefix.person,
 *   content: 'id',
 *   key: '_person',
 * }),
 * ifElse({
 *   if: ctx => ctx.getNumber('age') < 12,
 *   then: triple('_person', a, def.Child),
 * }, {
 *   if: ctx => {
 *     const age = ctx.getNumber('age')
 *     return age >= 12 && age < 20
 *   },
 *   then: triple('_person', a, def.Teenager),
 * }, {
 *   if: ctx => {
 *     const age = ctx.getNumber('age')
 *     return age >= 20 && age < 65
 *   },
 *   then: triple('_person', a, def.Adult),
 * }, {
 *   else: triple('_person', a, def.Senior),
 * }),
 * ```
 *
 * @example
 * The following snippet either asserts data about persons or data about
 * organizations, and uses an `ifElse` to make the conditional determination
 * on which assertion to make:
 *
 * ```ts
 * fromJson([
 *   { first: 'John', last: 'Doe' },
 *   { name: 'Triply' },
 * ]),
 * ifElse({
 *   if: 'name',
 *   then:
 *     couples(iri(prefix.id, 'name'), [
 *       [a, sdo.Organization],
 *       [sdo.name, 'name'],
 *     ]),
 * }, {
 *   else: [
 *     concat({
 *       content: ['first', 'last'],
 *       separator: '-',
 *       key: 'name',
 *     }),
 *     couples(iri(prefix.id, 'name'), [
 *       [a, sdo.Person],
 *       [sdo.givenName, 'first'],
 *       [sdo.familyName, 'last'],
 *     ]),
 *   ],
 * }),
 * ```
 */
export default function ifElse(first: IfThen, ...rest: Array<IfThen | Else>): MiddlewareList<unknown>;
//# sourceMappingURL=ifElse.d.ts.map