import chai from "chai";
import { getEtlForTestingNoExtractor } from "../../../../ratt/__tests__/getEtlForTesting.js";
import { getFactory } from "@triplydb/data-factory";
import { addValue } from "../../../../ratt/middlewares/transformations/index.js";
import whenNotEqual from "../whenNotEqual.js";
import { fromJson } from "../../index.js";
const assert = chai.assert;
describe("Conditional.whenNotEqual ", () => {
    it("Should work on single values", () => {
        return getEtlForTestingNoExtractor([
            fromJson([
                {
                    foo: "bar",
                    num: 1,
                    true: true,
                    false: false,
                },
            ]),
            whenNotEqual("foo", "bar", addValue({ content: true, key: "checkIsNotEqual#10" })),
            whenNotEqual("num", 1, addValue({ content: true, key: "checkIsNotEqual#11" })),
            whenNotEqual("true", true, addValue({ content: true, key: "checkIsNotEqual#12" })),
            whenNotEqual("false", false, addValue({ content: true, key: "checkIsNotEqual#13" })),
            whenNotEqual("bar", "1", addValue({ content: true, key: "checkIsNotEqual#14" })),
            whenNotEqual("foo", "not-bar", addValue({ content: true, key: "checkIsNotEqual#20" })),
            async (ctx, next) => {
                for (let i = 10; i <= 14; i++)
                    assert.throws(() => ctx.getBoolean(`checkIsNotEqual#${i}`));
                for (let i = 20; i <= 20; i++)
                    assert.doesNotThrow(() => ctx.getBoolean(`checkIsNotEqual#${i}`));
                return next();
            },
        ]).run();
    });
    it("Should work on tuple values", () => {
        return getEtlForTestingNoExtractor([
            fromJson([
                {
                    foo: "bar",
                    num: 1,
                    true: true,
                    false: false,
                },
            ]),
            whenNotEqual("foo", ["bar1", "bar", "bar2"], addValue({ content: true, key: "checkIsNotEqual#10" })),
            whenNotEqual("foo", [1, "bar", "bar2"], addValue({ content: true, key: "checkIsNotEqual#11" })),
            whenNotEqual("num", [undefined, 1, true], addValue({ content: true, key: "checkIsNotEqual#12" })),
            whenNotEqual("true", [true], addValue({ content: true, key: "checkIsNotEqual#13" })),
            whenNotEqual("false", [true, false], addValue({ content: true, key: "checkIsNotEqual#14" })),
            whenNotEqual("bar", ["1", "BAR", "Bar"], addValue({ content: true, key: "checkIsNotEqual#15" })),
            whenNotEqual("foo", [true, "not-bar", undefined], addValue({ content: true, key: "checkIsNotEqual#20" })),
            async (ctx, next) => {
                for (let i = 10; i <= 15; i++)
                    assert.throws(() => ctx.getBoolean(`checkIsNotEqual#${i}`));
                for (let i = 20; i <= 20; i++)
                    assert.doesNotThrow(() => ctx.getBoolean(`checkIsNotEqual#${i}`));
                return next();
            },
        ]).run();
    });
    it("Should work on objects", () => {
        const iri = getFactory().namedNode("http://ex.com");
        return getEtlForTestingNoExtractor([
            fromJson([
                {
                    foo: { bar: "FooBar" },
                    bar: [1, 2, true],
                    iri: iri,
                },
            ]),
            whenNotEqual("foo", { bar: "FooBar" }, addValue({ content: true, key: "checkIsNotEqual#10" })),
            whenNotEqual("bar", [1, 2, true], addValue({ content: true, key: "checkIsNotEqual#11" })),
            whenNotEqual("iri", iri, addValue({ content: true, key: "checkIsNotEqual#12" })),
            whenNotEqual("NotAKey", {}, addValue({ content: true, key: "checkIsNotEqual#13" })),
            whenNotEqual("foo", { bar: "NoFooBar" }, addValue({ content: true, key: "checkIsNotEqual#20" })),
            async (ctx, next) => {
                for (let i = 10; i <= 13; i++)
                    assert.throws(() => ctx.getBoolean(`checkIsNotEqual#${i}`));
                for (let i = 20; i <= 20; i++)
                    assert.doesNotThrow(() => ctx.getBoolean(`checkIsNotEqual#${i}`));
                return next();
            },
        ]).run();
    });
});
//# sourceMappingURL=whenNotEqual.test.js.map