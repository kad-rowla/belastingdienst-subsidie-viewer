import { expect } from "chai";
import { getEtlForTestingNoExtractor } from "../../../../ratt/__tests__/getEtlForTesting.js";
import { forEach, fromJson } from "../../index.js";
import skipRest from "../skipRest.js";
const throwError = async (_ctx, _next) => {
    throw new Error("Should not execute this.");
};
describe("Conditional.skiprecord", () => {
    it("should stop if no condition is provided", () => {
        return getEtlForTestingNoExtractor([fromJson([{ foo: "bar1" }, { foo: "bar2" }]), skipRest(), throwError]).run();
    });
    it("should stop if condition is matched", () => {
        return getEtlForTestingNoExtractor([
            fromJson([{ foo: "bar1" }, { foo: "bar2" }]),
            skipRest("foo"),
            throwError,
        ]).run();
    });
    it("should continue if condition is not matched", async () => {
        const app = getEtlForTestingNoExtractor([
            fromJson([{ foo: "bar1" }, { foo: "bar2" }]),
            skipRest("bar"),
            throwError,
        ]);
        await expect(app.run()).to.eventually.be.rejectedWith("Should not execute this.");
    });
    it("should stop if in a loop if condition is matched", () => {
        return getEtlForTestingNoExtractor([
            fromJson({ foo: [{ bar: 1 }, { bar: 2 }] }),
            forEach("foo", skipRest("bar"), throwError),
        ]).run();
    });
    it("should stop if in a loop if no condition is provided", () => {
        return getEtlForTestingNoExtractor([
            fromJson({ foo: [{ bar: 1 }, { bar: 2 }] }),
            forEach("foo", skipRest(), throwError),
        ]).run();
    });
    it("should continue if in a loop if condition is not matched", async () => {
        const app = getEtlForTestingNoExtractor([
            fromJson({ foo: [{ bar: 1 }, { bar: 2 }] }),
            forEach("foo", skipRest("foo"), throwError),
        ]);
        await expect(app.run()).to.eventually.be.rejectedWith("Should not execute this.");
    });
});
//# sourceMappingURL=skipRest.test.js.map