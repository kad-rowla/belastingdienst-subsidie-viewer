//external dependencies
import { Etl, fromJson, when } from "../../../index.js";
import { expect } from "chai";
function checkCountMw(opts) {
    let count = 0;
    return {
        mw: async (ctx, next) => {
            if (!opts.selector || ctx.isNotEmpty(opts.selector)) {
                count++;
            }
            return next();
        },
        countIsValid: () => {
            expect(count).to.equal(opts.expectedCount, opts.message);
        },
    };
}
describe("When", function () {
    it("With when hierarchy", async function () {
        const app = new Etl({ defaultGraph: "https://default/" });
        app.use(fromJson([{ a: true }, { b: true }, { a: true, b: true }]));
        const aKeyChecker1 = checkCountMw({ message: "key a [1]", expectedCount: 2 });
        const aKeyChecker2 = checkCountMw({ message: "key a [2]", expectedCount: 2 });
        const aAndBKeyChecker1 = checkCountMw({ message: "key a and b [1]", expectedCount: 1 });
        const aAndBKeyChecker2 = checkCountMw({ message: "key a and b [2]", expectedCount: 1 });
        const aAndBKeyChecker3 = checkCountMw({ message: "key a and b [3]", expectedCount: 1 });
        const lastCountChecker = checkCountMw({ message: "last", expectedCount: 3 });
        app.useWhen((ctx) => ctx.isNotEmpty("a"), aKeyChecker1.mw, [aKeyChecker2.mw], when((ctx) => ctx.isNotEmpty("b"), aAndBKeyChecker1.mw, aAndBKeyChecker2.mw, when((ctx) => ctx.isNotEmpty("a"), aAndBKeyChecker3.mw)));
        app.use(lastCountChecker.mw);
        await app.run();
        aKeyChecker1.countIsValid();
        aKeyChecker2.countIsValid();
        aAndBKeyChecker1.countIsValid();
        aAndBKeyChecker2.countIsValid();
        aAndBKeyChecker3.countIsValid();
        lastCountChecker.countIsValid();
    });
});
//# sourceMappingURL=when.test.js.map