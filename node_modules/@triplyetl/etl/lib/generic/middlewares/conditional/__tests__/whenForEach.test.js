import chai from "chai";
import { fromJson } from "../../index.js";
import { addValue, concat } from "../../../../ratt/middlewares/transformations/index.js";
import { getEtlForTestingNoExtractor } from "../../../../ratt/__tests__/getEtlForTesting.js";
import whenForEach from "../whenForEach.js";
const assert = chai.assert;
const data = {
    names: [
        { first: "John", last: "Doe" },
        { first: "J.", last: "Doe" },
    ],
};
let i = 0;
describe("conditional.forEach ", () => {
    it("should run the documentation example for forEach", () => {
        return getEtlForTestingNoExtractor([
            fromJson(data),
            whenForEach("names", [
                concat({
                    content: ["first", "last"],
                    separator: " ",
                    key: "_name",
                }),
                async (ctx, next) => {
                    assert.doesNotThrow(() => ctx.getString("_name"));
                    assert.equal(ctx.getString("_name"), `${data.names[i].first} ${data.names[i].last}`);
                    i++;
                    return next();
                },
            ]),
        ]).run();
    });
    it("should not throw when key does not exist", () => {
        return getEtlForTestingNoExtractor([
            fromJson(data),
            whenForEach("NONAMES", addValue({ key: "test", content: true })),
            async (ctx, next) => {
                assert.throws(() => ctx.getBoolean("test"));
                return next();
            },
        ]).run();
    });
});
//# sourceMappingURL=whenForEach.test.js.map