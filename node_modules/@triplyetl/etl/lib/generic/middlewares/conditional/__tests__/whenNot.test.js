import chai from "chai";
import { getEtlForTesting, getEtlForTestingNoExtractor } from "../../../../ratt/__tests__/getEtlForTesting.js";
import { addIri, addValue } from "../../../../ratt/middlewares/transformations/index.js";
import whenNot from "../whenNot.js";
import { triple } from "../../../../ratt/middlewares/assertions/statement/index.js";
import { a, sdo } from "@triplyetl/vocabularies";
import { str } from "../../../../ratt/index.js";
import { fromJson } from "../../index.js";
import Iri from "../../../Iri.js";
const assert = chai.assert;
describe("Conditional.whenNot", () => {
    it("should create keys when keys are non existing", () => {
        return getEtlForTesting([
            whenNot("bar", addValue({ content: true, key: "barKey" })),
            whenNot("foo", addValue({ content: true, key: "fooKey" })),
            async (ctx, next) => {
                assert.doesNotThrow(() => ctx.getBoolean("barKey"));
                assert.throws(() => ctx.getBoolean("fooKey"));
                return next();
            },
        ]).run();
    });
    it("should create keys when keys are existing but have empty values", () => {
        return getEtlForTesting([
            addValue({ content: str(""), key: "empty" }),
            whenNot("empty", addValue({ content: true, key: "emptyKey" })),
            whenNot("missing", addValue({ content: true, key: "missingKey" })),
            async (ctx, next) => {
                assert.doesNotThrow(() => ctx.getBoolean("emptyKey"));
                assert.doesNotThrow(() => ctx.getBoolean("missingKey"));
                return next();
            },
        ]).run();
    });
    it("should not create keys when key value === false", () => {
        return getEtlForTesting([
            addValue({ content: false, key: "false" }),
            whenNot("false", addValue({ content: true, key: "falseKey" })),
            async (ctx, next) => {
                assert.throws(() => ctx.getBoolean("falseKey"));
                return next();
            },
        ]).run();
    });
    it("should work with the documentation example", () => {
        const data = [{ license: "some license", id: "123" }, { id: "456" }];
        return getEtlForTestingNoExtractor([
            fromJson(data),
            addIri({ prefix: Iri("http://ex.com/image/"), content: "id", key: "S" }),
            whenNot("license", triple("S", a, sdo.CreativeWork)),
            async (ctx, next) => {
                const quads = ctx.store.getQuads(ctx.getIri("S"), a, sdo.CreativeWork, null);
                assert.equal(ctx.getNumber("id") === 456 ? 1 : 0, quads.length);
                return next();
            },
        ]).run();
    });
});
//# sourceMappingURL=whenNot.test.js.map