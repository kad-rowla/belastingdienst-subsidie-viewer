import { isEqual } from "lodash-es";
import { Etl, Iri, Source } from "../generic/index.js";
import fromXml from "../generic/middlewares/sources/fromXml.js";
import { triple, iri } from "../ratt/index.js";
import { rdf } from "./test_shacl.js";
export default async function () {
    const app = new Etl({
        defaultGraph: "https://default.com/",
        prefixes: {
            foaf: Iri("https://whatever"),
        },
        sources: {
            first: Source.TriplyDb.asset("ratt", "asset-ds", { name: "1.xml" }),
            second: Source.TriplyDb.asset("ratt", "asset-ds", { name: "2.xml" }),
        },
    });
    app.setTriplyDb({ url: "https://api.test.triply.cc" });
    app.use(fromXml([app.sources.first, app.sources.second], {
        selectors: ["Result.Performer", "Result.ResultInfo"],
    }));
    /**
     * Take fields from the etl record, and store as quads.
     */
    app.useWhen((ctx) => isEqual(ctx.record.$selector, "Result.Performer"), triple(iri(app.prefix.foaf, "PresentationName[0].$text"), rdf("type"), "PerformerCatalogue[0].$text"));
    app.useWhen((ctx) => isEqual(ctx.record.$selector, "Result.ResultInfo"), triple(iri(app.prefix.rdf, "RequestedPerformerLink[0].$text"), rdf("yields"), "ReturnedPerformerLink[0].$text"));
    app.use((ctx, next) => {
        // console.info(ctx.record);
        console.info(ctx.store.getQuads(null, null, null, null));
        return next();
    });
    return app;
}
// an example record from an xml like this:
/*
<t1 a="1" b="2">
  <t2 a="3"/>
  <t2>txt3</t2>
  <t3 d="5">txt4</t3>
  txt1
</t1>
*/
const _ctxRecord = {
    t1: [
        {
            $text: "txt1",
            "@a": "1",
            "@b": "2",
            t2: [{ "@a": "3" }, { $: "txt3" }],
            t3: [{ "@d": "5", $: "txt4" }],
        },
    ],
};
_ctxRecord;
//# sourceMappingURL=test_fromXml.js.map