import { Etl, fromJson } from "../generic/index.js";
import { forEach, when } from "../generic/middlewares/conditional/index.js";
import { traceEnd, traceStart } from "../debug/index.js";
import { getFactory } from "@triplydb/data-factory";
const dataFactory = getFactory({ skipValidation: Etl.skipValidation });
export default async function () {
    const app = new Etl({ defaultGraph: "" });
    app.after(() => console.info("after hook")); // shouldnt be executed when using trace mw
    app.after(() => console.info("after hook always"), { always: true }); // shouldnt be executed when using trace mw
    app.use(fromJson([
        {
            a: 1,
            c: 1,
            someArray: [
                { whatever: true },
                {
                    someSubArray: [
                        {
                            b: 1,
                            c: 2,
                        },
                        { b: 2 },
                    ],
                },
                {},
            ],
        },
        { a: 2 },
    ]), async (_ctx, next) => {
        console.info("in second middleware");
        return next();
    }, async (ctx, next) => {
        ctx.store.add(dataFactory.quad(dataFactory.namedNode("b:b"), dataFactory.namedNode("b:b"), dataFactory.namedNode("b:b"), dataFactory.namedNode("b:b")));
        return next();
    }, forEach("someArray", when("someSubArray", forEach("someSubArray", [
        async (_ctx, next) => {
            console.info("middleware before calling traceStart()");
            return next();
        },
        traceStart(),
        async (_ctx, next) => {
            console.info("middleware right after calling traceStart()");
            return next();
        },
        async (ctx, next) => {
            console.info("modifying some things in the record and store");
            ctx.record.b = 2;
            ctx.record.$root.a = 3;
            ctx.store.add(dataFactory.quad(dataFactory.namedNode("c:c"), dataFactory.namedNode("c:c"), dataFactory.namedNode("c:c"), dataFactory.namedNode("c:c")));
            ctx.store.add(dataFactory.quad(dataFactory.namedNode("a:a"), dataFactory.namedNode("a:a"), dataFactory.namedNode("a:a"), dataFactory.namedNode("a:a")));
            ctx.store.add(dataFactory.quad(dataFactory.namedNode("b:b"), dataFactory.namedNode("b:b"), dataFactory.namedNode("b:b"), dataFactory.namedNode("b:a")));
            return next();
        },
        traceEnd(),
    ]))));
    return app;
}
//# sourceMappingURL=test_debugTrace.js.map