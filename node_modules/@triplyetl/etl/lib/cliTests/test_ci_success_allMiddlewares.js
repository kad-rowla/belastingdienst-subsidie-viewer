// This many imports is done on purpose: we believe it is easier for non-experts
import { epsg } from "@triplyetl/vocabularies";
import Etl from "../generic/Etl.js";
import assert from "assert";
import { fromJson, Iri } from "../generic/index.js";
import * as vocab from "@triplyetl/vocabularies";
import { whenEqual, whenNotEqual, when, whenNot, whenForEach, ifElse, forEach, _switch, } from "../generic/middlewares/conditional/index.js";
import { str } from "../ratt/index.js";
import { addHashedIri, addIri, addLiteral, addRandomIri, addSkolemIri, addValue, decodeHtml, geojsonToWkt, lowercase, substring, translateAll, translateSome, tryLiteral, uppercase, wkt, custom, concat, copy, split, capitalize, padStart, padEnd, } from "../ratt/middlewares/transformations/index.js";
const LangeJanAmersfoort = {
    rds: { x: 155000, y: 463000 },
    latlng: { lat: 5.389495109, lng: 52.15578839 },
};
const prefix = Iri("http://ex.com/");
const allTransformingMiddlewares = [
    fromJson([{ foo: "bar", fooForEach: [{ foo: "bar" }] }], { skipEnrich: true }),
    addHashedIri({ prefix, content: "foo", key: "addHashedIri" }),
    addIri({ prefix, content: "foo", key: "addIri" }),
    addLiteral({ content: "foo", language: vocab.language.en, key: "addLiteral" }),
    addRandomIri({ prefix, key: "addRandomIri" }),
    addSkolemIri({ prefix, key: "addSkolemIri" }),
    addValue({ content: "foo", key: "addValue" }),
    concat({ content: ["foo", str("bar")], key: "concat", separator: "/" }),
    copy({ content: "foo", key: "copy" }),
    decodeHtml({ content: "foo", key: "decodeHtml" }),
    geojsonToWkt({ content: str(JSON.stringify({ type: "Point", coordinates: [1, 2] })), key: "geojsonToWkt" }),
    lowercase({ content: "foo", key: "lowercase" }),
    split({ content: "foo", key: "split", separator: "" }),
    substring({ content: "foo", key: "substring", start: 0 }),
    translateAll({ content: "foo", key: "translateAll", table: { bar: "" } }),
    translateSome({ content: "foo", key: "translateSome", table: { bar: "" } }),
    tryLiteral({ content: "foo", key: "tryLiteral", datatypes: [vocab.xsd.string, vocab.xsd.date] }),
    uppercase({ content: "foo", key: "uppercase" }),
    capitalize({ content: "foo", key: "capitalize" }),
    padStart({ content: "foo", key: "padStart", targetLength: 1 }),
    padEnd({ content: "foo", key: "padEnd", targetLength: 1 }),
    wkt.addPoint({ key: "wkt.point", latitude: str("1"), longitude: str("2") }),
    wkt.project({
        key: "LatLng",
        content: [str(LangeJanAmersfoort.rds.x.toString()), str(LangeJanAmersfoort.rds.y.toString())],
        fromCrs: epsg[28992],
    }),
    custom.addFrom.context({ function: (_) => "foo", key: "custom_add_fromContext" }),
    custom.addFrom.value({ content: "foo", key: "custom_add_fromValue" }),
    // conditional middlewares:
    whenEqual("foo", "bar", addValue({ content: true, key: "whenEqual" })),
    whenNotEqual("foo", "not-bar", addValue({ content: true, key: "whenNotEqual" })),
    when("foo", addValue({ content: true, key: "when" })),
    whenNot("not-foo", addValue({ content: true, key: "whenNot" })),
    forEach("fooForEach", addValue({ content: true, key: "forEach" })),
    whenForEach("fooForEach", addValue({ content: true, key: "$root.whenForEach" })),
    ifElse({ if: "foo", then: addValue({ content: true, key: "ifElse" }) }),
    _switch("foo", ["bar", addValue({ content: true, key: "switch" })]),
];
/**
 * This is a simple test that adds common Middlewares to an ETL.
 * It is not a full test, that is taken care of in indivisdual tests for middlewares.
 * The purpose of this test is a high-over check if all imports still work and no arguments have changed.
 *
 * @returns Etl
 */
export default async function () {
    const app = new Etl({});
    app.use(allTransformingMiddlewares, async (ctx, next) => {
        assert(Object.keys(ctx.record).length === allTransformingMiddlewares.length, `Expected ${allTransformingMiddlewares.length} keys, but found ${Object.keys(ctx.record).length}`);
        return next();
    });
    return app;
}
//# sourceMappingURL=test_ci_success_allMiddlewares.js.map