import { getFactory } from "@triplydb/data-factory";
import { fill, fromPairs } from "lodash-es";
import { Etl, fromJson, when, whenForEach } from "../generic/index.js";
import { iri, triple } from "../ratt/index.js";
const { prefixer } = getFactory({ skipValidation: Etl.skipValidation });
const foaf = prefixer("http://xmlns.com/foaf/0.1/");
const triply = prefixer("https://triply.cc/");
const baseRecordContent = {
    someArray: [{ a: "a:a" }],
    ...fromPairs(fill(new Array(30), "a:a").map((v, i) => ["" + i, v])),
};
const emptyRecord = {};
export default async function () {
    const app = new Etl({ defaultGraph: "https://default.com/" });
    const inputFirstHalf = fill(new Array(300), baseRecordContent);
    const inputSecondHalf = fill(new Array(400), baseRecordContent);
    app.use(fromJson([...inputFirstHalf, emptyRecord, ...inputSecondHalf]));
    const store = app.getNewStore();
    app.use(async (ctx, next) => {
        // Store should not be serialized in error report
        ctx.record.store = store;
        return next();
    });
    app.use(async (_ctx, next) => {
        await new Promise((resolve) => setTimeout(resolve, 1));
        return next();
    });
    app.use(async (ctx, next) => {
        // Create a circular dependency for testing purposes
        ctx.record.a = ctx.record;
        return next();
    });
    /**
     * Take fields from the etl record, and store as quads.
     */
    app.useWhen(() => true, when(() => true, 
    // Wrap error in foreach. Error should not report error in foreach middleware, but in one of the middlewares below
    whenForEach("someArray", triple(triply("Laurens"), foaf("knows"), foaf("Person")), when("$parent.a", triple(triply("Laurens"), foaf("knows"), iri("$parent.a"))))));
    return app;
}
//# sourceMappingURL=test_ci_error_simple.js.map