import { fill } from "lodash-es";
import { Destination, Etl, fromJson, resetStore, toRdf } from "../generic/index.js";
import { triple, iri } from "../ratt/index.js";
export default async function () {
    const app = new Etl({
        defaultGraph: "https://default.com/",
        destinations: {
            out: Destination.file("./data/test-success.nt"),
        },
    });
    app.before(async () => {
        await new Promise((resolve) => setTimeout(resolve, 2));
    });
    app.after(async function () {
        await new Promise((resolve) => setTimeout(resolve, 2));
    });
    app.use(fromJson(fill(new Array(700), { a: "a:a", b: "b:b", c: "c:c" }).map((r, i) => {
        r.a = r.a + i;
        return { ...r };
    })));
    app.use(async (_ctx, next) => {
        await new Promise((resolve) => setTimeout(resolve, 1));
        if (Math.random() > 0.99) {
            app.warn("We can render warnings. This'll update the etl status bar");
        }
        return next();
    });
    /**
     * Take fields from the etl record, and store as quads.
     */
    app.use(triple(iri("a"), iri("b"), iri("c")));
    //just a test we're properly resetting the store. I.e., we should have less than 700 statements in the output file
    app.useWhen(() => Math.random() > 0.9, resetStore());
    app.use(toRdf(app.destinations.out));
    return app;
}
//# sourceMappingURL=test_ci_success_simple.js.map