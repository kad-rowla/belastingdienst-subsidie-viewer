import { parse } from "@triplydb/data-factory";
import { addMwCallSiteToError, safeStringify } from "../../utils/index.js";
import jsonld from "jsonld";
import { isSourceGetter } from "../../utils/asserts.js";
import { castArray } from "lodash-es";
import fs from "fs-extra";
const { readFile } = fs;
// TODO @DocumentationTeam: add TS doc comment here
export default function (JsonLd) {
    return addMwCallSiteToError(async (ctx, next) => {
        JsonLd = JsonLd ?? {};
        if (isSourceGetter(JsonLd)) {
            const sources = await ctx["_registerSources"]([JsonLd], "records");
            let records;
            for (const source of sources) {
                ctx.source = source;
                if ("getAsyncIterable" in source) {
                    records = await source.getAsyncIterable();
                }
                else if ("getBoolean" in source) {
                    records = [{ boolean: await source.getBoolean() }];
                }
                else {
                    const jsonString = "getString" in source ? await source.getString() : await readFile(await source.getLocalPath(), "utf8");
                    try {
                        records = JSON.parse(jsonString);
                    }
                    catch (e) {
                        if (e instanceof Error) {
                            e.message = `Failed to parse JSON ${source.name}: ${e.message}`;
                        }
                        throw e;
                    }
                    records = castArray(records);
                }
                JsonLd = {};
                for await (const record of records) {
                    // const record = records[i]
                    JsonLd = { ...JsonLd, ...record };
                }
            }
        }
        const doc = JSON.parse(safeStringify(ctx.record));
        delete doc["$environment"];
        delete doc["$recordId"];
        delete doc["$tagName"];
        delete doc["$fileName"];
        delete doc["$sheetName"];
        delete doc["$selector"];
        const quads = parse((await jsonld.toRDF({ ...JsonLd, ...doc }, { format: "application/n-quads" })).toString());
        ctx.store.addQuads(quads);
        return next();
    }, { sourceFuncName: "_jsonld.expand" });
}
//# sourceMappingURL=apply.js.map