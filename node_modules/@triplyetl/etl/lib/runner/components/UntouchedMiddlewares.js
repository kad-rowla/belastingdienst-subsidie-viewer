import fs from "fs";
import React from "react";
import { Text, Box } from "ink";
import codeExcerpt from "code-excerpt";
import { flatten, groupBy, mapValues, omitBy, sortBy, uniqWith } from "lodash-es";
export function getExcerptsByFile(locations) {
    // Make locations unique per line to avoid react duplicate-key errors
    locations = uniqWith(locations, (lhs, rhs) => {
        return lhs.file === rhs.file && lhs.line === rhs.line;
    });
    const groupedByFile = groupBy(locations, (location) => location.file);
    const mappedValues = mapValues(groupedByFile, (locations, file) => {
        const fileUrl = new URL(file);
        if (fs.existsSync(fileUrl)) {
            const sourceCode = fs.readFileSync(fileUrl, "utf8");
            const origExcerpt = sortBy(flatten(locations.map((l) => codeExcerpt(sourceCode, l.line, { around: 0 }))).filter((v) => !!v), (v) => v.line);
            let lineWidth = 0;
            let prevLineNumber;
            const excerpt = origExcerpt.map((e) => {
                lineWidth = Math.max(lineWidth, String(e.line).length);
                const result = {
                    ...e,
                    value: e.value.trim(),
                    precedeWithDots: prevLineNumber !== undefined && e.line - 1 !== prevLineNumber,
                };
                prevLineNumber = e.line;
                return result;
            });
            return { excerpt: excerpt, lineWidth };
        }
    });
    return omitBy(mappedValues, (v) => !v);
}
const UntouchedMiddlewares = ({ callSites }) => {
    if (!callSites.length)
        return React.createElement(React.Fragment, null);
    const excerptsByFile = getExcerptsByFile(callSites);
    return (React.createElement(Box, { marginTop: 1, flexDirection: "column" }, Object.entries(excerptsByFile).map(([file, excerpts]) => {
        if (!excerpts?.excerpt?.length)
            return React.createElement(React.Fragment, { key: file });
        return (React.createElement(Box, { flexDirection: "column", borderColor: "white", borderStyle: "single", paddingX: 1, key: file },
            React.createElement(Box, { flexDirection: "column", alignItems: "center" },
                React.createElement(Text, { color: "yellow" },
                    "Untouched Middlewares (",
                    excerpts.excerpt.length,
                    ")"),
                React.createElement(Text, { dimColor: true }, file)),
            excerpts.excerpt.map(({ line, value, precedeWithDots }) => {
                return (React.createElement(React.Fragment, { key: line },
                    precedeWithDots && (React.createElement(Box, null,
                        React.createElement(Box, { width: excerpts.lineWidth + 1 },
                            React.createElement(Text, { dimColor: true }, "".padStart(excerpts.lineWidth + 1, " "))),
                        React.createElement(Text, { key: line }, " ..."))),
                    React.createElement(Box, null,
                        React.createElement(Box, { width: excerpts.lineWidth + 1 },
                            React.createElement(Text, { dimColor: true },
                                String(line).padStart(excerpts.lineWidth, " "),
                                ":")),
                        React.createElement(Text, { key: line }, " " + value))));
            })));
    })));
};
export default UntouchedMiddlewares;
//# sourceMappingURL=UntouchedMiddlewares.js.map