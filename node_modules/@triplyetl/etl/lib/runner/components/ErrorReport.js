import * as React from "react";
import { useCliContext } from "../CliContext.js";
import { Text, Box, useApp } from "ink";
import Stacktrace from "./Stacktrace.js";
import { termToString } from "rdf-string";
import { getErr } from "../../utils/Error.js";
import { Table as InkTable } from "@alcalzone/ink-table";
import writeErrorLogFile from "../errorLogFile.js";
import { getLogFilename, safeStringify } from "../../utils/index.js";
import TraceInfo from "./TraceInfo.js";
const Term = ({ value }) => {
    if (value === undefined) {
        return React.createElement(Text, { color: "grey" }, "unset");
    }
    if (typeof value === "string") {
        return React.createElement(Text, { color: "green" },
            "$",
            value);
    }
    if ("termType" in value) {
        if (value.termType === "NamedNode") {
            return (React.createElement(Text, { color: "blue" },
                "<",
                termToString(value),
                ">"));
        }
        else {
            return React.createElement(Text, { color: "blue" }, termToString(value));
        }
    }
    if (typeof value === "function") {
        return React.createElement(Text, { color: "cyan" }, "getter()");
    }
    return React.createElement(Text, null, "term");
};
const AddQuadsInfo = ({ addQuadInfo }) => {
    return (React.createElement(Box, { marginBottom: 1, flexDirection: "column" },
        React.createElement(Text, null, "This error occured when trying to add the following quad:"),
        React.createElement(Box, { marginLeft: 2, flexDirection: "row" },
            React.createElement(Box, { marginRight: 1, flexDirection: "column" },
                React.createElement(Text, { dimColor: true }, "Subject:"),
                React.createElement(Text, { dimColor: true }, "Predicate:"),
                React.createElement(Text, { dimColor: true }, "Object:"),
                React.createElement(Text, { dimColor: true }, "Graph:")),
            React.createElement(Box, { flexDirection: "column" },
                React.createElement(Term, { value: addQuadInfo[0] }),
                React.createElement(Term, { value: addQuadInfo[1] }),
                React.createElement(Term, { value: addQuadInfo[2] }),
                React.createElement(Term, { value: addQuadInfo[3] })))));
};
const ErrorReport = (props) => {
    const error = getErr(props.error);
    const { verbosity, cmd, useCmdInCliFeedback, logDir, logId, etlFile } = useCliContext();
    const { exit } = useApp();
    React.useEffect(() => {
        // we need to wrap the exit in a setTimeout to avoid the Static component rendering twice
        // see https://github.com/vadimdemedes/ink/issues/397
        setTimeout(() => exit(new Error("Exit")), 0);
    }, [exit]);
    if (error.trace && error.trace.isTraceDebug)
        return React.createElement(TraceInfo, { ...error.trace });
    let recordId = error.recordId;
    const cmdClone = [...cmd]; //avoid mutating the property
    const fromRecordIdArgIndex = cmdClone.indexOf("--from-record-id");
    if (fromRecordIdArgIndex >= 0) {
        cmdClone.splice(fromRecordIdArgIndex, 2); //remove the --from-record-id and the following argument
    }
    if (cmdClone.indexOf("--verbose") < 0) {
        cmdClone.push("--verbose");
    }
    if (recordId) {
        // Sometimes we get errors before the first record
        // See: https://issues.triply.cc/issues/6648
        cmdClone.push("--from-record-id", recordId + "");
    }
    let debugCmd = cmdClone.join(" ");
    let record = safeStringify(error.record);
    const addQuadInfo = "addQuad" in error ? error.addQuad : undefined;
    const shaclQuads = "quads" in error ? error.quads : undefined;
    const writeShaclQuadsToScreen = shaclQuads && shaclQuads.length < 50;
    let renderRecord = record;
    let renderingRecordSlice = false;
    if (record) {
        const maxRenderedLines = 20;
        const lines = record.split("\n");
        if (lines.length > maxRenderedLines) {
            renderRecord = lines.splice(0, maxRenderedLines).join("\n");
            renderingRecordSlice = true;
        }
    }
    const logFile = getLogFilename({ etlFile, logDir, logId, filename: "etl.err" });
    writeErrorLogFile(error, {
        file: logFile,
        etlScriptFile: etlFile,
        cmd: cmd.join(" "),
        recordString: record,
        untouchedMiddlewares: props.untouchedMiddlewares,
    });
    const hasRecordInfo = !!recordId;
    const triplyDbJsInfo = verbosity && error.getTriplyDbJsErrorInfo();
    const statusCode = error.getTriplyDbJsErrorInfo()?.statusCode;
    return (React.createElement(React.Fragment, null,
        React.createElement(Box, { marginBottom: 1 },
            React.createElement(Text, { backgroundColor: "red", color: "white" },
                " ERROR",
                statusCode && ` (${statusCode})`,
                hasRecordInfo && ` (Record #${recordId})`,
                " "),
            React.createElement(Text, null,
                " ",
                error.message)),
        addQuadInfo && React.createElement(AddQuadsInfo, { addQuadInfo: addQuadInfo }),
        writeShaclQuadsToScreen && shaclQuads && (React.createElement(Box, { marginBottom: 1, flexDirection: "column" },
            React.createElement(Text, null, "Shacl validation failed on the following set of triples:"),
            React.createElement(InkTable, { data: shaclQuads.map((q) => {
                    return {
                        subject: termToString(q.subject),
                        predicate: termToString(q.predicate),
                        object: termToString(q.object),
                    };
                }) }))),
        useCmdInCliFeedback && (React.createElement(React.Fragment, null,
            React.createElement(Text, { dimColor: true },
                "To reproduce this error",
                hasRecordInfo && " for this record alone",
                ", run:"),
            React.createElement(Box, { marginBottom: 1, marginLeft: 1 },
                React.createElement(Text, { italic: true }, debugCmd)))),
        !!verbosity && (React.createElement(Box, { flexDirection: "column", paddingX: 1, marginBottom: 1, borderStyle: "single" },
            React.createElement(Box, { justifyContent: "center" },
                React.createElement(Text, { bold: true, color: "blueBright" }, "Last record")),
            React.createElement(Text, { color: "blueBright" }, renderRecord),
            renderingRecordSlice && React.createElement(Text, null,
                "... (see ",
                logFile,
                " for the complete record)"))),
        !!triplyDbJsInfo && (React.createElement(Box, { flexDirection: "column", paddingX: 1, borderStyle: "single" },
            React.createElement(Box, { justifyContent: "center" },
                React.createElement(Text, { bold: true, color: "blueBright" }, "TriplyDB-JS Context")),
            React.createElement(Text, { color: "blueBright" }, safeStringify({ statusCode: triplyDbJsInfo.statusCode, ...triplyDbJsInfo.context })))),
        React.createElement(Stacktrace, { error: error, verbosity: verbosity }),
        !!error.trace && error.trace.isTraceError && React.createElement(TraceInfo, { ...error.trace }),
        !verbosity && (React.createElement(Box, { marginTop: 1 },
            React.createElement(Text, { dimColor: true }, "For more info see:"),
            React.createElement(Box, { marginBottom: 1, marginLeft: 1 },
                React.createElement(Text, { italic: true }, logFile))))));
};
export default ErrorReport;
//# sourceMappingURL=ErrorReport.js.map