import React from "react";
import { Box, Text } from "ink";
import { useProgress } from "../hooks.js";
import { pad, repeat, padStart } from "lodash-es";
import chalk from "chalk";
import { format } from "date-fns";
const maxWidth = 120;
const minWidth = 10;
const getLength = (prop) => String(prop).length;
let lastProgressPrinted = -1;
let lastProgressPrintedAt = 0; // epoch number
function getSimpleBar(opts) {
    const spaceForActualBar = opts.length - 7;
    const progressStringDoneLength = Math.round((opts.percentage / 100) * spaceForActualBar);
    const progressStringRemainingLength = spaceForActualBar - progressStringDoneLength;
    return [
        "[",
        repeat("=", progressStringDoneLength),
        repeat("-", progressStringRemainingLength),
        "] ",
        `${padStart("" + opts.percentage, 3)}%`,
    ].join("");
}
const ProgressBar = ({ etl, finished }) => {
    let progress = useProgress(etl);
    if (progress === undefined)
        return React.createElement(React.Fragment, null); //Depending on the read-middleware, we might or might not have proper progress bar support
    if (finished) {
        progress = 100;
    }
    else {
        if (progress === 100) {
            //we're at a 100%, but not done yet. Just render this as 99%
            progress = 99;
        }
    }
    const runningInCi = process.env["CI"] === "true";
    const terminalWidth = process.stdout.columns || 80;
    if (runningInCi) {
        // Don't print duplicate logs
        if (progress === lastProgressPrinted)
            return React.createElement(React.Fragment, null);
        const now = Date.now();
        // always print at the very beginning and end
        const atStartOrEnd = finished || lastProgressPrinted < 0;
        if (atStartOrEnd || (progress - lastProgressPrinted >= 2 && now - lastProgressPrintedAt >= 60000)) {
            lastProgressPrinted = progress;
            lastProgressPrintedAt = now;
            const prefix = "[" + format(now, "u-MM-dd kk:mm") + "] ";
            console.info(chalk.cyan(prefix) +
                getSimpleBar({ percentage: progress, length: Math.min(maxWidth, terminalWidth) - prefix.length }));
        }
        return React.createElement(React.Fragment, null);
    }
    const availableWidth = terminalWidth - getLength(progress) - 11; // margins + extra characters
    const progressBarWidth = Math.max(minWidth, Math.min(maxWidth, availableWidth));
    return (React.createElement(Box, { flexDirection: "row", alignItems: "center" },
        React.createElement(Box, { marginRight: 1, width: progressBarWidth },
            React.createElement(Box, { borderStyle: "round", width: progressBarWidth - 2 }, finished ? (React.createElement(Text, { backgroundColor: "blue", color: "white" }, pad("Finished", progressBarWidth - 4))) : (React.createElement(Text, { backgroundColor: "blue" }, ` `.repeat(((progressBarWidth - 4) * (progress + 1)) / 101))))),
        !finished && React.createElement(Text, { bold: true },
            progress,
            "%")));
};
export default ProgressBar;
//# sourceMappingURL=ProgressBar.js.map