import React from "react";
import { Box, Text } from "ink";
import { mapValues } from "lodash-es";
import { useCliContext } from "../CliContext.js";
import UntouchedMiddlewares from "./UntouchedMiddlewares.js";
function levelToColor(level) {
    if (level === "Error")
        return "red";
    if (level === "Violation")
        return "red";
    if (level === "Warning")
        return "yellow";
    if (level === "Info")
        return "blue";
    return "white";
}
function usedShaclValidation(messageCounts) {
    if (messageCounts["Violation"]?.count > 0)
        return true;
    if (messageCounts["Warning"]?.count > 0)
        return true;
    if (messageCounts["Info"]?.count > 0)
        return true;
    else
        false;
}
const Report = ({ untouchedMiddlewares, messageCounts, report }) => {
    const { verbosity } = useCliContext();
    const keysEtl = {
        ...mapValues(report, () => undefined),
    };
    const valuesEtl = [...Object.values(report)];
    let shaclReport = {};
    let etlReport = {};
    for (const m of Object.values(messageCounts)) {
        if (m.type == "Etl") {
            etlReport[m.level] = m;
        }
        if (m.type == "Shacl") {
            shaclReport[m.level] = m;
        }
    }
    let shaclValidationReport;
    if (usedShaclValidation(shaclReport)) {
        shaclValidationReport = (React.createElement(React.Fragment, null,
            React.createElement(Box, { flexDirection: "row", marginLeft: 1 },
                React.createElement(Text, null, "Validation:"),
                React.createElement(Box, { flexDirection: "row", marginX: 8 }, Object.values(shaclReport).map((m, i, a) => {
                    return (React.createElement(React.Fragment, { key: m.level + i },
                        React.createElement(Box, { marginX: 1 },
                            React.createElement(Text, { color: levelToColor(m.level) },
                                "#",
                                m.level)),
                        React.createElement(Box, { marginLeft: 3, marginRight: 1 },
                            React.createElement(Text, null, typeof m.count === "number" ? m.count.toLocaleString() : m.count)),
                        i !== a.length - 1 ? React.createElement(Text, null, "|") : null));
                })))));
    }
    else {
        shaclValidationReport = React.createElement(React.Fragment, null);
    }
    return (React.createElement(React.Fragment, null,
        !!verbosity && React.createElement(UntouchedMiddlewares, { callSites: untouchedMiddlewares }),
        React.createElement(Box, { marginTop: 1, borderStyle: "single", borderColor: "white", flexDirection: "column" },
            React.createElement(Box, { flexDirection: "column" },
                shaclValidationReport,
                React.createElement(Box, { flexDirection: "row", marginLeft: 1 },
                    React.createElement(Text, null, "Etl:"),
                    React.createElement(Box, { flexDirection: "row", marginX: 15 }, Object.values(etlReport).map((m, i, a) => {
                        let num;
                        m.level == "Error" && usedShaclValidation(shaclReport) ? (num = 7) : (num = 3);
                        m.count.toString().length > 1 ? (num = num - (m.count.toString().length - 1)) : num;
                        return (React.createElement(React.Fragment, { key: m.level + i },
                            React.createElement(Box, { marginX: 1 },
                                React.createElement(Text, { color: levelToColor(m.level) },
                                    "#",
                                    m.level)),
                            React.createElement(Box, { marginLeft: num, marginRight: 1 },
                                React.createElement(Text, null, typeof m.count === "number" ? m.count.toLocaleString() : m.count)),
                            i !== a.length - 1 ? React.createElement(Text, null, "|") : null));
                    })))),
            React.createElement(Box, { flexDirection: "row", marginLeft: 1 },
                React.createElement(Box, { flexDirection: "column" }, Object.entries(keysEtl).map(([label, level]) => {
                    return (React.createElement(Text, { key: label, color: levelToColor(level) }, label));
                })),
                React.createElement(Box, { marginLeft: 9, flexDirection: "column" }, valuesEtl.map((val, i) => {
                    return React.createElement(Text, { key: i }, typeof val === "number" ? val.toLocaleString() : val);
                }))))));
};
export default Report;
//# sourceMappingURL=Report.js.map