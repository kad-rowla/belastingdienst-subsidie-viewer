import React from "react";
import { Box, Newline, Text } from "ink";
import { useStats } from "../hooks.js";
import { millify } from "millify";
function levelToColor(level) {
    if (level === "Error")
        return "red";
    if (level === "Violation")
        return "red";
    if (level === "Warning")
        return "yellow";
    return "blue";
}
const Status = ({ etl, messageCounts }) => {
    const stats = useStats(etl);
    let shaclReport = {};
    let etlReport = {};
    for (const m of Object.values(messageCounts)) {
        if (m.type == "Etl") {
            etlReport[m.level] = m;
        }
        if (m.type == "Shacl") {
            shaclReport[m.level] = m;
        }
    }
    return (React.createElement(Box, { marginX: 1, marginTop: 1, flexDirection: "column" },
        React.createElement(Text, null,
            React.createElement(Text, null,
                Object.keys(etlReport).length > 0 ? React.createElement(Text, null, "ETL") : null,
                React.createElement(Newline, null),
                etlReport &&
                    Object.entries(etlReport).map(([label, message], i) => {
                        return (React.createElement(React.Fragment, { key: label },
                            i > 0 && React.createElement(Text, null, " | "),
                            React.createElement(Text, { dimColor: message.count === 0, color: levelToColor(message.level) },
                                "#",
                                label,
                                ": ",
                                message.count.toLocaleString())));
                    })),
            React.createElement(Newline, null),
            React.createElement(Newline, null),
            React.createElement(Text, null,
                Object.keys(shaclReport).length > 0 ? React.createElement(Text, null, "Validation") : null,
                React.createElement(Newline, null),
                shaclReport &&
                    Object.entries(shaclReport).map(([label, message], i) => {
                        return (React.createElement(React.Fragment, { key: label },
                            i > 0 && React.createElement(Text, null, " | "),
                            React.createElement(Text, { dimColor: message.count === 0, color: levelToColor(message.level) },
                                "#",
                                label,
                                ": ",
                                message.count.toLocaleString())));
                    }))),
        stats &&
            Object.entries(stats).map(([label, stat]) => {
                return (React.createElement(React.Fragment, { key: label },
                    React.createElement(Newline, null),
                    React.createElement(Text, { key: label },
                        label,
                        ": ",
                        typeof stat == "number" ? millify(stat) : stat)));
            })));
};
export default Status;
//# sourceMappingURL=Status.js.map