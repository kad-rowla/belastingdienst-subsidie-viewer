import path from "path";
import fs from "fs-extra";
/**
 * This is a debug tool that prints the memory usage of an Etl to the terminal.
 * This can also be written to disk which is useful when debugging OOM issues.
 * Post processing of the stats can also be used to create graphs of the memory usage over the ETL.
 * Info written to disk is using json lines format.
 *
 * *note: if you want to print to console and write to disk you can insert 2 logMemory MW, one that prints, another with destination.
 *
 * @param logOnRecord number : print or write stats every N number of records. Defaults to every record.
 * @param destination string (path of directory) : writes full memory usage stats to the given path.
 * *note: If you use the destination argument you will not print to console.
 * @returns void
 */
export default function logMemory(options) {
    let callCount = 0;
    return async (ctx, next) => {
        if (!options?.logOnRecord || ctx.recordId % options.logOnRecord === 0) {
            const { heapTotal, heapUsed, arrayBuffers, external } = process.memoryUsage();
            const hpTtl = heapTotal / 1024 / 1024;
            const hpUsed = heapUsed / 1024 / 1024;
            if (options?.destination !== undefined) {
                if (options?.destination.length === 0)
                    throw Error("Empty string is not a valid argument for 'directory'");
                const memInfo = {
                    callCount,
                    recordId: ctx.recordId,
                    heapUsed,
                    heapTotal,
                    arrayBuffers,
                    external,
                    heapTotalMB: Math.round(hpTtl),
                };
                await fs.ensureDir(options.destination);
                const filePath = path.resolve(options.destination, ctx.app.id + "-memory-usage.jsonl");
                await fs.ensureFile(filePath);
                await fs.appendFile(filePath, JSON.stringify(memInfo) + "\n");
            }
            else {
                ctx.app.info(`CallCount: ${++callCount} | RecordId: ${ctx.recordId} | Heap (MB) used: ${Math.round(hpUsed)} / total: ${Math.round(hpTtl)}`);
            }
        }
        return next();
    };
}
//# sourceMappingURL=logMemory.js.map