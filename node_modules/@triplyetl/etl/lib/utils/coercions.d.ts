import { Literal, NamedNode } from "@triplydb/data-factory/Terms.js";
import { TypeForName, TypeName } from "../generic/Context.js";
import { StaticString } from "../ratt/middlewares/assertions/term/str.js";
import { Iri, LanguageTag } from "@triplyetl/vocabularies";
type LanguageTagOrDataType = string | StaticString | LanguageTag | NamedNode;
export declare function ifPossibleCoerce<T extends TypeName>(value: unknown, key: string, type: T, languageTagOrDataType?: LanguageTagOrDataType): TypeForName<T>;
export declare function unknownValToIri(val: unknown, keyLabel?: string, opts?: {
    prefix?: Iri;
}): NamedNode<string>;
export declare function unknownValToLiteral(val: unknown, keyLabel?: string, datatypeOrLanguageTag?: NamedNode | string | StaticString | LanguageTag): Literal;
export {};
//# sourceMappingURL=coercions.d.ts.map