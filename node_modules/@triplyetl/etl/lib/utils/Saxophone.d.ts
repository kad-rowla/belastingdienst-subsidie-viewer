/**
 *
 * @typedef AsyncXMLParser
 *
 * Type of function returned by makeAsyncXMLParser
 *
 * Asynchronously parses an iterator containing XML and yields tuples
 * corresponding to the different tokens encountered.
 *
 * @generator
 * @yields xmlNodeGenerator#text
 * @yields xmlNodeGenerator#cdata
 * @yields xmlNodeGenerator#comment
 * @yields xmlNodeGenerator#processinginstruction
 * @yields xmlNodeGenerator#tagopen
 * @yields xmlNodeGenerator#tagclose
 */
export interface AsyncXMLParserOptions {
    alwaysTagClose: boolean;
    noEmptyText: boolean;
    include: string[] | string;
}
/**
 * Specify parser options and return a generator function
 * that parses an iterable that iterates an XML document,
 * generating a series of tuples representing the nodes encountered.
 *
 * @param {Object} options
 * @param {String[]} options.include - A list of all the types of nodes to be returned. Default is all nodes.
 * @param {boolean} options.alwaysTagClose - If true, and tagclose included, yield tagclose as well as tagopen for self-closing tags.
 * @param {boolean} options.noEmptyText - If true, empty text nodes will not be yielded
 * @return {AsyncXMLParser}
 */
export declare function makeAsyncXMLParser(options?: Partial<AsyncXMLParserOptions>): (sourceIterator: any) => AsyncGenerator<any[], void, unknown>;
//# sourceMappingURL=Saxophone.d.ts.map