import { BlankNode, Literal, NamedNode } from "@triplydb/data-factory/Terms.js";
import { TypeName } from "../generic/Context.js";
import { Record } from "../generic/Record.js";
import { SourceGetter, SourceInfo } from "../generic/locations/sources/index.js";
import { Environment } from "../generic/index.js";
import { JPath } from "../ratt/middlewares/assertions/term/jpath.js";
import { Iri } from "@triplyetl/vocabularies";
export declare const isEnvironment: (value: any) => value is Environment;
export declare function assertEnvironment(value: any): asserts value;
export declare function assertHasToken(value: unknown): asserts value;
export declare function isLiteral(term: unknown): term is Literal;
export declare const isIri: (obj: any) => obj is Iri<string>;
export declare function isNamedNode(term: unknown): term is NamedNode;
export declare function isBlankNode(term: unknown): term is BlankNode;
export declare function isArray(val: unknown): val is Array<unknown>;
export declare function isString(val: unknown): val is string;
export declare function isNumber(val: unknown): val is number;
export declare function isTable(val: unknown): val is {
    [key: string]: any;
};
export declare function assertTable(val: unknown): asserts val is {
    [key: string]: any;
};
export declare function assertLiteral(term: unknown): asserts term is Literal;
export declare function assertNamedNode(term: unknown): asserts term is NamedNode;
export declare function assertBnode(term: unknown): asserts term is BlankNode;
export declare function assertIsDefined<T>(val: T, msg: string): asserts val is NonNullable<T>;
export declare function assertIsObject(val: unknown, msg: string): asserts val is {
    [key: string]: unknown;
};
export declare class NullableOrEmptyString extends Error {
}
/**
 * Slightly different than assertIsDefined. It'll throw a different error in order for us to catch it properly.
 * It also checks for empty strings
 */
export declare function assertIsNotNullableOrEmptyString<T>(val: T): asserts val is NonNullable<T>;
export declare function assertIsArray<A = unknown>(val: unknown, msg: string): asserts val is Array<A>;
export declare function assertIsNonEmptyArray<A = unknown>(val: unknown, msg: string): asserts val is Array<A>;
export declare function assertIsString(val: unknown, msg: string): asserts val is string;
export declare function assertIsNonEmptyString(val: unknown, msg: string): asserts val is string;
export declare function assertIsNumber(val: unknown, msg: string): asserts val is number;
export declare function assertIsBoolean(val: unknown, msg: string): asserts val is boolean;
/**
 * Find out whether something is considered empty and if so, why.
 *
 * Values considered empty are:
 * - Empty strings, or strings with only whitespace
 * - Empty arrays
 * - Empty objects
 * - undefined and null values
 */
export declare function getReasonWhysomethingIsEmpty(val: unknown, key?: string): string | undefined;
export declare function assertIsNotEmpty(val: unknown, key?: string): void;
export declare function assertKeyExists(object: unknown, keyOrExpression: string | JPath): void;
export declare function isDeeplyEmpty(val: unknown): boolean;
export declare function assertIs<T extends TypeName = "unknown">(value: TypeName, key: string, type: T): asserts value is T;
export declare function isSourceGetterArray(source: Array<any>): source is SourceGetter<"records", SourceInfo<Record>>[];
export declare function isSourceGetter(source: any): source is SourceGetter<"records", SourceInfo<Record>>;
//# sourceMappingURL=asserts.d.ts.map