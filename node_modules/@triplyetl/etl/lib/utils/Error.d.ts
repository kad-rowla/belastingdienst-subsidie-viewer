import { TriplyDbJsError } from "@triply/triplydb/utils/Error.js";
import { Literal, NamedNode, Quad } from "@triplydb/data-factory/Terms.js";
import { Location } from "get-current-line";
import { Change } from "diff";
import { Record } from "../generic/Record.js";
import { TermGetter } from "../ratt/middlewares/assertions/term/getter.js";
export interface TraceInfo {
    recordDiff: Change[];
    quadsDiff: Change[];
    recordAtStart: any;
    quadsAtStart: string;
    fromMwIndex: Array<number>;
    isTraceDebug: boolean;
    isTraceError: boolean;
}
export type SerializedTraceInfo = Omit<TraceInfo, "recordDiff" | "quadsDiff">;
export declare class EtlError extends Error {
    constructor(e?: Error | TriplyDbJsError);
    mw: any;
    private rootCause?;
    stoppedAtHead: boolean;
    timedout: boolean;
    recordId?: number;
    record?: Record;
    quads?: Quad[];
    trace?: TraceInfo;
    callSite?: Location;
    addQuad?: [
        TermGetter<NamedNode | Literal>,
        TermGetter<NamedNode | Literal>,
        TermGetter<NamedNode | Literal>,
        TermGetter<NamedNode | Literal>
    ];
    setMessage(msg: string): this;
    setRecord(record: Record): this;
    setRootCause(e: Error | TriplyDbJsError): this;
    setTraceInfo(traceInfo: TraceInfo): this;
    setRecordId(recordId: number): this;
    setStoppedAtHead(): this;
    setTimedout(): this;
    getTriplyDbJsErrorInfo(): {
        statusCode: number | undefined;
        context: {
            [key: string]: any;
        };
    } | undefined;
    setCallSite(callSite?: Location): this;
    getErrForStacktrace(): Error;
}
export declare function getErr(e?: Error | EtlError | TriplyDbJsError): EtlError;
//# sourceMappingURL=Error.d.ts.map