import { wait } from "./utils/index.js";
import { _get, _post, _delete, _patch } from "./RequestHandler.js";
import { getErr, TriplyDbJsError } from "./utils/Error.js";
export default class Service {
    constructor(conf) {
        this.type = "Service";
        this._app = conf.app;
        this._name = conf.name;
        this._dataset = conf.dataset;
        this._type = conf.type;
        this._config = conf.config;
    }
    async getInfo(refresh = false) {
        if (!refresh && this._info)
            return this._info;
        this._info = await _get({
            errorWithCleanerStack: getErr(`Failed to get information of service '${this._name}' in dataset '${(await this._dataset.getInfo()).name}'.`),
            app: this._app,
            path: await this._getServicePath(),
        });
        return this._info;
    }
    async isUpToDate() {
        const info = await this.getInfo(true);
        return !info.outOfSync;
    }
    async rename(newName) {
        await _patch({
            errorWithCleanerStack: getErr(`Failed to rename service ${this._name} of dataset ${(await this._dataset.getInfo()).name}.`),
            app: this._app,
            path: await this._getServicePath(),
            data: {
                name: newName,
            },
        });
        this._name = newName;
        return this;
    }
    async getGraphs(refresh = false) {
        if (!this._graphs || refresh) {
            this._graphs = await _get({
                errorWithCleanerStack: getErr(`Failed to get graphs of service ${this._name} of dataset ${(await this._dataset.getInfo()).name}.`),
                app: this._app,
                path: `${await this._getServicePath()}/graphs`,
            });
        }
        return this._graphs;
    }
    async delete() {
        this._info = await _delete({
            errorWithCleanerStack: getErr(`Failed to delete service ${this._name} of dataset ${(await this._dataset.getInfo()).name}.`),
            app: this._app,
            path: await this._getServicePath(),
            expectedResponseBody: "empty",
        });
    }
    async create() {
        try {
            await _post({
                errorWithCleanerStack: getErr(`Failed to create service '${this._name}' in dataset '${(await this._dataset.getInfo()).name}'.`),
                app: this._app,
                path: `${await this._dataset["_getDatasetPath"]()}/services`,
                data: {
                    name: this._name,
                    type: this._type,
                    config: this._config,
                },
            });
        }
        catch (e) {
            if (e instanceof TriplyDbJsError &&
                e.statusCode === 400 &&
                (e.message.indexOf("Service of type") >= 0 || e.message.indexOf("Invalid service type") >= 0)) {
                this._type = this._type;
                return this.create();
            }
            else {
                throw e;
            }
        }
        await this.waitUntilRunning();
        return this;
    }
    async waitUntilRunning() {
        let failedServiceErrorCount = 0;
        while (true) {
            let info;
            try {
                info = await this.getInfo(true);
            }
            catch (e) {
                if (!(e instanceof TriplyDbJsError && e.statusCode === 503))
                    throw e;
            }
            if (info) {
                if (info.status === "running")
                    return;
                if (info.error) {
                    // Remove this check once #6591 is deployed.
                    if (info.error?.message.includes("Failed to get information for service") && failedServiceErrorCount++ < 3) {
                        // This should be momentary. Let's retry a few times and give up if we still get this error.
                    }
                    else {
                        throw getErr(`Failed to start service ${this._name} of dataset ${(await this._dataset.getInfo()).name}: ${info.error.message}`);
                    }
                }
                else if (!["starting", "updating"].includes(info.status)) {
                    throw getErr(`Failed to start service ${this._name} of dataset ${(await this._dataset.getInfo(true)).name} as it is being stopped or removed.`);
                }
                else {
                    failedServiceErrorCount = 0;
                }
            }
            await wait(5000);
        }
    }
    async update() {
        await _post({
            errorWithCleanerStack: getErr(`Failed to update service ${this._name} of dataset ${(await this._dataset.getInfo()).name}.`),
            app: this._app,
            path: await this._getServicePath(),
            data: { sync: true },
        });
        await this.waitUntilRunning();
    }
    async _getServicePath() {
        return `${await this._dataset["_getDatasetPath"]()}/services/${this._name}`;
    }
    getDataset() {
        return this._dataset;
    }
}
//# sourceMappingURL=Service.js.map