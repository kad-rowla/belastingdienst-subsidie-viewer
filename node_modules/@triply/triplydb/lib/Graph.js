import { _delete, _patch, _get } from "./RequestHandler.js";
import { getErr } from "./utils/Error.js";
export default class Graph {
    constructor(dataset, info) {
        this.type = "Graph";
        this._app = dataset["_app"];
        this._info = info;
        this._dataset = dataset;
    }
    async toFile(destinationPath, opts) {
        return this._dataset.graphsToFile(destinationPath, { ...opts, graph: this });
    }
    async toStore() {
        return this._dataset.graphsToStore(this);
    }
    async toStream(type) {
        return this._dataset.graphsToStream(type, { graph: this });
    }
    async getInfo(refresh = false) {
        if (refresh)
            this._info = await _get({
                errorWithCleanerStack: getErr(`Failed to get graph information for dataset ${await this._dataset["_getDatasetNameWithOwner"]()}.`),
                app: this._app,
                path: await this._getPath(),
            });
        return this._info;
    }
    async _getPath() {
        return (await this._dataset["_getDatasetPath"]()) + "/graphs/" + this._info.id;
    }
    async delete() {
        const info = await this.getInfo();
        await _delete({
            errorWithCleanerStack: getErr(`Failed to delete graph '${info.graphName}' from ${await this._dataset["_getDatasetNameWithOwner"]()}.`),
            app: this._app,
            path: await this._getPath(),
            expectedResponseBody: "empty",
        });
    }
    async rename(newGraphName) {
        if (newGraphName === this._info.graphName)
            return;
        const info = await this.getInfo();
        this._info = await _patch({
            errorWithCleanerStack: getErr(`Failed to rename graph ${info.graphName} to ${newGraphName} for dataset ${await this._dataset["_getDatasetNameWithOwner"]()}.`),
            app: this._app,
            path: await this._getPath(),
            data: { graphName: newGraphName },
        });
        return this;
    }
}
//# sourceMappingURL=Graph.js.map