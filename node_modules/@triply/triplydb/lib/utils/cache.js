import fs from "fs-extra";
import md5 from "md5";
import path from "path";
import { gzip, gunzip } from "zlib";
export function fileCache({ cacheDir, compression }) {
    const compress = compression === "gz"
        ? async (data) => new Promise((resolve, reject) => gzip(data, (error, result) => {
            if (error)
                return reject(error);
            resolve(result);
        }))
        : (data) => Buffer.from(data);
    const inflate = compression === "gz"
        ? async (data) => new Promise((resolve, reject) => gunzip(data, (error, result) => {
            if (error)
                return reject(error);
            resolve(result.toString("utf-8"));
        }))
        : (data) => data.toString("utf-8");
    function getCacheFile(key) {
        return path.resolve(cacheDir, md5(JSON.stringify(key) + cache.cacheId));
    }
    const cache = {
        // We don't know the cache ID yet, but it may be set/changed by whetever we use this function, e.g. in the Query class
        cacheId: undefined,
        read: async (key) => {
            const cacheFile = getCacheFile(key);
            if (await fs.pathExists(cacheFile)) {
                return JSON.parse(await inflate(await fs.readFile(cacheFile)));
            }
        },
        write: async (key, result) => {
            await fs.writeFile(getCacheFile(key), await compress(JSON.stringify(result)));
        },
    };
    return cache;
}
//# sourceMappingURL=cache.js.map