export interface CachedResult {
    statusCode: number;
    responseText: string;
    nextPage: string | null;
    contentType: string | null;
    statusText: string;
}
export interface CacheKey {
    url: string;
    config?: RequestInit;
}
/**
 *  Given a description of a request and the response from that request, save
 *  the response to cache.
 */
export type ToCacheFn = (key: CacheKey, result: CachedResult) => Promise<void>;
/**
 *  Given a description of a request, find whether it exists in the cache.
 *  If so, return the cached result. Otherwise return `undefined`.
 */
export type FromCacheFn = (key: CacheKey) => Promise<CachedResult | undefined>;
export type Cache = {
    write: ToCacheFn;
    read: FromCacheFn;
    cacheId: string | undefined;
};
export declare function fileCache({ cacheDir, compression }: {
    cacheDir: string;
    compression: "gz" | undefined;
}): Cache;
//# sourceMappingURL=cache.d.ts.map