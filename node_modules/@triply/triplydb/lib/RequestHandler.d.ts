/// <reference types="node" resolution-mode="require"/>
import { HttpMethodTemplate, RequestTemplate } from "@triply/utils/Routes.js";
import App from "./App.js";
import { TriplyDbJsError } from "./utils/Error.js";
type ReqMethod = "GET" | "PUT" | "PATCH" | "DELETE" | "POST" | "HEAD";
export interface ReqOptsObj<E extends RequestTemplate = any> {
    app: App;
    errorWithCleanerStack: TriplyDbJsError;
    url?: string;
    path?: string;
    query?: E["Query"];
    data?: E["Body"];
    attach?: {
        [name: string]: Buffer | string | File;
    };
    expectedResponseBody?: "empty" | "json" | "buffer";
}
export declare function normalizePath(path?: string): string;
export declare function getUrl(opts: Pick<ReqOptsObj, "url" | "path" | "app" | "query">): string;
/**
 * Either pass a full URL (incl domain) or pass a req opts with things like path
 */
export declare function _get<T extends HttpMethodTemplate>(opts: ReqOptsObj<T["Req"]>): Promise<T["Res"]["Body"]>;
export declare function _delete<T extends HttpMethodTemplate>(opts: ReqOptsObj<T["Req"]>): Promise<T["Res"]["Body"]>;
export declare function _post<T extends HttpMethodTemplate>(opts: ReqOptsObj<T["Req"]>): Promise<T["Res"]["Body"]>;
export declare function _patch<T extends HttpMethodTemplate>(opts: ReqOptsObj<T["Req"]>): Promise<T["Res"]["Body"]>;
type SimpleRequestInit = Omit<RequestInit, "headers"> & {
    headers?: {
        [key: string]: string;
    };
};
export declare function getFetchOpts(requestInit: SimpleRequestInit, opts: {
    app: App;
}): SimpleRequestInit;
export declare function requestConfigToFetchConfig(method: ReqMethod, config: Pick<ReqOptsObj, "app" | "data" | "attach">): SimpleRequestInit;
export declare function handleFetchAsStream<T extends HttpMethodTemplate>(method: ReqMethod, opts: ReqOptsObj<T["Req"]>): Promise<ReadableStream<Uint8Array>>;
export {};
//# sourceMappingURL=RequestHandler.d.ts.map