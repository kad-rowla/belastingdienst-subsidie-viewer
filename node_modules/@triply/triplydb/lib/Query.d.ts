import { Models } from "@triply/utils";
import App from "./App.js";
import { Account } from "./Account.js";
import { Cache } from "./utils/cache.js";
import * as n3 from "n3";
import AsyncIteratorHelperWithToFile from "./utils/AsyncIteratorHelperWithToFile.js";
import { VariableConfig } from "@triply/utils/Models.js";
export type Binding = {
    [key: string]: string;
};
export type VariableValues = {
    [variable: string]: string | undefined;
};
type AddVersion = {
    queryString?: string;
    /**   * By Default "table", other options may include: "response", "geo", "gallery", "markup", etc   */
    output?: string;
    variables?: VariableConfig[];
};
export default class Query {
    private _app;
    private _info;
    private _owner;
    private _version;
    readonly type = "Query";
    constructor(app: App, info: Models.Query, owner: Account);
    private _getQueryType;
    private _getPath;
    private _getQueryNameWithOwner;
    getInfo(refresh?: boolean): Promise<Models.Query>;
    addVersion(args: AddVersion): Promise<this>;
    private _setInfo;
    useVersion(version: number | "latest"): Promise<this>;
    update(config: Models.QueryMetaUpdate): Promise<this>;
    delete(): Promise<void>;
    getString(variableValues?: VariableValues): Promise<string>;
    getApiUrl(subpath?: string): Promise<string>;
    getRunLink(): Promise<string>;
    results(variables?: VariableValues, opts?: {
        cache?: Cache;
    }): {
        statements: () => AsyncIteratorHelperWithToFile<n3.Quad, n3.Quad>;
        boolean: () => AsyncIteratorHelperWithToFile<{
            boolean: boolean;
        }, boolean>;
        bindings: () => AsyncIteratorHelperWithToFile<Binding, Binding>;
    };
}
export {};
//# sourceMappingURL=Query.d.ts.map