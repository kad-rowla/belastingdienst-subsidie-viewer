import { Models } from "@triply/utils";
import App from "./App.js";
import { AccountBase } from "./Account.js";
import User from "./User.js";
import { addQuery, getStories, getStory, getQueries, getQuery, getDatasets, addDataset, pinItems, getPinnedItems, setAvatar, getDataset, update, addStory, ensureDataset, ensureStory } from "./commonAccountFunctions.js";
export default class Org implements AccountBase {
    private _app;
    private _info?;
    private _name?;
    readonly type = "Org";
    constructor(app: App, accountName: string, info?: Models.Org);
    getDataset: typeof getDataset;
    getDatasets: typeof getDatasets;
    addDataset: typeof addDataset;
    update: typeof update;
    setAvatar: typeof setAvatar;
    getQuery: typeof getQuery;
    getQueries: typeof getQueries;
    addQuery: typeof addQuery;
    getStory: typeof getStory;
    getStories: typeof getStories;
    addStory: typeof addStory;
    getPinnedItems: typeof getPinnedItems;
    pinItems: typeof pinItems;
    ensureDataset: typeof ensureDataset;
    ensureStory: typeof ensureStory;
    asUser(): Promise<User>;
    asOrganization(): Promise<this>;
    getInfo(refresh?: boolean): Promise<Models.Org>;
    private _setInfo;
    getMembers(): Promise<Models.OrgMember[]>;
    addMember(user: User, role?: Models.OrgRole): Promise<Models.OrgMember>;
    removeMember(member: User): Promise<void>;
    changeRole(member: User, role: Models.OrgRole): Promise<Models.OrgMember[]>;
    delete(): Promise<void>;
}
//# sourceMappingURL=Org.d.ts.map