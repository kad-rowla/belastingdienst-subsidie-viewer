import { Models } from "@triply/utils";
import App from "./App.js";
import { AccountBase } from "./Account.js";
import Org from "./Org.js";
import { addQuery, getStories, getStory, getQueries, getQuery, getDatasets, addDataset, pinItems, getPinnedItems, setAvatar, getDataset, addStory, update, ensureDataset, ensureStory } from "./commonAccountFunctions.js";
type NewOrganization = Omit<Models.AccountUpdate, "pinnedDatasets" | "accountName">;
export default class User implements AccountBase {
    private _app;
    private _info?;
    private _name?;
    readonly type = "User";
    constructor(app: App, accountName?: string, info?: Models.User);
    getDataset: typeof getDataset;
    getDatasets: typeof getDatasets;
    addDataset: typeof addDataset;
    update: typeof update;
    setAvatar: typeof setAvatar;
    getQuery: typeof getQuery;
    getQueries: typeof getQueries;
    addQuery: typeof addQuery;
    getStory: typeof getStory;
    getStories: typeof getStories;
    addStory: typeof addStory;
    getPinnedItems: typeof getPinnedItems;
    pinItems: typeof pinItems;
    ensureDataset: typeof ensureDataset;
    ensureStory: typeof ensureStory;
    private _setInfo;
    asUser(): Promise<User>;
    asOrganization(): Promise<Org>;
    getInfo(refresh?: boolean): Promise<Models.User>;
    createOrganization(accountName: string, info?: NewOrganization): Promise<Org>;
    getOrganizations(): Promise<Org[]>;
    private _getOrganization;
    getOrganization(name: string): Promise<Org>;
    ensureOrganization(name: string, newOrg?: NewOrganization): Promise<Org>;
}
export {};
//# sourceMappingURL=User.d.ts.map