import { Models } from "@triply/utils";
import App from "./App.js";
import Dataset from "./Dataset.js";
type ServiceAdminInfo = {
    autoResume?: boolean;
    queriedAtUncached?: string;
    queriedAt?: string;
    autostopsAt?: string;
    dataset?: Dataset;
    adminInfo?: {
        fromOrchestrator?: {};
        fromService?: {};
    };
    canUpdate?: boolean;
    foundInDocker?: boolean;
    foundInMongo?: boolean;
};
type ServiceInfo = Omit<Models.ServiceMetadata, keyof ServiceAdminInfo>;
export default class Service {
    private _app;
    private _info?;
    private _graphs?;
    private _dataset;
    private _name;
    private _type;
    private _config?;
    readonly type = "Service";
    constructor(conf: {
        app: App;
        name: string;
        dataset: Dataset;
        type: Models.ServiceType;
        config?: Models.ServiceConfig;
    });
    getInfo(refresh?: boolean): Promise<ServiceInfo>;
    isUpToDate(): Promise<boolean>;
    rename(newName: string): Promise<Service>;
    getGraphs(refresh?: boolean): Promise<Models.ServiceGraphInfo[]>;
    delete(): Promise<void>;
    create(): Promise<Service>;
    waitUntilRunning(): Promise<void>;
    update(): Promise<void>;
    private _getServicePath;
    getDataset(): Dataset;
}
export {};
//# sourceMappingURL=Service.d.ts.map