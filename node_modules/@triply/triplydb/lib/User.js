import Org from "./Org.js";
import { _get, _post } from "./RequestHandler.js";
import { addQuery, getStories, getStory, getQueries, getQuery, getDatasets, addDataset, pinItems, getPinnedItems, setAvatar, getDataset, addStory, update, ensureDataset, ensureStory, } from "./commonAccountFunctions.js";
import { getErr } from "./utils/Error.js";
export default class User {
    //leave accountname empty to get account belonging to token
    constructor(app, accountName, info) {
        this.type = "User";
        this.getDataset = getDataset;
        this.getDatasets = getDatasets;
        this.addDataset = addDataset;
        this.update = update;
        this.setAvatar = setAvatar;
        this.getQuery = getQuery;
        this.getQueries = getQueries;
        this.addQuery = addQuery;
        this.getStory = getStory;
        this.getStories = getStories;
        this.addStory = addStory;
        this.getPinnedItems = getPinnedItems;
        this.pinItems = pinItems;
        this.ensureDataset = ensureDataset;
        this.ensureStory = ensureStory;
        this._app = app;
        this._name = accountName;
        this._info = info;
    }
    _setInfo(info) {
        this._info = info;
        this._name = info.accountName;
    }
    async asUser() {
        this._setInfo(await this.getInfo());
        return this;
    }
    async asOrganization() {
        const info = await this.getInfo();
        throw getErr(`Unable to cast user ${info.accountName} to an organization. A user cannot be cast to an organization.`);
    }
    async getInfo(refresh = false) {
        if (refresh || !this._info) {
            let errMsg;
            if (this._name) {
                errMsg = `Failed to get user information of ${this._name}.`;
            }
            else {
                const url = this._app["_config"].url.replace("api.", "");
                errMsg = `Failed to fetch the current user, because no API token is configured. If you want to fetch the current user, you must create an API token on <${url}/me/-/settings/tokens>.`;
            }
            const info = (await _get({
                errorWithCleanerStack: getErr(errMsg),
                app: this._app,
                path: this._name ? "/accounts/" + this._name : "/me",
                query: { verbose: "" },
            }));
            this._setInfo(info);
        }
        return this._info;
    }
    async createOrganization(accountName, info) {
        const newOrgJson = await _post({
            errorWithCleanerStack: getErr(`Failed to create organization ${accountName} and set ${this._name} as it's owner.`),
            app: this._app,
            path: "/accounts/" + this._name + "/orgs",
            data: { accountName, ...info },
        });
        return new Org(this._app, newOrgJson.accountName, newOrgJson);
    }
    async getOrganizations() {
        const orgs = await _get({
            errorWithCleanerStack: getErr(`Failed to get organizations of ${this._name}`),
            app: this._app,
            path: "/accounts/" + this._name + "/orgs",
        });
        return orgs.map((org) => {
            // We're explicitly not passing the org object to the _info parameter as it's not the verbose version.
            // On the TDB API, /accounts/_account/orgs currently only returns simple information.
            return new Org(this._app, org.accountName);
        });
    }
    async _getOrganization(name) {
        return (await _get({
            errorWithCleanerStack: getErr(`Failed to get organizations of ${this._name}`),
            app: this._app,
            path: "/accounts/" + this._name + "/orgs",
        }))
            .filter((org) => org.accountName === name)
            .shift();
    }
    async getOrganization(name) {
        const org = await this._getOrganization(name);
        if (org === undefined) {
            throw getErr(`Failed to get organization '${name}' of account '${this._name}'`);
        }
        return new Org(this._app, name);
    }
    async ensureOrganization(name, newOrg) {
        const org = await this._getOrganization(name);
        if (org !== undefined)
            return Promise.resolve(new Org(this._app, org.accountName));
        return this.createOrganization(name, newOrg);
    }
}
//# sourceMappingURL=User.js.map