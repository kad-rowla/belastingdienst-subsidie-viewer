/// <reference types="node" resolution-mode="require"/>
import Query from "./Query.js";
import { Models } from "@triply/utils";
import AsyncIteratorHelper from "./utils/AsyncIteratorHelper.js";
import Story from "./Story.js";
import { Account } from "./Account.js";
import Dataset, { Prefixes } from "./Dataset.js";
import { AccessLevel, SparqlQuery, VariableConfig } from "@triply/utils/Models.js";
import Service from "./Service.js";
type AddQueryOptionsBase = {
    queryString: SparqlQuery["query"];
    /**   * By Default "table", other options may include: "response", "geo", "gallery", "markup", etc   */
    output?: string;
    accessLevel?: AccessLevel;
    variables?: Array<VariableConfig>;
    description?: string;
    displayName?: string;
};
export type AddQueryDataset = AddQueryOptionsBase & {
    dataset: Dataset;
    service?: never;
};
export type AddQueryService = AddQueryOptionsBase & {
    service: Service;
    dataset?: never;
};
export declare function addQuery<T extends Account>(this: T, name: string, opts: AddQueryDataset): Promise<Query>;
export declare function addQuery<T extends Account>(this: T, name: string, opts: AddQueryService): Promise<Query>;
export type NewStory = Omit<Models.StoryCreate, "name">;
export declare function addStory<T extends Account>(this: T, name: string, args?: NewStory): Promise<Story>;
export declare function getQuery<T extends Account>(this: T, name: string): Promise<Query>;
export declare function getQueries<T extends Account>(this: T): AsyncIteratorHelper<Models.Query, Query>;
export declare function getStory<T extends Account>(this: T, name: string): Promise<Story>;
export declare function getStories<T extends Account>(this: T): AsyncIteratorHelper<Models.Story, Story>;
export declare function getDataset<T extends Account>(this: T, ds: string): Promise<Dataset>;
export declare function getDatasets<T extends Account>(this: T): AsyncIteratorHelper<Models.DatasetPublic, Dataset>;
type NewDataset = Omit<Models.NewDataset, "name"> & {
    prefixes?: Prefixes;
};
export declare function addDataset<T extends Account>(this: T, name: string, ds?: NewDataset): Promise<Dataset>;
export declare function getPinnedItems<T extends Account>(this: T): Promise<Array<Dataset | Story | Query>>;
export declare function pinItems<T extends Account>(this: T, items: Array<Dataset | Story | Query>): Promise<T>;
export declare function update<T extends Account>(this: T, updateObj: Omit<Models.AccountUpdate, "pinnedDatasets">): Promise<T>;
export declare function setAvatar<T extends Account>(this: T, pathBufferOrFile: string | Buffer | File): Promise<void>;
export declare function ensureDataset<T extends Account>(this: T, name: string, newDs?: NewDataset): Promise<Dataset>;
export declare function ensureStory<T extends Account>(this: T, name: string, newStory?: NewStory): Promise<Story>;
export {};
//# sourceMappingURL=commonAccountFunctions.d.ts.map