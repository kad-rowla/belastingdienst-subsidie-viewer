import { _delete, _patch, _post, _get } from "./RequestHandler.js";
import { addQuery, getStories, getStory, getQueries, getQuery, getDatasets, addDataset, pinItems, getPinnedItems, setAvatar, getDataset, update, addStory, ensureDataset, ensureStory, } from "./commonAccountFunctions.js";
import { getErr } from "./utils/Error.js";
export default class Org {
    //leave accountname empty to get account belonging to token
    constructor(app, accountName, info) {
        this.type = "Org";
        this.getDataset = getDataset;
        this.getDatasets = getDatasets;
        this.addDataset = addDataset;
        this.update = update;
        this.setAvatar = setAvatar;
        this.getQuery = getQuery;
        this.getQueries = getQueries;
        this.addQuery = addQuery;
        this.getStory = getStory;
        this.getStories = getStories;
        this.addStory = addStory;
        this.getPinnedItems = getPinnedItems;
        this.pinItems = pinItems;
        this.ensureDataset = ensureDataset;
        this.ensureStory = ensureStory;
        this._app = app;
        this._name = accountName;
        this._info = info;
    }
    async asUser() {
        const info = await this.getInfo();
        throw getErr(`Failed to fetch user ${info.accountName}. Note that there is an organization with that name.`);
    }
    async asOrganization() {
        return this;
    }
    async getInfo(refresh = false) {
        if (!refresh && this._info)
            return this._info;
        if (!this._name)
            throw getErr("Missing name for organization");
        this._setInfo((await _get({
            errorWithCleanerStack: getErr(`Failed to get information of organization ${this._name}.`),
            app: this._app,
            path: "/accounts/" + this._name,
            query: { verbose: "" },
        })));
        return this._info;
    }
    _setInfo(info) {
        this._info = info;
        this._name = info.accountName;
    }
    async getMembers() {
        const orgName = (await this.getInfo()).accountName;
        return _get({
            errorWithCleanerStack: getErr(`Failed to get members of organization ${orgName}.`),
            app: this._app,
            path: `/accounts/${orgName}/members`,
        });
    }
    async addMember(user, role = "member") {
        const orgName = (await this.getInfo()).accountName;
        const memberName = (await user.getInfo()).accountName;
        return _post({
            errorWithCleanerStack: getErr(`Failed to add ${memberName} as member to organization ${orgName}.`),
            app: this._app,
            data: { accountName: memberName, role },
            path: `/accounts/${orgName}/members`,
        });
    }
    async removeMember(member) {
        const orgName = (await this.getInfo()).accountName;
        const memberName = (await member.getInfo()).accountName;
        await _delete({
            errorWithCleanerStack: getErr(`Failed to remove ${memberName} as member of organization ${this._name}.`),
            app: this._app,
            path: `/accounts/${orgName}/members/${memberName}`,
            expectedResponseBody: "empty",
        });
    }
    async changeRole(member, role) {
        const orgName = (await this.getInfo()).accountName;
        const memberName = (await member.getInfo()).accountName;
        await _patch({
            errorWithCleanerStack: getErr(`Failed to change role of ${memberName} to ${role} in organization ${orgName}`),
            app: this._app,
            path: `/accounts/${orgName}/members/${memberName}`,
            data: {
                role: role,
            },
        });
        return this.getMembers();
    }
    async delete() {
        const orgName = (await this.getInfo()).accountName;
        await _delete({
            errorWithCleanerStack: getErr(`Failed to delete organization ${orgName}.`),
            app: this._app,
            path: `/accounts/${orgName}`,
            expectedResponseBody: "empty",
        });
        delete this._info;
    }
}
//# sourceMappingURL=Org.js.map