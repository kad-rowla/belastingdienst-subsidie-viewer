import { _get, _delete } from "./RequestHandler.js";
import { getErr } from "./utils/Error.js";
export default class Story {
    constructor(app, info, owner) {
        this.type = "Story";
        this._app = app;
        this._info = info;
        this._owner = owner;
    }
    async _getPath() {
        const ownerName = (await this._owner.getInfo()).accountName;
        return "/stories/" + ownerName + "/" + this._info.name;
    }
    async _getStoryNameWithOwner() {
        const ownerName = (await this._owner.getInfo()).accountName;
        return `${ownerName}/${this._info.name}`;
    }
    async getInfo(refresh = false) {
        if (!refresh && this._info)
            return this._info;
        this._info = await _get({
            errorWithCleanerStack: getErr(`Failed to get information of story ${await this._getStoryNameWithOwner()}.`),
            app: this._app,
            path: await this._getPath(),
        });
        return this._info;
    }
    async delete() {
        await _delete({
            errorWithCleanerStack: getErr(`Failed to delete story ${this._info.name}.`),
            app: this._app,
            path: await this._getPath(),
            expectedResponseBody: "empty",
        });
    }
}
//# sourceMappingURL=Story.js.map