import * as Models from "./Models.js";
export type SocketEvent = JobUpdate | JobFinished | SocketEventFromService;
export type SocketEventFromService = ServiceMetadataUpdate | ServiceGraphUpdate;
type NarrowEventsWithType<S, V extends SocketEvent["eventType"]> = S extends {
    eventType: V;
} ? S : never;
export type SocketEventWithType<E extends SocketEvent["eventType"]> = NarrowEventsWithType<SocketEvent, E>;
type NarrowEventsWithName<S, V extends SocketEvent["eventName"]> = S extends {
    eventName: V;
} ? S : never;
export type SocketEventWithName<E extends SocketEvent["eventName"]> = NarrowEventsWithName<SocketEvent, E>;
export interface JobUpdate {
    namespace: `/datasets/${string}`;
    eventName: `/jobs/${string}`;
    eventType: "jobUpdate";
    job: Models.Job;
}
export interface JobFinished {
    namespace: `/datasets/${string}`;
    eventName: `/jobs/${string}`;
    eventType: "jobFinished";
    job: Models.Job;
    dataset: Models.DatasetVerbose;
    graphs: Models.Graphs;
}
export interface ServiceMetadataUpdate {
    namespace: `/datasets/${string}`;
    eventName: `/services/${string}/metadata`;
    eventType: "serviceMetadataUpdate";
    status?: Models.ServiceStatus;
    numberOfLoadedStatements?: number;
    numberOfGraphs?: number;
    numberOfLoadedGraphs?: number;
    numberOfGraphErrors?: number;
    datasetId: string;
    serviceId: string;
}
export interface ServiceGraphUpdate {
    namespace: `/datasets/${string}`;
    eventName: `/services/${string}/graphUpdate`;
    eventType: "serviceGraphUpdate";
    graphUpdate: GraphUpdate;
    datasetId: string;
    serviceId: string;
}
export type GraphUpdate = Add | Remove | Rename | Progress | Finished;
interface Add {
    type: "add";
    graphNames: string[];
}
interface Remove {
    type: "remove";
    graphs: string[];
}
interface Rename {
    type: "rename";
    graphs: Array<{
        fromName: string;
        toName: string;
    }>;
}
interface Progress {
    type: "progress";
    graphs: Array<{
        graphName: string;
        status?: Models.LoadStatus;
        statements?: number;
        error?: string;
    }>;
}
interface Finished {
    type: "finished";
}
export {};
//# sourceMappingURL=SocketEvents.d.ts.map