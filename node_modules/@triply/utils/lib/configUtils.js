import autocast from "autocast";
import reduceDeep from "deepdash/reduceDeep";
import { camelCase, compact, flatten, set, size, snakeCase, startsWith } from "lodash-es";
export function getObjectAsEnvVars({ obj, envPrefix }) {
    return reduceDeep(obj, (accumulator, value, key, _parentValue, context) => {
        const path = [...compact(context.parents.map((p) => p.key)), key];
        const pathAsString = envPrefix + path.map((p) => snakeCase(p).toUpperCase().replace(/_(\d)/g, "$1")).join("__");
        accumulator[pathAsString] = "" + value;
        return accumulator;
    }, {}, { leavesOnly: true });
}
export function getEnvironmentVarsAsObject({ envPrefix, env, preserveVariableNameCasing }) {
    if (!env || size(env) === 0) {
        console.trace("WARNING: No environment variables set, running config generation on client? Config cannot be overwritten by env");
        return {};
    }
    const values = {};
    for (let envKey in env) {
        if (startsWith(envKey, envPrefix)) {
            var val = autocast(env[envKey]);
            envKey = envKey.substring(envPrefix.length);
            const path = flatten(envKey.split("__").map((segment) => {
                if (preserveVariableNameCasing)
                    return segment;
                return camelCase(segment);
            }));
            set(values, path, val);
        }
    }
    return values;
}
//# sourceMappingURL=configUtils.js.map