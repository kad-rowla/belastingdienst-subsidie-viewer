import SparqlJs, { SparqlQuery as SparqlJsQuery } from "sparqljs";
import { VariableConfig } from "./Models.js";
export type SparqlVariables = {
    variableDefinitions: VariableConfig[];
    variableValues: {
        [variableName: string]: string | undefined;
    };
};
export interface ServiceProperties {
    maximumResultSize: number;
}
export type PageAndPageSize = {
    page?: number;
    pageSize?: number;
};
export type PageMetaOption = {
    pageMeta?: PageMeta;
};
export type PageMeta = {
    maxRetries?: number;
};
export type PageInfo = Required<PageAndPageSize> & PageMetaOption;
export declare function parse(query: string): SparqlJs.SparqlQuery;
export declare function stringify(query: SparqlJsQuery): string;
export declare class BadRequestError extends Error {
    constructor(message: string);
}
export declare function injectInPlace(parsedQuery: SparqlJsQuery, opts: SparqlVariables & PageAndPageSize & {
    queryString: string;
}): void;
export declare function injectPaginationInPlace(parsedQuery: SparqlJsQuery, opts: PageAndPageSize & {
    queryString: string;
}): void;
interface QueryInfo {
    query: string;
    isConstructQuery?: boolean;
    limit?: number;
    offset?: number;
}
export interface ParseAndInjectOptions extends SparqlVariables, PageAndPageSize {
}
export declare function parseAndInjectVariablesIntoQueryAndGetInfo(queryString: string, opts: ParseAndInjectOptions): QueryInfo;
export declare function parseAndInjectVariablesIntoQuery(queryString: string, opts: ParseAndInjectOptions): string;
export declare function filterSuggestions(forVariableConfiguration: VariableConfig, suggestions: string[]): string[];
export declare function validate(opts: SparqlVariables & PageAndPageSize & PageMetaOption & Partial<ServiceProperties>): void;
export {};
//# sourceMappingURL=sparqlVarUtils.d.ts.map