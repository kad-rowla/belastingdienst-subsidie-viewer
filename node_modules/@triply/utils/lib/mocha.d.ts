/// <reference path="../../../types/mocha/index.d.ts" />
import { Context as MochaContext } from "mocha";
export type MochaFn = (this: ExtendedMochaContext) => any;
type IgnoreFn = (e: Error) => boolean;
export interface ExtendedMochaContext extends MochaContext {
    _ignoreWhen?: IgnoreFn;
    ignoreWhen: (ignoreFn: IgnoreFn) => void;
    _origTimeout: MochaContext["timeout"];
    silenceTransmittedErrors: () => void;
}
export declare function getWrappedMochaFunctions(...wrappers: Array<(fn: MochaFn) => MochaFn>): {
    it: {
        (title: string, fn: MochaFn): Mocha.Test;
        only(title: string, fn: MochaFn): Mocha.Test;
        skip(title: string, fn: MochaFn): Mocha.Test;
    };
    before: (fn: MochaFn) => void;
    beforeEach: (fn: MochaFn) => void;
    after: (fn: MochaFn) => void;
    afterEach: (fn: MochaFn) => void;
};
export declare const it: {
    (title: string, fn: MochaFn): Mocha.Test;
    only(title: string, fn: MochaFn): Mocha.Test;
    skip(title: string, fn: MochaFn): Mocha.Test;
};
export declare const before: (fn: MochaFn) => void;
export declare const beforeEach: (fn: MochaFn) => void;
export declare const after: (fn: MochaFn) => void;
export declare const afterEach: (fn: MochaFn) => void;
export {};
//# sourceMappingURL=mocha.d.ts.map