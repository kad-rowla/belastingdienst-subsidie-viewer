import { NTriplyTerm } from "./index.js";
export declare const HDT_MIN_STATEMENTS: 1;
export declare const HDT_MAX_STATEMENTS: 10000;
export declare const SPARQL_SERVICE_TYPES: readonly ["virtuoso", "jena", "blazegraph", "prolog"];
export declare const SERVICE_TYPES: readonly ["virtuoso", "jena", "blazegraph", "prolog", "elasticSearch"];
export declare const QUERY_TYPES: readonly ["sparql", "search"];
export declare const MAX_EXAMPLE_RESOURCES: 30;
export declare const MAX_DATASET_NAME_LENGTH: 40;
export declare const MAX_ACCOUNT_NAME_LENGTH: 40;
export declare const MAX_SERVICE_NAME_LENGTH: 40;
export declare const MAX_QUERY_NAME_LENGTH: 40;
export declare const MAX_STORY_NAME_LENGTH: 40;
export declare const MAX_GRAPHS_ON_LANDING_PAGE: 10;
export declare const SERVICE_GRAPHS_PAGE_SIZE: 30;
export declare const FACETED_SEARCH_PAGE_SIZE: 50;
export declare const FACETED_SEARCH_NULL_ALIAS: "Unset";
export declare const BACKWARD_SUBJECTS_PAGE_SIZE: 40;
export declare const FORWARD_OBJECT_PAGE_SIZE: 10;
export declare const BACKWARD_PREDICATES_PAGE_SIZE: 10;
export declare const FORWARD_PREDICATES_PAGE_SIZE: 50;
export declare const RESERVED_SPARQL_VARNAMES: string[];
export declare const VIRTUOSO_SPARQL_RESULT_SET_MAX_ROWS: 10000;
export declare const SPARQL_RESULT_DEFAULT_PAGE_SIZE: 100;
export declare const SPARQL_RETRY_CONSTRUCT_SHRINK_FACTOR: 0.8;
export declare const AVATAR_SIZE_LIMIT: "5mb";
export declare const GENERIC_FILE_UPLOAD_ERROR_MESSAGE: "An error occurred while uploading the file.";
export declare const DUPLICATE_ASSETNAME_ERROR_MESSAGE: "An asset with this name has already been uploaded.";
export declare const CANT_CREATE_ZERO_GRAPH_SERVICE_MESSAGE = "Cannot create a service for a dataset without graphs.";
export declare const NO_ACCOUNTS_LEFT_MESSAGE = "There are currently no more available accounts.";
export declare const SUBSCRIPTIONS_PAGE = "https://triply.cc/subscriptions";
export declare const SPARQL_VARNAME_CHARS = "[0-9a-zA-Z_\u00C0-\u00D6\u00D8-\u00F6\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]";
export declare const SUPPORTED_EXTENSIONS: readonly ["gz", "bz2", "xz", "tar", "zip", "tgz", "jsonld", "json", "rdf", "rdfs", "owx", "owl", "nt", "ttl", "nq", "trig", "n3", "csv", "tsv"];
export type SupportedExtension = (typeof SUPPORTED_EXTENSIONS)[number];
export interface ObjectFilter<T> {
    value?: string;
    language?: string;
    datatype?: string;
    termType?: NTriplyTerm["termType"];
    validationFunction?: (term: T) => boolean;
}
export type QueryPattern<T extends {
    termType: NTriplyTerm["termType"];
}> = [
    string?,
    ObjectFilter<T>?,
    string?,
    ObjectFilter<T>?
];
export declare const RESOURCE_WIDGET_PATTERNS: {
    IMAGE_PATTERNS: QueryPattern<NTriplyTerm>[];
    LABEL_PATTERNS: QueryPattern<NTriplyTerm>[];
    GEO_PATTERNS: QueryPattern<NTriplyTerm>[];
    LAT_PATTERNS: QueryPattern<NTriplyTerm>[];
    LONG_PATTERNS: QueryPattern<NTriplyTerm>[];
    AUDIO_PATTERNS: QueryPattern<NTriplyTerm>[];
    VIDEO_PATTERNS: QueryPattern<NTriplyTerm>[];
    MEDIA_PATTERNS: QueryPattern<NTriplyTerm>[];
    MEDIA_ENCODING_PATTERNS: QueryPattern<NTriplyTerm>[];
};
export interface DatasetLicense {
    url: string;
    gui_name: string;
    version: string;
    acronym: string;
    deprecated: boolean;
}
export interface Licenses {
    "CC0 1.0": DatasetLicense;
    "CC BY": DatasetLicense;
    "CC BY-ND": DatasetLicense;
    "CC BY-NC": DatasetLicense;
    "CC BY-NC-ND": DatasetLicense;
    "CC BY-NC-SA": DatasetLicense;
    "CC BY-SA v4.0": DatasetLicense;
    "ODC-By": DatasetLicense;
    "ODC-ODbL": DatasetLicense;
    PDDL: DatasetLicense;
    GFDL: DatasetLicense;
    "CC-BY-SA": DatasetLicense;
}
export type DatasetLicenseId = keyof Licenses;
export declare const LICENSES: {
    readonly "CC0 1.0": {
        readonly url: "https://creativecommons.org/publicdomain/zero/1.0/";
        readonly version: "v1.0";
        readonly acronym: "CC0 1.0";
        readonly gui_name: "CC0 1.0 Universal";
        readonly deprecated: false;
    };
    readonly "CC BY": {
        readonly url: "https://creativecommons.org/licenses/by/4.0/";
        readonly version: "v4.0";
        readonly acronym: "CC BY";
        readonly gui_name: "Attribution 4.0 International";
        readonly deprecated: false;
    };
    readonly "CC BY-ND": {
        readonly url: "https://creativecommons.org/licenses/by-nd/4.0/";
        readonly version: "v4.0";
        readonly acronym: "CC BY-ND";
        readonly gui_name: "Attribution-NoDerivatives 4.0 International";
        readonly deprecated: false;
    };
    readonly "CC BY-NC": {
        readonly url: "https://creativecommons.org/licenses/by-nc/4.0/";
        readonly version: "v4.0";
        readonly acronym: "CC BY-NC";
        readonly gui_name: "Attribution-NonCommercial 4.0 International";
        readonly deprecated: false;
    };
    readonly "CC BY-NC-ND": {
        readonly url: "https://creativecommons.org/licenses/by-nc-nd/4.0/legalcode";
        readonly version: "v4.0";
        readonly acronym: "CC BY-NC-ND";
        readonly gui_name: "Attribution-NonCommercial-NoDerivatives 4.0 International";
        readonly deprecated: false;
    };
    readonly "CC BY-NC-SA": {
        readonly url: "https://creativecommons.org/licenses/by-nc-sa/4.0/";
        readonly version: "v4.0";
        readonly acronym: "CC BY-NC-SA";
        readonly gui_name: "Attribution-NonCommercial-ShareAlike 4.0 International";
        readonly deprecated: false;
    };
    readonly "CC BY-SA v4.0": {
        readonly url: "https://creativecommons.org/licenses/by-sa/4.0/";
        readonly version: "v4.0";
        readonly acronym: "CC BY-SA v4.0";
        readonly gui_name: "Attribution-ShareAlike 4.0 International";
        readonly deprecated: false;
    };
    readonly "ODC-By": {
        readonly url: "https://opendatacommons.org/licenses/by/1-0/";
        readonly version: "v1.0";
        readonly acronym: "ODC-By";
        readonly gui_name: "Open Data Commons Attribution License 1.0";
        readonly deprecated: false;
    };
    readonly "ODC-ODbL": {
        readonly url: "https://opendatacommons.org/licenses/odbl/1-0/";
        readonly version: "v1.0";
        readonly acronym: "ODC-ODbL";
        readonly gui_name: "Open Data Commons Open Database License 1.0";
        readonly deprecated: false;
    };
    readonly PDDL: {
        readonly url: "https://opendatacommons.org/licenses/pddl/1-0/";
        readonly version: "v1.0";
        readonly acronym: "PDDL";
        readonly gui_name: "Open Data Commons Public Domain Dedication and License 1.0";
        readonly deprecated: false;
    };
    readonly "CC-BY-SA": {
        readonly url: "https://creativecommons.org/licenses/by-sa/3.0/";
        readonly version: "v3.0";
        readonly acronym: "CC BY-SA";
        readonly gui_name: "Attribution-ShareAlike 3.0 International";
        readonly deprecated: true;
    };
    readonly GFDL: {
        readonly url: "https://www.gnu.org/licenses/fdl-1.3.html";
        readonly version: "v1.3";
        readonly acronym: "GFDL";
        readonly gui_name: "GNU Free Documentation License";
        readonly deprecated: true;
    };
};
export declare const LicenseNames: (keyof Licenses | null)[];
export declare const INSIGHTS_IRI_FOR_CLASS_UNKNOWN: "UNKNOWN:unknown";
//# sourceMappingURL=Constants.d.ts.map