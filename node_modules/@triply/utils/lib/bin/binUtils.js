import { execSync } from "child_process";
import { readFileSync, writeFileSync } from "fs";
import path from "path";
function getPackagePath() {
    return path.resolve(process.cwd(), "package.json");
}
function getPackage() {
    let packageContent;
    try {
        packageContent = JSON.parse(readFileSync(getPackagePath(), "utf-8"));
    }
    catch (e) {
        throw new Error("Failed to read ./package.json file: " + e.message);
    }
    return packageContent;
}
export function isCleanWorkingTreeOrExit() {
    try {
        const gitStatus = execSync("git status --porcelain --untracked-files=no", { stdio: "pipe" }).toString().trim();
        if (gitStatus.length > 0) {
            console.error("Dirty repository, first commit/push or stash all changes");
            process.exit(1);
        }
    }
    catch (e) {
        printExecSyncError(e);
    }
}
export function getCurrentVersion() {
    const packageContent = getPackage();
    if (!packageContent.version)
        throw new Error(`./package.json does not contain a version`);
    return packageContent.version;
}
export function runPostVersionHook() {
    const packageContent = getPackage();
    if (packageContent.scripts?.version) {
        execSync(`yarn run version`, {
            stdio: ["ignore", process.stdout, "pipe"],
        });
    }
}
export function setVersion(version) {
    const packageContent = getPackage();
    packageContent.version = version;
    writeFileSync(getPackagePath(), JSON.stringify(packageContent, null, 2) + "\n");
}
export function printExecSyncError(e) {
    if (e.status)
        console.error(`Command failed with code ${e.status}`);
    console.error(`Message: ${e.message}`);
    if (e.stdout) {
        console.error(e.stdout
            .toString()
            .split("\n")
            .map((l) => `stdout: ${l}`)
            .join("\n"));
    }
    if (e.stderr) {
        console.error(e.stderr
            .toString()
            .split("\n")
            .map((l) => `stderr: ${l}`)
            .join("\n"));
    }
    if (!e.stdout && !e.stderr) {
        console.error(e);
    }
    process.exit(1);
}
//# sourceMappingURL=binUtils.js.map