#!/usr/bin/env node
import { program } from "commander";
import { increment, parse } from "../calver.js";
import { getCurrentVersion, isCleanWorkingTreeOrExit, printExecSyncError, runPostVersionHook, setVersion, } from "./binUtils.js";
program
    .command("increment-package")
    .description("Make a new calver version and update the package.json file")
    .option("-p, --patch", "Make a patch release. This keeps the current calver version intact and only modifies the patch number", false)
    .action(function ({ patch }) {
    isCleanWorkingTreeOrExit();
    const currentVersion = getCurrentVersion();
    const newVersion = increment(currentVersion, { patch: patch });
    console.info(`> Publishing new version ${newVersion}`);
    setVersion(newVersion);
    runPostVersionHook();
});
program
    .command("increment")
    .description("Get a new incremented version. This does not update the package.json file but returns the string directly")
    .argument("<current>", "The calver to increment")
    .option("-s, --semver", "Assume the current version is semver. Useful in contexts (like helm charts) where we rewrite calver to semver and the other way around", false)
    .option("-p, --patch", "This keeps the current calver version intact and only modifies the patch number", false)
    .action(function (currentVersion, { patch, semver }) {
    if (semver) {
        const newVersionAsCalver = increment(currentVersion, { patch: patch });
        const parsedNewVersion = parse(newVersionAsCalver);
        console.info([parsedNewVersion.yearShort, parsedNewVersion.month, parsedNewVersion.versionInMonth].join("."));
    }
    else {
        console.info(increment(currentVersion, { patch: patch }));
    }
});
try {
    program.parse();
}
catch (e) {
    printExecSyncError(e);
}
//# sourceMappingURL=calver.js.map