#!/usr/bin/env node
import { execSync } from "child_process";
import { getCurrentVersion, printExecSyncError } from "./binUtils.js";
try {
    const currentBranch = execSync("git branch --show-current").toString("utf8").trim();
    const packageName = process.argv[2] || "";
    const prefix = packageName.length ? `${packageName}-v-` : "v-";
    const isVersionBranch = currentBranch.startsWith(prefix);
    const newBranchName = prefix + getCurrentVersion();
    if (currentBranch === "master" || currentBranch === "main") {
        commitPkgFiles();
    }
    else if (isVersionBranch) {
        console.info(`Assuming we're in a version branch already. We wont commit the package.json in ${currentBranch}`);
    }
    else {
        console.error("Please make sure you are checked out to the main/master branch or a correct version branch of this repository.");
        process.exit(11);
    }
    createNewBranch();
    function commitPkgFiles() {
        try {
            execSync(`git commit -n package.json -m "${newBranchName}"`, { stdio: "pipe" });
        }
        catch (e) {
            const errString = e.stdout.toString();
            if (errString.indexOf("nothing to commit") >= 0 || errString.indexOf("nothing added to commit"))
                return;
            throw e;
        }
    }
    function createNewBranch() {
        console.info("> Pulling latest changes... ");
        execSync(`git pull`, { stdio: "pipe" });
        console.info("> Creating new branch " + newBranchName);
        execSync(`git switch -c ${newBranchName}`, { stdio: "pipe" });
        commitPkgFiles();
        console.info("> Pushing branch " + newBranchName);
        execSync(`git push origin ${newBranchName}`, { stdio: "pipe" });
        console.info(`> Returning to ${currentBranch} branch`);
        execSync(`git switch ${currentBranch}`, { stdio: "pipe" });
        if (!isVersionBranch) {
            console.info(`> Pushing ${currentBranch} branch`);
            execSync("git push", { stdio: "pipe" });
        }
    }
}
catch (e) {
    printExecSyncError(e);
}
//# sourceMappingURL=versionToBranch.js.map