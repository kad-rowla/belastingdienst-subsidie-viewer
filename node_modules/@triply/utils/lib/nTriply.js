import * as N3 from "n3";
import * as through from "through2";
import { serializeTurtleFamily } from "./turtleFamily.js";
function rdfjsToNtriplyTerm(term) {
    if (term.termType === "NamedNode") {
        if (term.value.indexOf("/.well-known/genid") > 0) {
            return { termType: "BlankNode", value: term.value };
        }
        else {
            return { termType: "NamedNode", value: term.value };
        }
    }
    else if (term.termType === "BlankNode") {
        return { termType: "BlankNode", value: term.value };
    }
    let termInfo = { termType: "Literal", value: term.value };
    const asLiteral = term;
    const lang = asLiteral.language;
    if (lang)
        termInfo.language = lang;
    const datatype = asLiteral.datatype;
    if (datatype && datatype.value)
        termInfo.datatype = datatype.value;
    return termInfo;
}
export function rdfjsToNtriply(n3Statement) {
    const statement = [
        rdfjsToNtriplyTerm(n3Statement.subject),
        rdfjsToNtriplyTerm(n3Statement.predicate),
        rdfjsToNtriplyTerm(n3Statement.object),
    ];
    if (n3Statement.graph.termType !== "DefaultGraph")
        statement.push(rdfjsToNtriplyTerm(n3Statement.graph));
    return statement;
}
export function ntriplyToN3Term(term) {
    if (term.termType === "NamedNode") {
        return N3.DataFactory.namedNode(term.value);
    }
    else if (term.termType === "BlankNode") {
        if (term.value.indexOf("well-known") >= 0) {
            return N3.DataFactory.namedNode(term.value);
        }
        else {
            return N3.DataFactory.blankNode(term.value);
        }
    }
    else if (term.termType === "Literal") {
        if (term.language) {
            return N3.DataFactory.literal(term.value, term.language);
        }
        else if (term.datatype) {
            return N3.DataFactory.literal(term.value, N3.DataFactory.namedNode(term.datatype));
        }
    }
    throw new Error("Unrecognized term with value " + term.value);
}
export function ntriplyToN3(triplyStatement) {
    const subject = ntriplyToN3Term(triplyStatement[0]);
    const predicate = ntriplyToN3Term(triplyStatement[1]);
    const object = ntriplyToN3Term(triplyStatement[2]);
    const graph = triplyStatement[3] ? ntriplyToN3Term(triplyStatement[3]) : undefined;
    return N3.DataFactory.quad(subject, predicate, object, graph);
}
export function ntriplyToNquads(statements) {
    return serializeTurtleFamily(statements.map((statement) => ntriplyToN3(statement)));
}
export function rdfjsToNtriplyStream() {
    return through.obj(function write(data, _encoding, cb) {
        this.push(rdfjsToNtriply(data));
        cb();
    });
}
//# sourceMappingURL=nTriply.js.map