import { unionBy, uniqBy } from "lodash-es";
import urlParse from "url-parse";
const getLastSlashIndex = (pathname, offset) => {
    if (offset === undefined)
        offset = pathname.length;
    const i = pathname.lastIndexOf("/", offset);
    if (i >= 0 && i === pathname.length - 1) {
        if (offset < 0)
            return i;
        return getLastSlashIndex(pathname, offset - 1);
    }
    return i;
};
export function getLocalNameInfo(iri) {
    const parsed = urlParse(iri);
    if (parsed.pathname === "/" && !iri.includes(`${parsed.hostname}/`)) {
        parsed.set("pathname", "");
    }
    if (parsed.hash.length > 1) {
        var hashContent = parsed.hash.substring(1);
        parsed.set("hash", "#");
        return {
            iri: iri.slice(0, iri.length - hashContent.length),
            localName: hashContent,
        };
    }
    const i = getLastSlashIndex(parsed.pathname);
    if (i >= 0) {
        const localName = parsed.pathname.substring(i + 1) + parsed.query + parsed.hash;
        if (localName && localName.length) {
            parsed.set("pathname", parsed.pathname.substring(0, i + 1));
            parsed.set("query", "");
            parsed.set("hash", "");
            return {
                iri: iri.slice(0, iri.length - localName.length),
                localName: localName,
            };
        }
    }
    return { iri: iri };
}
export function getPrefixInfoFromPrefixedValue(value, prefixes) {
    for (const p of Array.isArray(prefixes) ? prefixes : Object.values(prefixes)) {
        if (!p.prefixLabel)
            continue;
        if (value.lastIndexOf(p.prefixLabel + ":", 0) === 0) {
            return {
                prefixLabel: p.prefixLabel,
                iri: p.iri,
                localName: value.substring(p.prefixLabel.length + 1),
            };
        }
    }
    return getLocalNameInfo(value);
}
export function getPrefixInfoFromIri(value, prefixes) {
    const matches = [];
    for (const p of Array.isArray(prefixes) ? prefixes : Object.values(prefixes)) {
        if (value.length >= p.iri.length && value.lastIndexOf(p.iri, 0) === 0) {
            matches.push({
                prefixLabel: p.prefixLabel,
                iri: p.iri,
                localName: value.substring(p.iri.length),
            });
        }
    }
    return matches.sort((a, b) => b.iri.length - a.iri.length)[0] || getLocalNameInfo(value);
}
export function getPrefixed(value, prefixes) {
    const info = getPrefixInfoFromIri(value, prefixes);
    if (info && info.prefixLabel)
        return `${info.prefixLabel}:${info.localName}`;
}
export function mergePrefixArray(basePrefixes, secondPrefixes) {
    return uniqBy(unionBy(basePrefixes, secondPrefixes, (prefix) => prefix.iri), (prefix) => prefix.prefixLabel);
}
//# sourceMappingURL=prefixUtils.js.map