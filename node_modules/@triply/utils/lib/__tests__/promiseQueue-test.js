import chai from "chai";
import chaiAsPromised from "chai-as-promised";
import { it } from "../mocha.js";
import promiseQueue from "../promiseQueue.js";
import wait from "../wait.js";
chai.use(chaiAsPromised);
const expect = chai.expect;
describe("Promise Queue", function () {
    it("On empty queue", async function () {
        await promiseQueue([], { concurrent: 2 });
    });
    it("Queue where size is less than concurrency", async function () {
        await promiseQueue([
            async () => {
                await wait(10);
            },
            async () => {
                await wait(10);
            },
        ], { concurrent: 4 });
    });
    it("Queue where size is larger than concurrency", async function () {
        const result = await promiseQueue([
            async () => {
                await wait(10);
            },
            async () => {
                await wait(10);
            },
        ], { concurrent: 1 });
        expect(result).to.have.lengthOf(2);
    });
    it("Queue where one fails", async function () {
        await expect(promiseQueue([
            async () => {
                await wait(10);
            },
            async () => {
                await wait(10);
            },
            async () => {
                throw new Error("something");
            },
        ], { concurrent: 2 })).eventually.rejectedWith("something");
    });
});
//# sourceMappingURL=promiseQueue-test.js.map