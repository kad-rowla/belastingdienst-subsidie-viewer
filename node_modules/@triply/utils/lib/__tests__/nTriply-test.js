import { expect } from "chai";
import * as N3 from "n3";
import { it } from "../mocha.js";
import * as nTriply from "../nTriply.js";
const ntriples = `<a> <b> _:0 .
_:0 <c> "blaa\\"t"@en .
_:0 <d> "blaat" .
`;
const ntriply = [
    [
        { termType: "NamedNode", value: "a" },
        { termType: "NamedNode", value: "b" },
        { termType: "BlankNode", value: "b0_0" },
    ],
    [
        { termType: "BlankNode", value: "b0_0" },
        { termType: "NamedNode", value: "c" },
        {
            termType: "Literal",
            value: 'blaa"t',
            language: "en",
            datatype: "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString",
        },
    ],
    [
        { termType: "BlankNode", value: "b0_0" },
        { termType: "NamedNode", value: "d" },
        {
            termType: "Literal",
            value: "blaat",
            datatype: "http://www.w3.org/2001/XMLSchema#string",
        },
    ],
];
describe("NTriply format", function () {
    it("From nt to n3 to nTriply to nt", async function () {
        const parser = new N3.Parser();
        const n3Statements = parser.parse(ntriples);
        const nTriplyStatements = n3Statements.map((n3) => nTriply.rdfjsToNtriply(n3));
        expect(nTriplyStatements).to.deep.equal(ntriply);
        const round_ntriples = await nTriply.ntriplyToNquads(nTriplyStatements);
        expect(round_ntriples.replace(/_:b\d+_0/g, "_:0")).to.equal(ntriples);
    });
});
//# sourceMappingURL=nTriply-test.js.map