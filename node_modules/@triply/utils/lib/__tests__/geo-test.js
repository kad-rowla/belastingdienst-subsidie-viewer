import * as chai from "chai";
import { getFirstPointFromWktString, parseWkt } from "../geo.js";
import { it } from "../mocha.js";
var expect = chai.expect;
describe("Geo", function () {
    describe("parseWkt", function () {
        it("Shouldn't parse POINT EMPTY", function () {
            const pointZ = "POINT EMPTY";
            expect(() => parseWkt(pointZ)).to.throw("Could not parse wkt.");
        });
        it("POLYGON EMPTY should have empty coordinate list", function () {
            const poly = "POLYGON EMPTY";
            expect(parseWkt(poly).wkt.coordinates).to.have.lengthOf(0);
        });
        it("Shouldn't parse random string", function () {
            const pointZ = "Most values tested here are POINT (30 40)";
            expect(() => parseWkt(pointZ)).to.throw("Could not parse wkt.");
        });
        it("Shouldn't parse undefined", function () {
            expect(() => parseWkt(undefined)).to.throw("No wkt string given.");
        });
        it("With invalid CRS", function () {
            expect(() => parseWkt("<http://crs> POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))")).to.throw("CRS http://crs is not supported.");
        });
        it("Parses GEOMETRYCOLLECTION correctly", function () {
            const GeometryCollection = "GEOMETRYCOLLECTION (POINT (40 10),LINESTRING (10 10, 20 20, 10 40),POLYGON ((40 40, 20 45, 45 30, 40 40)))";
            const wkt = parseWkt(GeometryCollection).wkt;
            expect(wkt.type === "GeometryCollection");
            if (wkt.type === "GeometryCollection") {
                expect(wkt.geometries).lengthOf(3);
                expect(wkt.geometries[0].type).to.equal("Point");
                expect(wkt.geometries[1].type).to.equal("LineString");
                expect(wkt.geometries[2].type).to.equal("Polygon");
            }
        });
        describe("Undefined segments", function () {
            it("LineString no content", function () {
                expect(() => parseWkt("LINESTRING(,)")).to.throw("Invalid WKT segment");
            });
            it("LineString empty segment", function () {
                expect(() => parseWkt("LINESTRING(0 0,1 1,2 2, , 4 4)")).to.throw("Invalid WKT segment");
            });
            it("Multipolygon empty segment", function () {
                expect(() => parseWkt("MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)),((20 35, , 10 10, 30 5, 45 20, 20 35),(30 20, 20 15, 20 25, 30 20)))")).to.throw("Invalid WKT segment");
            });
            it("GEOMETRYCOLLECTION empty segment", function () {
                expect(() => parseWkt("GEOMETRYCOLLECTION (POINT (40 10),LINESTRING (10 10, , 10 40),POLYGON ((40 40, 20 45, 45 30, 40 40)))")).to.throw("Invalid WKT segment");
            });
        });
    });
    describe("getFirstPointFromWktString", function () {
        describe("happy tests", function () {
            it("should parse point correctly", function () {
                const pointWkt = "POINT (30 10)";
                const firstCoords = getFirstPointFromWktString(pointWkt);
                expect(firstCoords?.longitude).to.equal(30);
                expect(firstCoords?.latitude).to.equal(10);
            });
            it("should parse line correctly", function () {
                const lineWkt = "LINESTRING (30 10, 10 30, 40 40)";
                const firstCoords = getFirstPointFromWktString(lineWkt);
                expect(firstCoords?.longitude).to.equal(30);
                expect(firstCoords?.latitude).to.equal(10);
            });
            it("should parse polygon correctly", function () {
                const polygonWkt = "POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10)) ";
                const firstCoords = getFirstPointFromWktString(polygonWkt);
                expect(firstCoords?.longitude).to.equal(30);
                expect(firstCoords?.latitude).to.equal(10);
                const twoPolygon = "POLYGON ((35 10, 45 45, 15 40, 10 20, 35 10),(20 30, 35 35, 30 20, 20 30))";
                const twoPolygonCoords = getFirstPointFromWktString(twoPolygon);
                expect(twoPolygonCoords?.longitude).to.equal(35);
                expect(twoPolygonCoords?.latitude).to.equal(10);
            });
            it("should parse Multipoint correctly", function () {
                const multiPointWkt = "MULTIPOINT ((10 40), (40 30), (20 20), (30 10))";
                const firstCoords = getFirstPointFromWktString(multiPointWkt);
                expect(firstCoords?.longitude).to.equal(10);
                expect(firstCoords?.latitude).to.equal(40);
                const multiPointWkt2 = "MULTIPOINT (10 40, 40 30, 20 20, 30 10)";
                const firstCoords2 = getFirstPointFromWktString(multiPointWkt2);
                expect(firstCoords2?.longitude).to.equal(10);
                expect(firstCoords2?.latitude).to.equal(40);
            });
            it("should parse multiLineString correctly", function () {
                const lineWkt = "MULTILINESTRING ((10 15, 20 20, 10 40),(40 40, 30 30, 40 20, 30 10))";
                const firstCoords = getFirstPointFromWktString(lineWkt);
                expect(firstCoords?.longitude).to.equal(10);
                expect(firstCoords?.latitude).to.equal(15);
            });
            it("should parse MultiPolygon correctly", function () {
                const multiPolygon = "MULTIPOLYGON (((30 20, 45 40, 10 40, 30 20)),((15 5, 40 10, 10 20, 5 10, 15 5)))";
                const firstCoords = getFirstPointFromWktString(multiPolygon);
                expect(firstCoords?.longitude).to.equal(30);
                expect(firstCoords?.latitude).to.equal(20);
                expect(firstCoords?.crs).to.be.undefined;
                const multiPolygon2 = "MULTIPOLYGON (((40 45, 20 45, 45 30, 40 40)),((20 35, 10 30, 10 10, 30 5, 45 20, 20 35),(30 20, 20 15, 20 25, 30 20)))";
                const firstCoords2 = getFirstPointFromWktString(multiPolygon2);
                expect(firstCoords2?.longitude).to.equal(40);
                expect(firstCoords2?.latitude).to.equal(45);
                expect(firstCoords?.crs).to.be.undefined;
            });
            it("should parse GeometryCollection correctly", function () {
                const multiPolygon = "GEOMETRYCOLLECTION (POINT (40 10),LINESTRING (10 10, 20 20, 10 40),POLYGON ((40 40, 20 45, 45 30, 40 40)))";
                const firstCoords = getFirstPointFromWktString(multiPolygon);
                expect(firstCoords?.longitude).to.equal(40);
                expect(firstCoords?.latitude).to.equal(10);
                expect(firstCoords?.crs).to.be.undefined;
            });
            it("Can handle Z", function () {
                const pointZ = "POINT Z (30 10 5)";
                const wkt = getFirstPointFromWktString(pointZ);
                expect(wkt?.longitude).to.equal(30);
                expect(wkt?.latitude).to.equal(10);
                expect(wkt?.crs).to.be.undefined;
                expect(wkt?.crs).to.be.undefined;
            });
            it("With valid CRS", function () {
                const parsed = getFirstPointFromWktString("<http://www.opengis.net/def/crs/EPSG/0/4326> POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))");
                expect(parsed?.longitude).to.equal(30);
                expect(parsed?.latitude).to.equal(10);
                expect(parsed?.crs).to.equal("http://www.opengis.net/def/crs/EPSG/0/4326");
            });
        });
        describe("Errors should result in undefined", function () {
            it("Shouldn't parse EMPTY", function () {
                const pointZ = "POINT EMPTY";
                const wkt = getFirstPointFromWktString(pointZ);
                expect(wkt).to.be.undefined;
            });
            it("Shouldn't parse Pointy polygon", function () {
                const pointZ = "MULTIPOLYGON (30 10)";
                const wkt = getFirstPointFromWktString(pointZ);
                expect(wkt).to.be.undefined;
            });
            it("Shouldn't parse random string", function () {
                const pointZ = "Most values tested here are POINT (30 40)";
                const wkt = getFirstPointFromWktString(pointZ);
                expect(wkt).to.be.undefined;
            });
            it("Shouldn't parse undefined", function () {
                const wkt = getFirstPointFromWktString(undefined);
                expect(wkt).to.be.undefined;
            });
            it("With invalid CRS", function () {
                const wkt = getFirstPointFromWktString("<http://crs> POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))");
                expect(wkt).to.be.undefined;
            });
        });
    });
});
//# sourceMappingURL=geo-test.js.map